
exercise1_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054d4  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  080055e4  080055e4  000155e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005664  08005664  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08005664  08005664  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005664  08005664  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005664  08005664  00015664  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005668  08005668  00015668  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  0800566c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c78  20000060  080056cc  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001cd8  080056cc  00021cd8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017d5e  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003622  00000000  00000000  00037e2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001438  00000000  00000000  0003b450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fbb  00000000  00000000  0003c888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003068  00000000  00000000  0003d843  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016fdd  00000000  00000000  000408ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000940ad  00000000  00000000  00057888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000056f8  00000000  00000000  000eb938  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000f1030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	080055cc 	.word	0x080055cc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	080055cc 	.word	0x080055cc

08000150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
//  app_handle.LEDsForBlink[5].Pin  = GPIO_PIN_9;
//  app_handle.LEDsForBlink[6].Port = GPIOA;
//  app_handle.LEDsForBlink[6].Pin  = GPIO_PIN_12;
//  app_handle.LEDsForBlink[7].Port = GPIOA;
//  app_handle.LEDsForBlink[7].Pin  = GPIO_PIN_6;
  handle_app_uart.huart 		= &huart2;
 8000154:	4b0e      	ldr	r3, [pc, #56]	; (8000190 <main+0x40>)
 8000156:	4a0f      	ldr	r2, [pc, #60]	; (8000194 <main+0x44>)
 8000158:	615a      	str	r2, [r3, #20]
  //APP_init(&app_handle);
  task_create_uart_tx(&handle_app_uart);
 800015a:	480d      	ldr	r0, [pc, #52]	; (8000190 <main+0x40>)
 800015c:	f005 f934 	bl	80053c8 <task_create_uart_tx>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000160:	f000 fb70 	bl	8000844 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000164:	f000 f81e 	bl	80001a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000168:	f000 f8b2 	bl	80002d0 <MX_GPIO_Init>
  MX_DMA_Init();
 800016c:	f000 f88a 	bl	8000284 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000170:	f000 f85e 	bl	8000230 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000174:	f002 fc1e 	bl	80029b4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000178:	4a07      	ldr	r2, [pc, #28]	; (8000198 <main+0x48>)
 800017a:	2100      	movs	r1, #0
 800017c:	4807      	ldr	r0, [pc, #28]	; (800019c <main+0x4c>)
 800017e:	f002 fc7f 	bl	8002a80 <osThreadNew>
 8000182:	4603      	mov	r3, r0
 8000184:	4a06      	ldr	r2, [pc, #24]	; (80001a0 <main+0x50>)
 8000186:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000188:	f002 fc46 	bl	8002a18 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800018c:	e7fe      	b.n	800018c <main+0x3c>
 800018e:	bf00      	nop
 8000190:	20000150 	.word	0x20000150
 8000194:	2000007c 	.word	0x2000007c
 8000198:	08005614 	.word	0x08005614
 800019c:	08000455 	.word	0x08000455
 80001a0:	2000014c 	.word	0x2000014c

080001a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001a4:	b580      	push	{r7, lr}
 80001a6:	b090      	sub	sp, #64	; 0x40
 80001a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001aa:	f107 0318 	add.w	r3, r7, #24
 80001ae:	2228      	movs	r2, #40	; 0x28
 80001b0:	2100      	movs	r1, #0
 80001b2:	4618      	mov	r0, r3
 80001b4:	f005 f924 	bl	8005400 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001b8:	1d3b      	adds	r3, r7, #4
 80001ba:	2200      	movs	r2, #0
 80001bc:	601a      	str	r2, [r3, #0]
 80001be:	605a      	str	r2, [r3, #4]
 80001c0:	609a      	str	r2, [r3, #8]
 80001c2:	60da      	str	r2, [r3, #12]
 80001c4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001c6:	2301      	movs	r3, #1
 80001c8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80001ca:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80001ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001d0:	2300      	movs	r3, #0
 80001d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001d4:	2301      	movs	r3, #1
 80001d6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001d8:	2302      	movs	r3, #2
 80001da:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001e2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001e8:	f107 0318 	add.w	r3, r7, #24
 80001ec:	4618      	mov	r0, r3
 80001ee:	f001 f825 	bl	800123c <HAL_RCC_OscConfig>
 80001f2:	4603      	mov	r3, r0
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	d001      	beq.n	80001fc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80001f8:	f000 f943 	bl	8000482 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001fc:	230f      	movs	r3, #15
 80001fe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000200:	2302      	movs	r3, #2
 8000202:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000204:	2300      	movs	r3, #0
 8000206:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000208:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800020c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800020e:	2300      	movs	r3, #0
 8000210:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000212:	1d3b      	adds	r3, r7, #4
 8000214:	2102      	movs	r1, #2
 8000216:	4618      	mov	r0, r3
 8000218:	f001 fa92 	bl	8001740 <HAL_RCC_ClockConfig>
 800021c:	4603      	mov	r3, r0
 800021e:	2b00      	cmp	r3, #0
 8000220:	d001      	beq.n	8000226 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000222:	f000 f92e 	bl	8000482 <Error_Handler>
  }
}
 8000226:	bf00      	nop
 8000228:	3740      	adds	r7, #64	; 0x40
 800022a:	46bd      	mov	sp, r7
 800022c:	bd80      	pop	{r7, pc}
	...

08000230 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000234:	4b11      	ldr	r3, [pc, #68]	; (800027c <MX_USART2_UART_Init+0x4c>)
 8000236:	4a12      	ldr	r2, [pc, #72]	; (8000280 <MX_USART2_UART_Init+0x50>)
 8000238:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800023a:	4b10      	ldr	r3, [pc, #64]	; (800027c <MX_USART2_UART_Init+0x4c>)
 800023c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000240:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000242:	4b0e      	ldr	r3, [pc, #56]	; (800027c <MX_USART2_UART_Init+0x4c>)
 8000244:	2200      	movs	r2, #0
 8000246:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000248:	4b0c      	ldr	r3, [pc, #48]	; (800027c <MX_USART2_UART_Init+0x4c>)
 800024a:	2200      	movs	r2, #0
 800024c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800024e:	4b0b      	ldr	r3, [pc, #44]	; (800027c <MX_USART2_UART_Init+0x4c>)
 8000250:	2200      	movs	r2, #0
 8000252:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000254:	4b09      	ldr	r3, [pc, #36]	; (800027c <MX_USART2_UART_Init+0x4c>)
 8000256:	220c      	movs	r2, #12
 8000258:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800025a:	4b08      	ldr	r3, [pc, #32]	; (800027c <MX_USART2_UART_Init+0x4c>)
 800025c:	2200      	movs	r2, #0
 800025e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000260:	4b06      	ldr	r3, [pc, #24]	; (800027c <MX_USART2_UART_Init+0x4c>)
 8000262:	2200      	movs	r2, #0
 8000264:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000266:	4805      	ldr	r0, [pc, #20]	; (800027c <MX_USART2_UART_Init+0x4c>)
 8000268:	f001 fe72 	bl	8001f50 <HAL_UART_Init>
 800026c:	4603      	mov	r3, r0
 800026e:	2b00      	cmp	r3, #0
 8000270:	d001      	beq.n	8000276 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000272:	f000 f906 	bl	8000482 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000276:	bf00      	nop
 8000278:	bd80      	pop	{r7, pc}
 800027a:	bf00      	nop
 800027c:	2000007c 	.word	0x2000007c
 8000280:	40004400 	.word	0x40004400

08000284 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b082      	sub	sp, #8
 8000288:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800028a:	4b10      	ldr	r3, [pc, #64]	; (80002cc <MX_DMA_Init+0x48>)
 800028c:	695b      	ldr	r3, [r3, #20]
 800028e:	4a0f      	ldr	r2, [pc, #60]	; (80002cc <MX_DMA_Init+0x48>)
 8000290:	f043 0301 	orr.w	r3, r3, #1
 8000294:	6153      	str	r3, [r2, #20]
 8000296:	4b0d      	ldr	r3, [pc, #52]	; (80002cc <MX_DMA_Init+0x48>)
 8000298:	695b      	ldr	r3, [r3, #20]
 800029a:	f003 0301 	and.w	r3, r3, #1
 800029e:	607b      	str	r3, [r7, #4]
 80002a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 80002a2:	2200      	movs	r2, #0
 80002a4:	2105      	movs	r1, #5
 80002a6:	2010      	movs	r0, #16
 80002a8:	f000 fbb3 	bl	8000a12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80002ac:	2010      	movs	r0, #16
 80002ae:	f000 fbcc 	bl	8000a4a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 80002b2:	2200      	movs	r2, #0
 80002b4:	2105      	movs	r1, #5
 80002b6:	2011      	movs	r0, #17
 80002b8:	f000 fbab 	bl	8000a12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80002bc:	2011      	movs	r0, #17
 80002be:	f000 fbc4 	bl	8000a4a <HAL_NVIC_EnableIRQ>

}
 80002c2:	bf00      	nop
 80002c4:	3708      	adds	r7, #8
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}
 80002ca:	bf00      	nop
 80002cc:	40021000 	.word	0x40021000

080002d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b088      	sub	sp, #32
 80002d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002d6:	f107 0310 	add.w	r3, r7, #16
 80002da:	2200      	movs	r2, #0
 80002dc:	601a      	str	r2, [r3, #0]
 80002de:	605a      	str	r2, [r3, #4]
 80002e0:	609a      	str	r2, [r3, #8]
 80002e2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002e4:	4b56      	ldr	r3, [pc, #344]	; (8000440 <MX_GPIO_Init+0x170>)
 80002e6:	699b      	ldr	r3, [r3, #24]
 80002e8:	4a55      	ldr	r2, [pc, #340]	; (8000440 <MX_GPIO_Init+0x170>)
 80002ea:	f043 0310 	orr.w	r3, r3, #16
 80002ee:	6193      	str	r3, [r2, #24]
 80002f0:	4b53      	ldr	r3, [pc, #332]	; (8000440 <MX_GPIO_Init+0x170>)
 80002f2:	699b      	ldr	r3, [r3, #24]
 80002f4:	f003 0310 	and.w	r3, r3, #16
 80002f8:	60fb      	str	r3, [r7, #12]
 80002fa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002fc:	4b50      	ldr	r3, [pc, #320]	; (8000440 <MX_GPIO_Init+0x170>)
 80002fe:	699b      	ldr	r3, [r3, #24]
 8000300:	4a4f      	ldr	r2, [pc, #316]	; (8000440 <MX_GPIO_Init+0x170>)
 8000302:	f043 0320 	orr.w	r3, r3, #32
 8000306:	6193      	str	r3, [r2, #24]
 8000308:	4b4d      	ldr	r3, [pc, #308]	; (8000440 <MX_GPIO_Init+0x170>)
 800030a:	699b      	ldr	r3, [r3, #24]
 800030c:	f003 0320 	and.w	r3, r3, #32
 8000310:	60bb      	str	r3, [r7, #8]
 8000312:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000314:	4b4a      	ldr	r3, [pc, #296]	; (8000440 <MX_GPIO_Init+0x170>)
 8000316:	699b      	ldr	r3, [r3, #24]
 8000318:	4a49      	ldr	r2, [pc, #292]	; (8000440 <MX_GPIO_Init+0x170>)
 800031a:	f043 0304 	orr.w	r3, r3, #4
 800031e:	6193      	str	r3, [r2, #24]
 8000320:	4b47      	ldr	r3, [pc, #284]	; (8000440 <MX_GPIO_Init+0x170>)
 8000322:	699b      	ldr	r3, [r3, #24]
 8000324:	f003 0304 	and.w	r3, r3, #4
 8000328:	607b      	str	r3, [r7, #4]
 800032a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800032c:	4b44      	ldr	r3, [pc, #272]	; (8000440 <MX_GPIO_Init+0x170>)
 800032e:	699b      	ldr	r3, [r3, #24]
 8000330:	4a43      	ldr	r2, [pc, #268]	; (8000440 <MX_GPIO_Init+0x170>)
 8000332:	f043 0308 	orr.w	r3, r3, #8
 8000336:	6193      	str	r3, [r2, #24]
 8000338:	4b41      	ldr	r3, [pc, #260]	; (8000440 <MX_GPIO_Init+0x170>)
 800033a:	699b      	ldr	r3, [r3, #24]
 800033c:	f003 0308 	and.w	r3, r3, #8
 8000340:	603b      	str	r3, [r7, #0]
 8000342:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6|GPIO_PIN_12, GPIO_PIN_RESET);
 8000344:	2200      	movs	r2, #0
 8000346:	f44f 5183 	mov.w	r1, #4192	; 0x1060
 800034a:	483e      	ldr	r0, [pc, #248]	; (8000444 <MX_GPIO_Init+0x174>)
 800034c:	f000 ff24 	bl	8001198 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000350:	2200      	movs	r2, #0
 8000352:	f44f 7158 	mov.w	r1, #864	; 0x360
 8000356:	483c      	ldr	r0, [pc, #240]	; (8000448 <MX_GPIO_Init+0x178>)
 8000358:	f000 ff1e 	bl	8001198 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800035c:	2200      	movs	r2, #0
 800035e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000362:	483a      	ldr	r0, [pc, #232]	; (800044c <MX_GPIO_Init+0x17c>)
 8000364:	f000 ff18 	bl	8001198 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 8000368:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800036c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800036e:	4b38      	ldr	r3, [pc, #224]	; (8000450 <MX_GPIO_Init+0x180>)
 8000370:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000372:	2300      	movs	r3, #0
 8000374:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8000376:	f107 0310 	add.w	r3, r7, #16
 800037a:	4619      	mov	r1, r3
 800037c:	4832      	ldr	r0, [pc, #200]	; (8000448 <MX_GPIO_Init+0x178>)
 800037e:	f000 fd87 	bl	8000e90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_9;
 8000382:	f44f 7304 	mov.w	r3, #528	; 0x210
 8000386:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000388:	2300      	movs	r3, #0
 800038a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800038c:	2300      	movs	r3, #0
 800038e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000390:	f107 0310 	add.w	r3, r7, #16
 8000394:	4619      	mov	r1, r3
 8000396:	482b      	ldr	r0, [pc, #172]	; (8000444 <MX_GPIO_Init+0x174>)
 8000398:	f000 fd7a 	bl	8000e90 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA6 PA12 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6|GPIO_PIN_12;
 800039c:	f44f 5383 	mov.w	r3, #4192	; 0x1060
 80003a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003a2:	2301      	movs	r3, #1
 80003a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003a6:	2300      	movs	r3, #0
 80003a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003aa:	2303      	movs	r3, #3
 80003ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003ae:	f107 0310 	add.w	r3, r7, #16
 80003b2:	4619      	mov	r1, r3
 80003b4:	4823      	ldr	r0, [pc, #140]	; (8000444 <MX_GPIO_Init+0x174>)
 80003b6:	f000 fd6b 	bl	8000e90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC6 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 80003ba:	f44f 7358 	mov.w	r3, #864	; 0x360
 80003be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003c0:	2301      	movs	r3, #1
 80003c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c4:	2300      	movs	r3, #0
 80003c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003c8:	2303      	movs	r3, #3
 80003ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003cc:	f107 0310 	add.w	r3, r7, #16
 80003d0:	4619      	mov	r1, r3
 80003d2:	481d      	ldr	r0, [pc, #116]	; (8000448 <MX_GPIO_Init+0x178>)
 80003d4:	f000 fd5c 	bl	8000e90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_11;
 80003d8:	f640 0305 	movw	r3, #2053	; 0x805
 80003dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003de:	2300      	movs	r3, #0
 80003e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e2:	2300      	movs	r3, #0
 80003e4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003e6:	f107 0310 	add.w	r3, r7, #16
 80003ea:	4619      	mov	r1, r3
 80003ec:	4817      	ldr	r0, [pc, #92]	; (800044c <MX_GPIO_Init+0x17c>)
 80003ee:	f000 fd4f 	bl	8000e90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80003f2:	2380      	movs	r3, #128	; 0x80
 80003f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003f6:	2300      	movs	r3, #0
 80003f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003fa:	2300      	movs	r3, #0
 80003fc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003fe:	f107 0310 	add.w	r3, r7, #16
 8000402:	4619      	mov	r1, r3
 8000404:	4810      	ldr	r0, [pc, #64]	; (8000448 <MX_GPIO_Init+0x178>)
 8000406:	f000 fd43 	bl	8000e90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800040a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800040e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000410:	2301      	movs	r3, #1
 8000412:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000414:	2300      	movs	r3, #0
 8000416:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000418:	2303      	movs	r3, #3
 800041a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800041c:	f107 0310 	add.w	r3, r7, #16
 8000420:	4619      	mov	r1, r3
 8000422:	480a      	ldr	r0, [pc, #40]	; (800044c <MX_GPIO_Init+0x17c>)
 8000424:	f000 fd34 	bl	8000e90 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000428:	2200      	movs	r2, #0
 800042a:	2105      	movs	r1, #5
 800042c:	2028      	movs	r0, #40	; 0x28
 800042e:	f000 faf0 	bl	8000a12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000432:	2028      	movs	r0, #40	; 0x28
 8000434:	f000 fb09 	bl	8000a4a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */

/* USER CODE END MX_GPIO_Init_2 */
}
 8000438:	bf00      	nop
 800043a:	3720      	adds	r7, #32
 800043c:	46bd      	mov	sp, r7
 800043e:	bd80      	pop	{r7, pc}
 8000440:	40021000 	.word	0x40021000
 8000444:	40010800 	.word	0x40010800
 8000448:	40011000 	.word	0x40011000
 800044c:	40010c00 	.word	0x40010c00
 8000450:	10210000 	.word	0x10210000

08000454 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800045c:	2001      	movs	r0, #1
 800045e:	f002 fbb9 	bl	8002bd4 <osDelay>
 8000462:	e7fb      	b.n	800045c <StartDefaultTask+0x8>

08000464 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b082      	sub	sp, #8
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000474:	d101      	bne.n	800047a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000476:	f000 f9fb 	bl	8000870 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800047a:	bf00      	nop
 800047c:	3708      	adds	r7, #8
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}

08000482 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000482:	b480      	push	{r7}
 8000484:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000486:	b672      	cpsid	i
}
 8000488:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800048a:	e7fe      	b.n	800048a <Error_Handler+0x8>

0800048c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b084      	sub	sp, #16
 8000490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000492:	4b1c      	ldr	r3, [pc, #112]	; (8000504 <HAL_MspInit+0x78>)
 8000494:	699b      	ldr	r3, [r3, #24]
 8000496:	4a1b      	ldr	r2, [pc, #108]	; (8000504 <HAL_MspInit+0x78>)
 8000498:	f043 0301 	orr.w	r3, r3, #1
 800049c:	6193      	str	r3, [r2, #24]
 800049e:	4b19      	ldr	r3, [pc, #100]	; (8000504 <HAL_MspInit+0x78>)
 80004a0:	699b      	ldr	r3, [r3, #24]
 80004a2:	f003 0301 	and.w	r3, r3, #1
 80004a6:	60bb      	str	r3, [r7, #8]
 80004a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004aa:	4b16      	ldr	r3, [pc, #88]	; (8000504 <HAL_MspInit+0x78>)
 80004ac:	69db      	ldr	r3, [r3, #28]
 80004ae:	4a15      	ldr	r2, [pc, #84]	; (8000504 <HAL_MspInit+0x78>)
 80004b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004b4:	61d3      	str	r3, [r2, #28]
 80004b6:	4b13      	ldr	r3, [pc, #76]	; (8000504 <HAL_MspInit+0x78>)
 80004b8:	69db      	ldr	r3, [r3, #28]
 80004ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004be:	607b      	str	r3, [r7, #4]
 80004c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80004c2:	2200      	movs	r2, #0
 80004c4:	210f      	movs	r1, #15
 80004c6:	f06f 0001 	mvn.w	r0, #1
 80004ca:	f000 faa2 	bl	8000a12 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 5, 0);
 80004ce:	2200      	movs	r2, #0
 80004d0:	2105      	movs	r1, #5
 80004d2:	2001      	movs	r0, #1
 80004d4:	f000 fa9d 	bl	8000a12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 80004d8:	2001      	movs	r0, #1
 80004da:	f000 fab6 	bl	8000a4a <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004de:	4b0a      	ldr	r3, [pc, #40]	; (8000508 <HAL_MspInit+0x7c>)
 80004e0:	685b      	ldr	r3, [r3, #4]
 80004e2:	60fb      	str	r3, [r7, #12]
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004ea:	60fb      	str	r3, [r7, #12]
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004f2:	60fb      	str	r3, [r7, #12]
 80004f4:	4a04      	ldr	r2, [pc, #16]	; (8000508 <HAL_MspInit+0x7c>)
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004fa:	bf00      	nop
 80004fc:	3710      	adds	r7, #16
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	40021000 	.word	0x40021000
 8000508:	40010000 	.word	0x40010000

0800050c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b088      	sub	sp, #32
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000514:	f107 0310 	add.w	r3, r7, #16
 8000518:	2200      	movs	r2, #0
 800051a:	601a      	str	r2, [r3, #0]
 800051c:	605a      	str	r2, [r3, #4]
 800051e:	609a      	str	r2, [r3, #8]
 8000520:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	4a46      	ldr	r2, [pc, #280]	; (8000640 <HAL_UART_MspInit+0x134>)
 8000528:	4293      	cmp	r3, r2
 800052a:	f040 8084 	bne.w	8000636 <HAL_UART_MspInit+0x12a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800052e:	4b45      	ldr	r3, [pc, #276]	; (8000644 <HAL_UART_MspInit+0x138>)
 8000530:	69db      	ldr	r3, [r3, #28]
 8000532:	4a44      	ldr	r2, [pc, #272]	; (8000644 <HAL_UART_MspInit+0x138>)
 8000534:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000538:	61d3      	str	r3, [r2, #28]
 800053a:	4b42      	ldr	r3, [pc, #264]	; (8000644 <HAL_UART_MspInit+0x138>)
 800053c:	69db      	ldr	r3, [r3, #28]
 800053e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000542:	60fb      	str	r3, [r7, #12]
 8000544:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000546:	4b3f      	ldr	r3, [pc, #252]	; (8000644 <HAL_UART_MspInit+0x138>)
 8000548:	699b      	ldr	r3, [r3, #24]
 800054a:	4a3e      	ldr	r2, [pc, #248]	; (8000644 <HAL_UART_MspInit+0x138>)
 800054c:	f043 0304 	orr.w	r3, r3, #4
 8000550:	6193      	str	r3, [r2, #24]
 8000552:	4b3c      	ldr	r3, [pc, #240]	; (8000644 <HAL_UART_MspInit+0x138>)
 8000554:	699b      	ldr	r3, [r3, #24]
 8000556:	f003 0304 	and.w	r3, r3, #4
 800055a:	60bb      	str	r3, [r7, #8]
 800055c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800055e:	2304      	movs	r3, #4
 8000560:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000562:	2302      	movs	r3, #2
 8000564:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000566:	2303      	movs	r3, #3
 8000568:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800056a:	f107 0310 	add.w	r3, r7, #16
 800056e:	4619      	mov	r1, r3
 8000570:	4835      	ldr	r0, [pc, #212]	; (8000648 <HAL_UART_MspInit+0x13c>)
 8000572:	f000 fc8d 	bl	8000e90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000576:	2308      	movs	r3, #8
 8000578:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800057a:	2300      	movs	r3, #0
 800057c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057e:	2300      	movs	r3, #0
 8000580:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000582:	f107 0310 	add.w	r3, r7, #16
 8000586:	4619      	mov	r1, r3
 8000588:	482f      	ldr	r0, [pc, #188]	; (8000648 <HAL_UART_MspInit+0x13c>)
 800058a:	f000 fc81 	bl	8000e90 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800058e:	4b2f      	ldr	r3, [pc, #188]	; (800064c <HAL_UART_MspInit+0x140>)
 8000590:	4a2f      	ldr	r2, [pc, #188]	; (8000650 <HAL_UART_MspInit+0x144>)
 8000592:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000594:	4b2d      	ldr	r3, [pc, #180]	; (800064c <HAL_UART_MspInit+0x140>)
 8000596:	2200      	movs	r2, #0
 8000598:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800059a:	4b2c      	ldr	r3, [pc, #176]	; (800064c <HAL_UART_MspInit+0x140>)
 800059c:	2200      	movs	r2, #0
 800059e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80005a0:	4b2a      	ldr	r3, [pc, #168]	; (800064c <HAL_UART_MspInit+0x140>)
 80005a2:	2280      	movs	r2, #128	; 0x80
 80005a4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80005a6:	4b29      	ldr	r3, [pc, #164]	; (800064c <HAL_UART_MspInit+0x140>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80005ac:	4b27      	ldr	r3, [pc, #156]	; (800064c <HAL_UART_MspInit+0x140>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80005b2:	4b26      	ldr	r3, [pc, #152]	; (800064c <HAL_UART_MspInit+0x140>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80005b8:	4b24      	ldr	r3, [pc, #144]	; (800064c <HAL_UART_MspInit+0x140>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80005be:	4823      	ldr	r0, [pc, #140]	; (800064c <HAL_UART_MspInit+0x140>)
 80005c0:	f000 fa52 	bl	8000a68 <HAL_DMA_Init>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 80005ca:	f7ff ff5a 	bl	8000482 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	4a1e      	ldr	r2, [pc, #120]	; (800064c <HAL_UART_MspInit+0x140>)
 80005d2:	63da      	str	r2, [r3, #60]	; 0x3c
 80005d4:	4a1d      	ldr	r2, [pc, #116]	; (800064c <HAL_UART_MspInit+0x140>)
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80005da:	4b1e      	ldr	r3, [pc, #120]	; (8000654 <HAL_UART_MspInit+0x148>)
 80005dc:	4a1e      	ldr	r2, [pc, #120]	; (8000658 <HAL_UART_MspInit+0x14c>)
 80005de:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80005e0:	4b1c      	ldr	r3, [pc, #112]	; (8000654 <HAL_UART_MspInit+0x148>)
 80005e2:	2210      	movs	r2, #16
 80005e4:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80005e6:	4b1b      	ldr	r3, [pc, #108]	; (8000654 <HAL_UART_MspInit+0x148>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80005ec:	4b19      	ldr	r3, [pc, #100]	; (8000654 <HAL_UART_MspInit+0x148>)
 80005ee:	2280      	movs	r2, #128	; 0x80
 80005f0:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80005f2:	4b18      	ldr	r3, [pc, #96]	; (8000654 <HAL_UART_MspInit+0x148>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80005f8:	4b16      	ldr	r3, [pc, #88]	; (8000654 <HAL_UART_MspInit+0x148>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80005fe:	4b15      	ldr	r3, [pc, #84]	; (8000654 <HAL_UART_MspInit+0x148>)
 8000600:	2200      	movs	r2, #0
 8000602:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000604:	4b13      	ldr	r3, [pc, #76]	; (8000654 <HAL_UART_MspInit+0x148>)
 8000606:	2200      	movs	r2, #0
 8000608:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800060a:	4812      	ldr	r0, [pc, #72]	; (8000654 <HAL_UART_MspInit+0x148>)
 800060c:	f000 fa2c 	bl	8000a68 <HAL_DMA_Init>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 8000616:	f7ff ff34 	bl	8000482 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	4a0d      	ldr	r2, [pc, #52]	; (8000654 <HAL_UART_MspInit+0x148>)
 800061e:	639a      	str	r2, [r3, #56]	; 0x38
 8000620:	4a0c      	ldr	r2, [pc, #48]	; (8000654 <HAL_UART_MspInit+0x148>)
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000626:	2200      	movs	r2, #0
 8000628:	2105      	movs	r1, #5
 800062a:	2026      	movs	r0, #38	; 0x26
 800062c:	f000 f9f1 	bl	8000a12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000630:	2026      	movs	r0, #38	; 0x26
 8000632:	f000 fa0a 	bl	8000a4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000636:	bf00      	nop
 8000638:	3720      	adds	r7, #32
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	40004400 	.word	0x40004400
 8000644:	40021000 	.word	0x40021000
 8000648:	40010800 	.word	0x40010800
 800064c:	200000c4 	.word	0x200000c4
 8000650:	4002006c 	.word	0x4002006c
 8000654:	20000108 	.word	0x20000108
 8000658:	40020080 	.word	0x40020080

0800065c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b08e      	sub	sp, #56	; 0x38
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000664:	2300      	movs	r3, #0
 8000666:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000668:	2300      	movs	r3, #0
 800066a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800066c:	2300      	movs	r3, #0
 800066e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000672:	4b34      	ldr	r3, [pc, #208]	; (8000744 <HAL_InitTick+0xe8>)
 8000674:	69db      	ldr	r3, [r3, #28]
 8000676:	4a33      	ldr	r2, [pc, #204]	; (8000744 <HAL_InitTick+0xe8>)
 8000678:	f043 0301 	orr.w	r3, r3, #1
 800067c:	61d3      	str	r3, [r2, #28]
 800067e:	4b31      	ldr	r3, [pc, #196]	; (8000744 <HAL_InitTick+0xe8>)
 8000680:	69db      	ldr	r3, [r3, #28]
 8000682:	f003 0301 	and.w	r3, r3, #1
 8000686:	60fb      	str	r3, [r7, #12]
 8000688:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800068a:	f107 0210 	add.w	r2, r7, #16
 800068e:	f107 0314 	add.w	r3, r7, #20
 8000692:	4611      	mov	r1, r2
 8000694:	4618      	mov	r0, r3
 8000696:	f001 f9c3 	bl	8001a20 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800069a:	6a3b      	ldr	r3, [r7, #32]
 800069c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800069e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d103      	bne.n	80006ac <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80006a4:	f001 f994 	bl	80019d0 <HAL_RCC_GetPCLK1Freq>
 80006a8:	6378      	str	r0, [r7, #52]	; 0x34
 80006aa:	e004      	b.n	80006b6 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80006ac:	f001 f990 	bl	80019d0 <HAL_RCC_GetPCLK1Freq>
 80006b0:	4603      	mov	r3, r0
 80006b2:	005b      	lsls	r3, r3, #1
 80006b4:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80006b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006b8:	4a23      	ldr	r2, [pc, #140]	; (8000748 <HAL_InitTick+0xec>)
 80006ba:	fba2 2303 	umull	r2, r3, r2, r3
 80006be:	0c9b      	lsrs	r3, r3, #18
 80006c0:	3b01      	subs	r3, #1
 80006c2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80006c4:	4b21      	ldr	r3, [pc, #132]	; (800074c <HAL_InitTick+0xf0>)
 80006c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006ca:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80006cc:	4b1f      	ldr	r3, [pc, #124]	; (800074c <HAL_InitTick+0xf0>)
 80006ce:	f240 32e7 	movw	r2, #999	; 0x3e7
 80006d2:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80006d4:	4a1d      	ldr	r2, [pc, #116]	; (800074c <HAL_InitTick+0xf0>)
 80006d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006d8:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80006da:	4b1c      	ldr	r3, [pc, #112]	; (800074c <HAL_InitTick+0xf0>)
 80006dc:	2200      	movs	r2, #0
 80006de:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006e0:	4b1a      	ldr	r3, [pc, #104]	; (800074c <HAL_InitTick+0xf0>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006e6:	4b19      	ldr	r3, [pc, #100]	; (800074c <HAL_InitTick+0xf0>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 80006ec:	4817      	ldr	r0, [pc, #92]	; (800074c <HAL_InitTick+0xf0>)
 80006ee:	f001 f9e5 	bl	8001abc <HAL_TIM_Base_Init>
 80006f2:	4603      	mov	r3, r0
 80006f4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80006f8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d11b      	bne.n	8000738 <HAL_InitTick+0xdc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000700:	4812      	ldr	r0, [pc, #72]	; (800074c <HAL_InitTick+0xf0>)
 8000702:	f001 fa33 	bl	8001b6c <HAL_TIM_Base_Start_IT>
 8000706:	4603      	mov	r3, r0
 8000708:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800070c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000710:	2b00      	cmp	r3, #0
 8000712:	d111      	bne.n	8000738 <HAL_InitTick+0xdc>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000714:	201c      	movs	r0, #28
 8000716:	f000 f998 	bl	8000a4a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	2b0f      	cmp	r3, #15
 800071e:	d808      	bhi.n	8000732 <HAL_InitTick+0xd6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000720:	2200      	movs	r2, #0
 8000722:	6879      	ldr	r1, [r7, #4]
 8000724:	201c      	movs	r0, #28
 8000726:	f000 f974 	bl	8000a12 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800072a:	4a09      	ldr	r2, [pc, #36]	; (8000750 <HAL_InitTick+0xf4>)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	6013      	str	r3, [r2, #0]
 8000730:	e002      	b.n	8000738 <HAL_InitTick+0xdc>
      }
      else
      {
        status = HAL_ERROR;
 8000732:	2301      	movs	r3, #1
 8000734:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000738:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800073c:	4618      	mov	r0, r3
 800073e:	3738      	adds	r7, #56	; 0x38
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	40021000 	.word	0x40021000
 8000748:	431bde83 	.word	0x431bde83
 800074c:	20000168 	.word	0x20000168
 8000750:	20000004 	.word	0x20000004

08000754 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000758:	e7fe      	b.n	8000758 <NMI_Handler+0x4>

0800075a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800075a:	b480      	push	{r7}
 800075c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800075e:	e7fe      	b.n	800075e <HardFault_Handler+0x4>

08000760 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000764:	e7fe      	b.n	8000764 <MemManage_Handler+0x4>

08000766 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000766:	b480      	push	{r7}
 8000768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800076a:	e7fe      	b.n	800076a <BusFault_Handler+0x4>

0800076c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000770:	e7fe      	b.n	8000770 <UsageFault_Handler+0x4>

08000772 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000772:	b480      	push	{r7}
 8000774:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000776:	bf00      	nop
 8000778:	46bd      	mov	sp, r7
 800077a:	bc80      	pop	{r7}
 800077c:	4770      	bx	lr

0800077e <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 800077e:	b580      	push	{r7, lr}
 8000780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8000782:	f000 fd43 	bl	800120c <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
	...

0800078c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000790:	4802      	ldr	r0, [pc, #8]	; (800079c <DMA1_Channel6_IRQHandler+0x10>)
 8000792:	f000 fa77 	bl	8000c84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000796:	bf00      	nop
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	200000c4 	.word	0x200000c4

080007a0 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80007a4:	4802      	ldr	r0, [pc, #8]	; (80007b0 <DMA1_Channel7_IRQHandler+0x10>)
 80007a6:	f000 fa6d 	bl	8000c84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	20000108 	.word	0x20000108

080007b4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80007b8:	4802      	ldr	r0, [pc, #8]	; (80007c4 <TIM2_IRQHandler+0x10>)
 80007ba:	f001 fa29 	bl	8001c10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	20000168 	.word	0x20000168

080007c8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80007cc:	4802      	ldr	r0, [pc, #8]	; (80007d8 <USART2_IRQHandler+0x10>)
 80007ce:	f001 fc0f 	bl	8001ff0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	2000007c 	.word	0x2000007c

080007dc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_Pin);
 80007e0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80007e4:	f000 fcf0 	bl	80011c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80007e8:	bf00      	nop
 80007ea:	bd80      	pop	{r7, pc}

080007ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007f0:	bf00      	nop
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bc80      	pop	{r7}
 80007f6:	4770      	bx	lr

080007f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007f8:	f7ff fff8 	bl	80007ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007fc:	480b      	ldr	r0, [pc, #44]	; (800082c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80007fe:	490c      	ldr	r1, [pc, #48]	; (8000830 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000800:	4a0c      	ldr	r2, [pc, #48]	; (8000834 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000802:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000804:	e002      	b.n	800080c <LoopCopyDataInit>

08000806 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000806:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000808:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800080a:	3304      	adds	r3, #4

0800080c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800080c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800080e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000810:	d3f9      	bcc.n	8000806 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000812:	4a09      	ldr	r2, [pc, #36]	; (8000838 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000814:	4c09      	ldr	r4, [pc, #36]	; (800083c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000816:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000818:	e001      	b.n	800081e <LoopFillZerobss>

0800081a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800081a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800081c:	3204      	adds	r2, #4

0800081e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800081e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000820:	d3fb      	bcc.n	800081a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000822:	f004 fe4b 	bl	80054bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000826:	f7ff fc93 	bl	8000150 <main>
  bx lr
 800082a:	4770      	bx	lr
  ldr r0, =_sdata
 800082c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000830:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000834:	0800566c 	.word	0x0800566c
  ldr r2, =_sbss
 8000838:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 800083c:	20001cd8 	.word	0x20001cd8

08000840 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000840:	e7fe      	b.n	8000840 <ADC1_2_IRQHandler>
	...

08000844 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000848:	4b08      	ldr	r3, [pc, #32]	; (800086c <HAL_Init+0x28>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a07      	ldr	r2, [pc, #28]	; (800086c <HAL_Init+0x28>)
 800084e:	f043 0310 	orr.w	r3, r3, #16
 8000852:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000854:	2003      	movs	r0, #3
 8000856:	f000 f8d1 	bl	80009fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800085a:	200f      	movs	r0, #15
 800085c:	f7ff fefe 	bl	800065c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000860:	f7ff fe14 	bl	800048c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000864:	2300      	movs	r3, #0
}
 8000866:	4618      	mov	r0, r3
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40022000 	.word	0x40022000

08000870 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000874:	4b05      	ldr	r3, [pc, #20]	; (800088c <HAL_IncTick+0x1c>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	461a      	mov	r2, r3
 800087a:	4b05      	ldr	r3, [pc, #20]	; (8000890 <HAL_IncTick+0x20>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	4413      	add	r3, r2
 8000880:	4a03      	ldr	r2, [pc, #12]	; (8000890 <HAL_IncTick+0x20>)
 8000882:	6013      	str	r3, [r2, #0]
}
 8000884:	bf00      	nop
 8000886:	46bd      	mov	sp, r7
 8000888:	bc80      	pop	{r7}
 800088a:	4770      	bx	lr
 800088c:	20000008 	.word	0x20000008
 8000890:	200001b0 	.word	0x200001b0

08000894 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  return uwTick;
 8000898:	4b02      	ldr	r3, [pc, #8]	; (80008a4 <HAL_GetTick+0x10>)
 800089a:	681b      	ldr	r3, [r3, #0]
}
 800089c:	4618      	mov	r0, r3
 800089e:	46bd      	mov	sp, r7
 80008a0:	bc80      	pop	{r7}
 80008a2:	4770      	bx	lr
 80008a4:	200001b0 	.word	0x200001b0

080008a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b085      	sub	sp, #20
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	f003 0307 	and.w	r3, r3, #7
 80008b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008b8:	4b0c      	ldr	r3, [pc, #48]	; (80008ec <__NVIC_SetPriorityGrouping+0x44>)
 80008ba:	68db      	ldr	r3, [r3, #12]
 80008bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008be:	68ba      	ldr	r2, [r7, #8]
 80008c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008c4:	4013      	ands	r3, r2
 80008c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008cc:	68bb      	ldr	r3, [r7, #8]
 80008ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008da:	4a04      	ldr	r2, [pc, #16]	; (80008ec <__NVIC_SetPriorityGrouping+0x44>)
 80008dc:	68bb      	ldr	r3, [r7, #8]
 80008de:	60d3      	str	r3, [r2, #12]
}
 80008e0:	bf00      	nop
 80008e2:	3714      	adds	r7, #20
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bc80      	pop	{r7}
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop
 80008ec:	e000ed00 	.word	0xe000ed00

080008f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008f4:	4b04      	ldr	r3, [pc, #16]	; (8000908 <__NVIC_GetPriorityGrouping+0x18>)
 80008f6:	68db      	ldr	r3, [r3, #12]
 80008f8:	0a1b      	lsrs	r3, r3, #8
 80008fa:	f003 0307 	and.w	r3, r3, #7
}
 80008fe:	4618      	mov	r0, r3
 8000900:	46bd      	mov	sp, r7
 8000902:	bc80      	pop	{r7}
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	e000ed00 	.word	0xe000ed00

0800090c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
 8000912:	4603      	mov	r3, r0
 8000914:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800091a:	2b00      	cmp	r3, #0
 800091c:	db0b      	blt.n	8000936 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800091e:	79fb      	ldrb	r3, [r7, #7]
 8000920:	f003 021f 	and.w	r2, r3, #31
 8000924:	4906      	ldr	r1, [pc, #24]	; (8000940 <__NVIC_EnableIRQ+0x34>)
 8000926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800092a:	095b      	lsrs	r3, r3, #5
 800092c:	2001      	movs	r0, #1
 800092e:	fa00 f202 	lsl.w	r2, r0, r2
 8000932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000936:	bf00      	nop
 8000938:	370c      	adds	r7, #12
 800093a:	46bd      	mov	sp, r7
 800093c:	bc80      	pop	{r7}
 800093e:	4770      	bx	lr
 8000940:	e000e100 	.word	0xe000e100

08000944 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
 800094a:	4603      	mov	r3, r0
 800094c:	6039      	str	r1, [r7, #0]
 800094e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000954:	2b00      	cmp	r3, #0
 8000956:	db0a      	blt.n	800096e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	b2da      	uxtb	r2, r3
 800095c:	490c      	ldr	r1, [pc, #48]	; (8000990 <__NVIC_SetPriority+0x4c>)
 800095e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000962:	0112      	lsls	r2, r2, #4
 8000964:	b2d2      	uxtb	r2, r2
 8000966:	440b      	add	r3, r1
 8000968:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800096c:	e00a      	b.n	8000984 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	b2da      	uxtb	r2, r3
 8000972:	4908      	ldr	r1, [pc, #32]	; (8000994 <__NVIC_SetPriority+0x50>)
 8000974:	79fb      	ldrb	r3, [r7, #7]
 8000976:	f003 030f 	and.w	r3, r3, #15
 800097a:	3b04      	subs	r3, #4
 800097c:	0112      	lsls	r2, r2, #4
 800097e:	b2d2      	uxtb	r2, r2
 8000980:	440b      	add	r3, r1
 8000982:	761a      	strb	r2, [r3, #24]
}
 8000984:	bf00      	nop
 8000986:	370c      	adds	r7, #12
 8000988:	46bd      	mov	sp, r7
 800098a:	bc80      	pop	{r7}
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	e000e100 	.word	0xe000e100
 8000994:	e000ed00 	.word	0xe000ed00

08000998 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000998:	b480      	push	{r7}
 800099a:	b089      	sub	sp, #36	; 0x24
 800099c:	af00      	add	r7, sp, #0
 800099e:	60f8      	str	r0, [r7, #12]
 80009a0:	60b9      	str	r1, [r7, #8]
 80009a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	f003 0307 	and.w	r3, r3, #7
 80009aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009ac:	69fb      	ldr	r3, [r7, #28]
 80009ae:	f1c3 0307 	rsb	r3, r3, #7
 80009b2:	2b04      	cmp	r3, #4
 80009b4:	bf28      	it	cs
 80009b6:	2304      	movcs	r3, #4
 80009b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009ba:	69fb      	ldr	r3, [r7, #28]
 80009bc:	3304      	adds	r3, #4
 80009be:	2b06      	cmp	r3, #6
 80009c0:	d902      	bls.n	80009c8 <NVIC_EncodePriority+0x30>
 80009c2:	69fb      	ldr	r3, [r7, #28]
 80009c4:	3b03      	subs	r3, #3
 80009c6:	e000      	b.n	80009ca <NVIC_EncodePriority+0x32>
 80009c8:	2300      	movs	r3, #0
 80009ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009cc:	f04f 32ff 	mov.w	r2, #4294967295
 80009d0:	69bb      	ldr	r3, [r7, #24]
 80009d2:	fa02 f303 	lsl.w	r3, r2, r3
 80009d6:	43da      	mvns	r2, r3
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	401a      	ands	r2, r3
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009e0:	f04f 31ff 	mov.w	r1, #4294967295
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	fa01 f303 	lsl.w	r3, r1, r3
 80009ea:	43d9      	mvns	r1, r3
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009f0:	4313      	orrs	r3, r2
         );
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	3724      	adds	r7, #36	; 0x24
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bc80      	pop	{r7}
 80009fa:	4770      	bx	lr

080009fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a04:	6878      	ldr	r0, [r7, #4]
 8000a06:	f7ff ff4f 	bl	80008a8 <__NVIC_SetPriorityGrouping>
}
 8000a0a:	bf00      	nop
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}

08000a12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a12:	b580      	push	{r7, lr}
 8000a14:	b086      	sub	sp, #24
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	4603      	mov	r3, r0
 8000a1a:	60b9      	str	r1, [r7, #8]
 8000a1c:	607a      	str	r2, [r7, #4]
 8000a1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a20:	2300      	movs	r3, #0
 8000a22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a24:	f7ff ff64 	bl	80008f0 <__NVIC_GetPriorityGrouping>
 8000a28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a2a:	687a      	ldr	r2, [r7, #4]
 8000a2c:	68b9      	ldr	r1, [r7, #8]
 8000a2e:	6978      	ldr	r0, [r7, #20]
 8000a30:	f7ff ffb2 	bl	8000998 <NVIC_EncodePriority>
 8000a34:	4602      	mov	r2, r0
 8000a36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a3a:	4611      	mov	r1, r2
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f7ff ff81 	bl	8000944 <__NVIC_SetPriority>
}
 8000a42:	bf00      	nop
 8000a44:	3718      	adds	r7, #24
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	b082      	sub	sp, #8
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	4603      	mov	r3, r0
 8000a52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f7ff ff57 	bl	800090c <__NVIC_EnableIRQ>
}
 8000a5e:	bf00      	nop
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
	...

08000a68 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b085      	sub	sp, #20
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000a70:	2300      	movs	r3, #0
 8000a72:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d101      	bne.n	8000a7e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	e043      	b.n	8000b06 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	461a      	mov	r2, r3
 8000a84:	4b22      	ldr	r3, [pc, #136]	; (8000b10 <HAL_DMA_Init+0xa8>)
 8000a86:	4413      	add	r3, r2
 8000a88:	4a22      	ldr	r2, [pc, #136]	; (8000b14 <HAL_DMA_Init+0xac>)
 8000a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a8e:	091b      	lsrs	r3, r3, #4
 8000a90:	009a      	lsls	r2, r3, #2
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	4a1f      	ldr	r2, [pc, #124]	; (8000b18 <HAL_DMA_Init+0xb0>)
 8000a9a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	2202      	movs	r2, #2
 8000aa0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000ab2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000ab6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000ac0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	68db      	ldr	r3, [r3, #12]
 8000ac6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000acc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	695b      	ldr	r3, [r3, #20]
 8000ad2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ad8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	69db      	ldr	r3, [r3, #28]
 8000ade:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000ae0:	68fa      	ldr	r2, [r7, #12]
 8000ae2:	4313      	orrs	r3, r2
 8000ae4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	68fa      	ldr	r2, [r7, #12]
 8000aec:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	2200      	movs	r2, #0
 8000af2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	2201      	movs	r2, #1
 8000af8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	2200      	movs	r2, #0
 8000b00:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000b04:	2300      	movs	r3, #0
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3714      	adds	r7, #20
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bc80      	pop	{r7}
 8000b0e:	4770      	bx	lr
 8000b10:	bffdfff8 	.word	0xbffdfff8
 8000b14:	cccccccd 	.word	0xcccccccd
 8000b18:	40020000 	.word	0x40020000

08000b1c <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b085      	sub	sp, #20
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b24:	2300      	movs	r3, #0
 8000b26:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b2e:	b2db      	uxtb	r3, r3
 8000b30:	2b02      	cmp	r3, #2
 8000b32:	d008      	beq.n	8000b46 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	2204      	movs	r2, #4
 8000b38:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000b42:	2301      	movs	r3, #1
 8000b44:	e020      	b.n	8000b88 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	681a      	ldr	r2, [r3, #0]
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f022 020e 	bic.w	r2, r2, #14
 8000b54:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	f022 0201 	bic.w	r2, r2, #1
 8000b64:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b6e:	2101      	movs	r1, #1
 8000b70:	fa01 f202 	lsl.w	r2, r1, r2
 8000b74:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	2201      	movs	r2, #1
 8000b7a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	2200      	movs	r2, #0
 8000b82:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000b86:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	3714      	adds	r7, #20
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bc80      	pop	{r7}
 8000b90:	4770      	bx	lr
	...

08000b94 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	2b02      	cmp	r3, #2
 8000baa:	d005      	beq.n	8000bb8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	2204      	movs	r2, #4
 8000bb0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	73fb      	strb	r3, [r7, #15]
 8000bb6:	e051      	b.n	8000c5c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	681a      	ldr	r2, [r3, #0]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	f022 020e 	bic.w	r2, r2, #14
 8000bc6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	681a      	ldr	r2, [r3, #0]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f022 0201 	bic.w	r2, r2, #1
 8000bd6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a22      	ldr	r2, [pc, #136]	; (8000c68 <HAL_DMA_Abort_IT+0xd4>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d029      	beq.n	8000c36 <HAL_DMA_Abort_IT+0xa2>
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4a21      	ldr	r2, [pc, #132]	; (8000c6c <HAL_DMA_Abort_IT+0xd8>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d022      	beq.n	8000c32 <HAL_DMA_Abort_IT+0x9e>
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a1f      	ldr	r2, [pc, #124]	; (8000c70 <HAL_DMA_Abort_IT+0xdc>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d01a      	beq.n	8000c2c <HAL_DMA_Abort_IT+0x98>
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4a1e      	ldr	r2, [pc, #120]	; (8000c74 <HAL_DMA_Abort_IT+0xe0>)
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	d012      	beq.n	8000c26 <HAL_DMA_Abort_IT+0x92>
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a1c      	ldr	r2, [pc, #112]	; (8000c78 <HAL_DMA_Abort_IT+0xe4>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d00a      	beq.n	8000c20 <HAL_DMA_Abort_IT+0x8c>
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a1b      	ldr	r2, [pc, #108]	; (8000c7c <HAL_DMA_Abort_IT+0xe8>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d102      	bne.n	8000c1a <HAL_DMA_Abort_IT+0x86>
 8000c14:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000c18:	e00e      	b.n	8000c38 <HAL_DMA_Abort_IT+0xa4>
 8000c1a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c1e:	e00b      	b.n	8000c38 <HAL_DMA_Abort_IT+0xa4>
 8000c20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c24:	e008      	b.n	8000c38 <HAL_DMA_Abort_IT+0xa4>
 8000c26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c2a:	e005      	b.n	8000c38 <HAL_DMA_Abort_IT+0xa4>
 8000c2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c30:	e002      	b.n	8000c38 <HAL_DMA_Abort_IT+0xa4>
 8000c32:	2310      	movs	r3, #16
 8000c34:	e000      	b.n	8000c38 <HAL_DMA_Abort_IT+0xa4>
 8000c36:	2301      	movs	r3, #1
 8000c38:	4a11      	ldr	r2, [pc, #68]	; (8000c80 <HAL_DMA_Abort_IT+0xec>)
 8000c3a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	2201      	movs	r2, #1
 8000c40:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	2200      	movs	r2, #0
 8000c48:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d003      	beq.n	8000c5c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c58:	6878      	ldr	r0, [r7, #4]
 8000c5a:	4798      	blx	r3
    } 
  }
  return status;
 8000c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3710      	adds	r7, #16
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40020008 	.word	0x40020008
 8000c6c:	4002001c 	.word	0x4002001c
 8000c70:	40020030 	.word	0x40020030
 8000c74:	40020044 	.word	0x40020044
 8000c78:	40020058 	.word	0x40020058
 8000c7c:	4002006c 	.word	0x4002006c
 8000c80:	40020000 	.word	0x40020000

08000c84 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca0:	2204      	movs	r2, #4
 8000ca2:	409a      	lsls	r2, r3
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	4013      	ands	r3, r2
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d04f      	beq.n	8000d4c <HAL_DMA_IRQHandler+0xc8>
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	f003 0304 	and.w	r3, r3, #4
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d04a      	beq.n	8000d4c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f003 0320 	and.w	r3, r3, #32
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d107      	bne.n	8000cd4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f022 0204 	bic.w	r2, r2, #4
 8000cd2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a66      	ldr	r2, [pc, #408]	; (8000e74 <HAL_DMA_IRQHandler+0x1f0>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d029      	beq.n	8000d32 <HAL_DMA_IRQHandler+0xae>
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4a65      	ldr	r2, [pc, #404]	; (8000e78 <HAL_DMA_IRQHandler+0x1f4>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d022      	beq.n	8000d2e <HAL_DMA_IRQHandler+0xaa>
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a63      	ldr	r2, [pc, #396]	; (8000e7c <HAL_DMA_IRQHandler+0x1f8>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d01a      	beq.n	8000d28 <HAL_DMA_IRQHandler+0xa4>
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4a62      	ldr	r2, [pc, #392]	; (8000e80 <HAL_DMA_IRQHandler+0x1fc>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d012      	beq.n	8000d22 <HAL_DMA_IRQHandler+0x9e>
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a60      	ldr	r2, [pc, #384]	; (8000e84 <HAL_DMA_IRQHandler+0x200>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d00a      	beq.n	8000d1c <HAL_DMA_IRQHandler+0x98>
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4a5f      	ldr	r2, [pc, #380]	; (8000e88 <HAL_DMA_IRQHandler+0x204>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d102      	bne.n	8000d16 <HAL_DMA_IRQHandler+0x92>
 8000d10:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d14:	e00e      	b.n	8000d34 <HAL_DMA_IRQHandler+0xb0>
 8000d16:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000d1a:	e00b      	b.n	8000d34 <HAL_DMA_IRQHandler+0xb0>
 8000d1c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000d20:	e008      	b.n	8000d34 <HAL_DMA_IRQHandler+0xb0>
 8000d22:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d26:	e005      	b.n	8000d34 <HAL_DMA_IRQHandler+0xb0>
 8000d28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d2c:	e002      	b.n	8000d34 <HAL_DMA_IRQHandler+0xb0>
 8000d2e:	2340      	movs	r3, #64	; 0x40
 8000d30:	e000      	b.n	8000d34 <HAL_DMA_IRQHandler+0xb0>
 8000d32:	2304      	movs	r3, #4
 8000d34:	4a55      	ldr	r2, [pc, #340]	; (8000e8c <HAL_DMA_IRQHandler+0x208>)
 8000d36:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	f000 8094 	beq.w	8000e6a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d46:	6878      	ldr	r0, [r7, #4]
 8000d48:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000d4a:	e08e      	b.n	8000e6a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d50:	2202      	movs	r2, #2
 8000d52:	409a      	lsls	r2, r3
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	4013      	ands	r3, r2
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d056      	beq.n	8000e0a <HAL_DMA_IRQHandler+0x186>
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	f003 0302 	and.w	r3, r3, #2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d051      	beq.n	8000e0a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f003 0320 	and.w	r3, r3, #32
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d10b      	bne.n	8000d8c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f022 020a 	bic.w	r2, r2, #10
 8000d82:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2201      	movs	r2, #1
 8000d88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a38      	ldr	r2, [pc, #224]	; (8000e74 <HAL_DMA_IRQHandler+0x1f0>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d029      	beq.n	8000dea <HAL_DMA_IRQHandler+0x166>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4a37      	ldr	r2, [pc, #220]	; (8000e78 <HAL_DMA_IRQHandler+0x1f4>)
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d022      	beq.n	8000de6 <HAL_DMA_IRQHandler+0x162>
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a35      	ldr	r2, [pc, #212]	; (8000e7c <HAL_DMA_IRQHandler+0x1f8>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d01a      	beq.n	8000de0 <HAL_DMA_IRQHandler+0x15c>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4a34      	ldr	r2, [pc, #208]	; (8000e80 <HAL_DMA_IRQHandler+0x1fc>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d012      	beq.n	8000dda <HAL_DMA_IRQHandler+0x156>
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a32      	ldr	r2, [pc, #200]	; (8000e84 <HAL_DMA_IRQHandler+0x200>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d00a      	beq.n	8000dd4 <HAL_DMA_IRQHandler+0x150>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4a31      	ldr	r2, [pc, #196]	; (8000e88 <HAL_DMA_IRQHandler+0x204>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d102      	bne.n	8000dce <HAL_DMA_IRQHandler+0x14a>
 8000dc8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000dcc:	e00e      	b.n	8000dec <HAL_DMA_IRQHandler+0x168>
 8000dce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000dd2:	e00b      	b.n	8000dec <HAL_DMA_IRQHandler+0x168>
 8000dd4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dd8:	e008      	b.n	8000dec <HAL_DMA_IRQHandler+0x168>
 8000dda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dde:	e005      	b.n	8000dec <HAL_DMA_IRQHandler+0x168>
 8000de0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000de4:	e002      	b.n	8000dec <HAL_DMA_IRQHandler+0x168>
 8000de6:	2320      	movs	r3, #32
 8000de8:	e000      	b.n	8000dec <HAL_DMA_IRQHandler+0x168>
 8000dea:	2302      	movs	r3, #2
 8000dec:	4a27      	ldr	r2, [pc, #156]	; (8000e8c <HAL_DMA_IRQHandler+0x208>)
 8000dee:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2200      	movs	r2, #0
 8000df4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d034      	beq.n	8000e6a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e04:	6878      	ldr	r0, [r7, #4]
 8000e06:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000e08:	e02f      	b.n	8000e6a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0e:	2208      	movs	r2, #8
 8000e10:	409a      	lsls	r2, r3
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	4013      	ands	r3, r2
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d028      	beq.n	8000e6c <HAL_DMA_IRQHandler+0x1e8>
 8000e1a:	68bb      	ldr	r3, [r7, #8]
 8000e1c:	f003 0308 	and.w	r3, r3, #8
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d023      	beq.n	8000e6c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f022 020e 	bic.w	r2, r2, #14
 8000e32:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	fa01 f202 	lsl.w	r2, r1, r2
 8000e42:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2201      	movs	r2, #1
 8000e48:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2200      	movs	r2, #0
 8000e56:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d004      	beq.n	8000e6c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	6878      	ldr	r0, [r7, #4]
 8000e68:	4798      	blx	r3
    }
  }
  return;
 8000e6a:	bf00      	nop
 8000e6c:	bf00      	nop
}
 8000e6e:	3710      	adds	r7, #16
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	40020008 	.word	0x40020008
 8000e78:	4002001c 	.word	0x4002001c
 8000e7c:	40020030 	.word	0x40020030
 8000e80:	40020044 	.word	0x40020044
 8000e84:	40020058 	.word	0x40020058
 8000e88:	4002006c 	.word	0x4002006c
 8000e8c:	40020000 	.word	0x40020000

08000e90 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b08b      	sub	sp, #44	; 0x2c
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ea2:	e169      	b.n	8001178 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	69fa      	ldr	r2, [r7, #28]
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000eb8:	69ba      	ldr	r2, [r7, #24]
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	f040 8158 	bne.w	8001172 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	4a9a      	ldr	r2, [pc, #616]	; (8001130 <HAL_GPIO_Init+0x2a0>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d05e      	beq.n	8000f8a <HAL_GPIO_Init+0xfa>
 8000ecc:	4a98      	ldr	r2, [pc, #608]	; (8001130 <HAL_GPIO_Init+0x2a0>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d875      	bhi.n	8000fbe <HAL_GPIO_Init+0x12e>
 8000ed2:	4a98      	ldr	r2, [pc, #608]	; (8001134 <HAL_GPIO_Init+0x2a4>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d058      	beq.n	8000f8a <HAL_GPIO_Init+0xfa>
 8000ed8:	4a96      	ldr	r2, [pc, #600]	; (8001134 <HAL_GPIO_Init+0x2a4>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d86f      	bhi.n	8000fbe <HAL_GPIO_Init+0x12e>
 8000ede:	4a96      	ldr	r2, [pc, #600]	; (8001138 <HAL_GPIO_Init+0x2a8>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d052      	beq.n	8000f8a <HAL_GPIO_Init+0xfa>
 8000ee4:	4a94      	ldr	r2, [pc, #592]	; (8001138 <HAL_GPIO_Init+0x2a8>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d869      	bhi.n	8000fbe <HAL_GPIO_Init+0x12e>
 8000eea:	4a94      	ldr	r2, [pc, #592]	; (800113c <HAL_GPIO_Init+0x2ac>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d04c      	beq.n	8000f8a <HAL_GPIO_Init+0xfa>
 8000ef0:	4a92      	ldr	r2, [pc, #584]	; (800113c <HAL_GPIO_Init+0x2ac>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d863      	bhi.n	8000fbe <HAL_GPIO_Init+0x12e>
 8000ef6:	4a92      	ldr	r2, [pc, #584]	; (8001140 <HAL_GPIO_Init+0x2b0>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d046      	beq.n	8000f8a <HAL_GPIO_Init+0xfa>
 8000efc:	4a90      	ldr	r2, [pc, #576]	; (8001140 <HAL_GPIO_Init+0x2b0>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d85d      	bhi.n	8000fbe <HAL_GPIO_Init+0x12e>
 8000f02:	2b12      	cmp	r3, #18
 8000f04:	d82a      	bhi.n	8000f5c <HAL_GPIO_Init+0xcc>
 8000f06:	2b12      	cmp	r3, #18
 8000f08:	d859      	bhi.n	8000fbe <HAL_GPIO_Init+0x12e>
 8000f0a:	a201      	add	r2, pc, #4	; (adr r2, 8000f10 <HAL_GPIO_Init+0x80>)
 8000f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f10:	08000f8b 	.word	0x08000f8b
 8000f14:	08000f65 	.word	0x08000f65
 8000f18:	08000f77 	.word	0x08000f77
 8000f1c:	08000fb9 	.word	0x08000fb9
 8000f20:	08000fbf 	.word	0x08000fbf
 8000f24:	08000fbf 	.word	0x08000fbf
 8000f28:	08000fbf 	.word	0x08000fbf
 8000f2c:	08000fbf 	.word	0x08000fbf
 8000f30:	08000fbf 	.word	0x08000fbf
 8000f34:	08000fbf 	.word	0x08000fbf
 8000f38:	08000fbf 	.word	0x08000fbf
 8000f3c:	08000fbf 	.word	0x08000fbf
 8000f40:	08000fbf 	.word	0x08000fbf
 8000f44:	08000fbf 	.word	0x08000fbf
 8000f48:	08000fbf 	.word	0x08000fbf
 8000f4c:	08000fbf 	.word	0x08000fbf
 8000f50:	08000fbf 	.word	0x08000fbf
 8000f54:	08000f6d 	.word	0x08000f6d
 8000f58:	08000f81 	.word	0x08000f81
 8000f5c:	4a79      	ldr	r2, [pc, #484]	; (8001144 <HAL_GPIO_Init+0x2b4>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d013      	beq.n	8000f8a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f62:	e02c      	b.n	8000fbe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	623b      	str	r3, [r7, #32]
          break;
 8000f6a:	e029      	b.n	8000fc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	3304      	adds	r3, #4
 8000f72:	623b      	str	r3, [r7, #32]
          break;
 8000f74:	e024      	b.n	8000fc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	68db      	ldr	r3, [r3, #12]
 8000f7a:	3308      	adds	r3, #8
 8000f7c:	623b      	str	r3, [r7, #32]
          break;
 8000f7e:	e01f      	b.n	8000fc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	330c      	adds	r3, #12
 8000f86:	623b      	str	r3, [r7, #32]
          break;
 8000f88:	e01a      	b.n	8000fc0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	689b      	ldr	r3, [r3, #8]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d102      	bne.n	8000f98 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f92:	2304      	movs	r3, #4
 8000f94:	623b      	str	r3, [r7, #32]
          break;
 8000f96:	e013      	b.n	8000fc0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	689b      	ldr	r3, [r3, #8]
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d105      	bne.n	8000fac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fa0:	2308      	movs	r3, #8
 8000fa2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	69fa      	ldr	r2, [r7, #28]
 8000fa8:	611a      	str	r2, [r3, #16]
          break;
 8000faa:	e009      	b.n	8000fc0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fac:	2308      	movs	r3, #8
 8000fae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	69fa      	ldr	r2, [r7, #28]
 8000fb4:	615a      	str	r2, [r3, #20]
          break;
 8000fb6:	e003      	b.n	8000fc0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	623b      	str	r3, [r7, #32]
          break;
 8000fbc:	e000      	b.n	8000fc0 <HAL_GPIO_Init+0x130>
          break;
 8000fbe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000fc0:	69bb      	ldr	r3, [r7, #24]
 8000fc2:	2bff      	cmp	r3, #255	; 0xff
 8000fc4:	d801      	bhi.n	8000fca <HAL_GPIO_Init+0x13a>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	e001      	b.n	8000fce <HAL_GPIO_Init+0x13e>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	3304      	adds	r3, #4
 8000fce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000fd0:	69bb      	ldr	r3, [r7, #24]
 8000fd2:	2bff      	cmp	r3, #255	; 0xff
 8000fd4:	d802      	bhi.n	8000fdc <HAL_GPIO_Init+0x14c>
 8000fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	e002      	b.n	8000fe2 <HAL_GPIO_Init+0x152>
 8000fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fde:	3b08      	subs	r3, #8
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	210f      	movs	r1, #15
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	401a      	ands	r2, r3
 8000ff4:	6a39      	ldr	r1, [r7, #32]
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8000ffc:	431a      	orrs	r2, r3
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800100a:	2b00      	cmp	r3, #0
 800100c:	f000 80b1 	beq.w	8001172 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001010:	4b4d      	ldr	r3, [pc, #308]	; (8001148 <HAL_GPIO_Init+0x2b8>)
 8001012:	699b      	ldr	r3, [r3, #24]
 8001014:	4a4c      	ldr	r2, [pc, #304]	; (8001148 <HAL_GPIO_Init+0x2b8>)
 8001016:	f043 0301 	orr.w	r3, r3, #1
 800101a:	6193      	str	r3, [r2, #24]
 800101c:	4b4a      	ldr	r3, [pc, #296]	; (8001148 <HAL_GPIO_Init+0x2b8>)
 800101e:	699b      	ldr	r3, [r3, #24]
 8001020:	f003 0301 	and.w	r3, r3, #1
 8001024:	60bb      	str	r3, [r7, #8]
 8001026:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001028:	4a48      	ldr	r2, [pc, #288]	; (800114c <HAL_GPIO_Init+0x2bc>)
 800102a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800102c:	089b      	lsrs	r3, r3, #2
 800102e:	3302      	adds	r3, #2
 8001030:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001034:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001038:	f003 0303 	and.w	r3, r3, #3
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	220f      	movs	r2, #15
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	43db      	mvns	r3, r3
 8001046:	68fa      	ldr	r2, [r7, #12]
 8001048:	4013      	ands	r3, r2
 800104a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	4a40      	ldr	r2, [pc, #256]	; (8001150 <HAL_GPIO_Init+0x2c0>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d013      	beq.n	800107c <HAL_GPIO_Init+0x1ec>
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	4a3f      	ldr	r2, [pc, #252]	; (8001154 <HAL_GPIO_Init+0x2c4>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d00d      	beq.n	8001078 <HAL_GPIO_Init+0x1e8>
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	4a3e      	ldr	r2, [pc, #248]	; (8001158 <HAL_GPIO_Init+0x2c8>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d007      	beq.n	8001074 <HAL_GPIO_Init+0x1e4>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	4a3d      	ldr	r2, [pc, #244]	; (800115c <HAL_GPIO_Init+0x2cc>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d101      	bne.n	8001070 <HAL_GPIO_Init+0x1e0>
 800106c:	2303      	movs	r3, #3
 800106e:	e006      	b.n	800107e <HAL_GPIO_Init+0x1ee>
 8001070:	2304      	movs	r3, #4
 8001072:	e004      	b.n	800107e <HAL_GPIO_Init+0x1ee>
 8001074:	2302      	movs	r3, #2
 8001076:	e002      	b.n	800107e <HAL_GPIO_Init+0x1ee>
 8001078:	2301      	movs	r3, #1
 800107a:	e000      	b.n	800107e <HAL_GPIO_Init+0x1ee>
 800107c:	2300      	movs	r3, #0
 800107e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001080:	f002 0203 	and.w	r2, r2, #3
 8001084:	0092      	lsls	r2, r2, #2
 8001086:	4093      	lsls	r3, r2
 8001088:	68fa      	ldr	r2, [r7, #12]
 800108a:	4313      	orrs	r3, r2
 800108c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800108e:	492f      	ldr	r1, [pc, #188]	; (800114c <HAL_GPIO_Init+0x2bc>)
 8001090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001092:	089b      	lsrs	r3, r3, #2
 8001094:	3302      	adds	r3, #2
 8001096:	68fa      	ldr	r2, [r7, #12]
 8001098:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d006      	beq.n	80010b6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80010a8:	4b2d      	ldr	r3, [pc, #180]	; (8001160 <HAL_GPIO_Init+0x2d0>)
 80010aa:	689a      	ldr	r2, [r3, #8]
 80010ac:	492c      	ldr	r1, [pc, #176]	; (8001160 <HAL_GPIO_Init+0x2d0>)
 80010ae:	69bb      	ldr	r3, [r7, #24]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	608b      	str	r3, [r1, #8]
 80010b4:	e006      	b.n	80010c4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80010b6:	4b2a      	ldr	r3, [pc, #168]	; (8001160 <HAL_GPIO_Init+0x2d0>)
 80010b8:	689a      	ldr	r2, [r3, #8]
 80010ba:	69bb      	ldr	r3, [r7, #24]
 80010bc:	43db      	mvns	r3, r3
 80010be:	4928      	ldr	r1, [pc, #160]	; (8001160 <HAL_GPIO_Init+0x2d0>)
 80010c0:	4013      	ands	r3, r2
 80010c2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d006      	beq.n	80010de <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80010d0:	4b23      	ldr	r3, [pc, #140]	; (8001160 <HAL_GPIO_Init+0x2d0>)
 80010d2:	68da      	ldr	r2, [r3, #12]
 80010d4:	4922      	ldr	r1, [pc, #136]	; (8001160 <HAL_GPIO_Init+0x2d0>)
 80010d6:	69bb      	ldr	r3, [r7, #24]
 80010d8:	4313      	orrs	r3, r2
 80010da:	60cb      	str	r3, [r1, #12]
 80010dc:	e006      	b.n	80010ec <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80010de:	4b20      	ldr	r3, [pc, #128]	; (8001160 <HAL_GPIO_Init+0x2d0>)
 80010e0:	68da      	ldr	r2, [r3, #12]
 80010e2:	69bb      	ldr	r3, [r7, #24]
 80010e4:	43db      	mvns	r3, r3
 80010e6:	491e      	ldr	r1, [pc, #120]	; (8001160 <HAL_GPIO_Init+0x2d0>)
 80010e8:	4013      	ands	r3, r2
 80010ea:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d006      	beq.n	8001106 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80010f8:	4b19      	ldr	r3, [pc, #100]	; (8001160 <HAL_GPIO_Init+0x2d0>)
 80010fa:	685a      	ldr	r2, [r3, #4]
 80010fc:	4918      	ldr	r1, [pc, #96]	; (8001160 <HAL_GPIO_Init+0x2d0>)
 80010fe:	69bb      	ldr	r3, [r7, #24]
 8001100:	4313      	orrs	r3, r2
 8001102:	604b      	str	r3, [r1, #4]
 8001104:	e006      	b.n	8001114 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001106:	4b16      	ldr	r3, [pc, #88]	; (8001160 <HAL_GPIO_Init+0x2d0>)
 8001108:	685a      	ldr	r2, [r3, #4]
 800110a:	69bb      	ldr	r3, [r7, #24]
 800110c:	43db      	mvns	r3, r3
 800110e:	4914      	ldr	r1, [pc, #80]	; (8001160 <HAL_GPIO_Init+0x2d0>)
 8001110:	4013      	ands	r3, r2
 8001112:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800111c:	2b00      	cmp	r3, #0
 800111e:	d021      	beq.n	8001164 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001120:	4b0f      	ldr	r3, [pc, #60]	; (8001160 <HAL_GPIO_Init+0x2d0>)
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	490e      	ldr	r1, [pc, #56]	; (8001160 <HAL_GPIO_Init+0x2d0>)
 8001126:	69bb      	ldr	r3, [r7, #24]
 8001128:	4313      	orrs	r3, r2
 800112a:	600b      	str	r3, [r1, #0]
 800112c:	e021      	b.n	8001172 <HAL_GPIO_Init+0x2e2>
 800112e:	bf00      	nop
 8001130:	10320000 	.word	0x10320000
 8001134:	10310000 	.word	0x10310000
 8001138:	10220000 	.word	0x10220000
 800113c:	10210000 	.word	0x10210000
 8001140:	10120000 	.word	0x10120000
 8001144:	10110000 	.word	0x10110000
 8001148:	40021000 	.word	0x40021000
 800114c:	40010000 	.word	0x40010000
 8001150:	40010800 	.word	0x40010800
 8001154:	40010c00 	.word	0x40010c00
 8001158:	40011000 	.word	0x40011000
 800115c:	40011400 	.word	0x40011400
 8001160:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001164:	4b0b      	ldr	r3, [pc, #44]	; (8001194 <HAL_GPIO_Init+0x304>)
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	69bb      	ldr	r3, [r7, #24]
 800116a:	43db      	mvns	r3, r3
 800116c:	4909      	ldr	r1, [pc, #36]	; (8001194 <HAL_GPIO_Init+0x304>)
 800116e:	4013      	ands	r3, r2
 8001170:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001174:	3301      	adds	r3, #1
 8001176:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800117e:	fa22 f303 	lsr.w	r3, r2, r3
 8001182:	2b00      	cmp	r3, #0
 8001184:	f47f ae8e 	bne.w	8000ea4 <HAL_GPIO_Init+0x14>
  }
}
 8001188:	bf00      	nop
 800118a:	bf00      	nop
 800118c:	372c      	adds	r7, #44	; 0x2c
 800118e:	46bd      	mov	sp, r7
 8001190:	bc80      	pop	{r7}
 8001192:	4770      	bx	lr
 8001194:	40010400 	.word	0x40010400

08001198 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	460b      	mov	r3, r1
 80011a2:	807b      	strh	r3, [r7, #2]
 80011a4:	4613      	mov	r3, r2
 80011a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011a8:	787b      	ldrb	r3, [r7, #1]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d003      	beq.n	80011b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011ae:	887a      	ldrh	r2, [r7, #2]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80011b4:	e003      	b.n	80011be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011b6:	887b      	ldrh	r3, [r7, #2]
 80011b8:	041a      	lsls	r2, r3, #16
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	611a      	str	r2, [r3, #16]
}
 80011be:	bf00      	nop
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bc80      	pop	{r7}
 80011c6:	4770      	bx	lr

080011c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80011d2:	4b08      	ldr	r3, [pc, #32]	; (80011f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011d4:	695a      	ldr	r2, [r3, #20]
 80011d6:	88fb      	ldrh	r3, [r7, #6]
 80011d8:	4013      	ands	r3, r2
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d006      	beq.n	80011ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80011de:	4a05      	ldr	r2, [pc, #20]	; (80011f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011e0:	88fb      	ldrh	r3, [r7, #6]
 80011e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80011e4:	88fb      	ldrh	r3, [r7, #6]
 80011e6:	4618      	mov	r0, r3
 80011e8:	f000 f806 	bl	80011f8 <HAL_GPIO_EXTI_Callback>
  }
}
 80011ec:	bf00      	nop
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	40010400 	.word	0x40010400

080011f8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001202:	bf00      	nop
 8001204:	370c      	adds	r7, #12
 8001206:	46bd      	mov	sp, r7
 8001208:	bc80      	pop	{r7}
 800120a:	4770      	bx	lr

0800120c <HAL_PWR_PVD_IRQHandler>:
  * @brief  This function handles the PWR PVD interrupt request.
  * @note   This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8001210:	4b06      	ldr	r3, [pc, #24]	; (800122c <HAL_PWR_PVD_IRQHandler+0x20>)
 8001212:	695b      	ldr	r3, [r3, #20]
 8001214:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001218:	2b00      	cmp	r3, #0
 800121a:	d005      	beq.n	8001228 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 800121c:	f000 f808 	bl	8001230 <HAL_PWR_PVDCallback>

    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8001220:	4b02      	ldr	r3, [pc, #8]	; (800122c <HAL_PWR_PVD_IRQHandler+0x20>)
 8001222:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001226:	615a      	str	r2, [r3, #20]
  }
}
 8001228:	bf00      	nop
 800122a:	bd80      	pop	{r7, pc}
 800122c:	40010400 	.word	0x40010400

08001230 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8001234:	bf00      	nop
 8001236:	46bd      	mov	sp, r7
 8001238:	bc80      	pop	{r7}
 800123a:	4770      	bx	lr

0800123c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b086      	sub	sp, #24
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d101      	bne.n	800124e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e272      	b.n	8001734 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f003 0301 	and.w	r3, r3, #1
 8001256:	2b00      	cmp	r3, #0
 8001258:	f000 8087 	beq.w	800136a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800125c:	4b92      	ldr	r3, [pc, #584]	; (80014a8 <HAL_RCC_OscConfig+0x26c>)
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f003 030c 	and.w	r3, r3, #12
 8001264:	2b04      	cmp	r3, #4
 8001266:	d00c      	beq.n	8001282 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001268:	4b8f      	ldr	r3, [pc, #572]	; (80014a8 <HAL_RCC_OscConfig+0x26c>)
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f003 030c 	and.w	r3, r3, #12
 8001270:	2b08      	cmp	r3, #8
 8001272:	d112      	bne.n	800129a <HAL_RCC_OscConfig+0x5e>
 8001274:	4b8c      	ldr	r3, [pc, #560]	; (80014a8 <HAL_RCC_OscConfig+0x26c>)
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800127c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001280:	d10b      	bne.n	800129a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001282:	4b89      	ldr	r3, [pc, #548]	; (80014a8 <HAL_RCC_OscConfig+0x26c>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800128a:	2b00      	cmp	r3, #0
 800128c:	d06c      	beq.n	8001368 <HAL_RCC_OscConfig+0x12c>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d168      	bne.n	8001368 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e24c      	b.n	8001734 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012a2:	d106      	bne.n	80012b2 <HAL_RCC_OscConfig+0x76>
 80012a4:	4b80      	ldr	r3, [pc, #512]	; (80014a8 <HAL_RCC_OscConfig+0x26c>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a7f      	ldr	r2, [pc, #508]	; (80014a8 <HAL_RCC_OscConfig+0x26c>)
 80012aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012ae:	6013      	str	r3, [r2, #0]
 80012b0:	e02e      	b.n	8001310 <HAL_RCC_OscConfig+0xd4>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d10c      	bne.n	80012d4 <HAL_RCC_OscConfig+0x98>
 80012ba:	4b7b      	ldr	r3, [pc, #492]	; (80014a8 <HAL_RCC_OscConfig+0x26c>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a7a      	ldr	r2, [pc, #488]	; (80014a8 <HAL_RCC_OscConfig+0x26c>)
 80012c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012c4:	6013      	str	r3, [r2, #0]
 80012c6:	4b78      	ldr	r3, [pc, #480]	; (80014a8 <HAL_RCC_OscConfig+0x26c>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a77      	ldr	r2, [pc, #476]	; (80014a8 <HAL_RCC_OscConfig+0x26c>)
 80012cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012d0:	6013      	str	r3, [r2, #0]
 80012d2:	e01d      	b.n	8001310 <HAL_RCC_OscConfig+0xd4>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012dc:	d10c      	bne.n	80012f8 <HAL_RCC_OscConfig+0xbc>
 80012de:	4b72      	ldr	r3, [pc, #456]	; (80014a8 <HAL_RCC_OscConfig+0x26c>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a71      	ldr	r2, [pc, #452]	; (80014a8 <HAL_RCC_OscConfig+0x26c>)
 80012e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012e8:	6013      	str	r3, [r2, #0]
 80012ea:	4b6f      	ldr	r3, [pc, #444]	; (80014a8 <HAL_RCC_OscConfig+0x26c>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a6e      	ldr	r2, [pc, #440]	; (80014a8 <HAL_RCC_OscConfig+0x26c>)
 80012f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012f4:	6013      	str	r3, [r2, #0]
 80012f6:	e00b      	b.n	8001310 <HAL_RCC_OscConfig+0xd4>
 80012f8:	4b6b      	ldr	r3, [pc, #428]	; (80014a8 <HAL_RCC_OscConfig+0x26c>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a6a      	ldr	r2, [pc, #424]	; (80014a8 <HAL_RCC_OscConfig+0x26c>)
 80012fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001302:	6013      	str	r3, [r2, #0]
 8001304:	4b68      	ldr	r3, [pc, #416]	; (80014a8 <HAL_RCC_OscConfig+0x26c>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a67      	ldr	r2, [pc, #412]	; (80014a8 <HAL_RCC_OscConfig+0x26c>)
 800130a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800130e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d013      	beq.n	8001340 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001318:	f7ff fabc 	bl	8000894 <HAL_GetTick>
 800131c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800131e:	e008      	b.n	8001332 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001320:	f7ff fab8 	bl	8000894 <HAL_GetTick>
 8001324:	4602      	mov	r2, r0
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	2b64      	cmp	r3, #100	; 0x64
 800132c:	d901      	bls.n	8001332 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800132e:	2303      	movs	r3, #3
 8001330:	e200      	b.n	8001734 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001332:	4b5d      	ldr	r3, [pc, #372]	; (80014a8 <HAL_RCC_OscConfig+0x26c>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d0f0      	beq.n	8001320 <HAL_RCC_OscConfig+0xe4>
 800133e:	e014      	b.n	800136a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001340:	f7ff faa8 	bl	8000894 <HAL_GetTick>
 8001344:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001346:	e008      	b.n	800135a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001348:	f7ff faa4 	bl	8000894 <HAL_GetTick>
 800134c:	4602      	mov	r2, r0
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	2b64      	cmp	r3, #100	; 0x64
 8001354:	d901      	bls.n	800135a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001356:	2303      	movs	r3, #3
 8001358:	e1ec      	b.n	8001734 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800135a:	4b53      	ldr	r3, [pc, #332]	; (80014a8 <HAL_RCC_OscConfig+0x26c>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d1f0      	bne.n	8001348 <HAL_RCC_OscConfig+0x10c>
 8001366:	e000      	b.n	800136a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001368:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 0302 	and.w	r3, r3, #2
 8001372:	2b00      	cmp	r3, #0
 8001374:	d063      	beq.n	800143e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001376:	4b4c      	ldr	r3, [pc, #304]	; (80014a8 <HAL_RCC_OscConfig+0x26c>)
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f003 030c 	and.w	r3, r3, #12
 800137e:	2b00      	cmp	r3, #0
 8001380:	d00b      	beq.n	800139a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001382:	4b49      	ldr	r3, [pc, #292]	; (80014a8 <HAL_RCC_OscConfig+0x26c>)
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f003 030c 	and.w	r3, r3, #12
 800138a:	2b08      	cmp	r3, #8
 800138c:	d11c      	bne.n	80013c8 <HAL_RCC_OscConfig+0x18c>
 800138e:	4b46      	ldr	r3, [pc, #280]	; (80014a8 <HAL_RCC_OscConfig+0x26c>)
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d116      	bne.n	80013c8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800139a:	4b43      	ldr	r3, [pc, #268]	; (80014a8 <HAL_RCC_OscConfig+0x26c>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d005      	beq.n	80013b2 <HAL_RCC_OscConfig+0x176>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	691b      	ldr	r3, [r3, #16]
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d001      	beq.n	80013b2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e1c0      	b.n	8001734 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013b2:	4b3d      	ldr	r3, [pc, #244]	; (80014a8 <HAL_RCC_OscConfig+0x26c>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	695b      	ldr	r3, [r3, #20]
 80013be:	00db      	lsls	r3, r3, #3
 80013c0:	4939      	ldr	r1, [pc, #228]	; (80014a8 <HAL_RCC_OscConfig+0x26c>)
 80013c2:	4313      	orrs	r3, r2
 80013c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013c6:	e03a      	b.n	800143e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	691b      	ldr	r3, [r3, #16]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d020      	beq.n	8001412 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013d0:	4b36      	ldr	r3, [pc, #216]	; (80014ac <HAL_RCC_OscConfig+0x270>)
 80013d2:	2201      	movs	r2, #1
 80013d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d6:	f7ff fa5d 	bl	8000894 <HAL_GetTick>
 80013da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013dc:	e008      	b.n	80013f0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013de:	f7ff fa59 	bl	8000894 <HAL_GetTick>
 80013e2:	4602      	mov	r2, r0
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	d901      	bls.n	80013f0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80013ec:	2303      	movs	r3, #3
 80013ee:	e1a1      	b.n	8001734 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013f0:	4b2d      	ldr	r3, [pc, #180]	; (80014a8 <HAL_RCC_OscConfig+0x26c>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f003 0302 	and.w	r3, r3, #2
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d0f0      	beq.n	80013de <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013fc:	4b2a      	ldr	r3, [pc, #168]	; (80014a8 <HAL_RCC_OscConfig+0x26c>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	695b      	ldr	r3, [r3, #20]
 8001408:	00db      	lsls	r3, r3, #3
 800140a:	4927      	ldr	r1, [pc, #156]	; (80014a8 <HAL_RCC_OscConfig+0x26c>)
 800140c:	4313      	orrs	r3, r2
 800140e:	600b      	str	r3, [r1, #0]
 8001410:	e015      	b.n	800143e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001412:	4b26      	ldr	r3, [pc, #152]	; (80014ac <HAL_RCC_OscConfig+0x270>)
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001418:	f7ff fa3c 	bl	8000894 <HAL_GetTick>
 800141c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800141e:	e008      	b.n	8001432 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001420:	f7ff fa38 	bl	8000894 <HAL_GetTick>
 8001424:	4602      	mov	r2, r0
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	2b02      	cmp	r3, #2
 800142c:	d901      	bls.n	8001432 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800142e:	2303      	movs	r3, #3
 8001430:	e180      	b.n	8001734 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001432:	4b1d      	ldr	r3, [pc, #116]	; (80014a8 <HAL_RCC_OscConfig+0x26c>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 0302 	and.w	r3, r3, #2
 800143a:	2b00      	cmp	r3, #0
 800143c:	d1f0      	bne.n	8001420 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 0308 	and.w	r3, r3, #8
 8001446:	2b00      	cmp	r3, #0
 8001448:	d03a      	beq.n	80014c0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	699b      	ldr	r3, [r3, #24]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d019      	beq.n	8001486 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001452:	4b17      	ldr	r3, [pc, #92]	; (80014b0 <HAL_RCC_OscConfig+0x274>)
 8001454:	2201      	movs	r2, #1
 8001456:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001458:	f7ff fa1c 	bl	8000894 <HAL_GetTick>
 800145c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800145e:	e008      	b.n	8001472 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001460:	f7ff fa18 	bl	8000894 <HAL_GetTick>
 8001464:	4602      	mov	r2, r0
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	2b02      	cmp	r3, #2
 800146c:	d901      	bls.n	8001472 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	e160      	b.n	8001734 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001472:	4b0d      	ldr	r3, [pc, #52]	; (80014a8 <HAL_RCC_OscConfig+0x26c>)
 8001474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	2b00      	cmp	r3, #0
 800147c:	d0f0      	beq.n	8001460 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800147e:	2001      	movs	r0, #1
 8001480:	f000 fafe 	bl	8001a80 <RCC_Delay>
 8001484:	e01c      	b.n	80014c0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001486:	4b0a      	ldr	r3, [pc, #40]	; (80014b0 <HAL_RCC_OscConfig+0x274>)
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800148c:	f7ff fa02 	bl	8000894 <HAL_GetTick>
 8001490:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001492:	e00f      	b.n	80014b4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001494:	f7ff f9fe 	bl	8000894 <HAL_GetTick>
 8001498:	4602      	mov	r2, r0
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d908      	bls.n	80014b4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80014a2:	2303      	movs	r3, #3
 80014a4:	e146      	b.n	8001734 <HAL_RCC_OscConfig+0x4f8>
 80014a6:	bf00      	nop
 80014a8:	40021000 	.word	0x40021000
 80014ac:	42420000 	.word	0x42420000
 80014b0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014b4:	4b92      	ldr	r3, [pc, #584]	; (8001700 <HAL_RCC_OscConfig+0x4c4>)
 80014b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b8:	f003 0302 	and.w	r3, r3, #2
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d1e9      	bne.n	8001494 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 0304 	and.w	r3, r3, #4
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	f000 80a6 	beq.w	800161a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014ce:	2300      	movs	r3, #0
 80014d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014d2:	4b8b      	ldr	r3, [pc, #556]	; (8001700 <HAL_RCC_OscConfig+0x4c4>)
 80014d4:	69db      	ldr	r3, [r3, #28]
 80014d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d10d      	bne.n	80014fa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014de:	4b88      	ldr	r3, [pc, #544]	; (8001700 <HAL_RCC_OscConfig+0x4c4>)
 80014e0:	69db      	ldr	r3, [r3, #28]
 80014e2:	4a87      	ldr	r2, [pc, #540]	; (8001700 <HAL_RCC_OscConfig+0x4c4>)
 80014e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014e8:	61d3      	str	r3, [r2, #28]
 80014ea:	4b85      	ldr	r3, [pc, #532]	; (8001700 <HAL_RCC_OscConfig+0x4c4>)
 80014ec:	69db      	ldr	r3, [r3, #28]
 80014ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014f2:	60bb      	str	r3, [r7, #8]
 80014f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014f6:	2301      	movs	r3, #1
 80014f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014fa:	4b82      	ldr	r3, [pc, #520]	; (8001704 <HAL_RCC_OscConfig+0x4c8>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001502:	2b00      	cmp	r3, #0
 8001504:	d118      	bne.n	8001538 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001506:	4b7f      	ldr	r3, [pc, #508]	; (8001704 <HAL_RCC_OscConfig+0x4c8>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a7e      	ldr	r2, [pc, #504]	; (8001704 <HAL_RCC_OscConfig+0x4c8>)
 800150c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001510:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001512:	f7ff f9bf 	bl	8000894 <HAL_GetTick>
 8001516:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001518:	e008      	b.n	800152c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800151a:	f7ff f9bb 	bl	8000894 <HAL_GetTick>
 800151e:	4602      	mov	r2, r0
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	2b64      	cmp	r3, #100	; 0x64
 8001526:	d901      	bls.n	800152c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001528:	2303      	movs	r3, #3
 800152a:	e103      	b.n	8001734 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800152c:	4b75      	ldr	r3, [pc, #468]	; (8001704 <HAL_RCC_OscConfig+0x4c8>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001534:	2b00      	cmp	r3, #0
 8001536:	d0f0      	beq.n	800151a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	2b01      	cmp	r3, #1
 800153e:	d106      	bne.n	800154e <HAL_RCC_OscConfig+0x312>
 8001540:	4b6f      	ldr	r3, [pc, #444]	; (8001700 <HAL_RCC_OscConfig+0x4c4>)
 8001542:	6a1b      	ldr	r3, [r3, #32]
 8001544:	4a6e      	ldr	r2, [pc, #440]	; (8001700 <HAL_RCC_OscConfig+0x4c4>)
 8001546:	f043 0301 	orr.w	r3, r3, #1
 800154a:	6213      	str	r3, [r2, #32]
 800154c:	e02d      	b.n	80015aa <HAL_RCC_OscConfig+0x36e>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	68db      	ldr	r3, [r3, #12]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d10c      	bne.n	8001570 <HAL_RCC_OscConfig+0x334>
 8001556:	4b6a      	ldr	r3, [pc, #424]	; (8001700 <HAL_RCC_OscConfig+0x4c4>)
 8001558:	6a1b      	ldr	r3, [r3, #32]
 800155a:	4a69      	ldr	r2, [pc, #420]	; (8001700 <HAL_RCC_OscConfig+0x4c4>)
 800155c:	f023 0301 	bic.w	r3, r3, #1
 8001560:	6213      	str	r3, [r2, #32]
 8001562:	4b67      	ldr	r3, [pc, #412]	; (8001700 <HAL_RCC_OscConfig+0x4c4>)
 8001564:	6a1b      	ldr	r3, [r3, #32]
 8001566:	4a66      	ldr	r2, [pc, #408]	; (8001700 <HAL_RCC_OscConfig+0x4c4>)
 8001568:	f023 0304 	bic.w	r3, r3, #4
 800156c:	6213      	str	r3, [r2, #32]
 800156e:	e01c      	b.n	80015aa <HAL_RCC_OscConfig+0x36e>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	2b05      	cmp	r3, #5
 8001576:	d10c      	bne.n	8001592 <HAL_RCC_OscConfig+0x356>
 8001578:	4b61      	ldr	r3, [pc, #388]	; (8001700 <HAL_RCC_OscConfig+0x4c4>)
 800157a:	6a1b      	ldr	r3, [r3, #32]
 800157c:	4a60      	ldr	r2, [pc, #384]	; (8001700 <HAL_RCC_OscConfig+0x4c4>)
 800157e:	f043 0304 	orr.w	r3, r3, #4
 8001582:	6213      	str	r3, [r2, #32]
 8001584:	4b5e      	ldr	r3, [pc, #376]	; (8001700 <HAL_RCC_OscConfig+0x4c4>)
 8001586:	6a1b      	ldr	r3, [r3, #32]
 8001588:	4a5d      	ldr	r2, [pc, #372]	; (8001700 <HAL_RCC_OscConfig+0x4c4>)
 800158a:	f043 0301 	orr.w	r3, r3, #1
 800158e:	6213      	str	r3, [r2, #32]
 8001590:	e00b      	b.n	80015aa <HAL_RCC_OscConfig+0x36e>
 8001592:	4b5b      	ldr	r3, [pc, #364]	; (8001700 <HAL_RCC_OscConfig+0x4c4>)
 8001594:	6a1b      	ldr	r3, [r3, #32]
 8001596:	4a5a      	ldr	r2, [pc, #360]	; (8001700 <HAL_RCC_OscConfig+0x4c4>)
 8001598:	f023 0301 	bic.w	r3, r3, #1
 800159c:	6213      	str	r3, [r2, #32]
 800159e:	4b58      	ldr	r3, [pc, #352]	; (8001700 <HAL_RCC_OscConfig+0x4c4>)
 80015a0:	6a1b      	ldr	r3, [r3, #32]
 80015a2:	4a57      	ldr	r2, [pc, #348]	; (8001700 <HAL_RCC_OscConfig+0x4c4>)
 80015a4:	f023 0304 	bic.w	r3, r3, #4
 80015a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	68db      	ldr	r3, [r3, #12]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d015      	beq.n	80015de <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015b2:	f7ff f96f 	bl	8000894 <HAL_GetTick>
 80015b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015b8:	e00a      	b.n	80015d0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015ba:	f7ff f96b 	bl	8000894 <HAL_GetTick>
 80015be:	4602      	mov	r2, r0
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d901      	bls.n	80015d0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80015cc:	2303      	movs	r3, #3
 80015ce:	e0b1      	b.n	8001734 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015d0:	4b4b      	ldr	r3, [pc, #300]	; (8001700 <HAL_RCC_OscConfig+0x4c4>)
 80015d2:	6a1b      	ldr	r3, [r3, #32]
 80015d4:	f003 0302 	and.w	r3, r3, #2
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d0ee      	beq.n	80015ba <HAL_RCC_OscConfig+0x37e>
 80015dc:	e014      	b.n	8001608 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015de:	f7ff f959 	bl	8000894 <HAL_GetTick>
 80015e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015e4:	e00a      	b.n	80015fc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015e6:	f7ff f955 	bl	8000894 <HAL_GetTick>
 80015ea:	4602      	mov	r2, r0
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d901      	bls.n	80015fc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80015f8:	2303      	movs	r3, #3
 80015fa:	e09b      	b.n	8001734 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015fc:	4b40      	ldr	r3, [pc, #256]	; (8001700 <HAL_RCC_OscConfig+0x4c4>)
 80015fe:	6a1b      	ldr	r3, [r3, #32]
 8001600:	f003 0302 	and.w	r3, r3, #2
 8001604:	2b00      	cmp	r3, #0
 8001606:	d1ee      	bne.n	80015e6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001608:	7dfb      	ldrb	r3, [r7, #23]
 800160a:	2b01      	cmp	r3, #1
 800160c:	d105      	bne.n	800161a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800160e:	4b3c      	ldr	r3, [pc, #240]	; (8001700 <HAL_RCC_OscConfig+0x4c4>)
 8001610:	69db      	ldr	r3, [r3, #28]
 8001612:	4a3b      	ldr	r2, [pc, #236]	; (8001700 <HAL_RCC_OscConfig+0x4c4>)
 8001614:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001618:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	69db      	ldr	r3, [r3, #28]
 800161e:	2b00      	cmp	r3, #0
 8001620:	f000 8087 	beq.w	8001732 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001624:	4b36      	ldr	r3, [pc, #216]	; (8001700 <HAL_RCC_OscConfig+0x4c4>)
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f003 030c 	and.w	r3, r3, #12
 800162c:	2b08      	cmp	r3, #8
 800162e:	d061      	beq.n	80016f4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	69db      	ldr	r3, [r3, #28]
 8001634:	2b02      	cmp	r3, #2
 8001636:	d146      	bne.n	80016c6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001638:	4b33      	ldr	r3, [pc, #204]	; (8001708 <HAL_RCC_OscConfig+0x4cc>)
 800163a:	2200      	movs	r2, #0
 800163c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800163e:	f7ff f929 	bl	8000894 <HAL_GetTick>
 8001642:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001644:	e008      	b.n	8001658 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001646:	f7ff f925 	bl	8000894 <HAL_GetTick>
 800164a:	4602      	mov	r2, r0
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	2b02      	cmp	r3, #2
 8001652:	d901      	bls.n	8001658 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e06d      	b.n	8001734 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001658:	4b29      	ldr	r3, [pc, #164]	; (8001700 <HAL_RCC_OscConfig+0x4c4>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001660:	2b00      	cmp	r3, #0
 8001662:	d1f0      	bne.n	8001646 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6a1b      	ldr	r3, [r3, #32]
 8001668:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800166c:	d108      	bne.n	8001680 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800166e:	4b24      	ldr	r3, [pc, #144]	; (8001700 <HAL_RCC_OscConfig+0x4c4>)
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	4921      	ldr	r1, [pc, #132]	; (8001700 <HAL_RCC_OscConfig+0x4c4>)
 800167c:	4313      	orrs	r3, r2
 800167e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001680:	4b1f      	ldr	r3, [pc, #124]	; (8001700 <HAL_RCC_OscConfig+0x4c4>)
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6a19      	ldr	r1, [r3, #32]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001690:	430b      	orrs	r3, r1
 8001692:	491b      	ldr	r1, [pc, #108]	; (8001700 <HAL_RCC_OscConfig+0x4c4>)
 8001694:	4313      	orrs	r3, r2
 8001696:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001698:	4b1b      	ldr	r3, [pc, #108]	; (8001708 <HAL_RCC_OscConfig+0x4cc>)
 800169a:	2201      	movs	r2, #1
 800169c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800169e:	f7ff f8f9 	bl	8000894 <HAL_GetTick>
 80016a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016a4:	e008      	b.n	80016b8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016a6:	f7ff f8f5 	bl	8000894 <HAL_GetTick>
 80016aa:	4602      	mov	r2, r0
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d901      	bls.n	80016b8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80016b4:	2303      	movs	r3, #3
 80016b6:	e03d      	b.n	8001734 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016b8:	4b11      	ldr	r3, [pc, #68]	; (8001700 <HAL_RCC_OscConfig+0x4c4>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d0f0      	beq.n	80016a6 <HAL_RCC_OscConfig+0x46a>
 80016c4:	e035      	b.n	8001732 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016c6:	4b10      	ldr	r3, [pc, #64]	; (8001708 <HAL_RCC_OscConfig+0x4cc>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016cc:	f7ff f8e2 	bl	8000894 <HAL_GetTick>
 80016d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016d2:	e008      	b.n	80016e6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016d4:	f7ff f8de 	bl	8000894 <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e026      	b.n	8001734 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016e6:	4b06      	ldr	r3, [pc, #24]	; (8001700 <HAL_RCC_OscConfig+0x4c4>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d1f0      	bne.n	80016d4 <HAL_RCC_OscConfig+0x498>
 80016f2:	e01e      	b.n	8001732 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	69db      	ldr	r3, [r3, #28]
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d107      	bne.n	800170c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e019      	b.n	8001734 <HAL_RCC_OscConfig+0x4f8>
 8001700:	40021000 	.word	0x40021000
 8001704:	40007000 	.word	0x40007000
 8001708:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800170c:	4b0b      	ldr	r3, [pc, #44]	; (800173c <HAL_RCC_OscConfig+0x500>)
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6a1b      	ldr	r3, [r3, #32]
 800171c:	429a      	cmp	r2, r3
 800171e:	d106      	bne.n	800172e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800172a:	429a      	cmp	r2, r3
 800172c:	d001      	beq.n	8001732 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e000      	b.n	8001734 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001732:	2300      	movs	r3, #0
}
 8001734:	4618      	mov	r0, r3
 8001736:	3718      	adds	r7, #24
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	40021000 	.word	0x40021000

08001740 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d101      	bne.n	8001754 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	e0d0      	b.n	80018f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001754:	4b6a      	ldr	r3, [pc, #424]	; (8001900 <HAL_RCC_ClockConfig+0x1c0>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0307 	and.w	r3, r3, #7
 800175c:	683a      	ldr	r2, [r7, #0]
 800175e:	429a      	cmp	r2, r3
 8001760:	d910      	bls.n	8001784 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001762:	4b67      	ldr	r3, [pc, #412]	; (8001900 <HAL_RCC_ClockConfig+0x1c0>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f023 0207 	bic.w	r2, r3, #7
 800176a:	4965      	ldr	r1, [pc, #404]	; (8001900 <HAL_RCC_ClockConfig+0x1c0>)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	4313      	orrs	r3, r2
 8001770:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001772:	4b63      	ldr	r3, [pc, #396]	; (8001900 <HAL_RCC_ClockConfig+0x1c0>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 0307 	and.w	r3, r3, #7
 800177a:	683a      	ldr	r2, [r7, #0]
 800177c:	429a      	cmp	r2, r3
 800177e:	d001      	beq.n	8001784 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e0b8      	b.n	80018f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0302 	and.w	r3, r3, #2
 800178c:	2b00      	cmp	r3, #0
 800178e:	d020      	beq.n	80017d2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0304 	and.w	r3, r3, #4
 8001798:	2b00      	cmp	r3, #0
 800179a:	d005      	beq.n	80017a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800179c:	4b59      	ldr	r3, [pc, #356]	; (8001904 <HAL_RCC_ClockConfig+0x1c4>)
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	4a58      	ldr	r2, [pc, #352]	; (8001904 <HAL_RCC_ClockConfig+0x1c4>)
 80017a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80017a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0308 	and.w	r3, r3, #8
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d005      	beq.n	80017c0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017b4:	4b53      	ldr	r3, [pc, #332]	; (8001904 <HAL_RCC_ClockConfig+0x1c4>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	4a52      	ldr	r2, [pc, #328]	; (8001904 <HAL_RCC_ClockConfig+0x1c4>)
 80017ba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80017be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017c0:	4b50      	ldr	r3, [pc, #320]	; (8001904 <HAL_RCC_ClockConfig+0x1c4>)
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	494d      	ldr	r1, [pc, #308]	; (8001904 <HAL_RCC_ClockConfig+0x1c4>)
 80017ce:	4313      	orrs	r3, r2
 80017d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0301 	and.w	r3, r3, #1
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d040      	beq.n	8001860 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d107      	bne.n	80017f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017e6:	4b47      	ldr	r3, [pc, #284]	; (8001904 <HAL_RCC_ClockConfig+0x1c4>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d115      	bne.n	800181e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e07f      	b.n	80018f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d107      	bne.n	800180e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017fe:	4b41      	ldr	r3, [pc, #260]	; (8001904 <HAL_RCC_ClockConfig+0x1c4>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d109      	bne.n	800181e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e073      	b.n	80018f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800180e:	4b3d      	ldr	r3, [pc, #244]	; (8001904 <HAL_RCC_ClockConfig+0x1c4>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	2b00      	cmp	r3, #0
 8001818:	d101      	bne.n	800181e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e06b      	b.n	80018f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800181e:	4b39      	ldr	r3, [pc, #228]	; (8001904 <HAL_RCC_ClockConfig+0x1c4>)
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f023 0203 	bic.w	r2, r3, #3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	4936      	ldr	r1, [pc, #216]	; (8001904 <HAL_RCC_ClockConfig+0x1c4>)
 800182c:	4313      	orrs	r3, r2
 800182e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001830:	f7ff f830 	bl	8000894 <HAL_GetTick>
 8001834:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001836:	e00a      	b.n	800184e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001838:	f7ff f82c 	bl	8000894 <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	f241 3288 	movw	r2, #5000	; 0x1388
 8001846:	4293      	cmp	r3, r2
 8001848:	d901      	bls.n	800184e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e053      	b.n	80018f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800184e:	4b2d      	ldr	r3, [pc, #180]	; (8001904 <HAL_RCC_ClockConfig+0x1c4>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f003 020c 	and.w	r2, r3, #12
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	429a      	cmp	r2, r3
 800185e:	d1eb      	bne.n	8001838 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001860:	4b27      	ldr	r3, [pc, #156]	; (8001900 <HAL_RCC_ClockConfig+0x1c0>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0307 	and.w	r3, r3, #7
 8001868:	683a      	ldr	r2, [r7, #0]
 800186a:	429a      	cmp	r2, r3
 800186c:	d210      	bcs.n	8001890 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800186e:	4b24      	ldr	r3, [pc, #144]	; (8001900 <HAL_RCC_ClockConfig+0x1c0>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f023 0207 	bic.w	r2, r3, #7
 8001876:	4922      	ldr	r1, [pc, #136]	; (8001900 <HAL_RCC_ClockConfig+0x1c0>)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	4313      	orrs	r3, r2
 800187c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800187e:	4b20      	ldr	r3, [pc, #128]	; (8001900 <HAL_RCC_ClockConfig+0x1c0>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0307 	and.w	r3, r3, #7
 8001886:	683a      	ldr	r2, [r7, #0]
 8001888:	429a      	cmp	r2, r3
 800188a:	d001      	beq.n	8001890 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e032      	b.n	80018f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0304 	and.w	r3, r3, #4
 8001898:	2b00      	cmp	r3, #0
 800189a:	d008      	beq.n	80018ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800189c:	4b19      	ldr	r3, [pc, #100]	; (8001904 <HAL_RCC_ClockConfig+0x1c4>)
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	4916      	ldr	r1, [pc, #88]	; (8001904 <HAL_RCC_ClockConfig+0x1c4>)
 80018aa:	4313      	orrs	r3, r2
 80018ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0308 	and.w	r3, r3, #8
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d009      	beq.n	80018ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80018ba:	4b12      	ldr	r3, [pc, #72]	; (8001904 <HAL_RCC_ClockConfig+0x1c4>)
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	691b      	ldr	r3, [r3, #16]
 80018c6:	00db      	lsls	r3, r3, #3
 80018c8:	490e      	ldr	r1, [pc, #56]	; (8001904 <HAL_RCC_ClockConfig+0x1c4>)
 80018ca:	4313      	orrs	r3, r2
 80018cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018ce:	f000 f821 	bl	8001914 <HAL_RCC_GetSysClockFreq>
 80018d2:	4602      	mov	r2, r0
 80018d4:	4b0b      	ldr	r3, [pc, #44]	; (8001904 <HAL_RCC_ClockConfig+0x1c4>)
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	091b      	lsrs	r3, r3, #4
 80018da:	f003 030f 	and.w	r3, r3, #15
 80018de:	490a      	ldr	r1, [pc, #40]	; (8001908 <HAL_RCC_ClockConfig+0x1c8>)
 80018e0:	5ccb      	ldrb	r3, [r1, r3]
 80018e2:	fa22 f303 	lsr.w	r3, r2, r3
 80018e6:	4a09      	ldr	r2, [pc, #36]	; (800190c <HAL_RCC_ClockConfig+0x1cc>)
 80018e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80018ea:	4b09      	ldr	r3, [pc, #36]	; (8001910 <HAL_RCC_ClockConfig+0x1d0>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7fe feb4 	bl	800065c <HAL_InitTick>

  return HAL_OK;
 80018f4:	2300      	movs	r3, #0
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3710      	adds	r7, #16
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	40022000 	.word	0x40022000
 8001904:	40021000 	.word	0x40021000
 8001908:	08005638 	.word	0x08005638
 800190c:	20000000 	.word	0x20000000
 8001910:	20000004 	.word	0x20000004

08001914 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001914:	b480      	push	{r7}
 8001916:	b087      	sub	sp, #28
 8001918:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800191a:	2300      	movs	r3, #0
 800191c:	60fb      	str	r3, [r7, #12]
 800191e:	2300      	movs	r3, #0
 8001920:	60bb      	str	r3, [r7, #8]
 8001922:	2300      	movs	r3, #0
 8001924:	617b      	str	r3, [r7, #20]
 8001926:	2300      	movs	r3, #0
 8001928:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800192a:	2300      	movs	r3, #0
 800192c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800192e:	4b1e      	ldr	r3, [pc, #120]	; (80019a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	f003 030c 	and.w	r3, r3, #12
 800193a:	2b04      	cmp	r3, #4
 800193c:	d002      	beq.n	8001944 <HAL_RCC_GetSysClockFreq+0x30>
 800193e:	2b08      	cmp	r3, #8
 8001940:	d003      	beq.n	800194a <HAL_RCC_GetSysClockFreq+0x36>
 8001942:	e027      	b.n	8001994 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001944:	4b19      	ldr	r3, [pc, #100]	; (80019ac <HAL_RCC_GetSysClockFreq+0x98>)
 8001946:	613b      	str	r3, [r7, #16]
      break;
 8001948:	e027      	b.n	800199a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	0c9b      	lsrs	r3, r3, #18
 800194e:	f003 030f 	and.w	r3, r3, #15
 8001952:	4a17      	ldr	r2, [pc, #92]	; (80019b0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001954:	5cd3      	ldrb	r3, [r2, r3]
 8001956:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d010      	beq.n	8001984 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001962:	4b11      	ldr	r3, [pc, #68]	; (80019a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	0c5b      	lsrs	r3, r3, #17
 8001968:	f003 0301 	and.w	r3, r3, #1
 800196c:	4a11      	ldr	r2, [pc, #68]	; (80019b4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800196e:	5cd3      	ldrb	r3, [r2, r3]
 8001970:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4a0d      	ldr	r2, [pc, #52]	; (80019ac <HAL_RCC_GetSysClockFreq+0x98>)
 8001976:	fb03 f202 	mul.w	r2, r3, r2
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001980:	617b      	str	r3, [r7, #20]
 8001982:	e004      	b.n	800198e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	4a0c      	ldr	r2, [pc, #48]	; (80019b8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001988:	fb02 f303 	mul.w	r3, r2, r3
 800198c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	613b      	str	r3, [r7, #16]
      break;
 8001992:	e002      	b.n	800199a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001994:	4b05      	ldr	r3, [pc, #20]	; (80019ac <HAL_RCC_GetSysClockFreq+0x98>)
 8001996:	613b      	str	r3, [r7, #16]
      break;
 8001998:	bf00      	nop
    }
  }
  return sysclockfreq;
 800199a:	693b      	ldr	r3, [r7, #16]
}
 800199c:	4618      	mov	r0, r3
 800199e:	371c      	adds	r7, #28
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bc80      	pop	{r7}
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	40021000 	.word	0x40021000
 80019ac:	007a1200 	.word	0x007a1200
 80019b0:	08005650 	.word	0x08005650
 80019b4:	08005660 	.word	0x08005660
 80019b8:	003d0900 	.word	0x003d0900

080019bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019c0:	4b02      	ldr	r3, [pc, #8]	; (80019cc <HAL_RCC_GetHCLKFreq+0x10>)
 80019c2:	681b      	ldr	r3, [r3, #0]
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bc80      	pop	{r7}
 80019ca:	4770      	bx	lr
 80019cc:	20000000 	.word	0x20000000

080019d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80019d4:	f7ff fff2 	bl	80019bc <HAL_RCC_GetHCLKFreq>
 80019d8:	4602      	mov	r2, r0
 80019da:	4b05      	ldr	r3, [pc, #20]	; (80019f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	0a1b      	lsrs	r3, r3, #8
 80019e0:	f003 0307 	and.w	r3, r3, #7
 80019e4:	4903      	ldr	r1, [pc, #12]	; (80019f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019e6:	5ccb      	ldrb	r3, [r1, r3]
 80019e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40021000 	.word	0x40021000
 80019f4:	08005648 	.word	0x08005648

080019f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80019fc:	f7ff ffde 	bl	80019bc <HAL_RCC_GetHCLKFreq>
 8001a00:	4602      	mov	r2, r0
 8001a02:	4b05      	ldr	r3, [pc, #20]	; (8001a18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	0adb      	lsrs	r3, r3, #11
 8001a08:	f003 0307 	and.w	r3, r3, #7
 8001a0c:	4903      	ldr	r1, [pc, #12]	; (8001a1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a0e:	5ccb      	ldrb	r3, [r1, r3]
 8001a10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	40021000 	.word	0x40021000
 8001a1c:	08005648 	.word	0x08005648

08001a20 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	220f      	movs	r2, #15
 8001a2e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a30:	4b11      	ldr	r3, [pc, #68]	; (8001a78 <HAL_RCC_GetClockConfig+0x58>)
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f003 0203 	and.w	r2, r3, #3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001a3c:	4b0e      	ldr	r3, [pc, #56]	; (8001a78 <HAL_RCC_GetClockConfig+0x58>)
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001a48:	4b0b      	ldr	r3, [pc, #44]	; (8001a78 <HAL_RCC_GetClockConfig+0x58>)
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001a54:	4b08      	ldr	r3, [pc, #32]	; (8001a78 <HAL_RCC_GetClockConfig+0x58>)
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	08db      	lsrs	r3, r3, #3
 8001a5a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001a62:	4b06      	ldr	r3, [pc, #24]	; (8001a7c <HAL_RCC_GetClockConfig+0x5c>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0207 	and.w	r2, r3, #7
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001a6e:	bf00      	nop
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bc80      	pop	{r7}
 8001a76:	4770      	bx	lr
 8001a78:	40021000 	.word	0x40021000
 8001a7c:	40022000 	.word	0x40022000

08001a80 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b085      	sub	sp, #20
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a88:	4b0a      	ldr	r3, [pc, #40]	; (8001ab4 <RCC_Delay+0x34>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a0a      	ldr	r2, [pc, #40]	; (8001ab8 <RCC_Delay+0x38>)
 8001a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a92:	0a5b      	lsrs	r3, r3, #9
 8001a94:	687a      	ldr	r2, [r7, #4]
 8001a96:	fb02 f303 	mul.w	r3, r2, r3
 8001a9a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001a9c:	bf00      	nop
  }
  while (Delay --);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	1e5a      	subs	r2, r3, #1
 8001aa2:	60fa      	str	r2, [r7, #12]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d1f9      	bne.n	8001a9c <RCC_Delay+0x1c>
}
 8001aa8:	bf00      	nop
 8001aaa:	bf00      	nop
 8001aac:	3714      	adds	r7, #20
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bc80      	pop	{r7}
 8001ab2:	4770      	bx	lr
 8001ab4:	20000000 	.word	0x20000000
 8001ab8:	10624dd3 	.word	0x10624dd3

08001abc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d101      	bne.n	8001ace <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e041      	b.n	8001b52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d106      	bne.n	8001ae8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2200      	movs	r2, #0
 8001ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f000 f839 	bl	8001b5a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2202      	movs	r2, #2
 8001aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	3304      	adds	r3, #4
 8001af8:	4619      	mov	r1, r3
 8001afa:	4610      	mov	r0, r2
 8001afc:	f000 f9b4 	bl	8001e68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2201      	movs	r2, #1
 8001b04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2201      	movs	r2, #1
 8001b14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2201      	movs	r2, #1
 8001b24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2201      	movs	r2, #1
 8001b34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2201      	movs	r2, #1
 8001b44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	b083      	sub	sp, #12
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001b62:	bf00      	nop
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bc80      	pop	{r7}
 8001b6a:	4770      	bx	lr

08001b6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b085      	sub	sp, #20
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d001      	beq.n	8001b84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e03a      	b.n	8001bfa <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2202      	movs	r2, #2
 8001b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	68da      	ldr	r2, [r3, #12]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f042 0201 	orr.w	r2, r2, #1
 8001b9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a18      	ldr	r2, [pc, #96]	; (8001c04 <HAL_TIM_Base_Start_IT+0x98>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d00e      	beq.n	8001bc4 <HAL_TIM_Base_Start_IT+0x58>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bae:	d009      	beq.n	8001bc4 <HAL_TIM_Base_Start_IT+0x58>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a14      	ldr	r2, [pc, #80]	; (8001c08 <HAL_TIM_Base_Start_IT+0x9c>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d004      	beq.n	8001bc4 <HAL_TIM_Base_Start_IT+0x58>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a13      	ldr	r2, [pc, #76]	; (8001c0c <HAL_TIM_Base_Start_IT+0xa0>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d111      	bne.n	8001be8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	f003 0307 	and.w	r3, r3, #7
 8001bce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2b06      	cmp	r3, #6
 8001bd4:	d010      	beq.n	8001bf8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f042 0201 	orr.w	r2, r2, #1
 8001be4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001be6:	e007      	b.n	8001bf8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f042 0201 	orr.w	r2, r2, #1
 8001bf6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3714      	adds	r7, #20
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bc80      	pop	{r7}
 8001c02:	4770      	bx	lr
 8001c04:	40012c00 	.word	0x40012c00
 8001c08:	40000400 	.word	0x40000400
 8001c0c:	40000800 	.word	0x40000800

08001c10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	691b      	ldr	r3, [r3, #16]
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d122      	bne.n	8001c6c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	f003 0302 	and.w	r3, r3, #2
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d11b      	bne.n	8001c6c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f06f 0202 	mvn.w	r2, #2
 8001c3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2201      	movs	r2, #1
 8001c42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	699b      	ldr	r3, [r3, #24]
 8001c4a:	f003 0303 	and.w	r3, r3, #3
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d003      	beq.n	8001c5a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f000 f8ed 	bl	8001e32 <HAL_TIM_IC_CaptureCallback>
 8001c58:	e005      	b.n	8001c66 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f000 f8e0 	bl	8001e20 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f000 f8ef 	bl	8001e44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	691b      	ldr	r3, [r3, #16]
 8001c72:	f003 0304 	and.w	r3, r3, #4
 8001c76:	2b04      	cmp	r3, #4
 8001c78:	d122      	bne.n	8001cc0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	f003 0304 	and.w	r3, r3, #4
 8001c84:	2b04      	cmp	r3, #4
 8001c86:	d11b      	bne.n	8001cc0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f06f 0204 	mvn.w	r2, #4
 8001c90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2202      	movs	r2, #2
 8001c96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	699b      	ldr	r3, [r3, #24]
 8001c9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d003      	beq.n	8001cae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f000 f8c3 	bl	8001e32 <HAL_TIM_IC_CaptureCallback>
 8001cac:	e005      	b.n	8001cba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f000 f8b6 	bl	8001e20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f000 f8c5 	bl	8001e44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	691b      	ldr	r3, [r3, #16]
 8001cc6:	f003 0308 	and.w	r3, r3, #8
 8001cca:	2b08      	cmp	r3, #8
 8001ccc:	d122      	bne.n	8001d14 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	f003 0308 	and.w	r3, r3, #8
 8001cd8:	2b08      	cmp	r3, #8
 8001cda:	d11b      	bne.n	8001d14 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f06f 0208 	mvn.w	r2, #8
 8001ce4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2204      	movs	r2, #4
 8001cea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	69db      	ldr	r3, [r3, #28]
 8001cf2:	f003 0303 	and.w	r3, r3, #3
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d003      	beq.n	8001d02 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f000 f899 	bl	8001e32 <HAL_TIM_IC_CaptureCallback>
 8001d00:	e005      	b.n	8001d0e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f000 f88c 	bl	8001e20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f000 f89b 	bl	8001e44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	691b      	ldr	r3, [r3, #16]
 8001d1a:	f003 0310 	and.w	r3, r3, #16
 8001d1e:	2b10      	cmp	r3, #16
 8001d20:	d122      	bne.n	8001d68 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	f003 0310 	and.w	r3, r3, #16
 8001d2c:	2b10      	cmp	r3, #16
 8001d2e:	d11b      	bne.n	8001d68 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f06f 0210 	mvn.w	r2, #16
 8001d38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2208      	movs	r2, #8
 8001d3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	69db      	ldr	r3, [r3, #28]
 8001d46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d003      	beq.n	8001d56 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f000 f86f 	bl	8001e32 <HAL_TIM_IC_CaptureCallback>
 8001d54:	e005      	b.n	8001d62 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f000 f862 	bl	8001e20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f000 f871 	bl	8001e44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	691b      	ldr	r3, [r3, #16]
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d10e      	bne.n	8001d94 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	f003 0301 	and.w	r3, r3, #1
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d107      	bne.n	8001d94 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f06f 0201 	mvn.w	r2, #1
 8001d8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f7fe fb68 	bl	8000464 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	691b      	ldr	r3, [r3, #16]
 8001d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d9e:	2b80      	cmp	r3, #128	; 0x80
 8001da0:	d10e      	bne.n	8001dc0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dac:	2b80      	cmp	r3, #128	; 0x80
 8001dae:	d107      	bne.n	8001dc0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001db8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f000 f8bf 	bl	8001f3e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	691b      	ldr	r3, [r3, #16]
 8001dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dca:	2b40      	cmp	r3, #64	; 0x40
 8001dcc:	d10e      	bne.n	8001dec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dd8:	2b40      	cmp	r3, #64	; 0x40
 8001dda:	d107      	bne.n	8001dec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001de4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f000 f835 	bl	8001e56 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	691b      	ldr	r3, [r3, #16]
 8001df2:	f003 0320 	and.w	r3, r3, #32
 8001df6:	2b20      	cmp	r3, #32
 8001df8:	d10e      	bne.n	8001e18 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	f003 0320 	and.w	r3, r3, #32
 8001e04:	2b20      	cmp	r3, #32
 8001e06:	d107      	bne.n	8001e18 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f06f 0220 	mvn.w	r2, #32
 8001e10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f000 f88a 	bl	8001f2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e18:	bf00      	nop
 8001e1a:	3708      	adds	r7, #8
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e28:	bf00      	nop
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bc80      	pop	{r7}
 8001e30:	4770      	bx	lr

08001e32 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e32:	b480      	push	{r7}
 8001e34:	b083      	sub	sp, #12
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e3a:	bf00      	nop
 8001e3c:	370c      	adds	r7, #12
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bc80      	pop	{r7}
 8001e42:	4770      	bx	lr

08001e44 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e4c:	bf00      	nop
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bc80      	pop	{r7}
 8001e54:	4770      	bx	lr

08001e56 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e56:	b480      	push	{r7}
 8001e58:	b083      	sub	sp, #12
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e5e:	bf00      	nop
 8001e60:	370c      	adds	r7, #12
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bc80      	pop	{r7}
 8001e66:	4770      	bx	lr

08001e68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b085      	sub	sp, #20
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	4a29      	ldr	r2, [pc, #164]	; (8001f20 <TIM_Base_SetConfig+0xb8>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d00b      	beq.n	8001e98 <TIM_Base_SetConfig+0x30>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e86:	d007      	beq.n	8001e98 <TIM_Base_SetConfig+0x30>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	4a26      	ldr	r2, [pc, #152]	; (8001f24 <TIM_Base_SetConfig+0xbc>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d003      	beq.n	8001e98 <TIM_Base_SetConfig+0x30>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	4a25      	ldr	r2, [pc, #148]	; (8001f28 <TIM_Base_SetConfig+0xc0>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d108      	bne.n	8001eaa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	68fa      	ldr	r2, [r7, #12]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a1c      	ldr	r2, [pc, #112]	; (8001f20 <TIM_Base_SetConfig+0xb8>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d00b      	beq.n	8001eca <TIM_Base_SetConfig+0x62>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eb8:	d007      	beq.n	8001eca <TIM_Base_SetConfig+0x62>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a19      	ldr	r2, [pc, #100]	; (8001f24 <TIM_Base_SetConfig+0xbc>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d003      	beq.n	8001eca <TIM_Base_SetConfig+0x62>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a18      	ldr	r2, [pc, #96]	; (8001f28 <TIM_Base_SetConfig+0xc0>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d108      	bne.n	8001edc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ed0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	68fa      	ldr	r2, [r7, #12]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	695b      	ldr	r3, [r3, #20]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	68fa      	ldr	r2, [r7, #12]
 8001eee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	689a      	ldr	r2, [r3, #8]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	4a07      	ldr	r2, [pc, #28]	; (8001f20 <TIM_Base_SetConfig+0xb8>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d103      	bne.n	8001f10 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	691a      	ldr	r2, [r3, #16]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2201      	movs	r2, #1
 8001f14:	615a      	str	r2, [r3, #20]
}
 8001f16:	bf00      	nop
 8001f18:	3714      	adds	r7, #20
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bc80      	pop	{r7}
 8001f1e:	4770      	bx	lr
 8001f20:	40012c00 	.word	0x40012c00
 8001f24:	40000400 	.word	0x40000400
 8001f28:	40000800 	.word	0x40000800

08001f2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bc80      	pop	{r7}
 8001f3c:	4770      	bx	lr

08001f3e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f3e:	b480      	push	{r7}
 8001f40:	b083      	sub	sp, #12
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001f46:	bf00      	nop
 8001f48:	370c      	adds	r7, #12
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bc80      	pop	{r7}
 8001f4e:	4770      	bx	lr

08001f50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d101      	bne.n	8001f62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e042      	b.n	8001fe8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d106      	bne.n	8001f7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f7fe fac8 	bl	800050c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2224      	movs	r2, #36	; 0x24
 8001f80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	68da      	ldr	r2, [r3, #12]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f000 fc7f 	bl	8002898 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	691a      	ldr	r2, [r3, #16]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001fa8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	695a      	ldr	r2, [r3, #20]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001fb8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	68da      	ldr	r2, [r3, #12]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001fc8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2220      	movs	r2, #32
 8001fd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2220      	movs	r2, #32
 8001fdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001fe6:	2300      	movs	r3, #0
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3708      	adds	r7, #8
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}

08001ff0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b0ba      	sub	sp, #232	; 0xe8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	695b      	ldr	r3, [r3, #20]
 8002012:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002016:	2300      	movs	r3, #0
 8002018:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800201c:	2300      	movs	r3, #0
 800201e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002026:	f003 030f 	and.w	r3, r3, #15
 800202a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800202e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002032:	2b00      	cmp	r3, #0
 8002034:	d10f      	bne.n	8002056 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002036:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800203a:	f003 0320 	and.w	r3, r3, #32
 800203e:	2b00      	cmp	r3, #0
 8002040:	d009      	beq.n	8002056 <HAL_UART_IRQHandler+0x66>
 8002042:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002046:	f003 0320 	and.w	r3, r3, #32
 800204a:	2b00      	cmp	r3, #0
 800204c:	d003      	beq.n	8002056 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f000 fb63 	bl	800271a <UART_Receive_IT>
      return;
 8002054:	e25b      	b.n	800250e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002056:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800205a:	2b00      	cmp	r3, #0
 800205c:	f000 80de 	beq.w	800221c <HAL_UART_IRQHandler+0x22c>
 8002060:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002064:	f003 0301 	and.w	r3, r3, #1
 8002068:	2b00      	cmp	r3, #0
 800206a:	d106      	bne.n	800207a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800206c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002070:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002074:	2b00      	cmp	r3, #0
 8002076:	f000 80d1 	beq.w	800221c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800207a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800207e:	f003 0301 	and.w	r3, r3, #1
 8002082:	2b00      	cmp	r3, #0
 8002084:	d00b      	beq.n	800209e <HAL_UART_IRQHandler+0xae>
 8002086:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800208a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800208e:	2b00      	cmp	r3, #0
 8002090:	d005      	beq.n	800209e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002096:	f043 0201 	orr.w	r2, r3, #1
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800209e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80020a2:	f003 0304 	and.w	r3, r3, #4
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d00b      	beq.n	80020c2 <HAL_UART_IRQHandler+0xd2>
 80020aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80020ae:	f003 0301 	and.w	r3, r3, #1
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d005      	beq.n	80020c2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ba:	f043 0202 	orr.w	r2, r3, #2
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80020c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d00b      	beq.n	80020e6 <HAL_UART_IRQHandler+0xf6>
 80020ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d005      	beq.n	80020e6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020de:	f043 0204 	orr.w	r2, r3, #4
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80020e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80020ea:	f003 0308 	and.w	r3, r3, #8
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d011      	beq.n	8002116 <HAL_UART_IRQHandler+0x126>
 80020f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80020f6:	f003 0320 	and.w	r3, r3, #32
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d105      	bne.n	800210a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80020fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	2b00      	cmp	r3, #0
 8002108:	d005      	beq.n	8002116 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800210e:	f043 0208 	orr.w	r2, r3, #8
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800211a:	2b00      	cmp	r3, #0
 800211c:	f000 81f2 	beq.w	8002504 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002120:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002124:	f003 0320 	and.w	r3, r3, #32
 8002128:	2b00      	cmp	r3, #0
 800212a:	d008      	beq.n	800213e <HAL_UART_IRQHandler+0x14e>
 800212c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002130:	f003 0320 	and.w	r3, r3, #32
 8002134:	2b00      	cmp	r3, #0
 8002136:	d002      	beq.n	800213e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f000 faee 	bl	800271a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	695b      	ldr	r3, [r3, #20]
 8002144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002148:	2b00      	cmp	r3, #0
 800214a:	bf14      	ite	ne
 800214c:	2301      	movne	r3, #1
 800214e:	2300      	moveq	r3, #0
 8002150:	b2db      	uxtb	r3, r3
 8002152:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800215a:	f003 0308 	and.w	r3, r3, #8
 800215e:	2b00      	cmp	r3, #0
 8002160:	d103      	bne.n	800216a <HAL_UART_IRQHandler+0x17a>
 8002162:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002166:	2b00      	cmp	r3, #0
 8002168:	d04f      	beq.n	800220a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f000 f9f8 	bl	8002560 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	695b      	ldr	r3, [r3, #20]
 8002176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800217a:	2b00      	cmp	r3, #0
 800217c:	d041      	beq.n	8002202 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	3314      	adds	r3, #20
 8002184:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002188:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800218c:	e853 3f00 	ldrex	r3, [r3]
 8002190:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002194:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002198:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800219c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	3314      	adds	r3, #20
 80021a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80021aa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80021ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80021b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80021ba:	e841 2300 	strex	r3, r2, [r1]
 80021be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80021c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d1d9      	bne.n	800217e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d013      	beq.n	80021fa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021d6:	4a7e      	ldr	r2, [pc, #504]	; (80023d0 <HAL_UART_IRQHandler+0x3e0>)
 80021d8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021de:	4618      	mov	r0, r3
 80021e0:	f7fe fcd8 	bl	8000b94 <HAL_DMA_Abort_IT>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d016      	beq.n	8002218 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80021f4:	4610      	mov	r0, r2
 80021f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021f8:	e00e      	b.n	8002218 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f000 f99c 	bl	8002538 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002200:	e00a      	b.n	8002218 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f000 f998 	bl	8002538 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002208:	e006      	b.n	8002218 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f000 f994 	bl	8002538 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8002216:	e175      	b.n	8002504 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002218:	bf00      	nop
    return;
 800221a:	e173      	b.n	8002504 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002220:	2b01      	cmp	r3, #1
 8002222:	f040 814f 	bne.w	80024c4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002226:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800222a:	f003 0310 	and.w	r3, r3, #16
 800222e:	2b00      	cmp	r3, #0
 8002230:	f000 8148 	beq.w	80024c4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002234:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002238:	f003 0310 	and.w	r3, r3, #16
 800223c:	2b00      	cmp	r3, #0
 800223e:	f000 8141 	beq.w	80024c4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002242:	2300      	movs	r3, #0
 8002244:	60bb      	str	r3, [r7, #8]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	60bb      	str	r3, [r7, #8]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	60bb      	str	r3, [r7, #8]
 8002256:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	695b      	ldr	r3, [r3, #20]
 800225e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002262:	2b00      	cmp	r3, #0
 8002264:	f000 80b6 	beq.w	80023d4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002274:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002278:	2b00      	cmp	r3, #0
 800227a:	f000 8145 	beq.w	8002508 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002282:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002286:	429a      	cmp	r2, r3
 8002288:	f080 813e 	bcs.w	8002508 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002292:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002298:	699b      	ldr	r3, [r3, #24]
 800229a:	2b20      	cmp	r3, #32
 800229c:	f000 8088 	beq.w	80023b0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	330c      	adds	r3, #12
 80022a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80022ae:	e853 3f00 	ldrex	r3, [r3]
 80022b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80022b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80022ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80022be:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	330c      	adds	r3, #12
 80022c8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80022cc:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80022d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022d4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80022d8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80022dc:	e841 2300 	strex	r3, r2, [r1]
 80022e0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80022e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d1d9      	bne.n	80022a0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	3314      	adds	r3, #20
 80022f2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022f6:	e853 3f00 	ldrex	r3, [r3]
 80022fa:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80022fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80022fe:	f023 0301 	bic.w	r3, r3, #1
 8002302:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	3314      	adds	r3, #20
 800230c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002310:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002314:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002316:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002318:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800231c:	e841 2300 	strex	r3, r2, [r1]
 8002320:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002322:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002324:	2b00      	cmp	r3, #0
 8002326:	d1e1      	bne.n	80022ec <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	3314      	adds	r3, #20
 800232e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002330:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002332:	e853 3f00 	ldrex	r3, [r3]
 8002336:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002338:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800233a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800233e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	3314      	adds	r3, #20
 8002348:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800234c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800234e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002350:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002352:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002354:	e841 2300 	strex	r3, r2, [r1]
 8002358:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800235a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800235c:	2b00      	cmp	r3, #0
 800235e:	d1e3      	bne.n	8002328 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2220      	movs	r2, #32
 8002364:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	330c      	adds	r3, #12
 8002374:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002376:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002378:	e853 3f00 	ldrex	r3, [r3]
 800237c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800237e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002380:	f023 0310 	bic.w	r3, r3, #16
 8002384:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	330c      	adds	r3, #12
 800238e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002392:	65ba      	str	r2, [r7, #88]	; 0x58
 8002394:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002396:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002398:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800239a:	e841 2300 	strex	r3, r2, [r1]
 800239e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80023a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d1e3      	bne.n	800236e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7fe fbb6 	bl	8000b1c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2202      	movs	r2, #2
 80023b4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80023be:	b29b      	uxth	r3, r3
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	4619      	mov	r1, r3
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f000 f8bf 	bl	800254a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80023cc:	e09c      	b.n	8002508 <HAL_UART_IRQHandler+0x518>
 80023ce:	bf00      	nop
 80023d0:	08002625 	.word	0x08002625
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80023dc:	b29b      	uxth	r3, r3
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	f000 808e 	beq.w	800250c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80023f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	f000 8089 	beq.w	800250c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	330c      	adds	r3, #12
 8002400:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002404:	e853 3f00 	ldrex	r3, [r3]
 8002408:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800240a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800240c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002410:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	330c      	adds	r3, #12
 800241a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800241e:	647a      	str	r2, [r7, #68]	; 0x44
 8002420:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002422:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002424:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002426:	e841 2300 	strex	r3, r2, [r1]
 800242a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800242c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800242e:	2b00      	cmp	r3, #0
 8002430:	d1e3      	bne.n	80023fa <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	3314      	adds	r3, #20
 8002438:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800243a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243c:	e853 3f00 	ldrex	r3, [r3]
 8002440:	623b      	str	r3, [r7, #32]
   return(result);
 8002442:	6a3b      	ldr	r3, [r7, #32]
 8002444:	f023 0301 	bic.w	r3, r3, #1
 8002448:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	3314      	adds	r3, #20
 8002452:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002456:	633a      	str	r2, [r7, #48]	; 0x30
 8002458:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800245a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800245c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800245e:	e841 2300 	strex	r3, r2, [r1]
 8002462:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002466:	2b00      	cmp	r3, #0
 8002468:	d1e3      	bne.n	8002432 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2220      	movs	r2, #32
 800246e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	330c      	adds	r3, #12
 800247e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	e853 3f00 	ldrex	r3, [r3]
 8002486:	60fb      	str	r3, [r7, #12]
   return(result);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	f023 0310 	bic.w	r3, r3, #16
 800248e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	330c      	adds	r3, #12
 8002498:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800249c:	61fa      	str	r2, [r7, #28]
 800249e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024a0:	69b9      	ldr	r1, [r7, #24]
 80024a2:	69fa      	ldr	r2, [r7, #28]
 80024a4:	e841 2300 	strex	r3, r2, [r1]
 80024a8:	617b      	str	r3, [r7, #20]
   return(result);
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d1e3      	bne.n	8002478 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2202      	movs	r2, #2
 80024b4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80024b6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80024ba:	4619      	mov	r1, r3
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f000 f844 	bl	800254a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80024c2:	e023      	b.n	800250c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80024c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d009      	beq.n	80024e4 <HAL_UART_IRQHandler+0x4f4>
 80024d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d003      	beq.n	80024e4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f000 f8b5 	bl	800264c <UART_Transmit_IT>
    return;
 80024e2:	e014      	b.n	800250e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80024e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d00e      	beq.n	800250e <HAL_UART_IRQHandler+0x51e>
 80024f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d008      	beq.n	800250e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f000 f8f4 	bl	80026ea <UART_EndTransmit_IT>
    return;
 8002502:	e004      	b.n	800250e <HAL_UART_IRQHandler+0x51e>
    return;
 8002504:	bf00      	nop
 8002506:	e002      	b.n	800250e <HAL_UART_IRQHandler+0x51e>
      return;
 8002508:	bf00      	nop
 800250a:	e000      	b.n	800250e <HAL_UART_IRQHandler+0x51e>
      return;
 800250c:	bf00      	nop
  }
}
 800250e:	37e8      	adds	r7, #232	; 0xe8
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}

08002514 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800251c:	bf00      	nop
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	bc80      	pop	{r7}
 8002524:	4770      	bx	lr

08002526 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002526:	b480      	push	{r7}
 8002528:	b083      	sub	sp, #12
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800252e:	bf00      	nop
 8002530:	370c      	adds	r7, #12
 8002532:	46bd      	mov	sp, r7
 8002534:	bc80      	pop	{r7}
 8002536:	4770      	bx	lr

08002538 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002540:	bf00      	nop
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	bc80      	pop	{r7}
 8002548:	4770      	bx	lr

0800254a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800254a:	b480      	push	{r7}
 800254c:	b083      	sub	sp, #12
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
 8002552:	460b      	mov	r3, r1
 8002554:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002556:	bf00      	nop
 8002558:	370c      	adds	r7, #12
 800255a:	46bd      	mov	sp, r7
 800255c:	bc80      	pop	{r7}
 800255e:	4770      	bx	lr

08002560 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002560:	b480      	push	{r7}
 8002562:	b095      	sub	sp, #84	; 0x54
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	330c      	adds	r3, #12
 800256e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002572:	e853 3f00 	ldrex	r3, [r3]
 8002576:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800257a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800257e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	330c      	adds	r3, #12
 8002586:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002588:	643a      	str	r2, [r7, #64]	; 0x40
 800258a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800258c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800258e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002590:	e841 2300 	strex	r3, r2, [r1]
 8002594:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002598:	2b00      	cmp	r3, #0
 800259a:	d1e5      	bne.n	8002568 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	3314      	adds	r3, #20
 80025a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025a4:	6a3b      	ldr	r3, [r7, #32]
 80025a6:	e853 3f00 	ldrex	r3, [r3]
 80025aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	f023 0301 	bic.w	r3, r3, #1
 80025b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	3314      	adds	r3, #20
 80025ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80025bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80025be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025c4:	e841 2300 	strex	r3, r2, [r1]
 80025c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80025ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d1e5      	bne.n	800259c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d119      	bne.n	800260c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	330c      	adds	r3, #12
 80025de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	e853 3f00 	ldrex	r3, [r3]
 80025e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	f023 0310 	bic.w	r3, r3, #16
 80025ee:	647b      	str	r3, [r7, #68]	; 0x44
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	330c      	adds	r3, #12
 80025f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80025f8:	61ba      	str	r2, [r7, #24]
 80025fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025fc:	6979      	ldr	r1, [r7, #20]
 80025fe:	69ba      	ldr	r2, [r7, #24]
 8002600:	e841 2300 	strex	r3, r2, [r1]
 8002604:	613b      	str	r3, [r7, #16]
   return(result);
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d1e5      	bne.n	80025d8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2220      	movs	r2, #32
 8002610:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2200      	movs	r2, #0
 8002618:	631a      	str	r2, [r3, #48]	; 0x30
}
 800261a:	bf00      	nop
 800261c:	3754      	adds	r7, #84	; 0x54
 800261e:	46bd      	mov	sp, r7
 8002620:	bc80      	pop	{r7}
 8002622:	4770      	bx	lr

08002624 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002630:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2200      	movs	r2, #0
 8002636:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2200      	movs	r2, #0
 800263c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800263e:	68f8      	ldr	r0, [r7, #12]
 8002640:	f7ff ff7a 	bl	8002538 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002644:	bf00      	nop
 8002646:	3710      	adds	r7, #16
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}

0800264c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800264c:	b480      	push	{r7}
 800264e:	b085      	sub	sp, #20
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800265a:	b2db      	uxtb	r3, r3
 800265c:	2b21      	cmp	r3, #33	; 0x21
 800265e:	d13e      	bne.n	80026de <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002668:	d114      	bne.n	8002694 <UART_Transmit_IT+0x48>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d110      	bne.n	8002694 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6a1b      	ldr	r3, [r3, #32]
 8002676:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	881b      	ldrh	r3, [r3, #0]
 800267c:	461a      	mov	r2, r3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002686:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6a1b      	ldr	r3, [r3, #32]
 800268c:	1c9a      	adds	r2, r3, #2
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	621a      	str	r2, [r3, #32]
 8002692:	e008      	b.n	80026a6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a1b      	ldr	r3, [r3, #32]
 8002698:	1c59      	adds	r1, r3, #1
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	6211      	str	r1, [r2, #32]
 800269e:	781a      	ldrb	r2, [r3, #0]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	3b01      	subs	r3, #1
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	4619      	mov	r1, r3
 80026b4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d10f      	bne.n	80026da <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	68da      	ldr	r2, [r3, #12]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026c8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	68da      	ldr	r2, [r3, #12]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026d8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80026da:	2300      	movs	r3, #0
 80026dc:	e000      	b.n	80026e0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80026de:	2302      	movs	r3, #2
  }
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3714      	adds	r7, #20
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bc80      	pop	{r7}
 80026e8:	4770      	bx	lr

080026ea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80026ea:	b580      	push	{r7, lr}
 80026ec:	b082      	sub	sp, #8
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	68da      	ldr	r2, [r3, #12]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002700:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2220      	movs	r2, #32
 8002706:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f7ff ff02 	bl	8002514 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002710:	2300      	movs	r3, #0
}
 8002712:	4618      	mov	r0, r3
 8002714:	3708      	adds	r7, #8
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}

0800271a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800271a:	b580      	push	{r7, lr}
 800271c:	b08c      	sub	sp, #48	; 0x30
 800271e:	af00      	add	r7, sp, #0
 8002720:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002728:	b2db      	uxtb	r3, r3
 800272a:	2b22      	cmp	r3, #34	; 0x22
 800272c:	f040 80ae 	bne.w	800288c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002738:	d117      	bne.n	800276a <UART_Receive_IT+0x50>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d113      	bne.n	800276a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002742:	2300      	movs	r3, #0
 8002744:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800274a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	b29b      	uxth	r3, r3
 8002754:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002758:	b29a      	uxth	r2, r3
 800275a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800275c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002762:	1c9a      	adds	r2, r3, #2
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	629a      	str	r2, [r3, #40]	; 0x28
 8002768:	e026      	b.n	80027b8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800276e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002770:	2300      	movs	r3, #0
 8002772:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800277c:	d007      	beq.n	800278e <UART_Receive_IT+0x74>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d10a      	bne.n	800279c <UART_Receive_IT+0x82>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d106      	bne.n	800279c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	b2da      	uxtb	r2, r3
 8002796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002798:	701a      	strb	r2, [r3, #0]
 800279a:	e008      	b.n	80027ae <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80027a8:	b2da      	uxtb	r2, r3
 80027aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b2:	1c5a      	adds	r2, r3, #1
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80027bc:	b29b      	uxth	r3, r3
 80027be:	3b01      	subs	r3, #1
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	4619      	mov	r1, r3
 80027c6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d15d      	bne.n	8002888 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	68da      	ldr	r2, [r3, #12]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f022 0220 	bic.w	r2, r2, #32
 80027da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	68da      	ldr	r2, [r3, #12]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	695a      	ldr	r2, [r3, #20]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f022 0201 	bic.w	r2, r2, #1
 80027fa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2220      	movs	r2, #32
 8002800:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280e:	2b01      	cmp	r3, #1
 8002810:	d135      	bne.n	800287e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	330c      	adds	r3, #12
 800281e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	e853 3f00 	ldrex	r3, [r3]
 8002826:	613b      	str	r3, [r7, #16]
   return(result);
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	f023 0310 	bic.w	r3, r3, #16
 800282e:	627b      	str	r3, [r7, #36]	; 0x24
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	330c      	adds	r3, #12
 8002836:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002838:	623a      	str	r2, [r7, #32]
 800283a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800283c:	69f9      	ldr	r1, [r7, #28]
 800283e:	6a3a      	ldr	r2, [r7, #32]
 8002840:	e841 2300 	strex	r3, r2, [r1]
 8002844:	61bb      	str	r3, [r7, #24]
   return(result);
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d1e5      	bne.n	8002818 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0310 	and.w	r3, r3, #16
 8002856:	2b10      	cmp	r3, #16
 8002858:	d10a      	bne.n	8002870 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800285a:	2300      	movs	r3, #0
 800285c:	60fb      	str	r3, [r7, #12]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	60fb      	str	r3, [r7, #12]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	60fb      	str	r3, [r7, #12]
 800286e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002874:	4619      	mov	r1, r3
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f7ff fe67 	bl	800254a <HAL_UARTEx_RxEventCallback>
 800287c:	e002      	b.n	8002884 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f7ff fe51 	bl	8002526 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002884:	2300      	movs	r3, #0
 8002886:	e002      	b.n	800288e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002888:	2300      	movs	r3, #0
 800288a:	e000      	b.n	800288e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800288c:	2302      	movs	r3, #2
  }
}
 800288e:	4618      	mov	r0, r3
 8002890:	3730      	adds	r7, #48	; 0x30
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
	...

08002898 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	691b      	ldr	r3, [r3, #16]
 80028a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	68da      	ldr	r2, [r3, #12]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	430a      	orrs	r2, r1
 80028b4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	689a      	ldr	r2, [r3, #8]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	691b      	ldr	r3, [r3, #16]
 80028be:	431a      	orrs	r2, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	695b      	ldr	r3, [r3, #20]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80028d2:	f023 030c 	bic.w	r3, r3, #12
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	6812      	ldr	r2, [r2, #0]
 80028da:	68b9      	ldr	r1, [r7, #8]
 80028dc:	430b      	orrs	r3, r1
 80028de:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	695b      	ldr	r3, [r3, #20]
 80028e6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	699a      	ldr	r2, [r3, #24]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	430a      	orrs	r2, r1
 80028f4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a2c      	ldr	r2, [pc, #176]	; (80029ac <UART_SetConfig+0x114>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d103      	bne.n	8002908 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002900:	f7ff f87a 	bl	80019f8 <HAL_RCC_GetPCLK2Freq>
 8002904:	60f8      	str	r0, [r7, #12]
 8002906:	e002      	b.n	800290e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002908:	f7ff f862 	bl	80019d0 <HAL_RCC_GetPCLK1Freq>
 800290c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800290e:	68fa      	ldr	r2, [r7, #12]
 8002910:	4613      	mov	r3, r2
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	4413      	add	r3, r2
 8002916:	009a      	lsls	r2, r3, #2
 8002918:	441a      	add	r2, r3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	fbb2 f3f3 	udiv	r3, r2, r3
 8002924:	4a22      	ldr	r2, [pc, #136]	; (80029b0 <UART_SetConfig+0x118>)
 8002926:	fba2 2303 	umull	r2, r3, r2, r3
 800292a:	095b      	lsrs	r3, r3, #5
 800292c:	0119      	lsls	r1, r3, #4
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	4613      	mov	r3, r2
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	4413      	add	r3, r2
 8002936:	009a      	lsls	r2, r3, #2
 8002938:	441a      	add	r2, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	fbb2 f2f3 	udiv	r2, r2, r3
 8002944:	4b1a      	ldr	r3, [pc, #104]	; (80029b0 <UART_SetConfig+0x118>)
 8002946:	fba3 0302 	umull	r0, r3, r3, r2
 800294a:	095b      	lsrs	r3, r3, #5
 800294c:	2064      	movs	r0, #100	; 0x64
 800294e:	fb00 f303 	mul.w	r3, r0, r3
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	011b      	lsls	r3, r3, #4
 8002956:	3332      	adds	r3, #50	; 0x32
 8002958:	4a15      	ldr	r2, [pc, #84]	; (80029b0 <UART_SetConfig+0x118>)
 800295a:	fba2 2303 	umull	r2, r3, r2, r3
 800295e:	095b      	lsrs	r3, r3, #5
 8002960:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002964:	4419      	add	r1, r3
 8002966:	68fa      	ldr	r2, [r7, #12]
 8002968:	4613      	mov	r3, r2
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	4413      	add	r3, r2
 800296e:	009a      	lsls	r2, r3, #2
 8002970:	441a      	add	r2, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	fbb2 f2f3 	udiv	r2, r2, r3
 800297c:	4b0c      	ldr	r3, [pc, #48]	; (80029b0 <UART_SetConfig+0x118>)
 800297e:	fba3 0302 	umull	r0, r3, r3, r2
 8002982:	095b      	lsrs	r3, r3, #5
 8002984:	2064      	movs	r0, #100	; 0x64
 8002986:	fb00 f303 	mul.w	r3, r0, r3
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	011b      	lsls	r3, r3, #4
 800298e:	3332      	adds	r3, #50	; 0x32
 8002990:	4a07      	ldr	r2, [pc, #28]	; (80029b0 <UART_SetConfig+0x118>)
 8002992:	fba2 2303 	umull	r2, r3, r2, r3
 8002996:	095b      	lsrs	r3, r3, #5
 8002998:	f003 020f 	and.w	r2, r3, #15
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	440a      	add	r2, r1
 80029a2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80029a4:	bf00      	nop
 80029a6:	3710      	adds	r7, #16
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	40013800 	.word	0x40013800
 80029b0:	51eb851f 	.word	0x51eb851f

080029b4 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80029b4:	b480      	push	{r7}
 80029b6:	b085      	sub	sp, #20
 80029b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80029ba:	f3ef 8305 	mrs	r3, IPSR
 80029be:	60bb      	str	r3, [r7, #8]
  return(result);
 80029c0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d10f      	bne.n	80029e6 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029c6:	f3ef 8310 	mrs	r3, PRIMASK
 80029ca:	607b      	str	r3, [r7, #4]
  return(result);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d109      	bne.n	80029e6 <osKernelInitialize+0x32>
 80029d2:	4b10      	ldr	r3, [pc, #64]	; (8002a14 <osKernelInitialize+0x60>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d109      	bne.n	80029ee <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80029da:	f3ef 8311 	mrs	r3, BASEPRI
 80029de:	603b      	str	r3, [r7, #0]
  return(result);
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d003      	beq.n	80029ee <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80029e6:	f06f 0305 	mvn.w	r3, #5
 80029ea:	60fb      	str	r3, [r7, #12]
 80029ec:	e00c      	b.n	8002a08 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80029ee:	4b09      	ldr	r3, [pc, #36]	; (8002a14 <osKernelInitialize+0x60>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d105      	bne.n	8002a02 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80029f6:	4b07      	ldr	r3, [pc, #28]	; (8002a14 <osKernelInitialize+0x60>)
 80029f8:	2201      	movs	r2, #1
 80029fa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80029fc:	2300      	movs	r3, #0
 80029fe:	60fb      	str	r3, [r7, #12]
 8002a00:	e002      	b.n	8002a08 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8002a02:	f04f 33ff 	mov.w	r3, #4294967295
 8002a06:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002a08:	68fb      	ldr	r3, [r7, #12]
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3714      	adds	r7, #20
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bc80      	pop	{r7}
 8002a12:	4770      	bx	lr
 8002a14:	200001b4 	.word	0x200001b4

08002a18 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a1e:	f3ef 8305 	mrs	r3, IPSR
 8002a22:	60bb      	str	r3, [r7, #8]
  return(result);
 8002a24:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d10f      	bne.n	8002a4a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a2a:	f3ef 8310 	mrs	r3, PRIMASK
 8002a2e:	607b      	str	r3, [r7, #4]
  return(result);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d109      	bne.n	8002a4a <osKernelStart+0x32>
 8002a36:	4b11      	ldr	r3, [pc, #68]	; (8002a7c <osKernelStart+0x64>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d109      	bne.n	8002a52 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002a3e:	f3ef 8311 	mrs	r3, BASEPRI
 8002a42:	603b      	str	r3, [r7, #0]
  return(result);
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d003      	beq.n	8002a52 <osKernelStart+0x3a>
    stat = osErrorISR;
 8002a4a:	f06f 0305 	mvn.w	r3, #5
 8002a4e:	60fb      	str	r3, [r7, #12]
 8002a50:	e00e      	b.n	8002a70 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8002a52:	4b0a      	ldr	r3, [pc, #40]	; (8002a7c <osKernelStart+0x64>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d107      	bne.n	8002a6a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8002a5a:	4b08      	ldr	r3, [pc, #32]	; (8002a7c <osKernelStart+0x64>)
 8002a5c:	2202      	movs	r2, #2
 8002a5e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8002a60:	f001 f890 	bl	8003b84 <vTaskStartScheduler>
      stat = osOK;
 8002a64:	2300      	movs	r3, #0
 8002a66:	60fb      	str	r3, [r7, #12]
 8002a68:	e002      	b.n	8002a70 <osKernelStart+0x58>
    } else {
      stat = osError;
 8002a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a6e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002a70:	68fb      	ldr	r3, [r7, #12]
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3710      	adds	r7, #16
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	200001b4 	.word	0x200001b4

08002a80 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b092      	sub	sp, #72	; 0x48
 8002a84:	af04      	add	r7, sp, #16
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	60b9      	str	r1, [r7, #8]
 8002a8a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a90:	f3ef 8305 	mrs	r3, IPSR
 8002a94:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	f040 8094 	bne.w	8002bc6 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a9e:	f3ef 8310 	mrs	r3, PRIMASK
 8002aa2:	623b      	str	r3, [r7, #32]
  return(result);
 8002aa4:	6a3b      	ldr	r3, [r7, #32]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	f040 808d 	bne.w	8002bc6 <osThreadNew+0x146>
 8002aac:	4b48      	ldr	r3, [pc, #288]	; (8002bd0 <osThreadNew+0x150>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d106      	bne.n	8002ac2 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002ab4:	f3ef 8311 	mrs	r3, BASEPRI
 8002ab8:	61fb      	str	r3, [r7, #28]
  return(result);
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	f040 8082 	bne.w	8002bc6 <osThreadNew+0x146>
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d07e      	beq.n	8002bc6 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8002ac8:	2380      	movs	r3, #128	; 0x80
 8002aca:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8002acc:	2318      	movs	r3, #24
 8002ace:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8002ad4:	f107 031b 	add.w	r3, r7, #27
 8002ad8:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8002ada:	f04f 33ff 	mov.w	r3, #4294967295
 8002ade:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d045      	beq.n	8002b72 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d002      	beq.n	8002af4 <osThreadNew+0x74>
        name = attr->name;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	699b      	ldr	r3, [r3, #24]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d002      	beq.n	8002b02 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	699b      	ldr	r3, [r3, #24]
 8002b00:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d008      	beq.n	8002b1a <osThreadNew+0x9a>
 8002b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b0a:	2b38      	cmp	r3, #56	; 0x38
 8002b0c:	d805      	bhi.n	8002b1a <osThreadNew+0x9a>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f003 0301 	and.w	r3, r3, #1
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d001      	beq.n	8002b1e <osThreadNew+0x9e>
        return (NULL);
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	e054      	b.n	8002bc8 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	695b      	ldr	r3, [r3, #20]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d003      	beq.n	8002b2e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	695b      	ldr	r3, [r3, #20]
 8002b2a:	089b      	lsrs	r3, r3, #2
 8002b2c:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d00e      	beq.n	8002b54 <osThreadNew+0xd4>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	2ba7      	cmp	r3, #167	; 0xa7
 8002b3c:	d90a      	bls.n	8002b54 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d006      	beq.n	8002b54 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	695b      	ldr	r3, [r3, #20]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d002      	beq.n	8002b54 <osThreadNew+0xd4>
        mem = 1;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b52:	e010      	b.n	8002b76 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d10c      	bne.n	8002b76 <osThreadNew+0xf6>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d108      	bne.n	8002b76 <osThreadNew+0xf6>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	691b      	ldr	r3, [r3, #16]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d104      	bne.n	8002b76 <osThreadNew+0xf6>
          mem = 0;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b70:	e001      	b.n	8002b76 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8002b72:	2300      	movs	r3, #0
 8002b74:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8002b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d110      	bne.n	8002b9e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002b84:	9202      	str	r2, [sp, #8]
 8002b86:	9301      	str	r3, [sp, #4]
 8002b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b8a:	9300      	str	r3, [sp, #0]
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b90:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002b92:	68f8      	ldr	r0, [r7, #12]
 8002b94:	f000 fe12 	bl	80037bc <xTaskCreateStatic>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	617b      	str	r3, [r7, #20]
 8002b9c:	e013      	b.n	8002bc6 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8002b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d110      	bne.n	8002bc6 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ba6:	b29a      	uxth	r2, r3
 8002ba8:	f107 0314 	add.w	r3, r7, #20
 8002bac:	9301      	str	r3, [sp, #4]
 8002bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb0:	9300      	str	r3, [sp, #0]
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002bb6:	68f8      	ldr	r0, [r7, #12]
 8002bb8:	f000 fe5c 	bl	8003874 <xTaskCreate>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d001      	beq.n	8002bc6 <osThreadNew+0x146>
          hTask = NULL;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002bc6:	697b      	ldr	r3, [r7, #20]
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3738      	adds	r7, #56	; 0x38
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	200001b4 	.word	0x200001b4

08002bd4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b086      	sub	sp, #24
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002bdc:	f3ef 8305 	mrs	r3, IPSR
 8002be0:	613b      	str	r3, [r7, #16]
  return(result);
 8002be2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d10f      	bne.n	8002c08 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002be8:	f3ef 8310 	mrs	r3, PRIMASK
 8002bec:	60fb      	str	r3, [r7, #12]
  return(result);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d109      	bne.n	8002c08 <osDelay+0x34>
 8002bf4:	4b0d      	ldr	r3, [pc, #52]	; (8002c2c <osDelay+0x58>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d109      	bne.n	8002c10 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002bfc:	f3ef 8311 	mrs	r3, BASEPRI
 8002c00:	60bb      	str	r3, [r7, #8]
  return(result);
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d003      	beq.n	8002c10 <osDelay+0x3c>
    stat = osErrorISR;
 8002c08:	f06f 0305 	mvn.w	r3, #5
 8002c0c:	617b      	str	r3, [r7, #20]
 8002c0e:	e007      	b.n	8002c20 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8002c10:	2300      	movs	r3, #0
 8002c12:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d002      	beq.n	8002c20 <osDelay+0x4c>
      vTaskDelay(ticks);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f000 ff7e 	bl	8003b1c <vTaskDelay>
    }
  }

  return (stat);
 8002c20:	697b      	ldr	r3, [r7, #20]
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3718      	adds	r7, #24
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	200001b4 	.word	0x200001b4

08002c30 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002c30:	b480      	push	{r7}
 8002c32:	b085      	sub	sp, #20
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	60b9      	str	r1, [r7, #8]
 8002c3a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	4a06      	ldr	r2, [pc, #24]	; (8002c58 <vApplicationGetIdleTaskMemory+0x28>)
 8002c40:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	4a05      	ldr	r2, [pc, #20]	; (8002c5c <vApplicationGetIdleTaskMemory+0x2c>)
 8002c46:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2280      	movs	r2, #128	; 0x80
 8002c4c:	601a      	str	r2, [r3, #0]
}
 8002c4e:	bf00      	nop
 8002c50:	3714      	adds	r7, #20
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bc80      	pop	{r7}
 8002c56:	4770      	bx	lr
 8002c58:	200001b8 	.word	0x200001b8
 8002c5c:	20000260 	.word	0x20000260

08002c60 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002c60:	b480      	push	{r7}
 8002c62:	b085      	sub	sp, #20
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	4a07      	ldr	r2, [pc, #28]	; (8002c8c <vApplicationGetTimerTaskMemory+0x2c>)
 8002c70:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	4a06      	ldr	r2, [pc, #24]	; (8002c90 <vApplicationGetTimerTaskMemory+0x30>)
 8002c76:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c7e:	601a      	str	r2, [r3, #0]
}
 8002c80:	bf00      	nop
 8002c82:	3714      	adds	r7, #20
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bc80      	pop	{r7}
 8002c88:	4770      	bx	lr
 8002c8a:	bf00      	nop
 8002c8c:	20000460 	.word	0x20000460
 8002c90:	20000508 	.word	0x20000508

08002c94 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f103 0208 	add.w	r2, r3, #8
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f04f 32ff 	mov.w	r2, #4294967295
 8002cac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f103 0208 	add.w	r2, r3, #8
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f103 0208 	add.w	r2, r3, #8
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002cc8:	bf00      	nop
 8002cca:	370c      	adds	r7, #12
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bc80      	pop	{r7}
 8002cd0:	4770      	bx	lr

08002cd2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002cd2:	b480      	push	{r7}
 8002cd4:	b083      	sub	sp, #12
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002ce0:	bf00      	nop
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bc80      	pop	{r7}
 8002ce8:	4770      	bx	lr

08002cea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002cea:	b480      	push	{r7}
 8002cec:	b085      	sub	sp, #20
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
 8002cf2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	68fa      	ldr	r2, [r7, #12]
 8002cfe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	689a      	ldr	r2, [r3, #8]
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	683a      	ldr	r2, [r7, #0]
 8002d0e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	683a      	ldr	r2, [r7, #0]
 8002d14:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	1c5a      	adds	r2, r3, #1
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	601a      	str	r2, [r3, #0]
}
 8002d26:	bf00      	nop
 8002d28:	3714      	adds	r7, #20
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bc80      	pop	{r7}
 8002d2e:	4770      	bx	lr

08002d30 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002d30:	b480      	push	{r7}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d46:	d103      	bne.n	8002d50 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	691b      	ldr	r3, [r3, #16]
 8002d4c:	60fb      	str	r3, [r7, #12]
 8002d4e:	e00c      	b.n	8002d6a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	3308      	adds	r3, #8
 8002d54:	60fb      	str	r3, [r7, #12]
 8002d56:	e002      	b.n	8002d5e <vListInsert+0x2e>
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	60fb      	str	r3, [r7, #12]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	68ba      	ldr	r2, [r7, #8]
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d2f6      	bcs.n	8002d58 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	685a      	ldr	r2, [r3, #4]
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	683a      	ldr	r2, [r7, #0]
 8002d78:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	68fa      	ldr	r2, [r7, #12]
 8002d7e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	683a      	ldr	r2, [r7, #0]
 8002d84:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	1c5a      	adds	r2, r3, #1
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	601a      	str	r2, [r3, #0]
}
 8002d96:	bf00      	nop
 8002d98:	3714      	adds	r7, #20
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bc80      	pop	{r7}
 8002d9e:	4770      	bx	lr

08002da0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002da0:	b480      	push	{r7}
 8002da2:	b085      	sub	sp, #20
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	691b      	ldr	r3, [r3, #16]
 8002dac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	6892      	ldr	r2, [r2, #8]
 8002db6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	6852      	ldr	r2, [r2, #4]
 8002dc0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d103      	bne.n	8002dd4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	689a      	ldr	r2, [r3, #8]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	1e5a      	subs	r2, r3, #1
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3714      	adds	r7, #20
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bc80      	pop	{r7}
 8002df0:	4770      	bx	lr
	...

08002df4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d10a      	bne.n	8002e1e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e0c:	f383 8811 	msr	BASEPRI, r3
 8002e10:	f3bf 8f6f 	isb	sy
 8002e14:	f3bf 8f4f 	dsb	sy
 8002e18:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002e1a:	bf00      	nop
 8002e1c:	e7fe      	b.n	8002e1c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002e1e:	f001 fff5 	bl	8004e0c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e2a:	68f9      	ldr	r1, [r7, #12]
 8002e2c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002e2e:	fb01 f303 	mul.w	r3, r1, r3
 8002e32:	441a      	add	r2, r3
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e4e:	3b01      	subs	r3, #1
 8002e50:	68f9      	ldr	r1, [r7, #12]
 8002e52:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002e54:	fb01 f303 	mul.w	r3, r1, r3
 8002e58:	441a      	add	r2, r3
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	22ff      	movs	r2, #255	; 0xff
 8002e62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	22ff      	movs	r2, #255	; 0xff
 8002e6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d114      	bne.n	8002e9e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	691b      	ldr	r3, [r3, #16]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d01a      	beq.n	8002eb2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	3310      	adds	r3, #16
 8002e80:	4618      	mov	r0, r3
 8002e82:	f001 f91b 	bl	80040bc <xTaskRemoveFromEventList>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d012      	beq.n	8002eb2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002e8c:	4b0c      	ldr	r3, [pc, #48]	; (8002ec0 <xQueueGenericReset+0xcc>)
 8002e8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e92:	601a      	str	r2, [r3, #0]
 8002e94:	f3bf 8f4f 	dsb	sy
 8002e98:	f3bf 8f6f 	isb	sy
 8002e9c:	e009      	b.n	8002eb2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	3310      	adds	r3, #16
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7ff fef6 	bl	8002c94 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	3324      	adds	r3, #36	; 0x24
 8002eac:	4618      	mov	r0, r3
 8002eae:	f7ff fef1 	bl	8002c94 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002eb2:	f001 ffdb 	bl	8004e6c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002eb6:	2301      	movs	r3, #1
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3710      	adds	r7, #16
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	e000ed04 	.word	0xe000ed04

08002ec4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b08e      	sub	sp, #56	; 0x38
 8002ec8:	af02      	add	r7, sp, #8
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	607a      	str	r2, [r7, #4]
 8002ed0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d10a      	bne.n	8002eee <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002edc:	f383 8811 	msr	BASEPRI, r3
 8002ee0:	f3bf 8f6f 	isb	sy
 8002ee4:	f3bf 8f4f 	dsb	sy
 8002ee8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002eea:	bf00      	nop
 8002eec:	e7fe      	b.n	8002eec <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d10a      	bne.n	8002f0a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ef8:	f383 8811 	msr	BASEPRI, r3
 8002efc:	f3bf 8f6f 	isb	sy
 8002f00:	f3bf 8f4f 	dsb	sy
 8002f04:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002f06:	bf00      	nop
 8002f08:	e7fe      	b.n	8002f08 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d002      	beq.n	8002f16 <xQueueGenericCreateStatic+0x52>
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d001      	beq.n	8002f1a <xQueueGenericCreateStatic+0x56>
 8002f16:	2301      	movs	r3, #1
 8002f18:	e000      	b.n	8002f1c <xQueueGenericCreateStatic+0x58>
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d10a      	bne.n	8002f36 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f24:	f383 8811 	msr	BASEPRI, r3
 8002f28:	f3bf 8f6f 	isb	sy
 8002f2c:	f3bf 8f4f 	dsb	sy
 8002f30:	623b      	str	r3, [r7, #32]
}
 8002f32:	bf00      	nop
 8002f34:	e7fe      	b.n	8002f34 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d102      	bne.n	8002f42 <xQueueGenericCreateStatic+0x7e>
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d101      	bne.n	8002f46 <xQueueGenericCreateStatic+0x82>
 8002f42:	2301      	movs	r3, #1
 8002f44:	e000      	b.n	8002f48 <xQueueGenericCreateStatic+0x84>
 8002f46:	2300      	movs	r3, #0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d10a      	bne.n	8002f62 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f50:	f383 8811 	msr	BASEPRI, r3
 8002f54:	f3bf 8f6f 	isb	sy
 8002f58:	f3bf 8f4f 	dsb	sy
 8002f5c:	61fb      	str	r3, [r7, #28]
}
 8002f5e:	bf00      	nop
 8002f60:	e7fe      	b.n	8002f60 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002f62:	2350      	movs	r3, #80	; 0x50
 8002f64:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	2b50      	cmp	r3, #80	; 0x50
 8002f6a:	d00a      	beq.n	8002f82 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f70:	f383 8811 	msr	BASEPRI, r3
 8002f74:	f3bf 8f6f 	isb	sy
 8002f78:	f3bf 8f4f 	dsb	sy
 8002f7c:	61bb      	str	r3, [r7, #24]
}
 8002f7e:	bf00      	nop
 8002f80:	e7fe      	b.n	8002f80 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d00d      	beq.n	8002fa8 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002f94:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f9a:	9300      	str	r3, [sp, #0]
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	68b9      	ldr	r1, [r7, #8]
 8002fa2:	68f8      	ldr	r0, [r7, #12]
 8002fa4:	f000 f805 	bl	8002fb2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3730      	adds	r7, #48	; 0x30
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}

08002fb2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	b084      	sub	sp, #16
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	60f8      	str	r0, [r7, #12]
 8002fba:	60b9      	str	r1, [r7, #8]
 8002fbc:	607a      	str	r2, [r7, #4]
 8002fbe:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d103      	bne.n	8002fce <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	69ba      	ldr	r2, [r7, #24]
 8002fca:	601a      	str	r2, [r3, #0]
 8002fcc:	e002      	b.n	8002fd4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	68fa      	ldr	r2, [r7, #12]
 8002fd8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	68ba      	ldr	r2, [r7, #8]
 8002fde:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002fe0:	2101      	movs	r1, #1
 8002fe2:	69b8      	ldr	r0, [r7, #24]
 8002fe4:	f7ff ff06 	bl	8002df4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	78fa      	ldrb	r2, [r7, #3]
 8002fec:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002ff0:	bf00      	nop
 8002ff2:	3710      	adds	r7, #16
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b08e      	sub	sp, #56	; 0x38
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	607a      	str	r2, [r7, #4]
 8003004:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003006:	2300      	movs	r3, #0
 8003008:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800300e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003010:	2b00      	cmp	r3, #0
 8003012:	d10a      	bne.n	800302a <xQueueGenericSend+0x32>
	__asm volatile
 8003014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003018:	f383 8811 	msr	BASEPRI, r3
 800301c:	f3bf 8f6f 	isb	sy
 8003020:	f3bf 8f4f 	dsb	sy
 8003024:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003026:	bf00      	nop
 8003028:	e7fe      	b.n	8003028 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d103      	bne.n	8003038 <xQueueGenericSend+0x40>
 8003030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003034:	2b00      	cmp	r3, #0
 8003036:	d101      	bne.n	800303c <xQueueGenericSend+0x44>
 8003038:	2301      	movs	r3, #1
 800303a:	e000      	b.n	800303e <xQueueGenericSend+0x46>
 800303c:	2300      	movs	r3, #0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d10a      	bne.n	8003058 <xQueueGenericSend+0x60>
	__asm volatile
 8003042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003046:	f383 8811 	msr	BASEPRI, r3
 800304a:	f3bf 8f6f 	isb	sy
 800304e:	f3bf 8f4f 	dsb	sy
 8003052:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003054:	bf00      	nop
 8003056:	e7fe      	b.n	8003056 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	2b02      	cmp	r3, #2
 800305c:	d103      	bne.n	8003066 <xQueueGenericSend+0x6e>
 800305e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003062:	2b01      	cmp	r3, #1
 8003064:	d101      	bne.n	800306a <xQueueGenericSend+0x72>
 8003066:	2301      	movs	r3, #1
 8003068:	e000      	b.n	800306c <xQueueGenericSend+0x74>
 800306a:	2300      	movs	r3, #0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d10a      	bne.n	8003086 <xQueueGenericSend+0x8e>
	__asm volatile
 8003070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003074:	f383 8811 	msr	BASEPRI, r3
 8003078:	f3bf 8f6f 	isb	sy
 800307c:	f3bf 8f4f 	dsb	sy
 8003080:	623b      	str	r3, [r7, #32]
}
 8003082:	bf00      	nop
 8003084:	e7fe      	b.n	8003084 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003086:	f001 f9df 	bl	8004448 <xTaskGetSchedulerState>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d102      	bne.n	8003096 <xQueueGenericSend+0x9e>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d101      	bne.n	800309a <xQueueGenericSend+0xa2>
 8003096:	2301      	movs	r3, #1
 8003098:	e000      	b.n	800309c <xQueueGenericSend+0xa4>
 800309a:	2300      	movs	r3, #0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d10a      	bne.n	80030b6 <xQueueGenericSend+0xbe>
	__asm volatile
 80030a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030a4:	f383 8811 	msr	BASEPRI, r3
 80030a8:	f3bf 8f6f 	isb	sy
 80030ac:	f3bf 8f4f 	dsb	sy
 80030b0:	61fb      	str	r3, [r7, #28]
}
 80030b2:	bf00      	nop
 80030b4:	e7fe      	b.n	80030b4 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80030b6:	f001 fea9 	bl	8004e0c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80030ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d302      	bcc.n	80030cc <xQueueGenericSend+0xd4>
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d129      	bne.n	8003120 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80030cc:	683a      	ldr	r2, [r7, #0]
 80030ce:	68b9      	ldr	r1, [r7, #8]
 80030d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80030d2:	f000 fa07 	bl	80034e4 <prvCopyDataToQueue>
 80030d6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80030d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d010      	beq.n	8003102 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80030e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e2:	3324      	adds	r3, #36	; 0x24
 80030e4:	4618      	mov	r0, r3
 80030e6:	f000 ffe9 	bl	80040bc <xTaskRemoveFromEventList>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d013      	beq.n	8003118 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80030f0:	4b3f      	ldr	r3, [pc, #252]	; (80031f0 <xQueueGenericSend+0x1f8>)
 80030f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030f6:	601a      	str	r2, [r3, #0]
 80030f8:	f3bf 8f4f 	dsb	sy
 80030fc:	f3bf 8f6f 	isb	sy
 8003100:	e00a      	b.n	8003118 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003104:	2b00      	cmp	r3, #0
 8003106:	d007      	beq.n	8003118 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003108:	4b39      	ldr	r3, [pc, #228]	; (80031f0 <xQueueGenericSend+0x1f8>)
 800310a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800310e:	601a      	str	r2, [r3, #0]
 8003110:	f3bf 8f4f 	dsb	sy
 8003114:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003118:	f001 fea8 	bl	8004e6c <vPortExitCritical>
				return pdPASS;
 800311c:	2301      	movs	r3, #1
 800311e:	e063      	b.n	80031e8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d103      	bne.n	800312e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003126:	f001 fea1 	bl	8004e6c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800312a:	2300      	movs	r3, #0
 800312c:	e05c      	b.n	80031e8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800312e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003130:	2b00      	cmp	r3, #0
 8003132:	d106      	bne.n	8003142 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003134:	f107 0314 	add.w	r3, r7, #20
 8003138:	4618      	mov	r0, r3
 800313a:	f001 f823 	bl	8004184 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800313e:	2301      	movs	r3, #1
 8003140:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003142:	f001 fe93 	bl	8004e6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003146:	f000 fd8d 	bl	8003c64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800314a:	f001 fe5f 	bl	8004e0c <vPortEnterCritical>
 800314e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003150:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003154:	b25b      	sxtb	r3, r3
 8003156:	f1b3 3fff 	cmp.w	r3, #4294967295
 800315a:	d103      	bne.n	8003164 <xQueueGenericSend+0x16c>
 800315c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800315e:	2200      	movs	r2, #0
 8003160:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003166:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800316a:	b25b      	sxtb	r3, r3
 800316c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003170:	d103      	bne.n	800317a <xQueueGenericSend+0x182>
 8003172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003174:	2200      	movs	r2, #0
 8003176:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800317a:	f001 fe77 	bl	8004e6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800317e:	1d3a      	adds	r2, r7, #4
 8003180:	f107 0314 	add.w	r3, r7, #20
 8003184:	4611      	mov	r1, r2
 8003186:	4618      	mov	r0, r3
 8003188:	f001 f812 	bl	80041b0 <xTaskCheckForTimeOut>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d124      	bne.n	80031dc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003192:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003194:	f000 fa9e 	bl	80036d4 <prvIsQueueFull>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d018      	beq.n	80031d0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800319e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a0:	3310      	adds	r3, #16
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	4611      	mov	r1, r2
 80031a6:	4618      	mov	r0, r3
 80031a8:	f000 ff38 	bl	800401c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80031ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80031ae:	f000 fa29 	bl	8003604 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80031b2:	f000 fd65 	bl	8003c80 <xTaskResumeAll>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	f47f af7c 	bne.w	80030b6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80031be:	4b0c      	ldr	r3, [pc, #48]	; (80031f0 <xQueueGenericSend+0x1f8>)
 80031c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031c4:	601a      	str	r2, [r3, #0]
 80031c6:	f3bf 8f4f 	dsb	sy
 80031ca:	f3bf 8f6f 	isb	sy
 80031ce:	e772      	b.n	80030b6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80031d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80031d2:	f000 fa17 	bl	8003604 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80031d6:	f000 fd53 	bl	8003c80 <xTaskResumeAll>
 80031da:	e76c      	b.n	80030b6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80031dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80031de:	f000 fa11 	bl	8003604 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80031e2:	f000 fd4d 	bl	8003c80 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80031e6:	2300      	movs	r3, #0
		}
	}
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3738      	adds	r7, #56	; 0x38
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	e000ed04 	.word	0xe000ed04

080031f4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b08e      	sub	sp, #56	; 0x38
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	60b9      	str	r1, [r7, #8]
 80031fe:	607a      	str	r2, [r7, #4]
 8003200:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003208:	2b00      	cmp	r3, #0
 800320a:	d10a      	bne.n	8003222 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800320c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003210:	f383 8811 	msr	BASEPRI, r3
 8003214:	f3bf 8f6f 	isb	sy
 8003218:	f3bf 8f4f 	dsb	sy
 800321c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800321e:	bf00      	nop
 8003220:	e7fe      	b.n	8003220 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d103      	bne.n	8003230 <xQueueGenericSendFromISR+0x3c>
 8003228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800322a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322c:	2b00      	cmp	r3, #0
 800322e:	d101      	bne.n	8003234 <xQueueGenericSendFromISR+0x40>
 8003230:	2301      	movs	r3, #1
 8003232:	e000      	b.n	8003236 <xQueueGenericSendFromISR+0x42>
 8003234:	2300      	movs	r3, #0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d10a      	bne.n	8003250 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800323a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800323e:	f383 8811 	msr	BASEPRI, r3
 8003242:	f3bf 8f6f 	isb	sy
 8003246:	f3bf 8f4f 	dsb	sy
 800324a:	623b      	str	r3, [r7, #32]
}
 800324c:	bf00      	nop
 800324e:	e7fe      	b.n	800324e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	2b02      	cmp	r3, #2
 8003254:	d103      	bne.n	800325e <xQueueGenericSendFromISR+0x6a>
 8003256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800325a:	2b01      	cmp	r3, #1
 800325c:	d101      	bne.n	8003262 <xQueueGenericSendFromISR+0x6e>
 800325e:	2301      	movs	r3, #1
 8003260:	e000      	b.n	8003264 <xQueueGenericSendFromISR+0x70>
 8003262:	2300      	movs	r3, #0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d10a      	bne.n	800327e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800326c:	f383 8811 	msr	BASEPRI, r3
 8003270:	f3bf 8f6f 	isb	sy
 8003274:	f3bf 8f4f 	dsb	sy
 8003278:	61fb      	str	r3, [r7, #28]
}
 800327a:	bf00      	nop
 800327c:	e7fe      	b.n	800327c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800327e:	f001 fe87 	bl	8004f90 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003282:	f3ef 8211 	mrs	r2, BASEPRI
 8003286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800328a:	f383 8811 	msr	BASEPRI, r3
 800328e:	f3bf 8f6f 	isb	sy
 8003292:	f3bf 8f4f 	dsb	sy
 8003296:	61ba      	str	r2, [r7, #24]
 8003298:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800329a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800329c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800329e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d302      	bcc.n	80032b0 <xQueueGenericSendFromISR+0xbc>
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	2b02      	cmp	r3, #2
 80032ae:	d12c      	bne.n	800330a <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80032b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80032ba:	683a      	ldr	r2, [r7, #0]
 80032bc:	68b9      	ldr	r1, [r7, #8]
 80032be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80032c0:	f000 f910 	bl	80034e4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80032c4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80032c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032cc:	d112      	bne.n	80032f4 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80032ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d016      	beq.n	8003304 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80032d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032d8:	3324      	adds	r3, #36	; 0x24
 80032da:	4618      	mov	r0, r3
 80032dc:	f000 feee 	bl	80040bc <xTaskRemoveFromEventList>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d00e      	beq.n	8003304 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d00b      	beq.n	8003304 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	601a      	str	r2, [r3, #0]
 80032f2:	e007      	b.n	8003304 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80032f4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80032f8:	3301      	adds	r3, #1
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	b25a      	sxtb	r2, r3
 80032fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003300:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003304:	2301      	movs	r3, #1
 8003306:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003308:	e001      	b.n	800330e <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800330a:	2300      	movs	r3, #0
 800330c:	637b      	str	r3, [r7, #52]	; 0x34
 800330e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003310:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003318:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800331a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800331c:	4618      	mov	r0, r3
 800331e:	3738      	adds	r7, #56	; 0x38
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}

08003324 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b08c      	sub	sp, #48	; 0x30
 8003328:	af00      	add	r7, sp, #0
 800332a:	60f8      	str	r0, [r7, #12]
 800332c:	60b9      	str	r1, [r7, #8]
 800332e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003330:	2300      	movs	r3, #0
 8003332:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800333a:	2b00      	cmp	r3, #0
 800333c:	d10a      	bne.n	8003354 <xQueueReceive+0x30>
	__asm volatile
 800333e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003342:	f383 8811 	msr	BASEPRI, r3
 8003346:	f3bf 8f6f 	isb	sy
 800334a:	f3bf 8f4f 	dsb	sy
 800334e:	623b      	str	r3, [r7, #32]
}
 8003350:	bf00      	nop
 8003352:	e7fe      	b.n	8003352 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d103      	bne.n	8003362 <xQueueReceive+0x3e>
 800335a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800335c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335e:	2b00      	cmp	r3, #0
 8003360:	d101      	bne.n	8003366 <xQueueReceive+0x42>
 8003362:	2301      	movs	r3, #1
 8003364:	e000      	b.n	8003368 <xQueueReceive+0x44>
 8003366:	2300      	movs	r3, #0
 8003368:	2b00      	cmp	r3, #0
 800336a:	d10a      	bne.n	8003382 <xQueueReceive+0x5e>
	__asm volatile
 800336c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003370:	f383 8811 	msr	BASEPRI, r3
 8003374:	f3bf 8f6f 	isb	sy
 8003378:	f3bf 8f4f 	dsb	sy
 800337c:	61fb      	str	r3, [r7, #28]
}
 800337e:	bf00      	nop
 8003380:	e7fe      	b.n	8003380 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003382:	f001 f861 	bl	8004448 <xTaskGetSchedulerState>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d102      	bne.n	8003392 <xQueueReceive+0x6e>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d101      	bne.n	8003396 <xQueueReceive+0x72>
 8003392:	2301      	movs	r3, #1
 8003394:	e000      	b.n	8003398 <xQueueReceive+0x74>
 8003396:	2300      	movs	r3, #0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d10a      	bne.n	80033b2 <xQueueReceive+0x8e>
	__asm volatile
 800339c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033a0:	f383 8811 	msr	BASEPRI, r3
 80033a4:	f3bf 8f6f 	isb	sy
 80033a8:	f3bf 8f4f 	dsb	sy
 80033ac:	61bb      	str	r3, [r7, #24]
}
 80033ae:	bf00      	nop
 80033b0:	e7fe      	b.n	80033b0 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80033b2:	f001 fd2b 	bl	8004e0c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80033b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ba:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80033bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d01f      	beq.n	8003402 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80033c2:	68b9      	ldr	r1, [r7, #8]
 80033c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80033c6:	f000 f8f7 	bl	80035b8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80033ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033cc:	1e5a      	subs	r2, r3, #1
 80033ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033d0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80033d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033d4:	691b      	ldr	r3, [r3, #16]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d00f      	beq.n	80033fa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80033da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033dc:	3310      	adds	r3, #16
 80033de:	4618      	mov	r0, r3
 80033e0:	f000 fe6c 	bl	80040bc <xTaskRemoveFromEventList>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d007      	beq.n	80033fa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80033ea:	4b3d      	ldr	r3, [pc, #244]	; (80034e0 <xQueueReceive+0x1bc>)
 80033ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033f0:	601a      	str	r2, [r3, #0]
 80033f2:	f3bf 8f4f 	dsb	sy
 80033f6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80033fa:	f001 fd37 	bl	8004e6c <vPortExitCritical>
				return pdPASS;
 80033fe:	2301      	movs	r3, #1
 8003400:	e069      	b.n	80034d6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d103      	bne.n	8003410 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003408:	f001 fd30 	bl	8004e6c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800340c:	2300      	movs	r3, #0
 800340e:	e062      	b.n	80034d6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003412:	2b00      	cmp	r3, #0
 8003414:	d106      	bne.n	8003424 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003416:	f107 0310 	add.w	r3, r7, #16
 800341a:	4618      	mov	r0, r3
 800341c:	f000 feb2 	bl	8004184 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003420:	2301      	movs	r3, #1
 8003422:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003424:	f001 fd22 	bl	8004e6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003428:	f000 fc1c 	bl	8003c64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800342c:	f001 fcee 	bl	8004e0c <vPortEnterCritical>
 8003430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003432:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003436:	b25b      	sxtb	r3, r3
 8003438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800343c:	d103      	bne.n	8003446 <xQueueReceive+0x122>
 800343e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003440:	2200      	movs	r2, #0
 8003442:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003448:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800344c:	b25b      	sxtb	r3, r3
 800344e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003452:	d103      	bne.n	800345c <xQueueReceive+0x138>
 8003454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003456:	2200      	movs	r2, #0
 8003458:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800345c:	f001 fd06 	bl	8004e6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003460:	1d3a      	adds	r2, r7, #4
 8003462:	f107 0310 	add.w	r3, r7, #16
 8003466:	4611      	mov	r1, r2
 8003468:	4618      	mov	r0, r3
 800346a:	f000 fea1 	bl	80041b0 <xTaskCheckForTimeOut>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d123      	bne.n	80034bc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003474:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003476:	f000 f917 	bl	80036a8 <prvIsQueueEmpty>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d017      	beq.n	80034b0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003482:	3324      	adds	r3, #36	; 0x24
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	4611      	mov	r1, r2
 8003488:	4618      	mov	r0, r3
 800348a:	f000 fdc7 	bl	800401c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800348e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003490:	f000 f8b8 	bl	8003604 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003494:	f000 fbf4 	bl	8003c80 <xTaskResumeAll>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d189      	bne.n	80033b2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800349e:	4b10      	ldr	r3, [pc, #64]	; (80034e0 <xQueueReceive+0x1bc>)
 80034a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034a4:	601a      	str	r2, [r3, #0]
 80034a6:	f3bf 8f4f 	dsb	sy
 80034aa:	f3bf 8f6f 	isb	sy
 80034ae:	e780      	b.n	80033b2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80034b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80034b2:	f000 f8a7 	bl	8003604 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80034b6:	f000 fbe3 	bl	8003c80 <xTaskResumeAll>
 80034ba:	e77a      	b.n	80033b2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80034bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80034be:	f000 f8a1 	bl	8003604 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80034c2:	f000 fbdd 	bl	8003c80 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80034c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80034c8:	f000 f8ee 	bl	80036a8 <prvIsQueueEmpty>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	f43f af6f 	beq.w	80033b2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80034d4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3730      	adds	r7, #48	; 0x30
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	e000ed04 	.word	0xe000ed04

080034e4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b086      	sub	sp, #24
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	60b9      	str	r1, [r7, #8]
 80034ee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80034f0:	2300      	movs	r3, #0
 80034f2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d10d      	bne.n	800351e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d14d      	bne.n	80035a6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	4618      	mov	r0, r3
 8003510:	f000 ffb8 	bl	8004484 <xTaskPriorityDisinherit>
 8003514:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2200      	movs	r2, #0
 800351a:	605a      	str	r2, [r3, #4]
 800351c:	e043      	b.n	80035a6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d119      	bne.n	8003558 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6898      	ldr	r0, [r3, #8]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352c:	461a      	mov	r2, r3
 800352e:	68b9      	ldr	r1, [r7, #8]
 8003530:	f001 ffea 	bl	8005508 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	689a      	ldr	r2, [r3, #8]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353c:	441a      	add	r2, r3
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	689a      	ldr	r2, [r3, #8]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	429a      	cmp	r2, r3
 800354c:	d32b      	bcc.n	80035a6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	609a      	str	r2, [r3, #8]
 8003556:	e026      	b.n	80035a6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	68d8      	ldr	r0, [r3, #12]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003560:	461a      	mov	r2, r3
 8003562:	68b9      	ldr	r1, [r7, #8]
 8003564:	f001 ffd0 	bl	8005508 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	68da      	ldr	r2, [r3, #12]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003570:	425b      	negs	r3, r3
 8003572:	441a      	add	r2, r3
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	68da      	ldr	r2, [r3, #12]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	429a      	cmp	r2, r3
 8003582:	d207      	bcs.n	8003594 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	685a      	ldr	r2, [r3, #4]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358c:	425b      	negs	r3, r3
 800358e:	441a      	add	r2, r3
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2b02      	cmp	r3, #2
 8003598:	d105      	bne.n	80035a6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d002      	beq.n	80035a6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	3b01      	subs	r3, #1
 80035a4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	1c5a      	adds	r2, r3, #1
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80035ae:	697b      	ldr	r3, [r7, #20]
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3718      	adds	r7, #24
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d018      	beq.n	80035fc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	68da      	ldr	r2, [r3, #12]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d2:	441a      	add	r2, r3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	68da      	ldr	r2, [r3, #12]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d303      	bcc.n	80035ec <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	68d9      	ldr	r1, [r3, #12]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f4:	461a      	mov	r2, r3
 80035f6:	6838      	ldr	r0, [r7, #0]
 80035f8:	f001 ff86 	bl	8005508 <memcpy>
	}
}
 80035fc:	bf00      	nop
 80035fe:	3708      	adds	r7, #8
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}

08003604 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800360c:	f001 fbfe 	bl	8004e0c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003616:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003618:	e011      	b.n	800363e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361e:	2b00      	cmp	r3, #0
 8003620:	d012      	beq.n	8003648 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	3324      	adds	r3, #36	; 0x24
 8003626:	4618      	mov	r0, r3
 8003628:	f000 fd48 	bl	80040bc <xTaskRemoveFromEventList>
 800362c:	4603      	mov	r3, r0
 800362e:	2b00      	cmp	r3, #0
 8003630:	d001      	beq.n	8003636 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003632:	f000 fe1f 	bl	8004274 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003636:	7bfb      	ldrb	r3, [r7, #15]
 8003638:	3b01      	subs	r3, #1
 800363a:	b2db      	uxtb	r3, r3
 800363c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800363e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003642:	2b00      	cmp	r3, #0
 8003644:	dce9      	bgt.n	800361a <prvUnlockQueue+0x16>
 8003646:	e000      	b.n	800364a <prvUnlockQueue+0x46>
					break;
 8003648:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	22ff      	movs	r2, #255	; 0xff
 800364e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003652:	f001 fc0b 	bl	8004e6c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003656:	f001 fbd9 	bl	8004e0c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003660:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003662:	e011      	b.n	8003688 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	691b      	ldr	r3, [r3, #16]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d012      	beq.n	8003692 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	3310      	adds	r3, #16
 8003670:	4618      	mov	r0, r3
 8003672:	f000 fd23 	bl	80040bc <xTaskRemoveFromEventList>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d001      	beq.n	8003680 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800367c:	f000 fdfa 	bl	8004274 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003680:	7bbb      	ldrb	r3, [r7, #14]
 8003682:	3b01      	subs	r3, #1
 8003684:	b2db      	uxtb	r3, r3
 8003686:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003688:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800368c:	2b00      	cmp	r3, #0
 800368e:	dce9      	bgt.n	8003664 <prvUnlockQueue+0x60>
 8003690:	e000      	b.n	8003694 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003692:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	22ff      	movs	r2, #255	; 0xff
 8003698:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800369c:	f001 fbe6 	bl	8004e6c <vPortExitCritical>
}
 80036a0:	bf00      	nop
 80036a2:	3710      	adds	r7, #16
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80036b0:	f001 fbac 	bl	8004e0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d102      	bne.n	80036c2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80036bc:	2301      	movs	r3, #1
 80036be:	60fb      	str	r3, [r7, #12]
 80036c0:	e001      	b.n	80036c6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80036c2:	2300      	movs	r3, #0
 80036c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80036c6:	f001 fbd1 	bl	8004e6c <vPortExitCritical>

	return xReturn;
 80036ca:	68fb      	ldr	r3, [r7, #12]
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3710      	adds	r7, #16
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b084      	sub	sp, #16
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80036dc:	f001 fb96 	bl	8004e0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d102      	bne.n	80036f2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80036ec:	2301      	movs	r3, #1
 80036ee:	60fb      	str	r3, [r7, #12]
 80036f0:	e001      	b.n	80036f6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80036f2:	2300      	movs	r3, #0
 80036f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80036f6:	f001 fbb9 	bl	8004e6c <vPortExitCritical>

	return xReturn;
 80036fa:	68fb      	ldr	r3, [r7, #12]
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3710      	adds	r7, #16
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}

08003704 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003704:	b480      	push	{r7}
 8003706:	b085      	sub	sp, #20
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800370e:	2300      	movs	r3, #0
 8003710:	60fb      	str	r3, [r7, #12]
 8003712:	e014      	b.n	800373e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003714:	4a0e      	ldr	r2, [pc, #56]	; (8003750 <vQueueAddToRegistry+0x4c>)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d10b      	bne.n	8003738 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003720:	490b      	ldr	r1, [pc, #44]	; (8003750 <vQueueAddToRegistry+0x4c>)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	683a      	ldr	r2, [r7, #0]
 8003726:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800372a:	4a09      	ldr	r2, [pc, #36]	; (8003750 <vQueueAddToRegistry+0x4c>)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	00db      	lsls	r3, r3, #3
 8003730:	4413      	add	r3, r2
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003736:	e006      	b.n	8003746 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	3301      	adds	r3, #1
 800373c:	60fb      	str	r3, [r7, #12]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2b07      	cmp	r3, #7
 8003742:	d9e7      	bls.n	8003714 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003744:	bf00      	nop
 8003746:	bf00      	nop
 8003748:	3714      	adds	r7, #20
 800374a:	46bd      	mov	sp, r7
 800374c:	bc80      	pop	{r7}
 800374e:	4770      	bx	lr
 8003750:	20000908 	.word	0x20000908

08003754 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003754:	b580      	push	{r7, lr}
 8003756:	b086      	sub	sp, #24
 8003758:	af00      	add	r7, sp, #0
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	60b9      	str	r1, [r7, #8]
 800375e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003764:	f001 fb52 	bl	8004e0c <vPortEnterCritical>
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800376e:	b25b      	sxtb	r3, r3
 8003770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003774:	d103      	bne.n	800377e <vQueueWaitForMessageRestricted+0x2a>
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	2200      	movs	r2, #0
 800377a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003784:	b25b      	sxtb	r3, r3
 8003786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800378a:	d103      	bne.n	8003794 <vQueueWaitForMessageRestricted+0x40>
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	2200      	movs	r2, #0
 8003790:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003794:	f001 fb6a 	bl	8004e6c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800379c:	2b00      	cmp	r3, #0
 800379e:	d106      	bne.n	80037ae <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	3324      	adds	r3, #36	; 0x24
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	68b9      	ldr	r1, [r7, #8]
 80037a8:	4618      	mov	r0, r3
 80037aa:	f000 fc5b 	bl	8004064 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80037ae:	6978      	ldr	r0, [r7, #20]
 80037b0:	f7ff ff28 	bl	8003604 <prvUnlockQueue>
	}
 80037b4:	bf00      	nop
 80037b6:	3718      	adds	r7, #24
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}

080037bc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b08e      	sub	sp, #56	; 0x38
 80037c0:	af04      	add	r7, sp, #16
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	60b9      	str	r1, [r7, #8]
 80037c6:	607a      	str	r2, [r7, #4]
 80037c8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80037ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d10a      	bne.n	80037e6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80037d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037d4:	f383 8811 	msr	BASEPRI, r3
 80037d8:	f3bf 8f6f 	isb	sy
 80037dc:	f3bf 8f4f 	dsb	sy
 80037e0:	623b      	str	r3, [r7, #32]
}
 80037e2:	bf00      	nop
 80037e4:	e7fe      	b.n	80037e4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80037e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d10a      	bne.n	8003802 <xTaskCreateStatic+0x46>
	__asm volatile
 80037ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037f0:	f383 8811 	msr	BASEPRI, r3
 80037f4:	f3bf 8f6f 	isb	sy
 80037f8:	f3bf 8f4f 	dsb	sy
 80037fc:	61fb      	str	r3, [r7, #28]
}
 80037fe:	bf00      	nop
 8003800:	e7fe      	b.n	8003800 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003802:	23a8      	movs	r3, #168	; 0xa8
 8003804:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	2ba8      	cmp	r3, #168	; 0xa8
 800380a:	d00a      	beq.n	8003822 <xTaskCreateStatic+0x66>
	__asm volatile
 800380c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003810:	f383 8811 	msr	BASEPRI, r3
 8003814:	f3bf 8f6f 	isb	sy
 8003818:	f3bf 8f4f 	dsb	sy
 800381c:	61bb      	str	r3, [r7, #24]
}
 800381e:	bf00      	nop
 8003820:	e7fe      	b.n	8003820 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003824:	2b00      	cmp	r3, #0
 8003826:	d01e      	beq.n	8003866 <xTaskCreateStatic+0xaa>
 8003828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800382a:	2b00      	cmp	r3, #0
 800382c:	d01b      	beq.n	8003866 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800382e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003830:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003834:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003836:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383a:	2202      	movs	r2, #2
 800383c:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003840:	2300      	movs	r3, #0
 8003842:	9303      	str	r3, [sp, #12]
 8003844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003846:	9302      	str	r3, [sp, #8]
 8003848:	f107 0314 	add.w	r3, r7, #20
 800384c:	9301      	str	r3, [sp, #4]
 800384e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003850:	9300      	str	r3, [sp, #0]
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	68b9      	ldr	r1, [r7, #8]
 8003858:	68f8      	ldr	r0, [r7, #12]
 800385a:	f000 f851 	bl	8003900 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800385e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003860:	f000 f8ec 	bl	8003a3c <prvAddNewTaskToReadyList>
 8003864:	e001      	b.n	800386a <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8003866:	2300      	movs	r3, #0
 8003868:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800386a:	697b      	ldr	r3, [r7, #20]
	}
 800386c:	4618      	mov	r0, r3
 800386e:	3728      	adds	r7, #40	; 0x28
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003874:	b580      	push	{r7, lr}
 8003876:	b08c      	sub	sp, #48	; 0x30
 8003878:	af04      	add	r7, sp, #16
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	603b      	str	r3, [r7, #0]
 8003880:	4613      	mov	r3, r2
 8003882:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003884:	88fb      	ldrh	r3, [r7, #6]
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	4618      	mov	r0, r3
 800388a:	f001 fbbf 	bl	800500c <pvPortMalloc>
 800388e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00e      	beq.n	80038b4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003896:	20a8      	movs	r0, #168	; 0xa8
 8003898:	f001 fbb8 	bl	800500c <pvPortMalloc>
 800389c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d003      	beq.n	80038ac <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	697a      	ldr	r2, [r7, #20]
 80038a8:	631a      	str	r2, [r3, #48]	; 0x30
 80038aa:	e005      	b.n	80038b8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80038ac:	6978      	ldr	r0, [r7, #20]
 80038ae:	f001 fc71 	bl	8005194 <vPortFree>
 80038b2:	e001      	b.n	80038b8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80038b4:	2300      	movs	r3, #0
 80038b6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d017      	beq.n	80038ee <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80038c6:	88fa      	ldrh	r2, [r7, #6]
 80038c8:	2300      	movs	r3, #0
 80038ca:	9303      	str	r3, [sp, #12]
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	9302      	str	r3, [sp, #8]
 80038d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038d2:	9301      	str	r3, [sp, #4]
 80038d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d6:	9300      	str	r3, [sp, #0]
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	68b9      	ldr	r1, [r7, #8]
 80038dc:	68f8      	ldr	r0, [r7, #12]
 80038de:	f000 f80f 	bl	8003900 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80038e2:	69f8      	ldr	r0, [r7, #28]
 80038e4:	f000 f8aa 	bl	8003a3c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80038e8:	2301      	movs	r3, #1
 80038ea:	61bb      	str	r3, [r7, #24]
 80038ec:	e002      	b.n	80038f4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80038ee:	f04f 33ff 	mov.w	r3, #4294967295
 80038f2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80038f4:	69bb      	ldr	r3, [r7, #24]
	}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3720      	adds	r7, #32
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
	...

08003900 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b088      	sub	sp, #32
 8003904:	af00      	add	r7, sp, #0
 8003906:	60f8      	str	r0, [r7, #12]
 8003908:	60b9      	str	r1, [r7, #8]
 800390a:	607a      	str	r2, [r7, #4]
 800390c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800390e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003910:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	461a      	mov	r2, r3
 8003918:	21a5      	movs	r1, #165	; 0xa5
 800391a:	f001 fd71 	bl	8005400 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800391e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003920:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003928:	3b01      	subs	r3, #1
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	4413      	add	r3, r2
 800392e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003930:	69bb      	ldr	r3, [r7, #24]
 8003932:	f023 0307 	bic.w	r3, r3, #7
 8003936:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003938:	69bb      	ldr	r3, [r7, #24]
 800393a:	f003 0307 	and.w	r3, r3, #7
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00a      	beq.n	8003958 <prvInitialiseNewTask+0x58>
	__asm volatile
 8003942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003946:	f383 8811 	msr	BASEPRI, r3
 800394a:	f3bf 8f6f 	isb	sy
 800394e:	f3bf 8f4f 	dsb	sy
 8003952:	617b      	str	r3, [r7, #20]
}
 8003954:	bf00      	nop
 8003956:	e7fe      	b.n	8003956 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003958:	2300      	movs	r3, #0
 800395a:	61fb      	str	r3, [r7, #28]
 800395c:	e012      	b.n	8003984 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800395e:	68ba      	ldr	r2, [r7, #8]
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	4413      	add	r3, r2
 8003964:	7819      	ldrb	r1, [r3, #0]
 8003966:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	4413      	add	r3, r2
 800396c:	3334      	adds	r3, #52	; 0x34
 800396e:	460a      	mov	r2, r1
 8003970:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003972:	68ba      	ldr	r2, [r7, #8]
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	4413      	add	r3, r2
 8003978:	781b      	ldrb	r3, [r3, #0]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d006      	beq.n	800398c <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	3301      	adds	r3, #1
 8003982:	61fb      	str	r3, [r7, #28]
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	2b0f      	cmp	r3, #15
 8003988:	d9e9      	bls.n	800395e <prvInitialiseNewTask+0x5e>
 800398a:	e000      	b.n	800398e <prvInitialiseNewTask+0x8e>
		{
			break;
 800398c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800398e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003990:	2200      	movs	r2, #0
 8003992:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003998:	2b37      	cmp	r3, #55	; 0x37
 800399a:	d901      	bls.n	80039a0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800399c:	2337      	movs	r3, #55	; 0x37
 800399e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80039a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039a4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80039a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039aa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80039ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ae:	2200      	movs	r2, #0
 80039b0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80039b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b4:	3304      	adds	r3, #4
 80039b6:	4618      	mov	r0, r3
 80039b8:	f7ff f98b 	bl	8002cd2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80039bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039be:	3318      	adds	r3, #24
 80039c0:	4618      	mov	r0, r3
 80039c2:	f7ff f986 	bl	8002cd2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80039c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039ca:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ce:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80039d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80039d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039da:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80039dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039de:	2200      	movs	r2, #0
 80039e0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80039e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039e6:	2200      	movs	r2, #0
 80039e8:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80039ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ee:	3354      	adds	r3, #84	; 0x54
 80039f0:	224c      	movs	r2, #76	; 0x4c
 80039f2:	2100      	movs	r1, #0
 80039f4:	4618      	mov	r0, r3
 80039f6:	f001 fd03 	bl	8005400 <memset>
 80039fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039fc:	4a0c      	ldr	r2, [pc, #48]	; (8003a30 <prvInitialiseNewTask+0x130>)
 80039fe:	659a      	str	r2, [r3, #88]	; 0x58
 8003a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a02:	4a0c      	ldr	r2, [pc, #48]	; (8003a34 <prvInitialiseNewTask+0x134>)
 8003a04:	65da      	str	r2, [r3, #92]	; 0x5c
 8003a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a08:	4a0b      	ldr	r2, [pc, #44]	; (8003a38 <prvInitialiseNewTask+0x138>)
 8003a0a:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003a0c:	683a      	ldr	r2, [r7, #0]
 8003a0e:	68f9      	ldr	r1, [r7, #12]
 8003a10:	69b8      	ldr	r0, [r7, #24]
 8003a12:	f001 f90b 	bl	8004c2c <pxPortInitialiseStack>
 8003a16:	4602      	mov	r2, r0
 8003a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a1a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d002      	beq.n	8003a28 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a26:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003a28:	bf00      	nop
 8003a2a:	3720      	adds	r7, #32
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	20001b98 	.word	0x20001b98
 8003a34:	20001c00 	.word	0x20001c00
 8003a38:	20001c68 	.word	0x20001c68

08003a3c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003a44:	f001 f9e2 	bl	8004e0c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003a48:	4b2d      	ldr	r3, [pc, #180]	; (8003b00 <prvAddNewTaskToReadyList+0xc4>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	3301      	adds	r3, #1
 8003a4e:	4a2c      	ldr	r2, [pc, #176]	; (8003b00 <prvAddNewTaskToReadyList+0xc4>)
 8003a50:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003a52:	4b2c      	ldr	r3, [pc, #176]	; (8003b04 <prvAddNewTaskToReadyList+0xc8>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d109      	bne.n	8003a6e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003a5a:	4a2a      	ldr	r2, [pc, #168]	; (8003b04 <prvAddNewTaskToReadyList+0xc8>)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003a60:	4b27      	ldr	r3, [pc, #156]	; (8003b00 <prvAddNewTaskToReadyList+0xc4>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d110      	bne.n	8003a8a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003a68:	f000 fc28 	bl	80042bc <prvInitialiseTaskLists>
 8003a6c:	e00d      	b.n	8003a8a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003a6e:	4b26      	ldr	r3, [pc, #152]	; (8003b08 <prvAddNewTaskToReadyList+0xcc>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d109      	bne.n	8003a8a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003a76:	4b23      	ldr	r3, [pc, #140]	; (8003b04 <prvAddNewTaskToReadyList+0xc8>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d802      	bhi.n	8003a8a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003a84:	4a1f      	ldr	r2, [pc, #124]	; (8003b04 <prvAddNewTaskToReadyList+0xc8>)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003a8a:	4b20      	ldr	r3, [pc, #128]	; (8003b0c <prvAddNewTaskToReadyList+0xd0>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	3301      	adds	r3, #1
 8003a90:	4a1e      	ldr	r2, [pc, #120]	; (8003b0c <prvAddNewTaskToReadyList+0xd0>)
 8003a92:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003a94:	4b1d      	ldr	r3, [pc, #116]	; (8003b0c <prvAddNewTaskToReadyList+0xd0>)
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aa0:	4b1b      	ldr	r3, [pc, #108]	; (8003b10 <prvAddNewTaskToReadyList+0xd4>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d903      	bls.n	8003ab0 <prvAddNewTaskToReadyList+0x74>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aac:	4a18      	ldr	r2, [pc, #96]	; (8003b10 <prvAddNewTaskToReadyList+0xd4>)
 8003aae:	6013      	str	r3, [r2, #0]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	4413      	add	r3, r2
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	4a15      	ldr	r2, [pc, #84]	; (8003b14 <prvAddNewTaskToReadyList+0xd8>)
 8003abe:	441a      	add	r2, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	3304      	adds	r3, #4
 8003ac4:	4619      	mov	r1, r3
 8003ac6:	4610      	mov	r0, r2
 8003ac8:	f7ff f90f 	bl	8002cea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003acc:	f001 f9ce 	bl	8004e6c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003ad0:	4b0d      	ldr	r3, [pc, #52]	; (8003b08 <prvAddNewTaskToReadyList+0xcc>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d00e      	beq.n	8003af6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003ad8:	4b0a      	ldr	r3, [pc, #40]	; (8003b04 <prvAddNewTaskToReadyList+0xc8>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d207      	bcs.n	8003af6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003ae6:	4b0c      	ldr	r3, [pc, #48]	; (8003b18 <prvAddNewTaskToReadyList+0xdc>)
 8003ae8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003aec:	601a      	str	r2, [r3, #0]
 8003aee:	f3bf 8f4f 	dsb	sy
 8003af2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003af6:	bf00      	nop
 8003af8:	3708      	adds	r7, #8
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	20000e1c 	.word	0x20000e1c
 8003b04:	20000948 	.word	0x20000948
 8003b08:	20000e28 	.word	0x20000e28
 8003b0c:	20000e38 	.word	0x20000e38
 8003b10:	20000e24 	.word	0x20000e24
 8003b14:	2000094c 	.word	0x2000094c
 8003b18:	e000ed04 	.word	0xe000ed04

08003b1c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003b24:	2300      	movs	r3, #0
 8003b26:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d017      	beq.n	8003b5e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003b2e:	4b13      	ldr	r3, [pc, #76]	; (8003b7c <vTaskDelay+0x60>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d00a      	beq.n	8003b4c <vTaskDelay+0x30>
	__asm volatile
 8003b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b3a:	f383 8811 	msr	BASEPRI, r3
 8003b3e:	f3bf 8f6f 	isb	sy
 8003b42:	f3bf 8f4f 	dsb	sy
 8003b46:	60bb      	str	r3, [r7, #8]
}
 8003b48:	bf00      	nop
 8003b4a:	e7fe      	b.n	8003b4a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003b4c:	f000 f88a 	bl	8003c64 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003b50:	2100      	movs	r1, #0
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 fd04 	bl	8004560 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003b58:	f000 f892 	bl	8003c80 <xTaskResumeAll>
 8003b5c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d107      	bne.n	8003b74 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003b64:	4b06      	ldr	r3, [pc, #24]	; (8003b80 <vTaskDelay+0x64>)
 8003b66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b6a:	601a      	str	r2, [r3, #0]
 8003b6c:	f3bf 8f4f 	dsb	sy
 8003b70:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003b74:	bf00      	nop
 8003b76:	3710      	adds	r7, #16
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	20000e44 	.word	0x20000e44
 8003b80:	e000ed04 	.word	0xe000ed04

08003b84 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b08a      	sub	sp, #40	; 0x28
 8003b88:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003b92:	463a      	mov	r2, r7
 8003b94:	1d39      	adds	r1, r7, #4
 8003b96:	f107 0308 	add.w	r3, r7, #8
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f7ff f848 	bl	8002c30 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003ba0:	6839      	ldr	r1, [r7, #0]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	68ba      	ldr	r2, [r7, #8]
 8003ba6:	9202      	str	r2, [sp, #8]
 8003ba8:	9301      	str	r3, [sp, #4]
 8003baa:	2300      	movs	r3, #0
 8003bac:	9300      	str	r3, [sp, #0]
 8003bae:	2300      	movs	r3, #0
 8003bb0:	460a      	mov	r2, r1
 8003bb2:	4924      	ldr	r1, [pc, #144]	; (8003c44 <vTaskStartScheduler+0xc0>)
 8003bb4:	4824      	ldr	r0, [pc, #144]	; (8003c48 <vTaskStartScheduler+0xc4>)
 8003bb6:	f7ff fe01 	bl	80037bc <xTaskCreateStatic>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	4a23      	ldr	r2, [pc, #140]	; (8003c4c <vTaskStartScheduler+0xc8>)
 8003bbe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003bc0:	4b22      	ldr	r3, [pc, #136]	; (8003c4c <vTaskStartScheduler+0xc8>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d002      	beq.n	8003bce <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	617b      	str	r3, [r7, #20]
 8003bcc:	e001      	b.n	8003bd2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d102      	bne.n	8003bde <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003bd8:	f000 fd16 	bl	8004608 <xTimerCreateTimerTask>
 8003bdc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d11b      	bne.n	8003c1c <vTaskStartScheduler+0x98>
	__asm volatile
 8003be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be8:	f383 8811 	msr	BASEPRI, r3
 8003bec:	f3bf 8f6f 	isb	sy
 8003bf0:	f3bf 8f4f 	dsb	sy
 8003bf4:	613b      	str	r3, [r7, #16]
}
 8003bf6:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003bf8:	4b15      	ldr	r3, [pc, #84]	; (8003c50 <vTaskStartScheduler+0xcc>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	3354      	adds	r3, #84	; 0x54
 8003bfe:	4a15      	ldr	r2, [pc, #84]	; (8003c54 <vTaskStartScheduler+0xd0>)
 8003c00:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003c02:	4b15      	ldr	r3, [pc, #84]	; (8003c58 <vTaskStartScheduler+0xd4>)
 8003c04:	f04f 32ff 	mov.w	r2, #4294967295
 8003c08:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003c0a:	4b14      	ldr	r3, [pc, #80]	; (8003c5c <vTaskStartScheduler+0xd8>)
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003c10:	4b13      	ldr	r3, [pc, #76]	; (8003c60 <vTaskStartScheduler+0xdc>)
 8003c12:	2200      	movs	r2, #0
 8003c14:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003c16:	f001 f887 	bl	8004d28 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003c1a:	e00e      	b.n	8003c3a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c22:	d10a      	bne.n	8003c3a <vTaskStartScheduler+0xb6>
	__asm volatile
 8003c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c28:	f383 8811 	msr	BASEPRI, r3
 8003c2c:	f3bf 8f6f 	isb	sy
 8003c30:	f3bf 8f4f 	dsb	sy
 8003c34:	60fb      	str	r3, [r7, #12]
}
 8003c36:	bf00      	nop
 8003c38:	e7fe      	b.n	8003c38 <vTaskStartScheduler+0xb4>
}
 8003c3a:	bf00      	nop
 8003c3c:	3718      	adds	r7, #24
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	080055f0 	.word	0x080055f0
 8003c48:	0800428d 	.word	0x0800428d
 8003c4c:	20000e40 	.word	0x20000e40
 8003c50:	20000948 	.word	0x20000948
 8003c54:	2000005c 	.word	0x2000005c
 8003c58:	20000e3c 	.word	0x20000e3c
 8003c5c:	20000e28 	.word	0x20000e28
 8003c60:	20000e20 	.word	0x20000e20

08003c64 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003c64:	b480      	push	{r7}
 8003c66:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003c68:	4b04      	ldr	r3, [pc, #16]	; (8003c7c <vTaskSuspendAll+0x18>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	4a03      	ldr	r2, [pc, #12]	; (8003c7c <vTaskSuspendAll+0x18>)
 8003c70:	6013      	str	r3, [r2, #0]
}
 8003c72:	bf00      	nop
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bc80      	pop	{r7}
 8003c78:	4770      	bx	lr
 8003c7a:	bf00      	nop
 8003c7c:	20000e44 	.word	0x20000e44

08003c80 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003c86:	2300      	movs	r3, #0
 8003c88:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003c8e:	4b42      	ldr	r3, [pc, #264]	; (8003d98 <xTaskResumeAll+0x118>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d10a      	bne.n	8003cac <xTaskResumeAll+0x2c>
	__asm volatile
 8003c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c9a:	f383 8811 	msr	BASEPRI, r3
 8003c9e:	f3bf 8f6f 	isb	sy
 8003ca2:	f3bf 8f4f 	dsb	sy
 8003ca6:	603b      	str	r3, [r7, #0]
}
 8003ca8:	bf00      	nop
 8003caa:	e7fe      	b.n	8003caa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003cac:	f001 f8ae 	bl	8004e0c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003cb0:	4b39      	ldr	r3, [pc, #228]	; (8003d98 <xTaskResumeAll+0x118>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	3b01      	subs	r3, #1
 8003cb6:	4a38      	ldr	r2, [pc, #224]	; (8003d98 <xTaskResumeAll+0x118>)
 8003cb8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003cba:	4b37      	ldr	r3, [pc, #220]	; (8003d98 <xTaskResumeAll+0x118>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d162      	bne.n	8003d88 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003cc2:	4b36      	ldr	r3, [pc, #216]	; (8003d9c <xTaskResumeAll+0x11c>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d05e      	beq.n	8003d88 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003cca:	e02f      	b.n	8003d2c <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003ccc:	4b34      	ldr	r3, [pc, #208]	; (8003da0 <xTaskResumeAll+0x120>)
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	3318      	adds	r3, #24
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f7ff f861 	bl	8002da0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	3304      	adds	r3, #4
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f7ff f85c 	bl	8002da0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cec:	4b2d      	ldr	r3, [pc, #180]	; (8003da4 <xTaskResumeAll+0x124>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d903      	bls.n	8003cfc <xTaskResumeAll+0x7c>
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf8:	4a2a      	ldr	r2, [pc, #168]	; (8003da4 <xTaskResumeAll+0x124>)
 8003cfa:	6013      	str	r3, [r2, #0]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d00:	4613      	mov	r3, r2
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	4413      	add	r3, r2
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	4a27      	ldr	r2, [pc, #156]	; (8003da8 <xTaskResumeAll+0x128>)
 8003d0a:	441a      	add	r2, r3
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	3304      	adds	r3, #4
 8003d10:	4619      	mov	r1, r3
 8003d12:	4610      	mov	r0, r2
 8003d14:	f7fe ffe9 	bl	8002cea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d1c:	4b23      	ldr	r3, [pc, #140]	; (8003dac <xTaskResumeAll+0x12c>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d302      	bcc.n	8003d2c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003d26:	4b22      	ldr	r3, [pc, #136]	; (8003db0 <xTaskResumeAll+0x130>)
 8003d28:	2201      	movs	r2, #1
 8003d2a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d2c:	4b1c      	ldr	r3, [pc, #112]	; (8003da0 <xTaskResumeAll+0x120>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d1cb      	bne.n	8003ccc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d001      	beq.n	8003d3e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003d3a:	f000 fb61 	bl	8004400 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003d3e:	4b1d      	ldr	r3, [pc, #116]	; (8003db4 <xTaskResumeAll+0x134>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d010      	beq.n	8003d6c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003d4a:	f000 f845 	bl	8003dd8 <xTaskIncrementTick>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d002      	beq.n	8003d5a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003d54:	4b16      	ldr	r3, [pc, #88]	; (8003db0 <xTaskResumeAll+0x130>)
 8003d56:	2201      	movs	r2, #1
 8003d58:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	3b01      	subs	r3, #1
 8003d5e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1f1      	bne.n	8003d4a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8003d66:	4b13      	ldr	r3, [pc, #76]	; (8003db4 <xTaskResumeAll+0x134>)
 8003d68:	2200      	movs	r2, #0
 8003d6a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003d6c:	4b10      	ldr	r3, [pc, #64]	; (8003db0 <xTaskResumeAll+0x130>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d009      	beq.n	8003d88 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003d74:	2301      	movs	r3, #1
 8003d76:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003d78:	4b0f      	ldr	r3, [pc, #60]	; (8003db8 <xTaskResumeAll+0x138>)
 8003d7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d7e:	601a      	str	r2, [r3, #0]
 8003d80:	f3bf 8f4f 	dsb	sy
 8003d84:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003d88:	f001 f870 	bl	8004e6c <vPortExitCritical>

	return xAlreadyYielded;
 8003d8c:	68bb      	ldr	r3, [r7, #8]
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3710      	adds	r7, #16
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	20000e44 	.word	0x20000e44
 8003d9c:	20000e1c 	.word	0x20000e1c
 8003da0:	20000ddc 	.word	0x20000ddc
 8003da4:	20000e24 	.word	0x20000e24
 8003da8:	2000094c 	.word	0x2000094c
 8003dac:	20000948 	.word	0x20000948
 8003db0:	20000e30 	.word	0x20000e30
 8003db4:	20000e2c 	.word	0x20000e2c
 8003db8:	e000ed04 	.word	0xe000ed04

08003dbc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003dc2:	4b04      	ldr	r3, [pc, #16]	; (8003dd4 <xTaskGetTickCount+0x18>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003dc8:	687b      	ldr	r3, [r7, #4]
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	370c      	adds	r7, #12
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bc80      	pop	{r7}
 8003dd2:	4770      	bx	lr
 8003dd4:	20000e20 	.word	0x20000e20

08003dd8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b086      	sub	sp, #24
 8003ddc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003dde:	2300      	movs	r3, #0
 8003de0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003de2:	4b51      	ldr	r3, [pc, #324]	; (8003f28 <xTaskIncrementTick+0x150>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	f040 808e 	bne.w	8003f08 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003dec:	4b4f      	ldr	r3, [pc, #316]	; (8003f2c <xTaskIncrementTick+0x154>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	3301      	adds	r3, #1
 8003df2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003df4:	4a4d      	ldr	r2, [pc, #308]	; (8003f2c <xTaskIncrementTick+0x154>)
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d120      	bne.n	8003e42 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003e00:	4b4b      	ldr	r3, [pc, #300]	; (8003f30 <xTaskIncrementTick+0x158>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d00a      	beq.n	8003e20 <xTaskIncrementTick+0x48>
	__asm volatile
 8003e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e0e:	f383 8811 	msr	BASEPRI, r3
 8003e12:	f3bf 8f6f 	isb	sy
 8003e16:	f3bf 8f4f 	dsb	sy
 8003e1a:	603b      	str	r3, [r7, #0]
}
 8003e1c:	bf00      	nop
 8003e1e:	e7fe      	b.n	8003e1e <xTaskIncrementTick+0x46>
 8003e20:	4b43      	ldr	r3, [pc, #268]	; (8003f30 <xTaskIncrementTick+0x158>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	60fb      	str	r3, [r7, #12]
 8003e26:	4b43      	ldr	r3, [pc, #268]	; (8003f34 <xTaskIncrementTick+0x15c>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a41      	ldr	r2, [pc, #260]	; (8003f30 <xTaskIncrementTick+0x158>)
 8003e2c:	6013      	str	r3, [r2, #0]
 8003e2e:	4a41      	ldr	r2, [pc, #260]	; (8003f34 <xTaskIncrementTick+0x15c>)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6013      	str	r3, [r2, #0]
 8003e34:	4b40      	ldr	r3, [pc, #256]	; (8003f38 <xTaskIncrementTick+0x160>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	3301      	adds	r3, #1
 8003e3a:	4a3f      	ldr	r2, [pc, #252]	; (8003f38 <xTaskIncrementTick+0x160>)
 8003e3c:	6013      	str	r3, [r2, #0]
 8003e3e:	f000 fadf 	bl	8004400 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003e42:	4b3e      	ldr	r3, [pc, #248]	; (8003f3c <xTaskIncrementTick+0x164>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	693a      	ldr	r2, [r7, #16]
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d34e      	bcc.n	8003eea <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e4c:	4b38      	ldr	r3, [pc, #224]	; (8003f30 <xTaskIncrementTick+0x158>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d101      	bne.n	8003e5a <xTaskIncrementTick+0x82>
 8003e56:	2301      	movs	r3, #1
 8003e58:	e000      	b.n	8003e5c <xTaskIncrementTick+0x84>
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d004      	beq.n	8003e6a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e60:	4b36      	ldr	r3, [pc, #216]	; (8003f3c <xTaskIncrementTick+0x164>)
 8003e62:	f04f 32ff 	mov.w	r2, #4294967295
 8003e66:	601a      	str	r2, [r3, #0]
					break;
 8003e68:	e03f      	b.n	8003eea <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003e6a:	4b31      	ldr	r3, [pc, #196]	; (8003f30 <xTaskIncrementTick+0x158>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003e7a:	693a      	ldr	r2, [r7, #16]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d203      	bcs.n	8003e8a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003e82:	4a2e      	ldr	r2, [pc, #184]	; (8003f3c <xTaskIncrementTick+0x164>)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6013      	str	r3, [r2, #0]
						break;
 8003e88:	e02f      	b.n	8003eea <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	3304      	adds	r3, #4
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f7fe ff86 	bl	8002da0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d004      	beq.n	8003ea6 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	3318      	adds	r3, #24
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f7fe ff7d 	bl	8002da0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eaa:	4b25      	ldr	r3, [pc, #148]	; (8003f40 <xTaskIncrementTick+0x168>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d903      	bls.n	8003eba <xTaskIncrementTick+0xe2>
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb6:	4a22      	ldr	r2, [pc, #136]	; (8003f40 <xTaskIncrementTick+0x168>)
 8003eb8:	6013      	str	r3, [r2, #0]
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	4413      	add	r3, r2
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	4a1f      	ldr	r2, [pc, #124]	; (8003f44 <xTaskIncrementTick+0x16c>)
 8003ec8:	441a      	add	r2, r3
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	3304      	adds	r3, #4
 8003ece:	4619      	mov	r1, r3
 8003ed0:	4610      	mov	r0, r2
 8003ed2:	f7fe ff0a 	bl	8002cea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eda:	4b1b      	ldr	r3, [pc, #108]	; (8003f48 <xTaskIncrementTick+0x170>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d3b3      	bcc.n	8003e4c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ee8:	e7b0      	b.n	8003e4c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003eea:	4b17      	ldr	r3, [pc, #92]	; (8003f48 <xTaskIncrementTick+0x170>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ef0:	4914      	ldr	r1, [pc, #80]	; (8003f44 <xTaskIncrementTick+0x16c>)
 8003ef2:	4613      	mov	r3, r2
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	4413      	add	r3, r2
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	440b      	add	r3, r1
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d907      	bls.n	8003f12 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003f02:	2301      	movs	r3, #1
 8003f04:	617b      	str	r3, [r7, #20]
 8003f06:	e004      	b.n	8003f12 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003f08:	4b10      	ldr	r3, [pc, #64]	; (8003f4c <xTaskIncrementTick+0x174>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	3301      	adds	r3, #1
 8003f0e:	4a0f      	ldr	r2, [pc, #60]	; (8003f4c <xTaskIncrementTick+0x174>)
 8003f10:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003f12:	4b0f      	ldr	r3, [pc, #60]	; (8003f50 <xTaskIncrementTick+0x178>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d001      	beq.n	8003f1e <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003f1e:	697b      	ldr	r3, [r7, #20]
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3718      	adds	r7, #24
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}
 8003f28:	20000e44 	.word	0x20000e44
 8003f2c:	20000e20 	.word	0x20000e20
 8003f30:	20000dd4 	.word	0x20000dd4
 8003f34:	20000dd8 	.word	0x20000dd8
 8003f38:	20000e34 	.word	0x20000e34
 8003f3c:	20000e3c 	.word	0x20000e3c
 8003f40:	20000e24 	.word	0x20000e24
 8003f44:	2000094c 	.word	0x2000094c
 8003f48:	20000948 	.word	0x20000948
 8003f4c:	20000e2c 	.word	0x20000e2c
 8003f50:	20000e30 	.word	0x20000e30

08003f54 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003f54:	b480      	push	{r7}
 8003f56:	b085      	sub	sp, #20
 8003f58:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003f5a:	4b2a      	ldr	r3, [pc, #168]	; (8004004 <vTaskSwitchContext+0xb0>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d003      	beq.n	8003f6a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003f62:	4b29      	ldr	r3, [pc, #164]	; (8004008 <vTaskSwitchContext+0xb4>)
 8003f64:	2201      	movs	r2, #1
 8003f66:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003f68:	e046      	b.n	8003ff8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8003f6a:	4b27      	ldr	r3, [pc, #156]	; (8004008 <vTaskSwitchContext+0xb4>)
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003f70:	4b26      	ldr	r3, [pc, #152]	; (800400c <vTaskSwitchContext+0xb8>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	60fb      	str	r3, [r7, #12]
 8003f76:	e010      	b.n	8003f9a <vTaskSwitchContext+0x46>
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d10a      	bne.n	8003f94 <vTaskSwitchContext+0x40>
	__asm volatile
 8003f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f82:	f383 8811 	msr	BASEPRI, r3
 8003f86:	f3bf 8f6f 	isb	sy
 8003f8a:	f3bf 8f4f 	dsb	sy
 8003f8e:	607b      	str	r3, [r7, #4]
}
 8003f90:	bf00      	nop
 8003f92:	e7fe      	b.n	8003f92 <vTaskSwitchContext+0x3e>
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	3b01      	subs	r3, #1
 8003f98:	60fb      	str	r3, [r7, #12]
 8003f9a:	491d      	ldr	r1, [pc, #116]	; (8004010 <vTaskSwitchContext+0xbc>)
 8003f9c:	68fa      	ldr	r2, [r7, #12]
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	4413      	add	r3, r2
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	440b      	add	r3, r1
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d0e4      	beq.n	8003f78 <vTaskSwitchContext+0x24>
 8003fae:	68fa      	ldr	r2, [r7, #12]
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	4413      	add	r3, r2
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	4a15      	ldr	r2, [pc, #84]	; (8004010 <vTaskSwitchContext+0xbc>)
 8003fba:	4413      	add	r3, r2
 8003fbc:	60bb      	str	r3, [r7, #8]
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	685a      	ldr	r2, [r3, #4]
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	605a      	str	r2, [r3, #4]
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	685a      	ldr	r2, [r3, #4]
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	3308      	adds	r3, #8
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d104      	bne.n	8003fde <vTaskSwitchContext+0x8a>
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	685a      	ldr	r2, [r3, #4]
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	605a      	str	r2, [r3, #4]
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	4a0b      	ldr	r2, [pc, #44]	; (8004014 <vTaskSwitchContext+0xc0>)
 8003fe6:	6013      	str	r3, [r2, #0]
 8003fe8:	4a08      	ldr	r2, [pc, #32]	; (800400c <vTaskSwitchContext+0xb8>)
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003fee:	4b09      	ldr	r3, [pc, #36]	; (8004014 <vTaskSwitchContext+0xc0>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	3354      	adds	r3, #84	; 0x54
 8003ff4:	4a08      	ldr	r2, [pc, #32]	; (8004018 <vTaskSwitchContext+0xc4>)
 8003ff6:	6013      	str	r3, [r2, #0]
}
 8003ff8:	bf00      	nop
 8003ffa:	3714      	adds	r7, #20
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bc80      	pop	{r7}
 8004000:	4770      	bx	lr
 8004002:	bf00      	nop
 8004004:	20000e44 	.word	0x20000e44
 8004008:	20000e30 	.word	0x20000e30
 800400c:	20000e24 	.word	0x20000e24
 8004010:	2000094c 	.word	0x2000094c
 8004014:	20000948 	.word	0x20000948
 8004018:	2000005c 	.word	0x2000005c

0800401c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b084      	sub	sp, #16
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d10a      	bne.n	8004042 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800402c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004030:	f383 8811 	msr	BASEPRI, r3
 8004034:	f3bf 8f6f 	isb	sy
 8004038:	f3bf 8f4f 	dsb	sy
 800403c:	60fb      	str	r3, [r7, #12]
}
 800403e:	bf00      	nop
 8004040:	e7fe      	b.n	8004040 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004042:	4b07      	ldr	r3, [pc, #28]	; (8004060 <vTaskPlaceOnEventList+0x44>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	3318      	adds	r3, #24
 8004048:	4619      	mov	r1, r3
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f7fe fe70 	bl	8002d30 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004050:	2101      	movs	r1, #1
 8004052:	6838      	ldr	r0, [r7, #0]
 8004054:	f000 fa84 	bl	8004560 <prvAddCurrentTaskToDelayedList>
}
 8004058:	bf00      	nop
 800405a:	3710      	adds	r7, #16
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}
 8004060:	20000948 	.word	0x20000948

08004064 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004064:	b580      	push	{r7, lr}
 8004066:	b086      	sub	sp, #24
 8004068:	af00      	add	r7, sp, #0
 800406a:	60f8      	str	r0, [r7, #12]
 800406c:	60b9      	str	r1, [r7, #8]
 800406e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d10a      	bne.n	800408c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800407a:	f383 8811 	msr	BASEPRI, r3
 800407e:	f3bf 8f6f 	isb	sy
 8004082:	f3bf 8f4f 	dsb	sy
 8004086:	617b      	str	r3, [r7, #20]
}
 8004088:	bf00      	nop
 800408a:	e7fe      	b.n	800408a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800408c:	4b0a      	ldr	r3, [pc, #40]	; (80040b8 <vTaskPlaceOnEventListRestricted+0x54>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	3318      	adds	r3, #24
 8004092:	4619      	mov	r1, r3
 8004094:	68f8      	ldr	r0, [r7, #12]
 8004096:	f7fe fe28 	bl	8002cea <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d002      	beq.n	80040a6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80040a0:	f04f 33ff 	mov.w	r3, #4294967295
 80040a4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80040a6:	6879      	ldr	r1, [r7, #4]
 80040a8:	68b8      	ldr	r0, [r7, #8]
 80040aa:	f000 fa59 	bl	8004560 <prvAddCurrentTaskToDelayedList>
	}
 80040ae:	bf00      	nop
 80040b0:	3718      	adds	r7, #24
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	20000948 	.word	0x20000948

080040bc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b086      	sub	sp, #24
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d10a      	bne.n	80040e8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80040d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040d6:	f383 8811 	msr	BASEPRI, r3
 80040da:	f3bf 8f6f 	isb	sy
 80040de:	f3bf 8f4f 	dsb	sy
 80040e2:	60fb      	str	r3, [r7, #12]
}
 80040e4:	bf00      	nop
 80040e6:	e7fe      	b.n	80040e6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	3318      	adds	r3, #24
 80040ec:	4618      	mov	r0, r3
 80040ee:	f7fe fe57 	bl	8002da0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040f2:	4b1e      	ldr	r3, [pc, #120]	; (800416c <xTaskRemoveFromEventList+0xb0>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d11d      	bne.n	8004136 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	3304      	adds	r3, #4
 80040fe:	4618      	mov	r0, r3
 8004100:	f7fe fe4e 	bl	8002da0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004108:	4b19      	ldr	r3, [pc, #100]	; (8004170 <xTaskRemoveFromEventList+0xb4>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	429a      	cmp	r2, r3
 800410e:	d903      	bls.n	8004118 <xTaskRemoveFromEventList+0x5c>
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004114:	4a16      	ldr	r2, [pc, #88]	; (8004170 <xTaskRemoveFromEventList+0xb4>)
 8004116:	6013      	str	r3, [r2, #0]
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800411c:	4613      	mov	r3, r2
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	4413      	add	r3, r2
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	4a13      	ldr	r2, [pc, #76]	; (8004174 <xTaskRemoveFromEventList+0xb8>)
 8004126:	441a      	add	r2, r3
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	3304      	adds	r3, #4
 800412c:	4619      	mov	r1, r3
 800412e:	4610      	mov	r0, r2
 8004130:	f7fe fddb 	bl	8002cea <vListInsertEnd>
 8004134:	e005      	b.n	8004142 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	3318      	adds	r3, #24
 800413a:	4619      	mov	r1, r3
 800413c:	480e      	ldr	r0, [pc, #56]	; (8004178 <xTaskRemoveFromEventList+0xbc>)
 800413e:	f7fe fdd4 	bl	8002cea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004146:	4b0d      	ldr	r3, [pc, #52]	; (800417c <xTaskRemoveFromEventList+0xc0>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800414c:	429a      	cmp	r2, r3
 800414e:	d905      	bls.n	800415c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004150:	2301      	movs	r3, #1
 8004152:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004154:	4b0a      	ldr	r3, [pc, #40]	; (8004180 <xTaskRemoveFromEventList+0xc4>)
 8004156:	2201      	movs	r2, #1
 8004158:	601a      	str	r2, [r3, #0]
 800415a:	e001      	b.n	8004160 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800415c:	2300      	movs	r3, #0
 800415e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004160:	697b      	ldr	r3, [r7, #20]
}
 8004162:	4618      	mov	r0, r3
 8004164:	3718      	adds	r7, #24
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	20000e44 	.word	0x20000e44
 8004170:	20000e24 	.word	0x20000e24
 8004174:	2000094c 	.word	0x2000094c
 8004178:	20000ddc 	.word	0x20000ddc
 800417c:	20000948 	.word	0x20000948
 8004180:	20000e30 	.word	0x20000e30

08004184 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800418c:	4b06      	ldr	r3, [pc, #24]	; (80041a8 <vTaskInternalSetTimeOutState+0x24>)
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004194:	4b05      	ldr	r3, [pc, #20]	; (80041ac <vTaskInternalSetTimeOutState+0x28>)
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	605a      	str	r2, [r3, #4]
}
 800419c:	bf00      	nop
 800419e:	370c      	adds	r7, #12
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bc80      	pop	{r7}
 80041a4:	4770      	bx	lr
 80041a6:	bf00      	nop
 80041a8:	20000e34 	.word	0x20000e34
 80041ac:	20000e20 	.word	0x20000e20

080041b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b088      	sub	sp, #32
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d10a      	bne.n	80041d6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80041c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041c4:	f383 8811 	msr	BASEPRI, r3
 80041c8:	f3bf 8f6f 	isb	sy
 80041cc:	f3bf 8f4f 	dsb	sy
 80041d0:	613b      	str	r3, [r7, #16]
}
 80041d2:	bf00      	nop
 80041d4:	e7fe      	b.n	80041d4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d10a      	bne.n	80041f2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80041dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e0:	f383 8811 	msr	BASEPRI, r3
 80041e4:	f3bf 8f6f 	isb	sy
 80041e8:	f3bf 8f4f 	dsb	sy
 80041ec:	60fb      	str	r3, [r7, #12]
}
 80041ee:	bf00      	nop
 80041f0:	e7fe      	b.n	80041f0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80041f2:	f000 fe0b 	bl	8004e0c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80041f6:	4b1d      	ldr	r3, [pc, #116]	; (800426c <xTaskCheckForTimeOut+0xbc>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	69ba      	ldr	r2, [r7, #24]
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800420e:	d102      	bne.n	8004216 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004210:	2300      	movs	r3, #0
 8004212:	61fb      	str	r3, [r7, #28]
 8004214:	e023      	b.n	800425e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	4b15      	ldr	r3, [pc, #84]	; (8004270 <xTaskCheckForTimeOut+0xc0>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	429a      	cmp	r2, r3
 8004220:	d007      	beq.n	8004232 <xTaskCheckForTimeOut+0x82>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	69ba      	ldr	r2, [r7, #24]
 8004228:	429a      	cmp	r2, r3
 800422a:	d302      	bcc.n	8004232 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800422c:	2301      	movs	r3, #1
 800422e:	61fb      	str	r3, [r7, #28]
 8004230:	e015      	b.n	800425e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	697a      	ldr	r2, [r7, #20]
 8004238:	429a      	cmp	r2, r3
 800423a:	d20b      	bcs.n	8004254 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	1ad2      	subs	r2, r2, r3
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f7ff ff9b 	bl	8004184 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800424e:	2300      	movs	r3, #0
 8004250:	61fb      	str	r3, [r7, #28]
 8004252:	e004      	b.n	800425e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	2200      	movs	r2, #0
 8004258:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800425a:	2301      	movs	r3, #1
 800425c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800425e:	f000 fe05 	bl	8004e6c <vPortExitCritical>

	return xReturn;
 8004262:	69fb      	ldr	r3, [r7, #28]
}
 8004264:	4618      	mov	r0, r3
 8004266:	3720      	adds	r7, #32
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}
 800426c:	20000e20 	.word	0x20000e20
 8004270:	20000e34 	.word	0x20000e34

08004274 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004274:	b480      	push	{r7}
 8004276:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004278:	4b03      	ldr	r3, [pc, #12]	; (8004288 <vTaskMissedYield+0x14>)
 800427a:	2201      	movs	r2, #1
 800427c:	601a      	str	r2, [r3, #0]
}
 800427e:	bf00      	nop
 8004280:	46bd      	mov	sp, r7
 8004282:	bc80      	pop	{r7}
 8004284:	4770      	bx	lr
 8004286:	bf00      	nop
 8004288:	20000e30 	.word	0x20000e30

0800428c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b082      	sub	sp, #8
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004294:	f000 f852 	bl	800433c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004298:	4b06      	ldr	r3, [pc, #24]	; (80042b4 <prvIdleTask+0x28>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	2b01      	cmp	r3, #1
 800429e:	d9f9      	bls.n	8004294 <prvIdleTask+0x8>
			{
				taskYIELD();
 80042a0:	4b05      	ldr	r3, [pc, #20]	; (80042b8 <prvIdleTask+0x2c>)
 80042a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042a6:	601a      	str	r2, [r3, #0]
 80042a8:	f3bf 8f4f 	dsb	sy
 80042ac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80042b0:	e7f0      	b.n	8004294 <prvIdleTask+0x8>
 80042b2:	bf00      	nop
 80042b4:	2000094c 	.word	0x2000094c
 80042b8:	e000ed04 	.word	0xe000ed04

080042bc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b082      	sub	sp, #8
 80042c0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80042c2:	2300      	movs	r3, #0
 80042c4:	607b      	str	r3, [r7, #4]
 80042c6:	e00c      	b.n	80042e2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	4613      	mov	r3, r2
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	4413      	add	r3, r2
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	4a12      	ldr	r2, [pc, #72]	; (800431c <prvInitialiseTaskLists+0x60>)
 80042d4:	4413      	add	r3, r2
 80042d6:	4618      	mov	r0, r3
 80042d8:	f7fe fcdc 	bl	8002c94 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	3301      	adds	r3, #1
 80042e0:	607b      	str	r3, [r7, #4]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2b37      	cmp	r3, #55	; 0x37
 80042e6:	d9ef      	bls.n	80042c8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80042e8:	480d      	ldr	r0, [pc, #52]	; (8004320 <prvInitialiseTaskLists+0x64>)
 80042ea:	f7fe fcd3 	bl	8002c94 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80042ee:	480d      	ldr	r0, [pc, #52]	; (8004324 <prvInitialiseTaskLists+0x68>)
 80042f0:	f7fe fcd0 	bl	8002c94 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80042f4:	480c      	ldr	r0, [pc, #48]	; (8004328 <prvInitialiseTaskLists+0x6c>)
 80042f6:	f7fe fccd 	bl	8002c94 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80042fa:	480c      	ldr	r0, [pc, #48]	; (800432c <prvInitialiseTaskLists+0x70>)
 80042fc:	f7fe fcca 	bl	8002c94 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004300:	480b      	ldr	r0, [pc, #44]	; (8004330 <prvInitialiseTaskLists+0x74>)
 8004302:	f7fe fcc7 	bl	8002c94 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004306:	4b0b      	ldr	r3, [pc, #44]	; (8004334 <prvInitialiseTaskLists+0x78>)
 8004308:	4a05      	ldr	r2, [pc, #20]	; (8004320 <prvInitialiseTaskLists+0x64>)
 800430a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800430c:	4b0a      	ldr	r3, [pc, #40]	; (8004338 <prvInitialiseTaskLists+0x7c>)
 800430e:	4a05      	ldr	r2, [pc, #20]	; (8004324 <prvInitialiseTaskLists+0x68>)
 8004310:	601a      	str	r2, [r3, #0]
}
 8004312:	bf00      	nop
 8004314:	3708      	adds	r7, #8
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	2000094c 	.word	0x2000094c
 8004320:	20000dac 	.word	0x20000dac
 8004324:	20000dc0 	.word	0x20000dc0
 8004328:	20000ddc 	.word	0x20000ddc
 800432c:	20000df0 	.word	0x20000df0
 8004330:	20000e08 	.word	0x20000e08
 8004334:	20000dd4 	.word	0x20000dd4
 8004338:	20000dd8 	.word	0x20000dd8

0800433c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b082      	sub	sp, #8
 8004340:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004342:	e019      	b.n	8004378 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004344:	f000 fd62 	bl	8004e0c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004348:	4b10      	ldr	r3, [pc, #64]	; (800438c <prvCheckTasksWaitingTermination+0x50>)
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	3304      	adds	r3, #4
 8004354:	4618      	mov	r0, r3
 8004356:	f7fe fd23 	bl	8002da0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800435a:	4b0d      	ldr	r3, [pc, #52]	; (8004390 <prvCheckTasksWaitingTermination+0x54>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	3b01      	subs	r3, #1
 8004360:	4a0b      	ldr	r2, [pc, #44]	; (8004390 <prvCheckTasksWaitingTermination+0x54>)
 8004362:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004364:	4b0b      	ldr	r3, [pc, #44]	; (8004394 <prvCheckTasksWaitingTermination+0x58>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	3b01      	subs	r3, #1
 800436a:	4a0a      	ldr	r2, [pc, #40]	; (8004394 <prvCheckTasksWaitingTermination+0x58>)
 800436c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800436e:	f000 fd7d 	bl	8004e6c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f000 f810 	bl	8004398 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004378:	4b06      	ldr	r3, [pc, #24]	; (8004394 <prvCheckTasksWaitingTermination+0x58>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d1e1      	bne.n	8004344 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004380:	bf00      	nop
 8004382:	bf00      	nop
 8004384:	3708      	adds	r7, #8
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
 800438a:	bf00      	nop
 800438c:	20000df0 	.word	0x20000df0
 8004390:	20000e1c 	.word	0x20000e1c
 8004394:	20000e04 	.word	0x20000e04

08004398 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	3354      	adds	r3, #84	; 0x54
 80043a4:	4618      	mov	r0, r3
 80043a6:	f001 f833 	bl	8005410 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d108      	bne.n	80043c6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b8:	4618      	mov	r0, r3
 80043ba:	f000 feeb 	bl	8005194 <vPortFree>
				vPortFree( pxTCB );
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f000 fee8 	bl	8005194 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80043c4:	e018      	b.n	80043f8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d103      	bne.n	80043d8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f000 fedf 	bl	8005194 <vPortFree>
	}
 80043d6:	e00f      	b.n	80043f8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80043de:	2b02      	cmp	r3, #2
 80043e0:	d00a      	beq.n	80043f8 <prvDeleteTCB+0x60>
	__asm volatile
 80043e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e6:	f383 8811 	msr	BASEPRI, r3
 80043ea:	f3bf 8f6f 	isb	sy
 80043ee:	f3bf 8f4f 	dsb	sy
 80043f2:	60fb      	str	r3, [r7, #12]
}
 80043f4:	bf00      	nop
 80043f6:	e7fe      	b.n	80043f6 <prvDeleteTCB+0x5e>
	}
 80043f8:	bf00      	nop
 80043fa:	3710      	adds	r7, #16
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}

08004400 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004406:	4b0e      	ldr	r3, [pc, #56]	; (8004440 <prvResetNextTaskUnblockTime+0x40>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d101      	bne.n	8004414 <prvResetNextTaskUnblockTime+0x14>
 8004410:	2301      	movs	r3, #1
 8004412:	e000      	b.n	8004416 <prvResetNextTaskUnblockTime+0x16>
 8004414:	2300      	movs	r3, #0
 8004416:	2b00      	cmp	r3, #0
 8004418:	d004      	beq.n	8004424 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800441a:	4b0a      	ldr	r3, [pc, #40]	; (8004444 <prvResetNextTaskUnblockTime+0x44>)
 800441c:	f04f 32ff 	mov.w	r2, #4294967295
 8004420:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004422:	e008      	b.n	8004436 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004424:	4b06      	ldr	r3, [pc, #24]	; (8004440 <prvResetNextTaskUnblockTime+0x40>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	4a04      	ldr	r2, [pc, #16]	; (8004444 <prvResetNextTaskUnblockTime+0x44>)
 8004434:	6013      	str	r3, [r2, #0]
}
 8004436:	bf00      	nop
 8004438:	370c      	adds	r7, #12
 800443a:	46bd      	mov	sp, r7
 800443c:	bc80      	pop	{r7}
 800443e:	4770      	bx	lr
 8004440:	20000dd4 	.word	0x20000dd4
 8004444:	20000e3c 	.word	0x20000e3c

08004448 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800444e:	4b0b      	ldr	r3, [pc, #44]	; (800447c <xTaskGetSchedulerState+0x34>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d102      	bne.n	800445c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004456:	2301      	movs	r3, #1
 8004458:	607b      	str	r3, [r7, #4]
 800445a:	e008      	b.n	800446e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800445c:	4b08      	ldr	r3, [pc, #32]	; (8004480 <xTaskGetSchedulerState+0x38>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d102      	bne.n	800446a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004464:	2302      	movs	r3, #2
 8004466:	607b      	str	r3, [r7, #4]
 8004468:	e001      	b.n	800446e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800446a:	2300      	movs	r3, #0
 800446c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800446e:	687b      	ldr	r3, [r7, #4]
	}
 8004470:	4618      	mov	r0, r3
 8004472:	370c      	adds	r7, #12
 8004474:	46bd      	mov	sp, r7
 8004476:	bc80      	pop	{r7}
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop
 800447c:	20000e28 	.word	0x20000e28
 8004480:	20000e44 	.word	0x20000e44

08004484 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004484:	b580      	push	{r7, lr}
 8004486:	b086      	sub	sp, #24
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004490:	2300      	movs	r3, #0
 8004492:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d056      	beq.n	8004548 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800449a:	4b2e      	ldr	r3, [pc, #184]	; (8004554 <xTaskPriorityDisinherit+0xd0>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	693a      	ldr	r2, [r7, #16]
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d00a      	beq.n	80044ba <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80044a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a8:	f383 8811 	msr	BASEPRI, r3
 80044ac:	f3bf 8f6f 	isb	sy
 80044b0:	f3bf 8f4f 	dsb	sy
 80044b4:	60fb      	str	r3, [r7, #12]
}
 80044b6:	bf00      	nop
 80044b8:	e7fe      	b.n	80044b8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d10a      	bne.n	80044d8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80044c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c6:	f383 8811 	msr	BASEPRI, r3
 80044ca:	f3bf 8f6f 	isb	sy
 80044ce:	f3bf 8f4f 	dsb	sy
 80044d2:	60bb      	str	r3, [r7, #8]
}
 80044d4:	bf00      	nop
 80044d6:	e7fe      	b.n	80044d6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044dc:	1e5a      	subs	r2, r3, #1
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d02c      	beq.n	8004548 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d128      	bne.n	8004548 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	3304      	adds	r3, #4
 80044fa:	4618      	mov	r0, r3
 80044fc:	f7fe fc50 	bl	8002da0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800450c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004518:	4b0f      	ldr	r3, [pc, #60]	; (8004558 <xTaskPriorityDisinherit+0xd4>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	429a      	cmp	r2, r3
 800451e:	d903      	bls.n	8004528 <xTaskPriorityDisinherit+0xa4>
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004524:	4a0c      	ldr	r2, [pc, #48]	; (8004558 <xTaskPriorityDisinherit+0xd4>)
 8004526:	6013      	str	r3, [r2, #0]
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800452c:	4613      	mov	r3, r2
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	4413      	add	r3, r2
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	4a09      	ldr	r2, [pc, #36]	; (800455c <xTaskPriorityDisinherit+0xd8>)
 8004536:	441a      	add	r2, r3
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	3304      	adds	r3, #4
 800453c:	4619      	mov	r1, r3
 800453e:	4610      	mov	r0, r2
 8004540:	f7fe fbd3 	bl	8002cea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004544:	2301      	movs	r3, #1
 8004546:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004548:	697b      	ldr	r3, [r7, #20]
	}
 800454a:	4618      	mov	r0, r3
 800454c:	3718      	adds	r7, #24
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	20000948 	.word	0x20000948
 8004558:	20000e24 	.word	0x20000e24
 800455c:	2000094c 	.word	0x2000094c

08004560 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800456a:	4b21      	ldr	r3, [pc, #132]	; (80045f0 <prvAddCurrentTaskToDelayedList+0x90>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004570:	4b20      	ldr	r3, [pc, #128]	; (80045f4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	3304      	adds	r3, #4
 8004576:	4618      	mov	r0, r3
 8004578:	f7fe fc12 	bl	8002da0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004582:	d10a      	bne.n	800459a <prvAddCurrentTaskToDelayedList+0x3a>
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d007      	beq.n	800459a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800458a:	4b1a      	ldr	r3, [pc, #104]	; (80045f4 <prvAddCurrentTaskToDelayedList+0x94>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	3304      	adds	r3, #4
 8004590:	4619      	mov	r1, r3
 8004592:	4819      	ldr	r0, [pc, #100]	; (80045f8 <prvAddCurrentTaskToDelayedList+0x98>)
 8004594:	f7fe fba9 	bl	8002cea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004598:	e026      	b.n	80045e8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800459a:	68fa      	ldr	r2, [r7, #12]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	4413      	add	r3, r2
 80045a0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80045a2:	4b14      	ldr	r3, [pc, #80]	; (80045f4 <prvAddCurrentTaskToDelayedList+0x94>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	68ba      	ldr	r2, [r7, #8]
 80045a8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80045aa:	68ba      	ldr	r2, [r7, #8]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d209      	bcs.n	80045c6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045b2:	4b12      	ldr	r3, [pc, #72]	; (80045fc <prvAddCurrentTaskToDelayedList+0x9c>)
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	4b0f      	ldr	r3, [pc, #60]	; (80045f4 <prvAddCurrentTaskToDelayedList+0x94>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	3304      	adds	r3, #4
 80045bc:	4619      	mov	r1, r3
 80045be:	4610      	mov	r0, r2
 80045c0:	f7fe fbb6 	bl	8002d30 <vListInsert>
}
 80045c4:	e010      	b.n	80045e8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045c6:	4b0e      	ldr	r3, [pc, #56]	; (8004600 <prvAddCurrentTaskToDelayedList+0xa0>)
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	4b0a      	ldr	r3, [pc, #40]	; (80045f4 <prvAddCurrentTaskToDelayedList+0x94>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	3304      	adds	r3, #4
 80045d0:	4619      	mov	r1, r3
 80045d2:	4610      	mov	r0, r2
 80045d4:	f7fe fbac 	bl	8002d30 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80045d8:	4b0a      	ldr	r3, [pc, #40]	; (8004604 <prvAddCurrentTaskToDelayedList+0xa4>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	68ba      	ldr	r2, [r7, #8]
 80045de:	429a      	cmp	r2, r3
 80045e0:	d202      	bcs.n	80045e8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80045e2:	4a08      	ldr	r2, [pc, #32]	; (8004604 <prvAddCurrentTaskToDelayedList+0xa4>)
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	6013      	str	r3, [r2, #0]
}
 80045e8:	bf00      	nop
 80045ea:	3710      	adds	r7, #16
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}
 80045f0:	20000e20 	.word	0x20000e20
 80045f4:	20000948 	.word	0x20000948
 80045f8:	20000e08 	.word	0x20000e08
 80045fc:	20000dd8 	.word	0x20000dd8
 8004600:	20000dd4 	.word	0x20000dd4
 8004604:	20000e3c 	.word	0x20000e3c

08004608 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b08a      	sub	sp, #40	; 0x28
 800460c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800460e:	2300      	movs	r3, #0
 8004610:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004612:	f000 facb 	bl	8004bac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004616:	4b1c      	ldr	r3, [pc, #112]	; (8004688 <xTimerCreateTimerTask+0x80>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d021      	beq.n	8004662 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800461e:	2300      	movs	r3, #0
 8004620:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004622:	2300      	movs	r3, #0
 8004624:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004626:	1d3a      	adds	r2, r7, #4
 8004628:	f107 0108 	add.w	r1, r7, #8
 800462c:	f107 030c 	add.w	r3, r7, #12
 8004630:	4618      	mov	r0, r3
 8004632:	f7fe fb15 	bl	8002c60 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004636:	6879      	ldr	r1, [r7, #4]
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	68fa      	ldr	r2, [r7, #12]
 800463c:	9202      	str	r2, [sp, #8]
 800463e:	9301      	str	r3, [sp, #4]
 8004640:	2302      	movs	r3, #2
 8004642:	9300      	str	r3, [sp, #0]
 8004644:	2300      	movs	r3, #0
 8004646:	460a      	mov	r2, r1
 8004648:	4910      	ldr	r1, [pc, #64]	; (800468c <xTimerCreateTimerTask+0x84>)
 800464a:	4811      	ldr	r0, [pc, #68]	; (8004690 <xTimerCreateTimerTask+0x88>)
 800464c:	f7ff f8b6 	bl	80037bc <xTaskCreateStatic>
 8004650:	4603      	mov	r3, r0
 8004652:	4a10      	ldr	r2, [pc, #64]	; (8004694 <xTimerCreateTimerTask+0x8c>)
 8004654:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004656:	4b0f      	ldr	r3, [pc, #60]	; (8004694 <xTimerCreateTimerTask+0x8c>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d001      	beq.n	8004662 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800465e:	2301      	movs	r3, #1
 8004660:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d10a      	bne.n	800467e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800466c:	f383 8811 	msr	BASEPRI, r3
 8004670:	f3bf 8f6f 	isb	sy
 8004674:	f3bf 8f4f 	dsb	sy
 8004678:	613b      	str	r3, [r7, #16]
}
 800467a:	bf00      	nop
 800467c:	e7fe      	b.n	800467c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800467e:	697b      	ldr	r3, [r7, #20]
}
 8004680:	4618      	mov	r0, r3
 8004682:	3718      	adds	r7, #24
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}
 8004688:	20000e78 	.word	0x20000e78
 800468c:	080055f8 	.word	0x080055f8
 8004690:	080047b5 	.word	0x080047b5
 8004694:	20000e7c 	.word	0x20000e7c

08004698 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b08a      	sub	sp, #40	; 0x28
 800469c:	af00      	add	r7, sp, #0
 800469e:	60f8      	str	r0, [r7, #12]
 80046a0:	60b9      	str	r1, [r7, #8]
 80046a2:	607a      	str	r2, [r7, #4]
 80046a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80046a6:	2300      	movs	r3, #0
 80046a8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d10a      	bne.n	80046c6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80046b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b4:	f383 8811 	msr	BASEPRI, r3
 80046b8:	f3bf 8f6f 	isb	sy
 80046bc:	f3bf 8f4f 	dsb	sy
 80046c0:	623b      	str	r3, [r7, #32]
}
 80046c2:	bf00      	nop
 80046c4:	e7fe      	b.n	80046c4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80046c6:	4b1a      	ldr	r3, [pc, #104]	; (8004730 <xTimerGenericCommand+0x98>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d02a      	beq.n	8004724 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	2b05      	cmp	r3, #5
 80046de:	dc18      	bgt.n	8004712 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80046e0:	f7ff feb2 	bl	8004448 <xTaskGetSchedulerState>
 80046e4:	4603      	mov	r3, r0
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d109      	bne.n	80046fe <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80046ea:	4b11      	ldr	r3, [pc, #68]	; (8004730 <xTimerGenericCommand+0x98>)
 80046ec:	6818      	ldr	r0, [r3, #0]
 80046ee:	f107 0110 	add.w	r1, r7, #16
 80046f2:	2300      	movs	r3, #0
 80046f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046f6:	f7fe fc7f 	bl	8002ff8 <xQueueGenericSend>
 80046fa:	6278      	str	r0, [r7, #36]	; 0x24
 80046fc:	e012      	b.n	8004724 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80046fe:	4b0c      	ldr	r3, [pc, #48]	; (8004730 <xTimerGenericCommand+0x98>)
 8004700:	6818      	ldr	r0, [r3, #0]
 8004702:	f107 0110 	add.w	r1, r7, #16
 8004706:	2300      	movs	r3, #0
 8004708:	2200      	movs	r2, #0
 800470a:	f7fe fc75 	bl	8002ff8 <xQueueGenericSend>
 800470e:	6278      	str	r0, [r7, #36]	; 0x24
 8004710:	e008      	b.n	8004724 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004712:	4b07      	ldr	r3, [pc, #28]	; (8004730 <xTimerGenericCommand+0x98>)
 8004714:	6818      	ldr	r0, [r3, #0]
 8004716:	f107 0110 	add.w	r1, r7, #16
 800471a:	2300      	movs	r3, #0
 800471c:	683a      	ldr	r2, [r7, #0]
 800471e:	f7fe fd69 	bl	80031f4 <xQueueGenericSendFromISR>
 8004722:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004726:	4618      	mov	r0, r3
 8004728:	3728      	adds	r7, #40	; 0x28
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
 800472e:	bf00      	nop
 8004730:	20000e78 	.word	0x20000e78

08004734 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b088      	sub	sp, #32
 8004738:	af02      	add	r7, sp, #8
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800473e:	4b1c      	ldr	r3, [pc, #112]	; (80047b0 <prvProcessExpiredTimer+0x7c>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	3304      	adds	r3, #4
 800474c:	4618      	mov	r0, r3
 800474e:	f7fe fb27 	bl	8002da0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	69db      	ldr	r3, [r3, #28]
 8004756:	2b01      	cmp	r3, #1
 8004758:	d122      	bne.n	80047a0 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	699a      	ldr	r2, [r3, #24]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	18d1      	adds	r1, r2, r3
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	683a      	ldr	r2, [r7, #0]
 8004766:	6978      	ldr	r0, [r7, #20]
 8004768:	f000 f8c8 	bl	80048fc <prvInsertTimerInActiveList>
 800476c:	4603      	mov	r3, r0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d016      	beq.n	80047a0 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004772:	2300      	movs	r3, #0
 8004774:	9300      	str	r3, [sp, #0]
 8004776:	2300      	movs	r3, #0
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	2100      	movs	r1, #0
 800477c:	6978      	ldr	r0, [r7, #20]
 800477e:	f7ff ff8b 	bl	8004698 <xTimerGenericCommand>
 8004782:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d10a      	bne.n	80047a0 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800478a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800478e:	f383 8811 	msr	BASEPRI, r3
 8004792:	f3bf 8f6f 	isb	sy
 8004796:	f3bf 8f4f 	dsb	sy
 800479a:	60fb      	str	r3, [r7, #12]
}
 800479c:	bf00      	nop
 800479e:	e7fe      	b.n	800479e <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a4:	6978      	ldr	r0, [r7, #20]
 80047a6:	4798      	blx	r3
}
 80047a8:	bf00      	nop
 80047aa:	3718      	adds	r7, #24
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	20000e70 	.word	0x20000e70

080047b4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80047bc:	f107 0308 	add.w	r3, r7, #8
 80047c0:	4618      	mov	r0, r3
 80047c2:	f000 f857 	bl	8004874 <prvGetNextExpireTime>
 80047c6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	4619      	mov	r1, r3
 80047cc:	68f8      	ldr	r0, [r7, #12]
 80047ce:	f000 f803 	bl	80047d8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80047d2:	f000 f8d5 	bl	8004980 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80047d6:	e7f1      	b.n	80047bc <prvTimerTask+0x8>

080047d8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80047e2:	f7ff fa3f 	bl	8003c64 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80047e6:	f107 0308 	add.w	r3, r7, #8
 80047ea:	4618      	mov	r0, r3
 80047ec:	f000 f866 	bl	80048bc <prvSampleTimeNow>
 80047f0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d130      	bne.n	800485a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d10a      	bne.n	8004814 <prvProcessTimerOrBlockTask+0x3c>
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	429a      	cmp	r2, r3
 8004804:	d806      	bhi.n	8004814 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004806:	f7ff fa3b 	bl	8003c80 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800480a:	68f9      	ldr	r1, [r7, #12]
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f7ff ff91 	bl	8004734 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004812:	e024      	b.n	800485e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d008      	beq.n	800482c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800481a:	4b13      	ldr	r3, [pc, #76]	; (8004868 <prvProcessTimerOrBlockTask+0x90>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	2b00      	cmp	r3, #0
 8004822:	bf0c      	ite	eq
 8004824:	2301      	moveq	r3, #1
 8004826:	2300      	movne	r3, #0
 8004828:	b2db      	uxtb	r3, r3
 800482a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800482c:	4b0f      	ldr	r3, [pc, #60]	; (800486c <prvProcessTimerOrBlockTask+0x94>)
 800482e:	6818      	ldr	r0, [r3, #0]
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	683a      	ldr	r2, [r7, #0]
 8004838:	4619      	mov	r1, r3
 800483a:	f7fe ff8b 	bl	8003754 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800483e:	f7ff fa1f 	bl	8003c80 <xTaskResumeAll>
 8004842:	4603      	mov	r3, r0
 8004844:	2b00      	cmp	r3, #0
 8004846:	d10a      	bne.n	800485e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004848:	4b09      	ldr	r3, [pc, #36]	; (8004870 <prvProcessTimerOrBlockTask+0x98>)
 800484a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800484e:	601a      	str	r2, [r3, #0]
 8004850:	f3bf 8f4f 	dsb	sy
 8004854:	f3bf 8f6f 	isb	sy
}
 8004858:	e001      	b.n	800485e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800485a:	f7ff fa11 	bl	8003c80 <xTaskResumeAll>
}
 800485e:	bf00      	nop
 8004860:	3710      	adds	r7, #16
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop
 8004868:	20000e74 	.word	0x20000e74
 800486c:	20000e78 	.word	0x20000e78
 8004870:	e000ed04 	.word	0xe000ed04

08004874 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004874:	b480      	push	{r7}
 8004876:	b085      	sub	sp, #20
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800487c:	4b0e      	ldr	r3, [pc, #56]	; (80048b8 <prvGetNextExpireTime+0x44>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	2b00      	cmp	r3, #0
 8004884:	bf0c      	ite	eq
 8004886:	2301      	moveq	r3, #1
 8004888:	2300      	movne	r3, #0
 800488a:	b2db      	uxtb	r3, r3
 800488c:	461a      	mov	r2, r3
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d105      	bne.n	80048a6 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800489a:	4b07      	ldr	r3, [pc, #28]	; (80048b8 <prvGetNextExpireTime+0x44>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	68db      	ldr	r3, [r3, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	60fb      	str	r3, [r7, #12]
 80048a4:	e001      	b.n	80048aa <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80048a6:	2300      	movs	r3, #0
 80048a8:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80048aa:	68fb      	ldr	r3, [r7, #12]
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3714      	adds	r7, #20
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bc80      	pop	{r7}
 80048b4:	4770      	bx	lr
 80048b6:	bf00      	nop
 80048b8:	20000e70 	.word	0x20000e70

080048bc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b084      	sub	sp, #16
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80048c4:	f7ff fa7a 	bl	8003dbc <xTaskGetTickCount>
 80048c8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80048ca:	4b0b      	ldr	r3, [pc, #44]	; (80048f8 <prvSampleTimeNow+0x3c>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	68fa      	ldr	r2, [r7, #12]
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d205      	bcs.n	80048e0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80048d4:	f000 f908 	bl	8004ae8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2201      	movs	r2, #1
 80048dc:	601a      	str	r2, [r3, #0]
 80048de:	e002      	b.n	80048e6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80048e6:	4a04      	ldr	r2, [pc, #16]	; (80048f8 <prvSampleTimeNow+0x3c>)
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80048ec:	68fb      	ldr	r3, [r7, #12]
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3710      	adds	r7, #16
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	bf00      	nop
 80048f8:	20000e80 	.word	0x20000e80

080048fc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b086      	sub	sp, #24
 8004900:	af00      	add	r7, sp, #0
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	60b9      	str	r1, [r7, #8]
 8004906:	607a      	str	r2, [r7, #4]
 8004908:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800490a:	2300      	movs	r3, #0
 800490c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	68ba      	ldr	r2, [r7, #8]
 8004912:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	68fa      	ldr	r2, [r7, #12]
 8004918:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800491a:	68ba      	ldr	r2, [r7, #8]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	429a      	cmp	r2, r3
 8004920:	d812      	bhi.n	8004948 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	1ad2      	subs	r2, r2, r3
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	699b      	ldr	r3, [r3, #24]
 800492c:	429a      	cmp	r2, r3
 800492e:	d302      	bcc.n	8004936 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004930:	2301      	movs	r3, #1
 8004932:	617b      	str	r3, [r7, #20]
 8004934:	e01b      	b.n	800496e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004936:	4b10      	ldr	r3, [pc, #64]	; (8004978 <prvInsertTimerInActiveList+0x7c>)
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	3304      	adds	r3, #4
 800493e:	4619      	mov	r1, r3
 8004940:	4610      	mov	r0, r2
 8004942:	f7fe f9f5 	bl	8002d30 <vListInsert>
 8004946:	e012      	b.n	800496e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	429a      	cmp	r2, r3
 800494e:	d206      	bcs.n	800495e <prvInsertTimerInActiveList+0x62>
 8004950:	68ba      	ldr	r2, [r7, #8]
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	429a      	cmp	r2, r3
 8004956:	d302      	bcc.n	800495e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004958:	2301      	movs	r3, #1
 800495a:	617b      	str	r3, [r7, #20]
 800495c:	e007      	b.n	800496e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800495e:	4b07      	ldr	r3, [pc, #28]	; (800497c <prvInsertTimerInActiveList+0x80>)
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	3304      	adds	r3, #4
 8004966:	4619      	mov	r1, r3
 8004968:	4610      	mov	r0, r2
 800496a:	f7fe f9e1 	bl	8002d30 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800496e:	697b      	ldr	r3, [r7, #20]
}
 8004970:	4618      	mov	r0, r3
 8004972:	3718      	adds	r7, #24
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}
 8004978:	20000e74 	.word	0x20000e74
 800497c:	20000e70 	.word	0x20000e70

08004980 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b08e      	sub	sp, #56	; 0x38
 8004984:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004986:	e09d      	b.n	8004ac4 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2b00      	cmp	r3, #0
 800498c:	da18      	bge.n	80049c0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800498e:	1d3b      	adds	r3, r7, #4
 8004990:	3304      	adds	r3, #4
 8004992:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004996:	2b00      	cmp	r3, #0
 8004998:	d10a      	bne.n	80049b0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800499a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800499e:	f383 8811 	msr	BASEPRI, r3
 80049a2:	f3bf 8f6f 	isb	sy
 80049a6:	f3bf 8f4f 	dsb	sy
 80049aa:	61fb      	str	r3, [r7, #28]
}
 80049ac:	bf00      	nop
 80049ae:	e7fe      	b.n	80049ae <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80049b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049b6:	6850      	ldr	r0, [r2, #4]
 80049b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049ba:	6892      	ldr	r2, [r2, #8]
 80049bc:	4611      	mov	r1, r2
 80049be:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	db7e      	blt.n	8004ac4 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80049ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049cc:	695b      	ldr	r3, [r3, #20]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d004      	beq.n	80049dc <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80049d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d4:	3304      	adds	r3, #4
 80049d6:	4618      	mov	r0, r3
 80049d8:	f7fe f9e2 	bl	8002da0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80049dc:	463b      	mov	r3, r7
 80049de:	4618      	mov	r0, r3
 80049e0:	f7ff ff6c 	bl	80048bc <prvSampleTimeNow>
 80049e4:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2b09      	cmp	r3, #9
 80049ea:	d86a      	bhi.n	8004ac2 <prvProcessReceivedCommands+0x142>
 80049ec:	a201      	add	r2, pc, #4	; (adr r2, 80049f4 <prvProcessReceivedCommands+0x74>)
 80049ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049f2:	bf00      	nop
 80049f4:	08004a1d 	.word	0x08004a1d
 80049f8:	08004a1d 	.word	0x08004a1d
 80049fc:	08004a1d 	.word	0x08004a1d
 8004a00:	08004ac5 	.word	0x08004ac5
 8004a04:	08004a79 	.word	0x08004a79
 8004a08:	08004ab1 	.word	0x08004ab1
 8004a0c:	08004a1d 	.word	0x08004a1d
 8004a10:	08004a1d 	.word	0x08004a1d
 8004a14:	08004ac5 	.word	0x08004ac5
 8004a18:	08004a79 	.word	0x08004a79
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004a1c:	68ba      	ldr	r2, [r7, #8]
 8004a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a20:	699b      	ldr	r3, [r3, #24]
 8004a22:	18d1      	adds	r1, r2, r3
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a2a:	f7ff ff67 	bl	80048fc <prvInsertTimerInActiveList>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d047      	beq.n	8004ac4 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a3a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a3e:	69db      	ldr	r3, [r3, #28]
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d13f      	bne.n	8004ac4 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004a44:	68ba      	ldr	r2, [r7, #8]
 8004a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a48:	699b      	ldr	r3, [r3, #24]
 8004a4a:	441a      	add	r2, r3
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	9300      	str	r3, [sp, #0]
 8004a50:	2300      	movs	r3, #0
 8004a52:	2100      	movs	r1, #0
 8004a54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a56:	f7ff fe1f 	bl	8004698 <xTimerGenericCommand>
 8004a5a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004a5c:	6a3b      	ldr	r3, [r7, #32]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d130      	bne.n	8004ac4 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8004a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a66:	f383 8811 	msr	BASEPRI, r3
 8004a6a:	f3bf 8f6f 	isb	sy
 8004a6e:	f3bf 8f4f 	dsb	sy
 8004a72:	61bb      	str	r3, [r7, #24]
}
 8004a74:	bf00      	nop
 8004a76:	e7fe      	b.n	8004a76 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004a78:	68ba      	ldr	r2, [r7, #8]
 8004a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a7c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a80:	699b      	ldr	r3, [r3, #24]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d10a      	bne.n	8004a9c <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8004a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a8a:	f383 8811 	msr	BASEPRI, r3
 8004a8e:	f3bf 8f6f 	isb	sy
 8004a92:	f3bf 8f4f 	dsb	sy
 8004a96:	617b      	str	r3, [r7, #20]
}
 8004a98:	bf00      	nop
 8004a9a:	e7fe      	b.n	8004a9a <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a9e:	699a      	ldr	r2, [r3, #24]
 8004aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa2:	18d1      	adds	r1, r2, r3
 8004aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aa8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004aaa:	f7ff ff27 	bl	80048fc <prvInsertTimerInActiveList>
					break;
 8004aae:	e009      	b.n	8004ac4 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d104      	bne.n	8004ac4 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8004aba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004abc:	f000 fb6a 	bl	8005194 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004ac0:	e000      	b.n	8004ac4 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 8004ac2:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004ac4:	4b07      	ldr	r3, [pc, #28]	; (8004ae4 <prvProcessReceivedCommands+0x164>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	1d39      	adds	r1, r7, #4
 8004aca:	2200      	movs	r2, #0
 8004acc:	4618      	mov	r0, r3
 8004ace:	f7fe fc29 	bl	8003324 <xQueueReceive>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	f47f af57 	bne.w	8004988 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004ada:	bf00      	nop
 8004adc:	bf00      	nop
 8004ade:	3730      	adds	r7, #48	; 0x30
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}
 8004ae4:	20000e78 	.word	0x20000e78

08004ae8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b088      	sub	sp, #32
 8004aec:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004aee:	e045      	b.n	8004b7c <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004af0:	4b2c      	ldr	r3, [pc, #176]	; (8004ba4 <prvSwitchTimerLists+0xbc>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004afa:	4b2a      	ldr	r3, [pc, #168]	; (8004ba4 <prvSwitchTimerLists+0xbc>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	3304      	adds	r3, #4
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f7fe f949 	bl	8002da0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b12:	68f8      	ldr	r0, [r7, #12]
 8004b14:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	69db      	ldr	r3, [r3, #28]
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d12e      	bne.n	8004b7c <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	699b      	ldr	r3, [r3, #24]
 8004b22:	693a      	ldr	r2, [r7, #16]
 8004b24:	4413      	add	r3, r2
 8004b26:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004b28:	68ba      	ldr	r2, [r7, #8]
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d90e      	bls.n	8004b4e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	68ba      	ldr	r2, [r7, #8]
 8004b34:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	68fa      	ldr	r2, [r7, #12]
 8004b3a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004b3c:	4b19      	ldr	r3, [pc, #100]	; (8004ba4 <prvSwitchTimerLists+0xbc>)
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	3304      	adds	r3, #4
 8004b44:	4619      	mov	r1, r3
 8004b46:	4610      	mov	r0, r2
 8004b48:	f7fe f8f2 	bl	8002d30 <vListInsert>
 8004b4c:	e016      	b.n	8004b7c <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004b4e:	2300      	movs	r3, #0
 8004b50:	9300      	str	r3, [sp, #0]
 8004b52:	2300      	movs	r3, #0
 8004b54:	693a      	ldr	r2, [r7, #16]
 8004b56:	2100      	movs	r1, #0
 8004b58:	68f8      	ldr	r0, [r7, #12]
 8004b5a:	f7ff fd9d 	bl	8004698 <xTimerGenericCommand>
 8004b5e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d10a      	bne.n	8004b7c <prvSwitchTimerLists+0x94>
	__asm volatile
 8004b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b6a:	f383 8811 	msr	BASEPRI, r3
 8004b6e:	f3bf 8f6f 	isb	sy
 8004b72:	f3bf 8f4f 	dsb	sy
 8004b76:	603b      	str	r3, [r7, #0]
}
 8004b78:	bf00      	nop
 8004b7a:	e7fe      	b.n	8004b7a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004b7c:	4b09      	ldr	r3, [pc, #36]	; (8004ba4 <prvSwitchTimerLists+0xbc>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d1b4      	bne.n	8004af0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004b86:	4b07      	ldr	r3, [pc, #28]	; (8004ba4 <prvSwitchTimerLists+0xbc>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004b8c:	4b06      	ldr	r3, [pc, #24]	; (8004ba8 <prvSwitchTimerLists+0xc0>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a04      	ldr	r2, [pc, #16]	; (8004ba4 <prvSwitchTimerLists+0xbc>)
 8004b92:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004b94:	4a04      	ldr	r2, [pc, #16]	; (8004ba8 <prvSwitchTimerLists+0xc0>)
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	6013      	str	r3, [r2, #0]
}
 8004b9a:	bf00      	nop
 8004b9c:	3718      	adds	r7, #24
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}
 8004ba2:	bf00      	nop
 8004ba4:	20000e70 	.word	0x20000e70
 8004ba8:	20000e74 	.word	0x20000e74

08004bac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b082      	sub	sp, #8
 8004bb0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004bb2:	f000 f92b 	bl	8004e0c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004bb6:	4b15      	ldr	r3, [pc, #84]	; (8004c0c <prvCheckForValidListAndQueue+0x60>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d120      	bne.n	8004c00 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004bbe:	4814      	ldr	r0, [pc, #80]	; (8004c10 <prvCheckForValidListAndQueue+0x64>)
 8004bc0:	f7fe f868 	bl	8002c94 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004bc4:	4813      	ldr	r0, [pc, #76]	; (8004c14 <prvCheckForValidListAndQueue+0x68>)
 8004bc6:	f7fe f865 	bl	8002c94 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004bca:	4b13      	ldr	r3, [pc, #76]	; (8004c18 <prvCheckForValidListAndQueue+0x6c>)
 8004bcc:	4a10      	ldr	r2, [pc, #64]	; (8004c10 <prvCheckForValidListAndQueue+0x64>)
 8004bce:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004bd0:	4b12      	ldr	r3, [pc, #72]	; (8004c1c <prvCheckForValidListAndQueue+0x70>)
 8004bd2:	4a10      	ldr	r2, [pc, #64]	; (8004c14 <prvCheckForValidListAndQueue+0x68>)
 8004bd4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	9300      	str	r3, [sp, #0]
 8004bda:	4b11      	ldr	r3, [pc, #68]	; (8004c20 <prvCheckForValidListAndQueue+0x74>)
 8004bdc:	4a11      	ldr	r2, [pc, #68]	; (8004c24 <prvCheckForValidListAndQueue+0x78>)
 8004bde:	2110      	movs	r1, #16
 8004be0:	200a      	movs	r0, #10
 8004be2:	f7fe f96f 	bl	8002ec4 <xQueueGenericCreateStatic>
 8004be6:	4603      	mov	r3, r0
 8004be8:	4a08      	ldr	r2, [pc, #32]	; (8004c0c <prvCheckForValidListAndQueue+0x60>)
 8004bea:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004bec:	4b07      	ldr	r3, [pc, #28]	; (8004c0c <prvCheckForValidListAndQueue+0x60>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d005      	beq.n	8004c00 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004bf4:	4b05      	ldr	r3, [pc, #20]	; (8004c0c <prvCheckForValidListAndQueue+0x60>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	490b      	ldr	r1, [pc, #44]	; (8004c28 <prvCheckForValidListAndQueue+0x7c>)
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f7fe fd82 	bl	8003704 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004c00:	f000 f934 	bl	8004e6c <vPortExitCritical>
}
 8004c04:	bf00      	nop
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
 8004c0a:	bf00      	nop
 8004c0c:	20000e78 	.word	0x20000e78
 8004c10:	20000e48 	.word	0x20000e48
 8004c14:	20000e5c 	.word	0x20000e5c
 8004c18:	20000e70 	.word	0x20000e70
 8004c1c:	20000e74 	.word	0x20000e74
 8004c20:	20000f24 	.word	0x20000f24
 8004c24:	20000e84 	.word	0x20000e84
 8004c28:	08005600 	.word	0x08005600

08004c2c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b085      	sub	sp, #20
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	60f8      	str	r0, [r7, #12]
 8004c34:	60b9      	str	r1, [r7, #8]
 8004c36:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	3b04      	subs	r3, #4
 8004c3c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004c44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	3b04      	subs	r3, #4
 8004c4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	f023 0201 	bic.w	r2, r3, #1
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	3b04      	subs	r3, #4
 8004c5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004c5c:	4a08      	ldr	r2, [pc, #32]	; (8004c80 <pxPortInitialiseStack+0x54>)
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	3b14      	subs	r3, #20
 8004c66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	3b20      	subs	r3, #32
 8004c72:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004c74:	68fb      	ldr	r3, [r7, #12]
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3714      	adds	r7, #20
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bc80      	pop	{r7}
 8004c7e:	4770      	bx	lr
 8004c80:	08004c85 	.word	0x08004c85

08004c84 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004c84:	b480      	push	{r7}
 8004c86:	b085      	sub	sp, #20
 8004c88:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004c8e:	4b12      	ldr	r3, [pc, #72]	; (8004cd8 <prvTaskExitError+0x54>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c96:	d00a      	beq.n	8004cae <prvTaskExitError+0x2a>
	__asm volatile
 8004c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c9c:	f383 8811 	msr	BASEPRI, r3
 8004ca0:	f3bf 8f6f 	isb	sy
 8004ca4:	f3bf 8f4f 	dsb	sy
 8004ca8:	60fb      	str	r3, [r7, #12]
}
 8004caa:	bf00      	nop
 8004cac:	e7fe      	b.n	8004cac <prvTaskExitError+0x28>
	__asm volatile
 8004cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb2:	f383 8811 	msr	BASEPRI, r3
 8004cb6:	f3bf 8f6f 	isb	sy
 8004cba:	f3bf 8f4f 	dsb	sy
 8004cbe:	60bb      	str	r3, [r7, #8]
}
 8004cc0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004cc2:	bf00      	nop
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d0fc      	beq.n	8004cc4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004cca:	bf00      	nop
 8004ccc:	bf00      	nop
 8004cce:	3714      	adds	r7, #20
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bc80      	pop	{r7}
 8004cd4:	4770      	bx	lr
 8004cd6:	bf00      	nop
 8004cd8:	2000000c 	.word	0x2000000c
 8004cdc:	00000000 	.word	0x00000000

08004ce0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004ce0:	4b07      	ldr	r3, [pc, #28]	; (8004d00 <pxCurrentTCBConst2>)
 8004ce2:	6819      	ldr	r1, [r3, #0]
 8004ce4:	6808      	ldr	r0, [r1, #0]
 8004ce6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004cea:	f380 8809 	msr	PSP, r0
 8004cee:	f3bf 8f6f 	isb	sy
 8004cf2:	f04f 0000 	mov.w	r0, #0
 8004cf6:	f380 8811 	msr	BASEPRI, r0
 8004cfa:	f04e 0e0d 	orr.w	lr, lr, #13
 8004cfe:	4770      	bx	lr

08004d00 <pxCurrentTCBConst2>:
 8004d00:	20000948 	.word	0x20000948
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004d04:	bf00      	nop
 8004d06:	bf00      	nop

08004d08 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004d08:	4806      	ldr	r0, [pc, #24]	; (8004d24 <prvPortStartFirstTask+0x1c>)
 8004d0a:	6800      	ldr	r0, [r0, #0]
 8004d0c:	6800      	ldr	r0, [r0, #0]
 8004d0e:	f380 8808 	msr	MSP, r0
 8004d12:	b662      	cpsie	i
 8004d14:	b661      	cpsie	f
 8004d16:	f3bf 8f4f 	dsb	sy
 8004d1a:	f3bf 8f6f 	isb	sy
 8004d1e:	df00      	svc	0
 8004d20:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004d22:	bf00      	nop
 8004d24:	e000ed08 	.word	0xe000ed08

08004d28 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b084      	sub	sp, #16
 8004d2c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004d2e:	4b32      	ldr	r3, [pc, #200]	; (8004df8 <xPortStartScheduler+0xd0>)
 8004d30:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	781b      	ldrb	r3, [r3, #0]
 8004d36:	b2db      	uxtb	r3, r3
 8004d38:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	22ff      	movs	r2, #255	; 0xff
 8004d3e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	781b      	ldrb	r3, [r3, #0]
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004d48:	78fb      	ldrb	r3, [r7, #3]
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004d50:	b2da      	uxtb	r2, r3
 8004d52:	4b2a      	ldr	r3, [pc, #168]	; (8004dfc <xPortStartScheduler+0xd4>)
 8004d54:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004d56:	4b2a      	ldr	r3, [pc, #168]	; (8004e00 <xPortStartScheduler+0xd8>)
 8004d58:	2207      	movs	r2, #7
 8004d5a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004d5c:	e009      	b.n	8004d72 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004d5e:	4b28      	ldr	r3, [pc, #160]	; (8004e00 <xPortStartScheduler+0xd8>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	3b01      	subs	r3, #1
 8004d64:	4a26      	ldr	r2, [pc, #152]	; (8004e00 <xPortStartScheduler+0xd8>)
 8004d66:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004d68:	78fb      	ldrb	r3, [r7, #3]
 8004d6a:	b2db      	uxtb	r3, r3
 8004d6c:	005b      	lsls	r3, r3, #1
 8004d6e:	b2db      	uxtb	r3, r3
 8004d70:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004d72:	78fb      	ldrb	r3, [r7, #3]
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d7a:	2b80      	cmp	r3, #128	; 0x80
 8004d7c:	d0ef      	beq.n	8004d5e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004d7e:	4b20      	ldr	r3, [pc, #128]	; (8004e00 <xPortStartScheduler+0xd8>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f1c3 0307 	rsb	r3, r3, #7
 8004d86:	2b04      	cmp	r3, #4
 8004d88:	d00a      	beq.n	8004da0 <xPortStartScheduler+0x78>
	__asm volatile
 8004d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d8e:	f383 8811 	msr	BASEPRI, r3
 8004d92:	f3bf 8f6f 	isb	sy
 8004d96:	f3bf 8f4f 	dsb	sy
 8004d9a:	60bb      	str	r3, [r7, #8]
}
 8004d9c:	bf00      	nop
 8004d9e:	e7fe      	b.n	8004d9e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004da0:	4b17      	ldr	r3, [pc, #92]	; (8004e00 <xPortStartScheduler+0xd8>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	021b      	lsls	r3, r3, #8
 8004da6:	4a16      	ldr	r2, [pc, #88]	; (8004e00 <xPortStartScheduler+0xd8>)
 8004da8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004daa:	4b15      	ldr	r3, [pc, #84]	; (8004e00 <xPortStartScheduler+0xd8>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004db2:	4a13      	ldr	r2, [pc, #76]	; (8004e00 <xPortStartScheduler+0xd8>)
 8004db4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	b2da      	uxtb	r2, r3
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004dbe:	4b11      	ldr	r3, [pc, #68]	; (8004e04 <xPortStartScheduler+0xdc>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a10      	ldr	r2, [pc, #64]	; (8004e04 <xPortStartScheduler+0xdc>)
 8004dc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004dc8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004dca:	4b0e      	ldr	r3, [pc, #56]	; (8004e04 <xPortStartScheduler+0xdc>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a0d      	ldr	r2, [pc, #52]	; (8004e04 <xPortStartScheduler+0xdc>)
 8004dd0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004dd4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004dd6:	f000 f8b9 	bl	8004f4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004dda:	4b0b      	ldr	r3, [pc, #44]	; (8004e08 <xPortStartScheduler+0xe0>)
 8004ddc:	2200      	movs	r2, #0
 8004dde:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004de0:	f7ff ff92 	bl	8004d08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004de4:	f7ff f8b6 	bl	8003f54 <vTaskSwitchContext>
	prvTaskExitError();
 8004de8:	f7ff ff4c 	bl	8004c84 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004dec:	2300      	movs	r3, #0
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3710      	adds	r7, #16
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop
 8004df8:	e000e400 	.word	0xe000e400
 8004dfc:	20000f74 	.word	0x20000f74
 8004e00:	20000f78 	.word	0x20000f78
 8004e04:	e000ed20 	.word	0xe000ed20
 8004e08:	2000000c 	.word	0x2000000c

08004e0c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b083      	sub	sp, #12
 8004e10:	af00      	add	r7, sp, #0
	__asm volatile
 8004e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e16:	f383 8811 	msr	BASEPRI, r3
 8004e1a:	f3bf 8f6f 	isb	sy
 8004e1e:	f3bf 8f4f 	dsb	sy
 8004e22:	607b      	str	r3, [r7, #4]
}
 8004e24:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004e26:	4b0f      	ldr	r3, [pc, #60]	; (8004e64 <vPortEnterCritical+0x58>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	3301      	adds	r3, #1
 8004e2c:	4a0d      	ldr	r2, [pc, #52]	; (8004e64 <vPortEnterCritical+0x58>)
 8004e2e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004e30:	4b0c      	ldr	r3, [pc, #48]	; (8004e64 <vPortEnterCritical+0x58>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d10f      	bne.n	8004e58 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004e38:	4b0b      	ldr	r3, [pc, #44]	; (8004e68 <vPortEnterCritical+0x5c>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d00a      	beq.n	8004e58 <vPortEnterCritical+0x4c>
	__asm volatile
 8004e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e46:	f383 8811 	msr	BASEPRI, r3
 8004e4a:	f3bf 8f6f 	isb	sy
 8004e4e:	f3bf 8f4f 	dsb	sy
 8004e52:	603b      	str	r3, [r7, #0]
}
 8004e54:	bf00      	nop
 8004e56:	e7fe      	b.n	8004e56 <vPortEnterCritical+0x4a>
	}
}
 8004e58:	bf00      	nop
 8004e5a:	370c      	adds	r7, #12
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bc80      	pop	{r7}
 8004e60:	4770      	bx	lr
 8004e62:	bf00      	nop
 8004e64:	2000000c 	.word	0x2000000c
 8004e68:	e000ed04 	.word	0xe000ed04

08004e6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b083      	sub	sp, #12
 8004e70:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004e72:	4b11      	ldr	r3, [pc, #68]	; (8004eb8 <vPortExitCritical+0x4c>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d10a      	bne.n	8004e90 <vPortExitCritical+0x24>
	__asm volatile
 8004e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e7e:	f383 8811 	msr	BASEPRI, r3
 8004e82:	f3bf 8f6f 	isb	sy
 8004e86:	f3bf 8f4f 	dsb	sy
 8004e8a:	607b      	str	r3, [r7, #4]
}
 8004e8c:	bf00      	nop
 8004e8e:	e7fe      	b.n	8004e8e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004e90:	4b09      	ldr	r3, [pc, #36]	; (8004eb8 <vPortExitCritical+0x4c>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	3b01      	subs	r3, #1
 8004e96:	4a08      	ldr	r2, [pc, #32]	; (8004eb8 <vPortExitCritical+0x4c>)
 8004e98:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004e9a:	4b07      	ldr	r3, [pc, #28]	; (8004eb8 <vPortExitCritical+0x4c>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d105      	bne.n	8004eae <vPortExitCritical+0x42>
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	f383 8811 	msr	BASEPRI, r3
}
 8004eac:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004eae:	bf00      	nop
 8004eb0:	370c      	adds	r7, #12
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bc80      	pop	{r7}
 8004eb6:	4770      	bx	lr
 8004eb8:	2000000c 	.word	0x2000000c
 8004ebc:	00000000 	.word	0x00000000

08004ec0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004ec0:	f3ef 8009 	mrs	r0, PSP
 8004ec4:	f3bf 8f6f 	isb	sy
 8004ec8:	4b0d      	ldr	r3, [pc, #52]	; (8004f00 <pxCurrentTCBConst>)
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004ed0:	6010      	str	r0, [r2, #0]
 8004ed2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004ed6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004eda:	f380 8811 	msr	BASEPRI, r0
 8004ede:	f7ff f839 	bl	8003f54 <vTaskSwitchContext>
 8004ee2:	f04f 0000 	mov.w	r0, #0
 8004ee6:	f380 8811 	msr	BASEPRI, r0
 8004eea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004eee:	6819      	ldr	r1, [r3, #0]
 8004ef0:	6808      	ldr	r0, [r1, #0]
 8004ef2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004ef6:	f380 8809 	msr	PSP, r0
 8004efa:	f3bf 8f6f 	isb	sy
 8004efe:	4770      	bx	lr

08004f00 <pxCurrentTCBConst>:
 8004f00:	20000948 	.word	0x20000948
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004f04:	bf00      	nop
 8004f06:	bf00      	nop

08004f08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b082      	sub	sp, #8
 8004f0c:	af00      	add	r7, sp, #0
	__asm volatile
 8004f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f12:	f383 8811 	msr	BASEPRI, r3
 8004f16:	f3bf 8f6f 	isb	sy
 8004f1a:	f3bf 8f4f 	dsb	sy
 8004f1e:	607b      	str	r3, [r7, #4]
}
 8004f20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004f22:	f7fe ff59 	bl	8003dd8 <xTaskIncrementTick>
 8004f26:	4603      	mov	r3, r0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d003      	beq.n	8004f34 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004f2c:	4b06      	ldr	r3, [pc, #24]	; (8004f48 <SysTick_Handler+0x40>)
 8004f2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f32:	601a      	str	r2, [r3, #0]
 8004f34:	2300      	movs	r3, #0
 8004f36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	f383 8811 	msr	BASEPRI, r3
}
 8004f3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004f40:	bf00      	nop
 8004f42:	3708      	adds	r7, #8
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}
 8004f48:	e000ed04 	.word	0xe000ed04

08004f4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004f50:	4b0a      	ldr	r3, [pc, #40]	; (8004f7c <vPortSetupTimerInterrupt+0x30>)
 8004f52:	2200      	movs	r2, #0
 8004f54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004f56:	4b0a      	ldr	r3, [pc, #40]	; (8004f80 <vPortSetupTimerInterrupt+0x34>)
 8004f58:	2200      	movs	r2, #0
 8004f5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004f5c:	4b09      	ldr	r3, [pc, #36]	; (8004f84 <vPortSetupTimerInterrupt+0x38>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a09      	ldr	r2, [pc, #36]	; (8004f88 <vPortSetupTimerInterrupt+0x3c>)
 8004f62:	fba2 2303 	umull	r2, r3, r2, r3
 8004f66:	099b      	lsrs	r3, r3, #6
 8004f68:	4a08      	ldr	r2, [pc, #32]	; (8004f8c <vPortSetupTimerInterrupt+0x40>)
 8004f6a:	3b01      	subs	r3, #1
 8004f6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004f6e:	4b03      	ldr	r3, [pc, #12]	; (8004f7c <vPortSetupTimerInterrupt+0x30>)
 8004f70:	2207      	movs	r2, #7
 8004f72:	601a      	str	r2, [r3, #0]
}
 8004f74:	bf00      	nop
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bc80      	pop	{r7}
 8004f7a:	4770      	bx	lr
 8004f7c:	e000e010 	.word	0xe000e010
 8004f80:	e000e018 	.word	0xe000e018
 8004f84:	20000000 	.word	0x20000000
 8004f88:	10624dd3 	.word	0x10624dd3
 8004f8c:	e000e014 	.word	0xe000e014

08004f90 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004f90:	b480      	push	{r7}
 8004f92:	b085      	sub	sp, #20
 8004f94:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004f96:	f3ef 8305 	mrs	r3, IPSR
 8004f9a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2b0f      	cmp	r3, #15
 8004fa0:	d914      	bls.n	8004fcc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004fa2:	4a16      	ldr	r2, [pc, #88]	; (8004ffc <vPortValidateInterruptPriority+0x6c>)
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	4413      	add	r3, r2
 8004fa8:	781b      	ldrb	r3, [r3, #0]
 8004faa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004fac:	4b14      	ldr	r3, [pc, #80]	; (8005000 <vPortValidateInterruptPriority+0x70>)
 8004fae:	781b      	ldrb	r3, [r3, #0]
 8004fb0:	7afa      	ldrb	r2, [r7, #11]
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d20a      	bcs.n	8004fcc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fba:	f383 8811 	msr	BASEPRI, r3
 8004fbe:	f3bf 8f6f 	isb	sy
 8004fc2:	f3bf 8f4f 	dsb	sy
 8004fc6:	607b      	str	r3, [r7, #4]
}
 8004fc8:	bf00      	nop
 8004fca:	e7fe      	b.n	8004fca <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004fcc:	4b0d      	ldr	r3, [pc, #52]	; (8005004 <vPortValidateInterruptPriority+0x74>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004fd4:	4b0c      	ldr	r3, [pc, #48]	; (8005008 <vPortValidateInterruptPriority+0x78>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d90a      	bls.n	8004ff2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe0:	f383 8811 	msr	BASEPRI, r3
 8004fe4:	f3bf 8f6f 	isb	sy
 8004fe8:	f3bf 8f4f 	dsb	sy
 8004fec:	603b      	str	r3, [r7, #0]
}
 8004fee:	bf00      	nop
 8004ff0:	e7fe      	b.n	8004ff0 <vPortValidateInterruptPriority+0x60>
	}
 8004ff2:	bf00      	nop
 8004ff4:	3714      	adds	r7, #20
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bc80      	pop	{r7}
 8004ffa:	4770      	bx	lr
 8004ffc:	e000e3f0 	.word	0xe000e3f0
 8005000:	20000f74 	.word	0x20000f74
 8005004:	e000ed0c 	.word	0xe000ed0c
 8005008:	20000f78 	.word	0x20000f78

0800500c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b08a      	sub	sp, #40	; 0x28
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005014:	2300      	movs	r3, #0
 8005016:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005018:	f7fe fe24 	bl	8003c64 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800501c:	4b58      	ldr	r3, [pc, #352]	; (8005180 <pvPortMalloc+0x174>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d101      	bne.n	8005028 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005024:	f000 f910 	bl	8005248 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005028:	4b56      	ldr	r3, [pc, #344]	; (8005184 <pvPortMalloc+0x178>)
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	4013      	ands	r3, r2
 8005030:	2b00      	cmp	r3, #0
 8005032:	f040 808e 	bne.w	8005152 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d01d      	beq.n	8005078 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800503c:	2208      	movs	r2, #8
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4413      	add	r3, r2
 8005042:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f003 0307 	and.w	r3, r3, #7
 800504a:	2b00      	cmp	r3, #0
 800504c:	d014      	beq.n	8005078 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f023 0307 	bic.w	r3, r3, #7
 8005054:	3308      	adds	r3, #8
 8005056:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f003 0307 	and.w	r3, r3, #7
 800505e:	2b00      	cmp	r3, #0
 8005060:	d00a      	beq.n	8005078 <pvPortMalloc+0x6c>
	__asm volatile
 8005062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005066:	f383 8811 	msr	BASEPRI, r3
 800506a:	f3bf 8f6f 	isb	sy
 800506e:	f3bf 8f4f 	dsb	sy
 8005072:	617b      	str	r3, [r7, #20]
}
 8005074:	bf00      	nop
 8005076:	e7fe      	b.n	8005076 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d069      	beq.n	8005152 <pvPortMalloc+0x146>
 800507e:	4b42      	ldr	r3, [pc, #264]	; (8005188 <pvPortMalloc+0x17c>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	429a      	cmp	r2, r3
 8005086:	d864      	bhi.n	8005152 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005088:	4b40      	ldr	r3, [pc, #256]	; (800518c <pvPortMalloc+0x180>)
 800508a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800508c:	4b3f      	ldr	r3, [pc, #252]	; (800518c <pvPortMalloc+0x180>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005092:	e004      	b.n	800509e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005096:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800509e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d903      	bls.n	80050b0 <pvPortMalloc+0xa4>
 80050a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d1f1      	bne.n	8005094 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80050b0:	4b33      	ldr	r3, [pc, #204]	; (8005180 <pvPortMalloc+0x174>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d04b      	beq.n	8005152 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80050ba:	6a3b      	ldr	r3, [r7, #32]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	2208      	movs	r2, #8
 80050c0:	4413      	add	r3, r2
 80050c2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80050c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	6a3b      	ldr	r3, [r7, #32]
 80050ca:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80050cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ce:	685a      	ldr	r2, [r3, #4]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	1ad2      	subs	r2, r2, r3
 80050d4:	2308      	movs	r3, #8
 80050d6:	005b      	lsls	r3, r3, #1
 80050d8:	429a      	cmp	r2, r3
 80050da:	d91f      	bls.n	800511c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80050dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	4413      	add	r3, r2
 80050e2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80050e4:	69bb      	ldr	r3, [r7, #24]
 80050e6:	f003 0307 	and.w	r3, r3, #7
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d00a      	beq.n	8005104 <pvPortMalloc+0xf8>
	__asm volatile
 80050ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f2:	f383 8811 	msr	BASEPRI, r3
 80050f6:	f3bf 8f6f 	isb	sy
 80050fa:	f3bf 8f4f 	dsb	sy
 80050fe:	613b      	str	r3, [r7, #16]
}
 8005100:	bf00      	nop
 8005102:	e7fe      	b.n	8005102 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005106:	685a      	ldr	r2, [r3, #4]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	1ad2      	subs	r2, r2, r3
 800510c:	69bb      	ldr	r3, [r7, #24]
 800510e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005116:	69b8      	ldr	r0, [r7, #24]
 8005118:	f000 f8f8 	bl	800530c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800511c:	4b1a      	ldr	r3, [pc, #104]	; (8005188 <pvPortMalloc+0x17c>)
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	1ad3      	subs	r3, r2, r3
 8005126:	4a18      	ldr	r2, [pc, #96]	; (8005188 <pvPortMalloc+0x17c>)
 8005128:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800512a:	4b17      	ldr	r3, [pc, #92]	; (8005188 <pvPortMalloc+0x17c>)
 800512c:	681a      	ldr	r2, [r3, #0]
 800512e:	4b18      	ldr	r3, [pc, #96]	; (8005190 <pvPortMalloc+0x184>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	429a      	cmp	r2, r3
 8005134:	d203      	bcs.n	800513e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005136:	4b14      	ldr	r3, [pc, #80]	; (8005188 <pvPortMalloc+0x17c>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a15      	ldr	r2, [pc, #84]	; (8005190 <pvPortMalloc+0x184>)
 800513c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800513e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005140:	685a      	ldr	r2, [r3, #4]
 8005142:	4b10      	ldr	r3, [pc, #64]	; (8005184 <pvPortMalloc+0x178>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	431a      	orrs	r2, r3
 8005148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800514c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514e:	2200      	movs	r2, #0
 8005150:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005152:	f7fe fd95 	bl	8003c80 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005156:	69fb      	ldr	r3, [r7, #28]
 8005158:	f003 0307 	and.w	r3, r3, #7
 800515c:	2b00      	cmp	r3, #0
 800515e:	d00a      	beq.n	8005176 <pvPortMalloc+0x16a>
	__asm volatile
 8005160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005164:	f383 8811 	msr	BASEPRI, r3
 8005168:	f3bf 8f6f 	isb	sy
 800516c:	f3bf 8f4f 	dsb	sy
 8005170:	60fb      	str	r3, [r7, #12]
}
 8005172:	bf00      	nop
 8005174:	e7fe      	b.n	8005174 <pvPortMalloc+0x168>
	return pvReturn;
 8005176:	69fb      	ldr	r3, [r7, #28]
}
 8005178:	4618      	mov	r0, r3
 800517a:	3728      	adds	r7, #40	; 0x28
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}
 8005180:	20001b84 	.word	0x20001b84
 8005184:	20001b90 	.word	0x20001b90
 8005188:	20001b88 	.word	0x20001b88
 800518c:	20001b7c 	.word	0x20001b7c
 8005190:	20001b8c 	.word	0x20001b8c

08005194 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b086      	sub	sp, #24
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d048      	beq.n	8005238 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80051a6:	2308      	movs	r3, #8
 80051a8:	425b      	negs	r3, r3
 80051aa:	697a      	ldr	r2, [r7, #20]
 80051ac:	4413      	add	r3, r2
 80051ae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	685a      	ldr	r2, [r3, #4]
 80051b8:	4b21      	ldr	r3, [pc, #132]	; (8005240 <vPortFree+0xac>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4013      	ands	r3, r2
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d10a      	bne.n	80051d8 <vPortFree+0x44>
	__asm volatile
 80051c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c6:	f383 8811 	msr	BASEPRI, r3
 80051ca:	f3bf 8f6f 	isb	sy
 80051ce:	f3bf 8f4f 	dsb	sy
 80051d2:	60fb      	str	r3, [r7, #12]
}
 80051d4:	bf00      	nop
 80051d6:	e7fe      	b.n	80051d6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d00a      	beq.n	80051f6 <vPortFree+0x62>
	__asm volatile
 80051e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e4:	f383 8811 	msr	BASEPRI, r3
 80051e8:	f3bf 8f6f 	isb	sy
 80051ec:	f3bf 8f4f 	dsb	sy
 80051f0:	60bb      	str	r3, [r7, #8]
}
 80051f2:	bf00      	nop
 80051f4:	e7fe      	b.n	80051f4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	685a      	ldr	r2, [r3, #4]
 80051fa:	4b11      	ldr	r3, [pc, #68]	; (8005240 <vPortFree+0xac>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4013      	ands	r3, r2
 8005200:	2b00      	cmp	r3, #0
 8005202:	d019      	beq.n	8005238 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d115      	bne.n	8005238 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	685a      	ldr	r2, [r3, #4]
 8005210:	4b0b      	ldr	r3, [pc, #44]	; (8005240 <vPortFree+0xac>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	43db      	mvns	r3, r3
 8005216:	401a      	ands	r2, r3
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800521c:	f7fe fd22 	bl	8003c64 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	685a      	ldr	r2, [r3, #4]
 8005224:	4b07      	ldr	r3, [pc, #28]	; (8005244 <vPortFree+0xb0>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4413      	add	r3, r2
 800522a:	4a06      	ldr	r2, [pc, #24]	; (8005244 <vPortFree+0xb0>)
 800522c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800522e:	6938      	ldr	r0, [r7, #16]
 8005230:	f000 f86c 	bl	800530c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005234:	f7fe fd24 	bl	8003c80 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005238:	bf00      	nop
 800523a:	3718      	adds	r7, #24
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}
 8005240:	20001b90 	.word	0x20001b90
 8005244:	20001b88 	.word	0x20001b88

08005248 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005248:	b480      	push	{r7}
 800524a:	b085      	sub	sp, #20
 800524c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800524e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005252:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005254:	4b27      	ldr	r3, [pc, #156]	; (80052f4 <prvHeapInit+0xac>)
 8005256:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f003 0307 	and.w	r3, r3, #7
 800525e:	2b00      	cmp	r3, #0
 8005260:	d00c      	beq.n	800527c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	3307      	adds	r3, #7
 8005266:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f023 0307 	bic.w	r3, r3, #7
 800526e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005270:	68ba      	ldr	r2, [r7, #8]
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	1ad3      	subs	r3, r2, r3
 8005276:	4a1f      	ldr	r2, [pc, #124]	; (80052f4 <prvHeapInit+0xac>)
 8005278:	4413      	add	r3, r2
 800527a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005280:	4a1d      	ldr	r2, [pc, #116]	; (80052f8 <prvHeapInit+0xb0>)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005286:	4b1c      	ldr	r3, [pc, #112]	; (80052f8 <prvHeapInit+0xb0>)
 8005288:	2200      	movs	r2, #0
 800528a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	68ba      	ldr	r2, [r7, #8]
 8005290:	4413      	add	r3, r2
 8005292:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005294:	2208      	movs	r2, #8
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	1a9b      	subs	r3, r3, r2
 800529a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f023 0307 	bic.w	r3, r3, #7
 80052a2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	4a15      	ldr	r2, [pc, #84]	; (80052fc <prvHeapInit+0xb4>)
 80052a8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80052aa:	4b14      	ldr	r3, [pc, #80]	; (80052fc <prvHeapInit+0xb4>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	2200      	movs	r2, #0
 80052b0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80052b2:	4b12      	ldr	r3, [pc, #72]	; (80052fc <prvHeapInit+0xb4>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	2200      	movs	r2, #0
 80052b8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	68fa      	ldr	r2, [r7, #12]
 80052c2:	1ad2      	subs	r2, r2, r3
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80052c8:	4b0c      	ldr	r3, [pc, #48]	; (80052fc <prvHeapInit+0xb4>)
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	4a0a      	ldr	r2, [pc, #40]	; (8005300 <prvHeapInit+0xb8>)
 80052d6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	4a09      	ldr	r2, [pc, #36]	; (8005304 <prvHeapInit+0xbc>)
 80052de:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80052e0:	4b09      	ldr	r3, [pc, #36]	; (8005308 <prvHeapInit+0xc0>)
 80052e2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80052e6:	601a      	str	r2, [r3, #0]
}
 80052e8:	bf00      	nop
 80052ea:	3714      	adds	r7, #20
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bc80      	pop	{r7}
 80052f0:	4770      	bx	lr
 80052f2:	bf00      	nop
 80052f4:	20000f7c 	.word	0x20000f7c
 80052f8:	20001b7c 	.word	0x20001b7c
 80052fc:	20001b84 	.word	0x20001b84
 8005300:	20001b8c 	.word	0x20001b8c
 8005304:	20001b88 	.word	0x20001b88
 8005308:	20001b90 	.word	0x20001b90

0800530c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800530c:	b480      	push	{r7}
 800530e:	b085      	sub	sp, #20
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005314:	4b27      	ldr	r3, [pc, #156]	; (80053b4 <prvInsertBlockIntoFreeList+0xa8>)
 8005316:	60fb      	str	r3, [r7, #12]
 8005318:	e002      	b.n	8005320 <prvInsertBlockIntoFreeList+0x14>
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	60fb      	str	r3, [r7, #12]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	429a      	cmp	r2, r3
 8005328:	d8f7      	bhi.n	800531a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	68ba      	ldr	r2, [r7, #8]
 8005334:	4413      	add	r3, r2
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	429a      	cmp	r2, r3
 800533a:	d108      	bne.n	800534e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	685a      	ldr	r2, [r3, #4]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	441a      	add	r2, r3
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	68ba      	ldr	r2, [r7, #8]
 8005358:	441a      	add	r2, r3
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	429a      	cmp	r2, r3
 8005360:	d118      	bne.n	8005394 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	4b14      	ldr	r3, [pc, #80]	; (80053b8 <prvInsertBlockIntoFreeList+0xac>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	429a      	cmp	r2, r3
 800536c:	d00d      	beq.n	800538a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	685a      	ldr	r2, [r3, #4]
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	441a      	add	r2, r3
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	681a      	ldr	r2, [r3, #0]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	601a      	str	r2, [r3, #0]
 8005388:	e008      	b.n	800539c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800538a:	4b0b      	ldr	r3, [pc, #44]	; (80053b8 <prvInsertBlockIntoFreeList+0xac>)
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	601a      	str	r2, [r3, #0]
 8005392:	e003      	b.n	800539c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800539c:	68fa      	ldr	r2, [r7, #12]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d002      	beq.n	80053aa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80053aa:	bf00      	nop
 80053ac:	3714      	adds	r7, #20
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bc80      	pop	{r7}
 80053b2:	4770      	bx	lr
 80053b4:	20001b7c 	.word	0x20001b7c
 80053b8:	20001b84 	.word	0x20001b84

080053bc <uart_tx_task>:
#include "queue.h"

static handler_uart_t *h;


static void uart_tx_task(void const *handle) {
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]


	while(1) {
 80053c4:	e7fe      	b.n	80053c4 <uart_tx_task+0x8>
	...

080053c8 <task_create_uart_tx>:
		//xQueueReceive(h->tx, buf,  portMAX_DELAY);
		//HAL_UART_Transmit(h->tx, buf,  sizeof(uint8_t), 10);
	}
}

void task_create_uart_tx(handler_uart_t *handle) {
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b084      	sub	sp, #16
 80053cc:	af02      	add	r7, sp, #8
 80053ce:	6078      	str	r0, [r7, #4]
	h = handle;
 80053d0:	4a08      	ldr	r2, [pc, #32]	; (80053f4 <task_create_uart_tx+0x2c>)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6013      	str	r3, [r2, #0]
	//h->tx = xQueueGenericCreate(h->buf_length, sizeof(uint8_t));
	//h->rx = xQueueCreate(h->buf_length, sizeof(uint8_t));
	xTaskCreate(uart_tx_task,
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	9301      	str	r3, [sp, #4]
 80053da:	2338      	movs	r3, #56	; 0x38
 80053dc:	9300      	str	r3, [sp, #0]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80053e4:	4904      	ldr	r1, [pc, #16]	; (80053f8 <task_create_uart_tx+0x30>)
 80053e6:	4805      	ldr	r0, [pc, #20]	; (80053fc <task_create_uart_tx+0x34>)
 80053e8:	f7fe fa44 	bl	8003874 <xTaskCreate>
			"Nasty_task",
			256,
			( void * ) handle,
			configMAX_PRIORITIES,
			handle);
}
 80053ec:	bf00      	nop
 80053ee:	3708      	adds	r7, #8
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}
 80053f4:	20001b94 	.word	0x20001b94
 80053f8:	08005608 	.word	0x08005608
 80053fc:	080053bd 	.word	0x080053bd

08005400 <memset>:
 8005400:	4603      	mov	r3, r0
 8005402:	4402      	add	r2, r0
 8005404:	4293      	cmp	r3, r2
 8005406:	d100      	bne.n	800540a <memset+0xa>
 8005408:	4770      	bx	lr
 800540a:	f803 1b01 	strb.w	r1, [r3], #1
 800540e:	e7f9      	b.n	8005404 <memset+0x4>

08005410 <_reclaim_reent>:
 8005410:	4b29      	ldr	r3, [pc, #164]	; (80054b8 <_reclaim_reent+0xa8>)
 8005412:	b570      	push	{r4, r5, r6, lr}
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4604      	mov	r4, r0
 8005418:	4283      	cmp	r3, r0
 800541a:	d04b      	beq.n	80054b4 <_reclaim_reent+0xa4>
 800541c:	69c3      	ldr	r3, [r0, #28]
 800541e:	b143      	cbz	r3, 8005432 <_reclaim_reent+0x22>
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d144      	bne.n	80054b0 <_reclaim_reent+0xa0>
 8005426:	69e3      	ldr	r3, [r4, #28]
 8005428:	6819      	ldr	r1, [r3, #0]
 800542a:	b111      	cbz	r1, 8005432 <_reclaim_reent+0x22>
 800542c:	4620      	mov	r0, r4
 800542e:	f000 f879 	bl	8005524 <_free_r>
 8005432:	6961      	ldr	r1, [r4, #20]
 8005434:	b111      	cbz	r1, 800543c <_reclaim_reent+0x2c>
 8005436:	4620      	mov	r0, r4
 8005438:	f000 f874 	bl	8005524 <_free_r>
 800543c:	69e1      	ldr	r1, [r4, #28]
 800543e:	b111      	cbz	r1, 8005446 <_reclaim_reent+0x36>
 8005440:	4620      	mov	r0, r4
 8005442:	f000 f86f 	bl	8005524 <_free_r>
 8005446:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005448:	b111      	cbz	r1, 8005450 <_reclaim_reent+0x40>
 800544a:	4620      	mov	r0, r4
 800544c:	f000 f86a 	bl	8005524 <_free_r>
 8005450:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005452:	b111      	cbz	r1, 800545a <_reclaim_reent+0x4a>
 8005454:	4620      	mov	r0, r4
 8005456:	f000 f865 	bl	8005524 <_free_r>
 800545a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800545c:	b111      	cbz	r1, 8005464 <_reclaim_reent+0x54>
 800545e:	4620      	mov	r0, r4
 8005460:	f000 f860 	bl	8005524 <_free_r>
 8005464:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005466:	b111      	cbz	r1, 800546e <_reclaim_reent+0x5e>
 8005468:	4620      	mov	r0, r4
 800546a:	f000 f85b 	bl	8005524 <_free_r>
 800546e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005470:	b111      	cbz	r1, 8005478 <_reclaim_reent+0x68>
 8005472:	4620      	mov	r0, r4
 8005474:	f000 f856 	bl	8005524 <_free_r>
 8005478:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800547a:	b111      	cbz	r1, 8005482 <_reclaim_reent+0x72>
 800547c:	4620      	mov	r0, r4
 800547e:	f000 f851 	bl	8005524 <_free_r>
 8005482:	6a23      	ldr	r3, [r4, #32]
 8005484:	b1b3      	cbz	r3, 80054b4 <_reclaim_reent+0xa4>
 8005486:	4620      	mov	r0, r4
 8005488:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800548c:	4718      	bx	r3
 800548e:	5949      	ldr	r1, [r1, r5]
 8005490:	b941      	cbnz	r1, 80054a4 <_reclaim_reent+0x94>
 8005492:	3504      	adds	r5, #4
 8005494:	69e3      	ldr	r3, [r4, #28]
 8005496:	2d80      	cmp	r5, #128	; 0x80
 8005498:	68d9      	ldr	r1, [r3, #12]
 800549a:	d1f8      	bne.n	800548e <_reclaim_reent+0x7e>
 800549c:	4620      	mov	r0, r4
 800549e:	f000 f841 	bl	8005524 <_free_r>
 80054a2:	e7c0      	b.n	8005426 <_reclaim_reent+0x16>
 80054a4:	680e      	ldr	r6, [r1, #0]
 80054a6:	4620      	mov	r0, r4
 80054a8:	f000 f83c 	bl	8005524 <_free_r>
 80054ac:	4631      	mov	r1, r6
 80054ae:	e7ef      	b.n	8005490 <_reclaim_reent+0x80>
 80054b0:	2500      	movs	r5, #0
 80054b2:	e7ef      	b.n	8005494 <_reclaim_reent+0x84>
 80054b4:	bd70      	pop	{r4, r5, r6, pc}
 80054b6:	bf00      	nop
 80054b8:	2000005c 	.word	0x2000005c

080054bc <__libc_init_array>:
 80054bc:	b570      	push	{r4, r5, r6, lr}
 80054be:	2600      	movs	r6, #0
 80054c0:	4d0c      	ldr	r5, [pc, #48]	; (80054f4 <__libc_init_array+0x38>)
 80054c2:	4c0d      	ldr	r4, [pc, #52]	; (80054f8 <__libc_init_array+0x3c>)
 80054c4:	1b64      	subs	r4, r4, r5
 80054c6:	10a4      	asrs	r4, r4, #2
 80054c8:	42a6      	cmp	r6, r4
 80054ca:	d109      	bne.n	80054e0 <__libc_init_array+0x24>
 80054cc:	f000 f87e 	bl	80055cc <_init>
 80054d0:	2600      	movs	r6, #0
 80054d2:	4d0a      	ldr	r5, [pc, #40]	; (80054fc <__libc_init_array+0x40>)
 80054d4:	4c0a      	ldr	r4, [pc, #40]	; (8005500 <__libc_init_array+0x44>)
 80054d6:	1b64      	subs	r4, r4, r5
 80054d8:	10a4      	asrs	r4, r4, #2
 80054da:	42a6      	cmp	r6, r4
 80054dc:	d105      	bne.n	80054ea <__libc_init_array+0x2e>
 80054de:	bd70      	pop	{r4, r5, r6, pc}
 80054e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80054e4:	4798      	blx	r3
 80054e6:	3601      	adds	r6, #1
 80054e8:	e7ee      	b.n	80054c8 <__libc_init_array+0xc>
 80054ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80054ee:	4798      	blx	r3
 80054f0:	3601      	adds	r6, #1
 80054f2:	e7f2      	b.n	80054da <__libc_init_array+0x1e>
 80054f4:	08005664 	.word	0x08005664
 80054f8:	08005664 	.word	0x08005664
 80054fc:	08005664 	.word	0x08005664
 8005500:	08005668 	.word	0x08005668

08005504 <__retarget_lock_acquire_recursive>:
 8005504:	4770      	bx	lr

08005506 <__retarget_lock_release_recursive>:
 8005506:	4770      	bx	lr

08005508 <memcpy>:
 8005508:	440a      	add	r2, r1
 800550a:	4291      	cmp	r1, r2
 800550c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005510:	d100      	bne.n	8005514 <memcpy+0xc>
 8005512:	4770      	bx	lr
 8005514:	b510      	push	{r4, lr}
 8005516:	f811 4b01 	ldrb.w	r4, [r1], #1
 800551a:	4291      	cmp	r1, r2
 800551c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005520:	d1f9      	bne.n	8005516 <memcpy+0xe>
 8005522:	bd10      	pop	{r4, pc}

08005524 <_free_r>:
 8005524:	b538      	push	{r3, r4, r5, lr}
 8005526:	4605      	mov	r5, r0
 8005528:	2900      	cmp	r1, #0
 800552a:	d040      	beq.n	80055ae <_free_r+0x8a>
 800552c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005530:	1f0c      	subs	r4, r1, #4
 8005532:	2b00      	cmp	r3, #0
 8005534:	bfb8      	it	lt
 8005536:	18e4      	addlt	r4, r4, r3
 8005538:	f000 f83c 	bl	80055b4 <__malloc_lock>
 800553c:	4a1c      	ldr	r2, [pc, #112]	; (80055b0 <_free_r+0x8c>)
 800553e:	6813      	ldr	r3, [r2, #0]
 8005540:	b933      	cbnz	r3, 8005550 <_free_r+0x2c>
 8005542:	6063      	str	r3, [r4, #4]
 8005544:	6014      	str	r4, [r2, #0]
 8005546:	4628      	mov	r0, r5
 8005548:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800554c:	f000 b838 	b.w	80055c0 <__malloc_unlock>
 8005550:	42a3      	cmp	r3, r4
 8005552:	d908      	bls.n	8005566 <_free_r+0x42>
 8005554:	6820      	ldr	r0, [r4, #0]
 8005556:	1821      	adds	r1, r4, r0
 8005558:	428b      	cmp	r3, r1
 800555a:	bf01      	itttt	eq
 800555c:	6819      	ldreq	r1, [r3, #0]
 800555e:	685b      	ldreq	r3, [r3, #4]
 8005560:	1809      	addeq	r1, r1, r0
 8005562:	6021      	streq	r1, [r4, #0]
 8005564:	e7ed      	b.n	8005542 <_free_r+0x1e>
 8005566:	461a      	mov	r2, r3
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	b10b      	cbz	r3, 8005570 <_free_r+0x4c>
 800556c:	42a3      	cmp	r3, r4
 800556e:	d9fa      	bls.n	8005566 <_free_r+0x42>
 8005570:	6811      	ldr	r1, [r2, #0]
 8005572:	1850      	adds	r0, r2, r1
 8005574:	42a0      	cmp	r0, r4
 8005576:	d10b      	bne.n	8005590 <_free_r+0x6c>
 8005578:	6820      	ldr	r0, [r4, #0]
 800557a:	4401      	add	r1, r0
 800557c:	1850      	adds	r0, r2, r1
 800557e:	4283      	cmp	r3, r0
 8005580:	6011      	str	r1, [r2, #0]
 8005582:	d1e0      	bne.n	8005546 <_free_r+0x22>
 8005584:	6818      	ldr	r0, [r3, #0]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	4408      	add	r0, r1
 800558a:	6010      	str	r0, [r2, #0]
 800558c:	6053      	str	r3, [r2, #4]
 800558e:	e7da      	b.n	8005546 <_free_r+0x22>
 8005590:	d902      	bls.n	8005598 <_free_r+0x74>
 8005592:	230c      	movs	r3, #12
 8005594:	602b      	str	r3, [r5, #0]
 8005596:	e7d6      	b.n	8005546 <_free_r+0x22>
 8005598:	6820      	ldr	r0, [r4, #0]
 800559a:	1821      	adds	r1, r4, r0
 800559c:	428b      	cmp	r3, r1
 800559e:	bf01      	itttt	eq
 80055a0:	6819      	ldreq	r1, [r3, #0]
 80055a2:	685b      	ldreq	r3, [r3, #4]
 80055a4:	1809      	addeq	r1, r1, r0
 80055a6:	6021      	streq	r1, [r4, #0]
 80055a8:	6063      	str	r3, [r4, #4]
 80055aa:	6054      	str	r4, [r2, #4]
 80055ac:	e7cb      	b.n	8005546 <_free_r+0x22>
 80055ae:	bd38      	pop	{r3, r4, r5, pc}
 80055b0:	20001cd4 	.word	0x20001cd4

080055b4 <__malloc_lock>:
 80055b4:	4801      	ldr	r0, [pc, #4]	; (80055bc <__malloc_lock+0x8>)
 80055b6:	f7ff bfa5 	b.w	8005504 <__retarget_lock_acquire_recursive>
 80055ba:	bf00      	nop
 80055bc:	20001cd0 	.word	0x20001cd0

080055c0 <__malloc_unlock>:
 80055c0:	4801      	ldr	r0, [pc, #4]	; (80055c8 <__malloc_unlock+0x8>)
 80055c2:	f7ff bfa0 	b.w	8005506 <__retarget_lock_release_recursive>
 80055c6:	bf00      	nop
 80055c8:	20001cd0 	.word	0x20001cd0

080055cc <_init>:
 80055cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055ce:	bf00      	nop
 80055d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055d2:	bc08      	pop	{r3}
 80055d4:	469e      	mov	lr, r3
 80055d6:	4770      	bx	lr

080055d8 <_fini>:
 80055d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055da:	bf00      	nop
 80055dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055de:	bc08      	pop	{r3}
 80055e0:	469e      	mov	lr, r3
 80055e2:	4770      	bx	lr
