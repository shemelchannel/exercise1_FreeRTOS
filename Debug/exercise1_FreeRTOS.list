
exercise1_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< HEAD
  1 .text         00004a7c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08004b90  08004b90  00014b90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c28  08004c28  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08004c28  08004c28  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004c28  08004c28  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c28  08004c28  00014c28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c2c  08004c2c  00014c2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004c30  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011ac  20000078  08004ca8  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001224  08004ca8  00021224  2**0
=======
  1 .text         00003644  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08003758  08003758  00013758  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037b0  080037b0  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  080037b0  080037b0  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  080037b0  080037b0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037b0  080037b0  000137b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080037b4  080037b4  000137b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080037b8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000208  20000078  08003830  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000280  08003830  00020280  2**0
>>>>>>> main
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY
<<<<<<< HEAD
 13 .debug_info   00007f3a  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f17  00000000  00000000  0002801e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000988  00000000  00000000  00029f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000714  00000000  00000000  0002a8c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017ebe  00000000  00000000  0002afd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a64e  00000000  00000000  00042e92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000880fe  00000000  00000000  0004d4e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002adc  00000000  00000000  000d55e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000d80bc  2**0
=======
 13 .debug_info   000036b1  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000011ae  00000000  00000000  00023795  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000004d8  00000000  00000000  00024948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000382  00000000  00000000  00024e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000164f3  00000000  00000000  000251a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00005783  00000000  00000000  0003b695  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007faac  00000000  00000000  00040e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000017c0  00000000  00000000  000c08c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000c2084  2**0
>>>>>>> main
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
<<<<<<< HEAD
 8000130:	08004b74 	.word	0x08004b74
=======
 8000130:	0800373c 	.word	0x0800373c
>>>>>>> main

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
<<<<<<< HEAD
 800014c:	08004b74 	.word	0x08004b74
=======
 800014c:	0800373c 	.word	0x0800373c
>>>>>>> main

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2uiz>:
 8000a28:	004a      	lsls	r2, r1, #1
 8000a2a:	d211      	bcs.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d211      	bcs.n	8000a56 <__aeabi_d2uiz+0x2e>
 8000a32:	d50d      	bpl.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d40e      	bmi.n	8000a5c <__aeabi_d2uiz+0x34>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a4e:	4770      	bx	lr
 8000a50:	f04f 0000 	mov.w	r0, #0
 8000a54:	4770      	bx	lr
 8000a56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_d2uiz+0x3a>
 8000a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0000 	mov.w	r0, #0
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_frsub>:
 8000a68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a6c:	e002      	b.n	8000a74 <__addsf3>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_fsub>:
 8000a70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a74 <__addsf3>:
 8000a74:	0042      	lsls	r2, r0, #1
 8000a76:	bf1f      	itttt	ne
 8000a78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a7c:	ea92 0f03 	teqne	r2, r3
 8000a80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a88:	d06a      	beq.n	8000b60 <__addsf3+0xec>
 8000a8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a92:	bfc1      	itttt	gt
 8000a94:	18d2      	addgt	r2, r2, r3
 8000a96:	4041      	eorgt	r1, r0
 8000a98:	4048      	eorgt	r0, r1
 8000a9a:	4041      	eorgt	r1, r0
 8000a9c:	bfb8      	it	lt
 8000a9e:	425b      	neglt	r3, r3
 8000aa0:	2b19      	cmp	r3, #25
 8000aa2:	bf88      	it	hi
 8000aa4:	4770      	bxhi	lr
 8000aa6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aaa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ab2:	bf18      	it	ne
 8000ab4:	4240      	negne	r0, r0
 8000ab6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000abe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ac2:	bf18      	it	ne
 8000ac4:	4249      	negne	r1, r1
 8000ac6:	ea92 0f03 	teq	r2, r3
 8000aca:	d03f      	beq.n	8000b4c <__addsf3+0xd8>
 8000acc:	f1a2 0201 	sub.w	r2, r2, #1
 8000ad0:	fa41 fc03 	asr.w	ip, r1, r3
 8000ad4:	eb10 000c 	adds.w	r0, r0, ip
 8000ad8:	f1c3 0320 	rsb	r3, r3, #32
 8000adc:	fa01 f103 	lsl.w	r1, r1, r3
 8000ae0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ae4:	d502      	bpl.n	8000aec <__addsf3+0x78>
 8000ae6:	4249      	negs	r1, r1
 8000ae8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000aec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000af0:	d313      	bcc.n	8000b1a <__addsf3+0xa6>
 8000af2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000af6:	d306      	bcc.n	8000b06 <__addsf3+0x92>
 8000af8:	0840      	lsrs	r0, r0, #1
 8000afa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000afe:	f102 0201 	add.w	r2, r2, #1
 8000b02:	2afe      	cmp	r2, #254	; 0xfe
 8000b04:	d251      	bcs.n	8000baa <__addsf3+0x136>
 8000b06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b0e:	bf08      	it	eq
 8000b10:	f020 0001 	biceq.w	r0, r0, #1
 8000b14:	ea40 0003 	orr.w	r0, r0, r3
 8000b18:	4770      	bx	lr
 8000b1a:	0049      	lsls	r1, r1, #1
 8000b1c:	eb40 0000 	adc.w	r0, r0, r0
 8000b20:	3a01      	subs	r2, #1
 8000b22:	bf28      	it	cs
 8000b24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b28:	d2ed      	bcs.n	8000b06 <__addsf3+0x92>
 8000b2a:	fab0 fc80 	clz	ip, r0
 8000b2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b32:	ebb2 020c 	subs.w	r2, r2, ip
 8000b36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b3a:	bfaa      	itet	ge
 8000b3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b40:	4252      	neglt	r2, r2
 8000b42:	4318      	orrge	r0, r3
 8000b44:	bfbc      	itt	lt
 8000b46:	40d0      	lsrlt	r0, r2
 8000b48:	4318      	orrlt	r0, r3
 8000b4a:	4770      	bx	lr
 8000b4c:	f092 0f00 	teq	r2, #0
 8000b50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b54:	bf06      	itte	eq
 8000b56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b5a:	3201      	addeq	r2, #1
 8000b5c:	3b01      	subne	r3, #1
 8000b5e:	e7b5      	b.n	8000acc <__addsf3+0x58>
 8000b60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b68:	bf18      	it	ne
 8000b6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b6e:	d021      	beq.n	8000bb4 <__addsf3+0x140>
 8000b70:	ea92 0f03 	teq	r2, r3
 8000b74:	d004      	beq.n	8000b80 <__addsf3+0x10c>
 8000b76:	f092 0f00 	teq	r2, #0
 8000b7a:	bf08      	it	eq
 8000b7c:	4608      	moveq	r0, r1
 8000b7e:	4770      	bx	lr
 8000b80:	ea90 0f01 	teq	r0, r1
 8000b84:	bf1c      	itt	ne
 8000b86:	2000      	movne	r0, #0
 8000b88:	4770      	bxne	lr
 8000b8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b8e:	d104      	bne.n	8000b9a <__addsf3+0x126>
 8000b90:	0040      	lsls	r0, r0, #1
 8000b92:	bf28      	it	cs
 8000b94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b98:	4770      	bx	lr
 8000b9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b9e:	bf3c      	itt	cc
 8000ba0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ba4:	4770      	bxcc	lr
 8000ba6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000baa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bb2:	4770      	bx	lr
 8000bb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bb8:	bf16      	itet	ne
 8000bba:	4608      	movne	r0, r1
 8000bbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bc0:	4601      	movne	r1, r0
 8000bc2:	0242      	lsls	r2, r0, #9
 8000bc4:	bf06      	itte	eq
 8000bc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bca:	ea90 0f01 	teqeq	r0, r1
 8000bce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bd2:	4770      	bx	lr

08000bd4 <__aeabi_ui2f>:
 8000bd4:	f04f 0300 	mov.w	r3, #0
 8000bd8:	e004      	b.n	8000be4 <__aeabi_i2f+0x8>
 8000bda:	bf00      	nop

08000bdc <__aeabi_i2f>:
 8000bdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000be0:	bf48      	it	mi
 8000be2:	4240      	negmi	r0, r0
 8000be4:	ea5f 0c00 	movs.w	ip, r0
 8000be8:	bf08      	it	eq
 8000bea:	4770      	bxeq	lr
 8000bec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000bf0:	4601      	mov	r1, r0
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	e01c      	b.n	8000c32 <__aeabi_l2f+0x2a>

08000bf8 <__aeabi_ul2f>:
 8000bf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000bfc:	bf08      	it	eq
 8000bfe:	4770      	bxeq	lr
 8000c00:	f04f 0300 	mov.w	r3, #0
 8000c04:	e00a      	b.n	8000c1c <__aeabi_l2f+0x14>
 8000c06:	bf00      	nop

08000c08 <__aeabi_l2f>:
 8000c08:	ea50 0201 	orrs.w	r2, r0, r1
 8000c0c:	bf08      	it	eq
 8000c0e:	4770      	bxeq	lr
 8000c10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c14:	d502      	bpl.n	8000c1c <__aeabi_l2f+0x14>
 8000c16:	4240      	negs	r0, r0
 8000c18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c1c:	ea5f 0c01 	movs.w	ip, r1
 8000c20:	bf02      	ittt	eq
 8000c22:	4684      	moveq	ip, r0
 8000c24:	4601      	moveq	r1, r0
 8000c26:	2000      	moveq	r0, #0
 8000c28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c2c:	bf08      	it	eq
 8000c2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c36:	fabc f28c 	clz	r2, ip
 8000c3a:	3a08      	subs	r2, #8
 8000c3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c40:	db10      	blt.n	8000c64 <__aeabi_l2f+0x5c>
 8000c42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c46:	4463      	add	r3, ip
 8000c48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c4c:	f1c2 0220 	rsb	r2, r2, #32
 8000c50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c54:	fa20 f202 	lsr.w	r2, r0, r2
 8000c58:	eb43 0002 	adc.w	r0, r3, r2
 8000c5c:	bf08      	it	eq
 8000c5e:	f020 0001 	biceq.w	r0, r0, #1
 8000c62:	4770      	bx	lr
 8000c64:	f102 0220 	add.w	r2, r2, #32
 8000c68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c74:	fa21 f202 	lsr.w	r2, r1, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c82:	4770      	bx	lr

08000c84 <__aeabi_fmul>:
 8000c84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c92:	ea92 0f0c 	teqne	r2, ip
 8000c96:	ea93 0f0c 	teqne	r3, ip
 8000c9a:	d06f      	beq.n	8000d7c <__aeabi_fmul+0xf8>
 8000c9c:	441a      	add	r2, r3
 8000c9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000ca2:	0240      	lsls	r0, r0, #9
 8000ca4:	bf18      	it	ne
 8000ca6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000caa:	d01e      	beq.n	8000cea <__aeabi_fmul+0x66>
 8000cac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cb0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cb4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cb8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000cc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000cc4:	bf3e      	ittt	cc
 8000cc6:	0049      	lslcc	r1, r1, #1
 8000cc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ccc:	005b      	lslcc	r3, r3, #1
 8000cce:	ea40 0001 	orr.w	r0, r0, r1
 8000cd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cd6:	2afd      	cmp	r2, #253	; 0xfd
 8000cd8:	d81d      	bhi.n	8000d16 <__aeabi_fmul+0x92>
 8000cda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ce2:	bf08      	it	eq
 8000ce4:	f020 0001 	biceq.w	r0, r0, #1
 8000ce8:	4770      	bx	lr
 8000cea:	f090 0f00 	teq	r0, #0
 8000cee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000cf2:	bf08      	it	eq
 8000cf4:	0249      	lsleq	r1, r1, #9
 8000cf6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000cfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000cfe:	3a7f      	subs	r2, #127	; 0x7f
 8000d00:	bfc2      	ittt	gt
 8000d02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d0a:	4770      	bxgt	lr
 8000d0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d10:	f04f 0300 	mov.w	r3, #0
 8000d14:	3a01      	subs	r2, #1
 8000d16:	dc5d      	bgt.n	8000dd4 <__aeabi_fmul+0x150>
 8000d18:	f112 0f19 	cmn.w	r2, #25
 8000d1c:	bfdc      	itt	le
 8000d1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d22:	4770      	bxle	lr
 8000d24:	f1c2 0200 	rsb	r2, r2, #0
 8000d28:	0041      	lsls	r1, r0, #1
 8000d2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d2e:	f1c2 0220 	rsb	r2, r2, #32
 8000d32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d3a:	f140 0000 	adc.w	r0, r0, #0
 8000d3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d42:	bf08      	it	eq
 8000d44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d48:	4770      	bx	lr
 8000d4a:	f092 0f00 	teq	r2, #0
 8000d4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d52:	bf02      	ittt	eq
 8000d54:	0040      	lsleq	r0, r0, #1
 8000d56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d5a:	3a01      	subeq	r2, #1
 8000d5c:	d0f9      	beq.n	8000d52 <__aeabi_fmul+0xce>
 8000d5e:	ea40 000c 	orr.w	r0, r0, ip
 8000d62:	f093 0f00 	teq	r3, #0
 8000d66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d6a:	bf02      	ittt	eq
 8000d6c:	0049      	lsleq	r1, r1, #1
 8000d6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d72:	3b01      	subeq	r3, #1
 8000d74:	d0f9      	beq.n	8000d6a <__aeabi_fmul+0xe6>
 8000d76:	ea41 010c 	orr.w	r1, r1, ip
 8000d7a:	e78f      	b.n	8000c9c <__aeabi_fmul+0x18>
 8000d7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d80:	ea92 0f0c 	teq	r2, ip
 8000d84:	bf18      	it	ne
 8000d86:	ea93 0f0c 	teqne	r3, ip
 8000d8a:	d00a      	beq.n	8000da2 <__aeabi_fmul+0x11e>
 8000d8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d90:	bf18      	it	ne
 8000d92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d96:	d1d8      	bne.n	8000d4a <__aeabi_fmul+0xc6>
 8000d98:	ea80 0001 	eor.w	r0, r0, r1
 8000d9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000da0:	4770      	bx	lr
 8000da2:	f090 0f00 	teq	r0, #0
 8000da6:	bf17      	itett	ne
 8000da8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dac:	4608      	moveq	r0, r1
 8000dae:	f091 0f00 	teqne	r1, #0
 8000db2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000db6:	d014      	beq.n	8000de2 <__aeabi_fmul+0x15e>
 8000db8:	ea92 0f0c 	teq	r2, ip
 8000dbc:	d101      	bne.n	8000dc2 <__aeabi_fmul+0x13e>
 8000dbe:	0242      	lsls	r2, r0, #9
 8000dc0:	d10f      	bne.n	8000de2 <__aeabi_fmul+0x15e>
 8000dc2:	ea93 0f0c 	teq	r3, ip
 8000dc6:	d103      	bne.n	8000dd0 <__aeabi_fmul+0x14c>
 8000dc8:	024b      	lsls	r3, r1, #9
 8000dca:	bf18      	it	ne
 8000dcc:	4608      	movne	r0, r1
 8000dce:	d108      	bne.n	8000de2 <__aeabi_fmul+0x15e>
 8000dd0:	ea80 0001 	eor.w	r0, r0, r1
 8000dd4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dd8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ddc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000de0:	4770      	bx	lr
 8000de2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000de6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000dea:	4770      	bx	lr

08000dec <__aeabi_fdiv>:
 8000dec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000df0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000df4:	bf1e      	ittt	ne
 8000df6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dfa:	ea92 0f0c 	teqne	r2, ip
 8000dfe:	ea93 0f0c 	teqne	r3, ip
 8000e02:	d069      	beq.n	8000ed8 <__aeabi_fdiv+0xec>
 8000e04:	eba2 0203 	sub.w	r2, r2, r3
 8000e08:	ea80 0c01 	eor.w	ip, r0, r1
 8000e0c:	0249      	lsls	r1, r1, #9
 8000e0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e12:	d037      	beq.n	8000e84 <__aeabi_fdiv+0x98>
 8000e14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e24:	428b      	cmp	r3, r1
 8000e26:	bf38      	it	cc
 8000e28:	005b      	lslcc	r3, r3, #1
 8000e2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e32:	428b      	cmp	r3, r1
 8000e34:	bf24      	itt	cs
 8000e36:	1a5b      	subcs	r3, r3, r1
 8000e38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e40:	bf24      	itt	cs
 8000e42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e4e:	bf24      	itt	cs
 8000e50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e5c:	bf24      	itt	cs
 8000e5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e66:	011b      	lsls	r3, r3, #4
 8000e68:	bf18      	it	ne
 8000e6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e6e:	d1e0      	bne.n	8000e32 <__aeabi_fdiv+0x46>
 8000e70:	2afd      	cmp	r2, #253	; 0xfd
 8000e72:	f63f af50 	bhi.w	8000d16 <__aeabi_fmul+0x92>
 8000e76:	428b      	cmp	r3, r1
 8000e78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e7c:	bf08      	it	eq
 8000e7e:	f020 0001 	biceq.w	r0, r0, #1
 8000e82:	4770      	bx	lr
 8000e84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e8c:	327f      	adds	r2, #127	; 0x7f
 8000e8e:	bfc2      	ittt	gt
 8000e90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e98:	4770      	bxgt	lr
 8000e9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e9e:	f04f 0300 	mov.w	r3, #0
 8000ea2:	3a01      	subs	r2, #1
 8000ea4:	e737      	b.n	8000d16 <__aeabi_fmul+0x92>
 8000ea6:	f092 0f00 	teq	r2, #0
 8000eaa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000eae:	bf02      	ittt	eq
 8000eb0:	0040      	lsleq	r0, r0, #1
 8000eb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000eb6:	3a01      	subeq	r2, #1
 8000eb8:	d0f9      	beq.n	8000eae <__aeabi_fdiv+0xc2>
 8000eba:	ea40 000c 	orr.w	r0, r0, ip
 8000ebe:	f093 0f00 	teq	r3, #0
 8000ec2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ec6:	bf02      	ittt	eq
 8000ec8:	0049      	lsleq	r1, r1, #1
 8000eca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ece:	3b01      	subeq	r3, #1
 8000ed0:	d0f9      	beq.n	8000ec6 <__aeabi_fdiv+0xda>
 8000ed2:	ea41 010c 	orr.w	r1, r1, ip
 8000ed6:	e795      	b.n	8000e04 <__aeabi_fdiv+0x18>
 8000ed8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000edc:	ea92 0f0c 	teq	r2, ip
 8000ee0:	d108      	bne.n	8000ef4 <__aeabi_fdiv+0x108>
 8000ee2:	0242      	lsls	r2, r0, #9
 8000ee4:	f47f af7d 	bne.w	8000de2 <__aeabi_fmul+0x15e>
 8000ee8:	ea93 0f0c 	teq	r3, ip
 8000eec:	f47f af70 	bne.w	8000dd0 <__aeabi_fmul+0x14c>
 8000ef0:	4608      	mov	r0, r1
 8000ef2:	e776      	b.n	8000de2 <__aeabi_fmul+0x15e>
 8000ef4:	ea93 0f0c 	teq	r3, ip
 8000ef8:	d104      	bne.n	8000f04 <__aeabi_fdiv+0x118>
 8000efa:	024b      	lsls	r3, r1, #9
 8000efc:	f43f af4c 	beq.w	8000d98 <__aeabi_fmul+0x114>
 8000f00:	4608      	mov	r0, r1
 8000f02:	e76e      	b.n	8000de2 <__aeabi_fmul+0x15e>
 8000f04:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f08:	bf18      	it	ne
 8000f0a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f0e:	d1ca      	bne.n	8000ea6 <__aeabi_fdiv+0xba>
 8000f10:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f14:	f47f af5c 	bne.w	8000dd0 <__aeabi_fmul+0x14c>
 8000f18:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f1c:	f47f af3c 	bne.w	8000d98 <__aeabi_fmul+0x114>
 8000f20:	e75f      	b.n	8000de2 <__aeabi_fmul+0x15e>
 8000f22:	bf00      	nop

08000f24 <__aeabi_f2iz>:
 8000f24:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f28:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f2c:	d30f      	bcc.n	8000f4e <__aeabi_f2iz+0x2a>
 8000f2e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f32:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f36:	d90d      	bls.n	8000f54 <__aeabi_f2iz+0x30>
 8000f38:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f3c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f40:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000f44:	fa23 f002 	lsr.w	r0, r3, r2
 8000f48:	bf18      	it	ne
 8000f4a:	4240      	negne	r0, r0
 8000f4c:	4770      	bx	lr
 8000f4e:	f04f 0000 	mov.w	r0, #0
 8000f52:	4770      	bx	lr
 8000f54:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f58:	d101      	bne.n	8000f5e <__aeabi_f2iz+0x3a>
 8000f5a:	0242      	lsls	r2, r0, #9
 8000f5c:	d105      	bne.n	8000f6a <__aeabi_f2iz+0x46>
 8000f5e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000f62:	bf08      	it	eq
 8000f64:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000f68:	4770      	bx	lr
 8000f6a:	f04f 0000 	mov.w	r0, #0
 8000f6e:	4770      	bx	lr

08000f70 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000f70:	b480      	push	{r7}
 8000f72:	b085      	sub	sp, #20
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	60f8      	str	r0, [r7, #12]
 8000f78:	60b9      	str	r1, [r7, #8]
 8000f7a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	4a06      	ldr	r2, [pc, #24]	; (8000f98 <vApplicationGetIdleTaskMemory+0x28>)
 8000f80:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	4a05      	ldr	r2, [pc, #20]	; (8000f9c <vApplicationGetIdleTaskMemory+0x2c>)
 8000f86:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2280      	movs	r2, #128	; 0x80
 8000f8c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000f8e:	bf00      	nop
 8000f90:	3714      	adds	r7, #20
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bc80      	pop	{r7}
 8000f96:	4770      	bx	lr
 8000f98:	20000094 	.word	0x20000094
 8000f9c:	200000e8 	.word	0x200000e8

08000fa0 <APP_init>:
static state_t set_freq_state;
static state_t run_state;
static state_t stop_run_state;
static state_t reset_state;

void APP_init(APP_handle_t *handle){
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]

	h = handle;
 8000fa8:	4a17      	ldr	r2, [pc, #92]	; (8001008 <APP_init+0x68>)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6013      	str	r3, [r2, #0]

	set_freq_state.processing = &set_freq_proc;
 8000fae:	4b17      	ldr	r3, [pc, #92]	; (800100c <APP_init+0x6c>)
 8000fb0:	4a17      	ldr	r2, [pc, #92]	; (8001010 <APP_init+0x70>)
 8000fb2:	601a      	str	r2, [r3, #0]
	set_freq_state.next		  = &run_state;
 8000fb4:	4b15      	ldr	r3, [pc, #84]	; (800100c <APP_init+0x6c>)
 8000fb6:	4a17      	ldr	r2, [pc, #92]	; (8001014 <APP_init+0x74>)
 8000fb8:	605a      	str	r2, [r3, #4]
	set_freq_state.back		  = &stop_run_state;
 8000fba:	4b14      	ldr	r3, [pc, #80]	; (800100c <APP_init+0x6c>)
 8000fbc:	4a16      	ldr	r2, [pc, #88]	; (8001018 <APP_init+0x78>)
 8000fbe:	609a      	str	r2, [r3, #8]

	run_state.processing = &run_proc;
 8000fc0:	4b14      	ldr	r3, [pc, #80]	; (8001014 <APP_init+0x74>)
 8000fc2:	4a16      	ldr	r2, [pc, #88]	; (800101c <APP_init+0x7c>)
 8000fc4:	601a      	str	r2, [r3, #0]
	run_state.next		 = &stop_run_state;
 8000fc6:	4b13      	ldr	r3, [pc, #76]	; (8001014 <APP_init+0x74>)
 8000fc8:	4a13      	ldr	r2, [pc, #76]	; (8001018 <APP_init+0x78>)
 8000fca:	605a      	str	r2, [r3, #4]
	run_state.back		 = &set_freq_state;
 8000fcc:	4b11      	ldr	r3, [pc, #68]	; (8001014 <APP_init+0x74>)
 8000fce:	4a0f      	ldr	r2, [pc, #60]	; (800100c <APP_init+0x6c>)
 8000fd0:	609a      	str	r2, [r3, #8]

	stop_run_state.processing = &stop_run_proc;
 8000fd2:	4b11      	ldr	r3, [pc, #68]	; (8001018 <APP_init+0x78>)
 8000fd4:	4a12      	ldr	r2, [pc, #72]	; (8001020 <APP_init+0x80>)
 8000fd6:	601a      	str	r2, [r3, #0]
	stop_run_state.next		  = &reset_state;
 8000fd8:	4b0f      	ldr	r3, [pc, #60]	; (8001018 <APP_init+0x78>)
 8000fda:	4a12      	ldr	r2, [pc, #72]	; (8001024 <APP_init+0x84>)
 8000fdc:	605a      	str	r2, [r3, #4]
	stop_run_state.back		  = &run_state;
 8000fde:	4b0e      	ldr	r3, [pc, #56]	; (8001018 <APP_init+0x78>)
 8000fe0:	4a0c      	ldr	r2, [pc, #48]	; (8001014 <APP_init+0x74>)
 8000fe2:	609a      	str	r2, [r3, #8]

	reset_state.processing = &reset_proc;
 8000fe4:	4b0f      	ldr	r3, [pc, #60]	; (8001024 <APP_init+0x84>)
 8000fe6:	4a10      	ldr	r2, [pc, #64]	; (8001028 <APP_init+0x88>)
 8000fe8:	601a      	str	r2, [r3, #0]
	reset_state.next	   = &set_freq_state;
 8000fea:	4b0e      	ldr	r3, [pc, #56]	; (8001024 <APP_init+0x84>)
 8000fec:	4a07      	ldr	r2, [pc, #28]	; (800100c <APP_init+0x6c>)
 8000fee:	605a      	str	r2, [r3, #4]
	reset_state.back	   = &stop_run_state;
 8000ff0:	4b0c      	ldr	r3, [pc, #48]	; (8001024 <APP_init+0x84>)
 8000ff2:	4a09      	ldr	r2, [pc, #36]	; (8001018 <APP_init+0x78>)
 8000ff4:	609a      	str	r2, [r3, #8]

	current_state = &(set_freq_state);
 8000ff6:	4b0d      	ldr	r3, [pc, #52]	; (800102c <APP_init+0x8c>)
 8000ff8:	4a04      	ldr	r2, [pc, #16]	; (800100c <APP_init+0x6c>)
 8000ffa:	601a      	str	r2, [r3, #0]
}
<<<<<<< HEAD
 8000ffc:	bf00      	nop
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	bc80      	pop	{r7}
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	200002e8 	.word	0x200002e8
 800100c:	200002f0 	.word	0x200002f0
 8001010:	08001049 	.word	0x08001049
 8001014:	200002fc 	.word	0x200002fc
 8001018:	20000308 	.word	0x20000308
 800101c:	0800113d 	.word	0x0800113d
 8001020:	080011ed 	.word	0x080011ed
 8001024:	20000314 	.word	0x20000314
 8001028:	08001219 	.word	0x08001219
 800102c:	200002ec 	.word	0x200002ec
=======
 8000fc0:	bf00      	nop
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bc80      	pop	{r7}
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	20000094 	.word	0x20000094
 8000fd0:	2000009c 	.word	0x2000009c
 8000fd4:	0800100d 	.word	0x0800100d
 8000fd8:	200000a8 	.word	0x200000a8
 8000fdc:	200000b4 	.word	0x200000b4
 8000fe0:	08001129 	.word	0x08001129
 8000fe4:	080011d9 	.word	0x080011d9
 8000fe8:	200000c0 	.word	0x200000c0
 8000fec:	08001205 	.word	0x08001205
 8000ff0:	20000098 	.word	0x20000098
>>>>>>> main

08001030 <APP_start>:

void APP_start(void) {
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
	current_state->processing( &current_state);
 8001034:	4b03      	ldr	r3, [pc, #12]	; (8001044 <APP_start+0x14>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4802      	ldr	r0, [pc, #8]	; (8001044 <APP_start+0x14>)
 800103c:	4798      	blx	r3
}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	200002ec 	.word	0x200002ec

08001048 <set_freq_proc>:

static void set_freq_proc(state_t **current_state){
<<<<<<< HEAD
 8001048:	b580      	push	{r7, lr}
 800104a:	b08e      	sub	sp, #56	; 0x38
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
	uint32_t c = 0;
 8001050:	2300      	movs	r3, #0
 8001052:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t k = 0;
 8001054:	2300      	movs	r3, #0
 8001056:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t s = 1;
 8001058:	2301      	movs	r3, #1
 800105a:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t d;
	uint32_t CODE[6];
	float f0 = 0.000001;
 800105c:	4b34      	ldr	r3, [pc, #208]	; (8001130 <set_freq_proc+0xe8>)
 800105e:	627b      	str	r3, [r7, #36]	; 0x24

	for (uint8_t i = 0; i < 6; i++)
 8001060:	2300      	movs	r3, #0
 8001062:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001066:	e01f      	b.n	80010a8 <set_freq_proc+0x60>
		CODE[i] = HAL_GPIO_ReadPin(h->ToggleBuf[i].Port, h->ToggleBuf[i].Pin);
 8001068:	4b32      	ldr	r3, [pc, #200]	; (8001134 <set_freq_proc+0xec>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001070:	3208      	adds	r2, #8
 8001072:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
 8001076:	4b2f      	ldr	r3, [pc, #188]	; (8001134 <set_freq_proc+0xec>)
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800107e:	3308      	adds	r3, #8
 8001080:	00db      	lsls	r3, r3, #3
 8001082:	4413      	add	r3, r2
 8001084:	889b      	ldrh	r3, [r3, #4]
 8001086:	4619      	mov	r1, r3
 8001088:	f001 f806 	bl	8002098 <HAL_GPIO_ReadPin>
 800108c:	4603      	mov	r3, r0
 800108e:	461a      	mov	r2, r3
 8001090:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	3338      	adds	r3, #56	; 0x38
 8001098:	443b      	add	r3, r7
 800109a:	f843 2c30 	str.w	r2, [r3, #-48]
	for (uint8_t i = 0; i < 6; i++)
 800109e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80010a2:	3301      	adds	r3, #1
 80010a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80010a8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80010ac:	2b05      	cmp	r3, #5
 80010ae:	d9db      	bls.n	8001068 <set_freq_proc+0x20>
	while (k <= 5)
 80010b0:	e014      	b.n	80010dc <set_freq_proc+0x94>
		{
			k++;
 80010b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010b4:	3301      	adds	r3, #1
 80010b6:	633b      	str	r3, [r7, #48]	; 0x30
			s *= 10;
 80010b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80010ba:	4613      	mov	r3, r2
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	4413      	add	r3, r2
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	62fb      	str	r3, [r7, #44]	; 0x2c
			c += CODE[k] * s;
 80010c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	3338      	adds	r3, #56	; 0x38
 80010ca:	443b      	add	r3, r7
 80010cc:	f853 3c30 	ldr.w	r3, [r3, #-48]
 80010d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80010d2:	fb02 f303 	mul.w	r3, r2, r3
 80010d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80010d8:	4413      	add	r3, r2
 80010da:	637b      	str	r3, [r7, #52]	; 0x34
	while (k <= 5)
 80010dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010de:	2b05      	cmp	r3, #5
 80010e0:	d9e7      	bls.n	80010b2 <set_freq_proc+0x6a>
		}
	d = convert(c);
 80010e2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80010e4:	f000 f8b8 	bl	8001258 <convert>
 80010e8:	6238      	str	r0, [r7, #32]
	f = f0 * (1 + d);
 80010ea:	6a3b      	ldr	r3, [r7, #32]
 80010ec:	3301      	adds	r3, #1
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff fd70 	bl	8000bd4 <__aeabi_ui2f>
 80010f4:	4603      	mov	r3, r0
 80010f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff fdc3 	bl	8000c84 <__aeabi_fmul>
 80010fe:	4603      	mov	r3, r0
 8001100:	461a      	mov	r2, r3
 8001102:	4b0d      	ldr	r3, [pc, #52]	; (8001138 <set_freq_proc+0xf0>)
 8001104:	601a      	str	r2, [r3, #0]
	k = 0;
 8001106:	2300      	movs	r3, #0
 8001108:	633b      	str	r3, [r7, #48]	; 0x30
	s = 1;
 800110a:	2301      	movs	r3, #1
 800110c:	62fb      	str	r3, [r7, #44]	; 0x2c
	c = 0;
 800110e:	2300      	movs	r3, #0
 8001110:	637b      	str	r3, [r7, #52]	; 0x34
	if (h->ButtonState == 1)
 8001112:	4b08      	ldr	r3, [pc, #32]	; (8001134 <set_freq_proc+0xec>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800111a:	2b01      	cmp	r3, #1
 800111c:	d104      	bne.n	8001128 <set_freq_proc+0xe0>
		*current_state = current_state[0]->next;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	685a      	ldr	r2, [r3, #4]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	601a      	str	r2, [r3, #0]
}
 8001128:	bf00      	nop
 800112a:	3738      	adds	r7, #56	; 0x38
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	358637bd 	.word	0x358637bd
 8001134:	200002e8 	.word	0x200002e8
 8001138:	20000004 	.word	0x20000004

0800113c <run_proc>:

static void run_proc (state_t **current_state)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
	uint8_t flag = 0;
 8001144:	2300      	movs	r3, #0
 8001146:	73fb      	strb	r3, [r7, #15]

	while (h->ButtonState == 1)
 8001148:	e03e      	b.n	80011c8 <run_proc+0x8c>
	{
		on_led(led_state);
 800114a:	4b25      	ldr	r3, [pc, #148]	; (80011e0 <run_proc+0xa4>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4618      	mov	r0, r3
 8001150:	f000 f8d4 	bl	80012fc <on_led>
		HAL_Delay((int32_t)(1 / f));
 8001154:	4b23      	ldr	r3, [pc, #140]	; (80011e4 <run_proc+0xa8>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4619      	mov	r1, r3
 800115a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800115e:	f7ff fe45 	bl	8000dec <__aeabi_fdiv>
 8001162:	4603      	mov	r3, r0
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff fedd 	bl	8000f24 <__aeabi_f2iz>
 800116a:	4603      	mov	r3, r0
 800116c:	4618      	mov	r0, r3
 800116e:	f000 fcdd 	bl	8001b2c <HAL_Delay>
		//delay(1 / f);
		if (h->ButtonState == 0)
 8001172:	4b1d      	ldr	r3, [pc, #116]	; (80011e8 <run_proc+0xac>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800117a:	2b00      	cmp	r3, #0
 800117c:	d105      	bne.n	800118a <run_proc+0x4e>
		{
			*current_state = current_state[0]->next;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	685a      	ldr	r2, [r3, #4]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	e01e      	b.n	80011c8 <run_proc+0x8c>
=======
 800100c:	b5b0      	push	{r4, r5, r7, lr}
 800100e:	b08c      	sub	sp, #48	; 0x30
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
	uint32_t bin_num = 0;
 8001014:	2300      	movs	r3, #0
 8001016:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t CODE[6];
	float f0 = 0.001;
 8001018:	4b3f      	ldr	r3, [pc, #252]	; (8001118 <set_freq_proc+0x10c>)
 800101a:	627b      	str	r3, [r7, #36]	; 0x24

	for (uint8_t i = 0; i < 6; i++)
 800101c:	2300      	movs	r3, #0
 800101e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001022:	e052      	b.n	80010ca <set_freq_proc+0xbe>
	{
		CODE[i] = HAL_GPIO_ReadPin(h->ToggleBuf[i].Port, h->ToggleBuf[i].Pin);
 8001024:	4b3d      	ldr	r3, [pc, #244]	; (800111c <set_freq_proc+0x110>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800102c:	3208      	adds	r2, #8
 800102e:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
 8001032:	4b3a      	ldr	r3, [pc, #232]	; (800111c <set_freq_proc+0x110>)
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800103a:	3308      	adds	r3, #8
 800103c:	00db      	lsls	r3, r3, #3
 800103e:	4413      	add	r3, r2
 8001040:	889b      	ldrh	r3, [r3, #4]
 8001042:	4619      	mov	r1, r3
 8001044:	f001 f802 	bl	800204c <HAL_GPIO_ReadPin>
 8001048:	4603      	mov	r3, r0
 800104a:	461a      	mov	r2, r3
 800104c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	3330      	adds	r3, #48	; 0x30
 8001054:	443b      	add	r3, r7
 8001056:	f843 2c24 	str.w	r2, [r3, #-36]
		bin_num += CODE[i] * pow(10, i);
 800105a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	3330      	adds	r3, #48	; 0x30
 8001062:	443b      	add	r3, r7
 8001064:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff f9b3 	bl	80003d4 <__aeabi_ui2d>
 800106e:	4604      	mov	r4, r0
 8001070:	460d      	mov	r5, r1
 8001072:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff f9ac 	bl	80003d4 <__aeabi_ui2d>
 800107c:	4602      	mov	r2, r0
 800107e:	460b      	mov	r3, r1
 8001080:	f04f 0000 	mov.w	r0, #0
 8001084:	4926      	ldr	r1, [pc, #152]	; (8001120 <set_freq_proc+0x114>)
 8001086:	f001 fc51 	bl	800292c <pow>
 800108a:	4602      	mov	r2, r0
 800108c:	460b      	mov	r3, r1
 800108e:	4620      	mov	r0, r4
 8001090:	4629      	mov	r1, r5
 8001092:	f7ff fa19 	bl	80004c8 <__aeabi_dmul>
 8001096:	4602      	mov	r2, r0
 8001098:	460b      	mov	r3, r1
 800109a:	4614      	mov	r4, r2
 800109c:	461d      	mov	r5, r3
 800109e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80010a0:	f7ff f998 	bl	80003d4 <__aeabi_ui2d>
 80010a4:	4602      	mov	r2, r0
 80010a6:	460b      	mov	r3, r1
 80010a8:	4620      	mov	r0, r4
 80010aa:	4629      	mov	r1, r5
 80010ac:	f7ff f856 	bl	800015c <__adddf3>
 80010b0:	4602      	mov	r2, r0
 80010b2:	460b      	mov	r3, r1
 80010b4:	4610      	mov	r0, r2
 80010b6:	4619      	mov	r1, r3
 80010b8:	f7ff fcb6 	bl	8000a28 <__aeabi_d2uiz>
 80010bc:	4603      	mov	r3, r0
 80010be:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (uint8_t i = 0; i < 6; i++)
 80010c0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80010c4:	3301      	adds	r3, #1
 80010c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80010ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80010ce:	2b05      	cmp	r3, #5
 80010d0:	d9a8      	bls.n	8001024 <set_freq_proc+0x18>
	}
	f = f0 * (1 + convert(bin_num));
 80010d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80010d4:	f000 f8b6 	bl	8001244 <convert>
 80010d8:	4603      	mov	r3, r0
 80010da:	3301      	adds	r3, #1
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff fd79 	bl	8000bd4 <__aeabi_ui2f>
 80010e2:	4603      	mov	r3, r0
 80010e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff fdcc 	bl	8000c84 <__aeabi_fmul>
 80010ec:	4603      	mov	r3, r0
 80010ee:	461a      	mov	r2, r3
 80010f0:	4b0c      	ldr	r3, [pc, #48]	; (8001124 <set_freq_proc+0x118>)
 80010f2:	601a      	str	r2, [r3, #0]
	bin_num = 0;
 80010f4:	2300      	movs	r3, #0
 80010f6:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (h->ButtonState == 0)
 80010f8:	4b08      	ldr	r3, [pc, #32]	; (800111c <set_freq_proc+0x110>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8001100:	2b00      	cmp	r3, #0
 8001102:	d104      	bne.n	800110e <set_freq_proc+0x102>
		*current_state = current_state[0]->next;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	685a      	ldr	r2, [r3, #4]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	601a      	str	r2, [r3, #0]
}
 800110e:	bf00      	nop
 8001110:	3730      	adds	r7, #48	; 0x30
 8001112:	46bd      	mov	sp, r7
 8001114:	bdb0      	pop	{r4, r5, r7, pc}
 8001116:	bf00      	nop
 8001118:	3a83126f 	.word	0x3a83126f
 800111c:	20000094 	.word	0x20000094
 8001120:	40240000 	.word	0x40240000
 8001124:	20000004 	.word	0x20000004

08001128 <run_proc>:

static void run_proc (state_t **current_state)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
	uint8_t flag = 0;
 8001130:	2300      	movs	r3, #0
 8001132:	73fb      	strb	r3, [r7, #15]

	while (h->ButtonState == 0)
 8001134:	e03e      	b.n	80011b4 <run_proc+0x8c>
	{
		on_led(led_state);
 8001136:	4b25      	ldr	r3, [pc, #148]	; (80011cc <run_proc+0xa4>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4618      	mov	r0, r3
 800113c:	f000 f8d4 	bl	80012e8 <on_led>
		HAL_Delay(1 / f);
 8001140:	4b23      	ldr	r3, [pc, #140]	; (80011d0 <run_proc+0xa8>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4619      	mov	r1, r3
 8001146:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800114a:	f7ff fe4f 	bl	8000dec <__aeabi_fdiv>
 800114e:	4603      	mov	r3, r0
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff fee7 	bl	8000f24 <__aeabi_f2uiz>
 8001156:	4603      	mov	r3, r0
 8001158:	4618      	mov	r0, r3
 800115a:	f000 fcc1 	bl	8001ae0 <HAL_Delay>
		if (h->ButtonState == 1)
 800115e:	4b1d      	ldr	r3, [pc, #116]	; (80011d4 <run_proc+0xac>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8001166:	2b01      	cmp	r3, #1
 8001168:	d105      	bne.n	8001176 <run_proc+0x4e>
		{
			*current_state = current_state[0]->next;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	685a      	ldr	r2, [r3, #4]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	e01e      	b.n	80011b4 <run_proc+0x8c>
>>>>>>> main
		}
		else
		{
			off_led(led_state);
<<<<<<< HEAD
 800118a:	4b15      	ldr	r3, [pc, #84]	; (80011e0 <run_proc+0xa4>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4618      	mov	r0, r3
 8001190:	f000 f92e 	bl	80013f0 <off_led>
			if (flag == 0)
 8001194:	7bfb      	ldrb	r3, [r7, #15]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d10b      	bne.n	80011b2 <run_proc+0x76>
			{
				led_state++;
 800119a:	4b11      	ldr	r3, [pc, #68]	; (80011e0 <run_proc+0xa4>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	3301      	adds	r3, #1
 80011a0:	4a0f      	ldr	r2, [pc, #60]	; (80011e0 <run_proc+0xa4>)
 80011a2:	6013      	str	r3, [r2, #0]
				if (led_state == 8)
 80011a4:	4b0e      	ldr	r3, [pc, #56]	; (80011e0 <run_proc+0xa4>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2b08      	cmp	r3, #8
 80011aa:	d10d      	bne.n	80011c8 <run_proc+0x8c>
					flag  = 1;
 80011ac:	2301      	movs	r3, #1
 80011ae:	73fb      	strb	r3, [r7, #15]
 80011b0:	e00a      	b.n	80011c8 <run_proc+0x8c>
=======
 8001176:	4b15      	ldr	r3, [pc, #84]	; (80011cc <run_proc+0xa4>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4618      	mov	r0, r3
 800117c:	f000 f92e 	bl	80013dc <off_led>
			if (flag == 0)
 8001180:	7bfb      	ldrb	r3, [r7, #15]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d10b      	bne.n	800119e <run_proc+0x76>
			{
				led_state++;
 8001186:	4b11      	ldr	r3, [pc, #68]	; (80011cc <run_proc+0xa4>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	3301      	adds	r3, #1
 800118c:	4a0f      	ldr	r2, [pc, #60]	; (80011cc <run_proc+0xa4>)
 800118e:	6013      	str	r3, [r2, #0]
				if (led_state == 8)
 8001190:	4b0e      	ldr	r3, [pc, #56]	; (80011cc <run_proc+0xa4>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	2b08      	cmp	r3, #8
 8001196:	d10d      	bne.n	80011b4 <run_proc+0x8c>
					flag  = 1;
 8001198:	2301      	movs	r3, #1
 800119a:	73fb      	strb	r3, [r7, #15]
 800119c:	e00a      	b.n	80011b4 <run_proc+0x8c>
>>>>>>> main
			}
			else
			{
				led_state--;
<<<<<<< HEAD
 80011b2:	4b0b      	ldr	r3, [pc, #44]	; (80011e0 <run_proc+0xa4>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	3b01      	subs	r3, #1
 80011b8:	4a09      	ldr	r2, [pc, #36]	; (80011e0 <run_proc+0xa4>)
 80011ba:	6013      	str	r3, [r2, #0]
				if (led_state == 1)
 80011bc:	4b08      	ldr	r3, [pc, #32]	; (80011e0 <run_proc+0xa4>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d101      	bne.n	80011c8 <run_proc+0x8c>
					flag  = 0;
 80011c4:	2300      	movs	r3, #0
 80011c6:	73fb      	strb	r3, [r7, #15]
	while (h->ButtonState == 1)
 80011c8:	4b07      	ldr	r3, [pc, #28]	; (80011e8 <run_proc+0xac>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d0ba      	beq.n	800114a <run_proc+0xe>
=======
 800119e:	4b0b      	ldr	r3, [pc, #44]	; (80011cc <run_proc+0xa4>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	3b01      	subs	r3, #1
 80011a4:	4a09      	ldr	r2, [pc, #36]	; (80011cc <run_proc+0xa4>)
 80011a6:	6013      	str	r3, [r2, #0]
				if (led_state == 1)
 80011a8:	4b08      	ldr	r3, [pc, #32]	; (80011cc <run_proc+0xa4>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d101      	bne.n	80011b4 <run_proc+0x8c>
					flag  = 0;
 80011b0:	2300      	movs	r3, #0
 80011b2:	73fb      	strb	r3, [r7, #15]
	while (h->ButtonState == 0)
 80011b4:	4b07      	ldr	r3, [pc, #28]	; (80011d4 <run_proc+0xac>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d0ba      	beq.n	8001136 <run_proc+0xe>
>>>>>>> main
			}
		}
	}
}
<<<<<<< HEAD
 80011d4:	bf00      	nop
 80011d6:	bf00      	nop
 80011d8:	3710      	adds	r7, #16
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	20000000 	.word	0x20000000
 80011e4:	20000004 	.word	0x20000004
 80011e8:	200002e8 	.word	0x200002e8

080011ec <stop_run_proc>:

void stop_run_proc (state_t **current_state)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
	if (h->ButtonState == 1) {
 80011f4:	4b07      	ldr	r3, [pc, #28]	; (8001214 <stop_run_proc+0x28>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d104      	bne.n	800120a <stop_run_proc+0x1e>
=======
 80011c0:	bf00      	nop
 80011c2:	bf00      	nop
 80011c4:	3710      	adds	r7, #16
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20000000 	.word	0x20000000
 80011d0:	20000004 	.word	0x20000004
 80011d4:	20000094 	.word	0x20000094

080011d8 <stop_run_proc>:

void stop_run_proc (state_t **current_state)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
	if (h->ButtonState == 0) {
 80011e0:	4b07      	ldr	r3, [pc, #28]	; (8001200 <stop_run_proc+0x28>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d104      	bne.n	80011f6 <stop_run_proc+0x1e>
		*current_state = current_state[0]->next;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	685a      	ldr	r2, [r3, #4]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	601a      	str	r2, [r3, #0]
	}
}
 80011f6:	bf00      	nop
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bc80      	pop	{r7}
 80011fe:	4770      	bx	lr
 8001200:	20000094 	.word	0x20000094

08001204 <reset_proc>:

void reset_proc (state_t **current_state)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
	led_state = 0;
 800120c:	4b0b      	ldr	r3, [pc, #44]	; (800123c <reset_proc+0x38>)
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
	off_led(led_state);
 8001212:	4b0a      	ldr	r3, [pc, #40]	; (800123c <reset_proc+0x38>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4618      	mov	r0, r3
 8001218:	f000 f8e0 	bl	80013dc <off_led>
	if (h->ButtonState == 1) {
 800121c:	4b08      	ldr	r3, [pc, #32]	; (8001240 <reset_proc+0x3c>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8001224:	2b01      	cmp	r3, #1
 8001226:	d104      	bne.n	8001232 <reset_proc+0x2e>
>>>>>>> main
		*current_state = current_state[0]->next;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	685a      	ldr	r2, [r3, #4]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	601a      	str	r2, [r3, #0]
	}
}
<<<<<<< HEAD
 800120a:	bf00      	nop
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	bc80      	pop	{r7}
 8001212:	4770      	bx	lr
 8001214:	200002e8 	.word	0x200002e8

08001218 <reset_proc>:

void reset_proc (state_t **current_state)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
	led_state = 0;
 8001220:	4b0b      	ldr	r3, [pc, #44]	; (8001250 <reset_proc+0x38>)
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
	off_led(led_state);
 8001226:	4b0a      	ldr	r3, [pc, #40]	; (8001250 <reset_proc+0x38>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4618      	mov	r0, r3
 800122c:	f000 f8e0 	bl	80013f0 <off_led>
	if (h->ButtonState == 0) {
 8001230:	4b08      	ldr	r3, [pc, #32]	; (8001254 <reset_proc+0x3c>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8001238:	2b00      	cmp	r3, #0
 800123a:	d104      	bne.n	8001246 <reset_proc+0x2e>
		*current_state = current_state[0]->next;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	685a      	ldr	r2, [r3, #4]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	601a      	str	r2, [r3, #0]
	}
}
 8001246:	bf00      	nop
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	20000000 	.word	0x20000000
 8001254:	200002e8 	.word	0x200002e8

08001258 <convert>:
	{
	}
}

uint32_t convert(uint32_t num)
{
 8001258:	b5b0      	push	{r4, r5, r7, lr}
 800125a:	b086      	sub	sp, #24
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
	uint32_t dec = 0, i = 0, rem;
 8001260:	2300      	movs	r3, #0
 8001262:	617b      	str	r3, [r7, #20]
 8001264:	2300      	movs	r3, #0
 8001266:	613b      	str	r3, [r7, #16]
	while (num != 0)
 8001268:	e03e      	b.n	80012e8 <convert+0x90>
  {
		rem = num % 10;
 800126a:	687a      	ldr	r2, [r7, #4]
 800126c:	4b22      	ldr	r3, [pc, #136]	; (80012f8 <convert+0xa0>)
 800126e:	fba3 1302 	umull	r1, r3, r3, r2
 8001272:	08d9      	lsrs	r1, r3, #3
 8001274:	460b      	mov	r3, r1
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	440b      	add	r3, r1
 800127a:	005b      	lsls	r3, r3, #1
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	60fb      	str	r3, [r7, #12]
		num /= 10;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	4a1d      	ldr	r2, [pc, #116]	; (80012f8 <convert+0xa0>)
 8001284:	fba2 2303 	umull	r2, r3, r2, r3
 8001288:	08db      	lsrs	r3, r3, #3
 800128a:	607b      	str	r3, [r7, #4]
		dec += rem * pow(2, i);
 800128c:	68f8      	ldr	r0, [r7, #12]
 800128e:	f7ff f8a1 	bl	80003d4 <__aeabi_ui2d>
 8001292:	4604      	mov	r4, r0
 8001294:	460d      	mov	r5, r1
 8001296:	6938      	ldr	r0, [r7, #16]
 8001298:	f7ff f89c 	bl	80003d4 <__aeabi_ui2d>
 800129c:	4602      	mov	r2, r0
 800129e:	460b      	mov	r3, r1
 80012a0:	f04f 0000 	mov.w	r0, #0
 80012a4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80012a8:	f002 fd5c 	bl	8003d64 <pow>
 80012ac:	4602      	mov	r2, r0
 80012ae:	460b      	mov	r3, r1
 80012b0:	4620      	mov	r0, r4
 80012b2:	4629      	mov	r1, r5
 80012b4:	f7ff f908 	bl	80004c8 <__aeabi_dmul>
 80012b8:	4602      	mov	r2, r0
 80012ba:	460b      	mov	r3, r1
 80012bc:	4614      	mov	r4, r2
 80012be:	461d      	mov	r5, r3
 80012c0:	6978      	ldr	r0, [r7, #20]
 80012c2:	f7ff f887 	bl	80003d4 <__aeabi_ui2d>
 80012c6:	4602      	mov	r2, r0
 80012c8:	460b      	mov	r3, r1
 80012ca:	4620      	mov	r0, r4
 80012cc:	4629      	mov	r1, r5
 80012ce:	f7fe ff45 	bl	800015c <__adddf3>
 80012d2:	4602      	mov	r2, r0
 80012d4:	460b      	mov	r3, r1
 80012d6:	4610      	mov	r0, r2
 80012d8:	4619      	mov	r1, r3
 80012da:	f7ff fba5 	bl	8000a28 <__aeabi_d2uiz>
 80012de:	4603      	mov	r3, r0
 80012e0:	617b      	str	r3, [r7, #20]
		++i;
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	3301      	adds	r3, #1
 80012e6:	613b      	str	r3, [r7, #16]
	while (num != 0)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d1bd      	bne.n	800126a <convert+0x12>
  }
	return dec;
 80012ee:	697b      	ldr	r3, [r7, #20]
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3718      	adds	r7, #24
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bdb0      	pop	{r4, r5, r7, pc}
 80012f8:	cccccccd 	.word	0xcccccccd

080012fc <on_led>:

void on_led (uint32_t led_state)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
	switch(led_state) {
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	3b01      	subs	r3, #1
 8001308:	2b07      	cmp	r3, #7
 800130a:	d86b      	bhi.n	80013e4 <on_led+0xe8>
 800130c:	a201      	add	r2, pc, #4	; (adr r2, 8001314 <on_led+0x18>)
 800130e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001312:	bf00      	nop
 8001314:	08001335 	.word	0x08001335
 8001318:	0800134b 	.word	0x0800134b
 800131c:	08001361 	.word	0x08001361
 8001320:	08001377 	.word	0x08001377
 8001324:	0800138d 	.word	0x0800138d
 8001328:	080013a3 	.word	0x080013a3
 800132c:	080013b9 	.word	0x080013b9
 8001330:	080013cf 	.word	0x080013cf
		case 1 :
			HAL_GPIO_WritePin(h->LEDsForBlink[0].Port, h->LEDsForBlink[0].Pin, GPIO_PIN_SET);
 8001334:	4b2d      	ldr	r3, [pc, #180]	; (80013ec <on_led+0xf0>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	6818      	ldr	r0, [r3, #0]
 800133a:	4b2c      	ldr	r3, [pc, #176]	; (80013ec <on_led+0xf0>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	889b      	ldrh	r3, [r3, #4]
 8001340:	2201      	movs	r2, #1
 8001342:	4619      	mov	r1, r3
 8001344:	f000 febf 	bl	80020c6 <HAL_GPIO_WritePin>
			break;
 8001348:	e04c      	b.n	80013e4 <on_led+0xe8>
		case 2 :
			HAL_GPIO_WritePin(h->LEDsForBlink[1].Port, h->LEDsForBlink[1].Pin, GPIO_PIN_SET);
 800134a:	4b28      	ldr	r3, [pc, #160]	; (80013ec <on_led+0xf0>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	6898      	ldr	r0, [r3, #8]
 8001350:	4b26      	ldr	r3, [pc, #152]	; (80013ec <on_led+0xf0>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	899b      	ldrh	r3, [r3, #12]
 8001356:	2201      	movs	r2, #1
 8001358:	4619      	mov	r1, r3
 800135a:	f000 feb4 	bl	80020c6 <HAL_GPIO_WritePin>
			break;
 800135e:	e041      	b.n	80013e4 <on_led+0xe8>
		case 3 :
			HAL_GPIO_WritePin(h->LEDsForBlink[2].Port, h->LEDsForBlink[2].Pin, GPIO_PIN_SET);
 8001360:	4b22      	ldr	r3, [pc, #136]	; (80013ec <on_led+0xf0>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	6918      	ldr	r0, [r3, #16]
 8001366:	4b21      	ldr	r3, [pc, #132]	; (80013ec <on_led+0xf0>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	8a9b      	ldrh	r3, [r3, #20]
 800136c:	2201      	movs	r2, #1
 800136e:	4619      	mov	r1, r3
 8001370:	f000 fea9 	bl	80020c6 <HAL_GPIO_WritePin>
			break;
 8001374:	e036      	b.n	80013e4 <on_led+0xe8>
		case 4 :
			HAL_GPIO_WritePin(h->LEDsForBlink[3].Port, h->LEDsForBlink[3].Pin, GPIO_PIN_SET);
 8001376:	4b1d      	ldr	r3, [pc, #116]	; (80013ec <on_led+0xf0>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	6998      	ldr	r0, [r3, #24]
 800137c:	4b1b      	ldr	r3, [pc, #108]	; (80013ec <on_led+0xf0>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	8b9b      	ldrh	r3, [r3, #28]
 8001382:	2201      	movs	r2, #1
 8001384:	4619      	mov	r1, r3
 8001386:	f000 fe9e 	bl	80020c6 <HAL_GPIO_WritePin>
			break;
 800138a:	e02b      	b.n	80013e4 <on_led+0xe8>
		case 5 :
			HAL_GPIO_WritePin(h->LEDsForBlink[4].Port, h->LEDsForBlink[4].Pin, GPIO_PIN_RESET);
 800138c:	4b17      	ldr	r3, [pc, #92]	; (80013ec <on_led+0xf0>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	6a18      	ldr	r0, [r3, #32]
 8001392:	4b16      	ldr	r3, [pc, #88]	; (80013ec <on_led+0xf0>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001398:	2200      	movs	r2, #0
 800139a:	4619      	mov	r1, r3
 800139c:	f000 fe93 	bl	80020c6 <HAL_GPIO_WritePin>
			break;
 80013a0:	e020      	b.n	80013e4 <on_led+0xe8>
		case 6 :
			HAL_GPIO_WritePin(h->LEDsForBlink[5].Port, h->LEDsForBlink[5].Pin, GPIO_PIN_RESET);
 80013a2:	4b12      	ldr	r3, [pc, #72]	; (80013ec <on_led+0xf0>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80013a8:	4b10      	ldr	r3, [pc, #64]	; (80013ec <on_led+0xf0>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80013ae:	2200      	movs	r2, #0
 80013b0:	4619      	mov	r1, r3
 80013b2:	f000 fe88 	bl	80020c6 <HAL_GPIO_WritePin>
			break;
 80013b6:	e015      	b.n	80013e4 <on_led+0xe8>
		case 7 :
			HAL_GPIO_WritePin(h->LEDsForBlink[6].Port, h->LEDsForBlink[6].Pin, GPIO_PIN_RESET);
 80013b8:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <on_led+0xf0>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80013be:	4b0b      	ldr	r3, [pc, #44]	; (80013ec <on_led+0xf0>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80013c4:	2200      	movs	r2, #0
 80013c6:	4619      	mov	r1, r3
 80013c8:	f000 fe7d 	bl	80020c6 <HAL_GPIO_WritePin>
			break;
 80013cc:	e00a      	b.n	80013e4 <on_led+0xe8>
		case 8 :
			HAL_GPIO_WritePin(h->LEDsForBlink[7].Port, h->LEDsForBlink[7].Pin, GPIO_PIN_RESET);
 80013ce:	4b07      	ldr	r3, [pc, #28]	; (80013ec <on_led+0xf0>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80013d4:	4b05      	ldr	r3, [pc, #20]	; (80013ec <on_led+0xf0>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80013da:	2200      	movs	r2, #0
 80013dc:	4619      	mov	r1, r3
 80013de:	f000 fe72 	bl	80020c6 <HAL_GPIO_WritePin>
			break;
 80013e2:	bf00      	nop
	}
}
 80013e4:	bf00      	nop
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	200002e8 	.word	0x200002e8

080013f0 <off_led>:

void off_led (uint32_t led_state)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
	switch(led_state) {
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	3b01      	subs	r3, #1
 80013fc:	2b07      	cmp	r3, #7
 80013fe:	d86b      	bhi.n	80014d8 <off_led+0xe8>
 8001400:	a201      	add	r2, pc, #4	; (adr r2, 8001408 <off_led+0x18>)
 8001402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001406:	bf00      	nop
 8001408:	08001429 	.word	0x08001429
 800140c:	0800143f 	.word	0x0800143f
 8001410:	08001455 	.word	0x08001455
 8001414:	0800146b 	.word	0x0800146b
 8001418:	08001481 	.word	0x08001481
 800141c:	08001497 	.word	0x08001497
 8001420:	080014ad 	.word	0x080014ad
 8001424:	080014c3 	.word	0x080014c3
		case 1 :
			HAL_GPIO_WritePin(h->LEDsForBlink[0].Port, h->LEDsForBlink[0].Pin, GPIO_PIN_RESET);
 8001428:	4b56      	ldr	r3, [pc, #344]	; (8001584 <off_led+0x194>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	6818      	ldr	r0, [r3, #0]
 800142e:	4b55      	ldr	r3, [pc, #340]	; (8001584 <off_led+0x194>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	889b      	ldrh	r3, [r3, #4]
 8001434:	2200      	movs	r2, #0
 8001436:	4619      	mov	r1, r3
 8001438:	f000 fe45 	bl	80020c6 <HAL_GPIO_WritePin>
			break;
 800143c:	e09d      	b.n	800157a <off_led+0x18a>
		case 2 :
			HAL_GPIO_WritePin(h->LEDsForBlink[1].Port, h->LEDsForBlink[1].Pin, GPIO_PIN_RESET);
 800143e:	4b51      	ldr	r3, [pc, #324]	; (8001584 <off_led+0x194>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	6898      	ldr	r0, [r3, #8]
 8001444:	4b4f      	ldr	r3, [pc, #316]	; (8001584 <off_led+0x194>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	899b      	ldrh	r3, [r3, #12]
 800144a:	2200      	movs	r2, #0
 800144c:	4619      	mov	r1, r3
 800144e:	f000 fe3a 	bl	80020c6 <HAL_GPIO_WritePin>
			break;
 8001452:	e092      	b.n	800157a <off_led+0x18a>
		case 3 :
			HAL_GPIO_WritePin(h->LEDsForBlink[2].Port, h->LEDsForBlink[2].Pin, GPIO_PIN_RESET);
 8001454:	4b4b      	ldr	r3, [pc, #300]	; (8001584 <off_led+0x194>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	6918      	ldr	r0, [r3, #16]
 800145a:	4b4a      	ldr	r3, [pc, #296]	; (8001584 <off_led+0x194>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	8a9b      	ldrh	r3, [r3, #20]
 8001460:	2200      	movs	r2, #0
 8001462:	4619      	mov	r1, r3
 8001464:	f000 fe2f 	bl	80020c6 <HAL_GPIO_WritePin>
			break;
 8001468:	e087      	b.n	800157a <off_led+0x18a>
		case 4 :
			HAL_GPIO_WritePin(h->LEDsForBlink[3].Port, h->LEDsForBlink[3].Pin, GPIO_PIN_RESET);
 800146a:	4b46      	ldr	r3, [pc, #280]	; (8001584 <off_led+0x194>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	6998      	ldr	r0, [r3, #24]
 8001470:	4b44      	ldr	r3, [pc, #272]	; (8001584 <off_led+0x194>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	8b9b      	ldrh	r3, [r3, #28]
 8001476:	2200      	movs	r2, #0
 8001478:	4619      	mov	r1, r3
 800147a:	f000 fe24 	bl	80020c6 <HAL_GPIO_WritePin>
			break;
 800147e:	e07c      	b.n	800157a <off_led+0x18a>
		case 5 :
			HAL_GPIO_WritePin(h->LEDsForBlink[4].Port, h->LEDsForBlink[4].Pin, GPIO_PIN_SET);
 8001480:	4b40      	ldr	r3, [pc, #256]	; (8001584 <off_led+0x194>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	6a18      	ldr	r0, [r3, #32]
 8001486:	4b3f      	ldr	r3, [pc, #252]	; (8001584 <off_led+0x194>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800148c:	2201      	movs	r2, #1
 800148e:	4619      	mov	r1, r3
 8001490:	f000 fe19 	bl	80020c6 <HAL_GPIO_WritePin>
			break;
 8001494:	e071      	b.n	800157a <off_led+0x18a>
		case 6 :
			HAL_GPIO_WritePin(h->LEDsForBlink[5].Port, h->LEDsForBlink[5].Pin, GPIO_PIN_SET);
 8001496:	4b3b      	ldr	r3, [pc, #236]	; (8001584 <off_led+0x194>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800149c:	4b39      	ldr	r3, [pc, #228]	; (8001584 <off_led+0x194>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80014a2:	2201      	movs	r2, #1
 80014a4:	4619      	mov	r1, r3
 80014a6:	f000 fe0e 	bl	80020c6 <HAL_GPIO_WritePin>
			break;
 80014aa:	e066      	b.n	800157a <off_led+0x18a>
		case 7 :
			HAL_GPIO_WritePin(h->LEDsForBlink[6].Port, h->LEDsForBlink[6].Pin, GPIO_PIN_SET);
 80014ac:	4b35      	ldr	r3, [pc, #212]	; (8001584 <off_led+0x194>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80014b2:	4b34      	ldr	r3, [pc, #208]	; (8001584 <off_led+0x194>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80014b8:	2201      	movs	r2, #1
 80014ba:	4619      	mov	r1, r3
 80014bc:	f000 fe03 	bl	80020c6 <HAL_GPIO_WritePin>
			break;
 80014c0:	e05b      	b.n	800157a <off_led+0x18a>
		case 8 :
			HAL_GPIO_WritePin(h->LEDsForBlink[7].Port, h->LEDsForBlink[7].Pin, GPIO_PIN_SET);
 80014c2:	4b30      	ldr	r3, [pc, #192]	; (8001584 <off_led+0x194>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80014c8:	4b2e      	ldr	r3, [pc, #184]	; (8001584 <off_led+0x194>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80014ce:	2201      	movs	r2, #1
 80014d0:	4619      	mov	r1, r3
 80014d2:	f000 fdf8 	bl	80020c6 <HAL_GPIO_WritePin>
			break;
 80014d6:	e050      	b.n	800157a <off_led+0x18a>
		default :
			HAL_GPIO_WritePin(h->LEDsForBlink[0].Port, h->LEDsForBlink[0].Pin, GPIO_PIN_RESET);
 80014d8:	4b2a      	ldr	r3, [pc, #168]	; (8001584 <off_led+0x194>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	6818      	ldr	r0, [r3, #0]
 80014de:	4b29      	ldr	r3, [pc, #164]	; (8001584 <off_led+0x194>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	889b      	ldrh	r3, [r3, #4]
 80014e4:	2200      	movs	r2, #0
 80014e6:	4619      	mov	r1, r3
 80014e8:	f000 fded 	bl	80020c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(h->LEDsForBlink[1].Port, h->LEDsForBlink[1].Pin, GPIO_PIN_RESET);
 80014ec:	4b25      	ldr	r3, [pc, #148]	; (8001584 <off_led+0x194>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	6898      	ldr	r0, [r3, #8]
 80014f2:	4b24      	ldr	r3, [pc, #144]	; (8001584 <off_led+0x194>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	899b      	ldrh	r3, [r3, #12]
 80014f8:	2200      	movs	r2, #0
 80014fa:	4619      	mov	r1, r3
 80014fc:	f000 fde3 	bl	80020c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(h->LEDsForBlink[2].Port, h->LEDsForBlink[2].Pin, GPIO_PIN_RESET);
 8001500:	4b20      	ldr	r3, [pc, #128]	; (8001584 <off_led+0x194>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	6918      	ldr	r0, [r3, #16]
 8001506:	4b1f      	ldr	r3, [pc, #124]	; (8001584 <off_led+0x194>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	8a9b      	ldrh	r3, [r3, #20]
 800150c:	2200      	movs	r2, #0
 800150e:	4619      	mov	r1, r3
 8001510:	f000 fdd9 	bl	80020c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(h->LEDsForBlink[3].Port, h->LEDsForBlink[3].Pin, GPIO_PIN_RESET);
 8001514:	4b1b      	ldr	r3, [pc, #108]	; (8001584 <off_led+0x194>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	6998      	ldr	r0, [r3, #24]
 800151a:	4b1a      	ldr	r3, [pc, #104]	; (8001584 <off_led+0x194>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	8b9b      	ldrh	r3, [r3, #28]
 8001520:	2200      	movs	r2, #0
 8001522:	4619      	mov	r1, r3
 8001524:	f000 fdcf 	bl	80020c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(h->LEDsForBlink[4].Port, h->LEDsForBlink[4].Pin, GPIO_PIN_SET);
 8001528:	4b16      	ldr	r3, [pc, #88]	; (8001584 <off_led+0x194>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	6a18      	ldr	r0, [r3, #32]
 800152e:	4b15      	ldr	r3, [pc, #84]	; (8001584 <off_led+0x194>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001534:	2201      	movs	r2, #1
 8001536:	4619      	mov	r1, r3
 8001538:	f000 fdc5 	bl	80020c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(h->LEDsForBlink[5].Port, h->LEDsForBlink[5].Pin, GPIO_PIN_SET);
 800153c:	4b11      	ldr	r3, [pc, #68]	; (8001584 <off_led+0x194>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001542:	4b10      	ldr	r3, [pc, #64]	; (8001584 <off_led+0x194>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001548:	2201      	movs	r2, #1
 800154a:	4619      	mov	r1, r3
 800154c:	f000 fdbb 	bl	80020c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(h->LEDsForBlink[6].Port, h->LEDsForBlink[6].Pin, GPIO_PIN_SET);
 8001550:	4b0c      	ldr	r3, [pc, #48]	; (8001584 <off_led+0x194>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001556:	4b0b      	ldr	r3, [pc, #44]	; (8001584 <off_led+0x194>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800155c:	2201      	movs	r2, #1
 800155e:	4619      	mov	r1, r3
 8001560:	f000 fdb1 	bl	80020c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(h->LEDsForBlink[7].Port, h->LEDsForBlink[7].Pin, GPIO_PIN_SET);
 8001564:	4b07      	ldr	r3, [pc, #28]	; (8001584 <off_led+0x194>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800156a:	4b06      	ldr	r3, [pc, #24]	; (8001584 <off_led+0x194>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8001570:	2201      	movs	r2, #1
 8001572:	4619      	mov	r1, r3
 8001574:	f000 fda7 	bl	80020c6 <HAL_GPIO_WritePin>
			break;
 8001578:	bf00      	nop
	}
}
 800157a:	bf00      	nop
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	200002e8 	.word	0x200002e8

08001588 <main>:
=======
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	20000000 	.word	0x20000000
 8001240:	20000094 	.word	0x20000094

08001244 <convert>:

uint32_t convert(uint32_t num)
{
 8001244:	b5b0      	push	{r4, r5, r7, lr}
 8001246:	b086      	sub	sp, #24
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
	uint32_t dec = 0, i = 0, rem;
 800124c:	2300      	movs	r3, #0
 800124e:	617b      	str	r3, [r7, #20]
 8001250:	2300      	movs	r3, #0
 8001252:	613b      	str	r3, [r7, #16]
	while (num != 0)
 8001254:	e03e      	b.n	80012d4 <convert+0x90>
  {
		rem = num % 10;
 8001256:	687a      	ldr	r2, [r7, #4]
 8001258:	4b22      	ldr	r3, [pc, #136]	; (80012e4 <convert+0xa0>)
 800125a:	fba3 1302 	umull	r1, r3, r3, r2
 800125e:	08d9      	lsrs	r1, r3, #3
 8001260:	460b      	mov	r3, r1
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	440b      	add	r3, r1
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	60fb      	str	r3, [r7, #12]
		num /= 10;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	4a1d      	ldr	r2, [pc, #116]	; (80012e4 <convert+0xa0>)
 8001270:	fba2 2303 	umull	r2, r3, r2, r3
 8001274:	08db      	lsrs	r3, r3, #3
 8001276:	607b      	str	r3, [r7, #4]
		dec += rem * pow(2, i);
 8001278:	68f8      	ldr	r0, [r7, #12]
 800127a:	f7ff f8ab 	bl	80003d4 <__aeabi_ui2d>
 800127e:	4604      	mov	r4, r0
 8001280:	460d      	mov	r5, r1
 8001282:	6938      	ldr	r0, [r7, #16]
 8001284:	f7ff f8a6 	bl	80003d4 <__aeabi_ui2d>
 8001288:	4602      	mov	r2, r0
 800128a:	460b      	mov	r3, r1
 800128c:	f04f 0000 	mov.w	r0, #0
 8001290:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001294:	f001 fb4a 	bl	800292c <pow>
 8001298:	4602      	mov	r2, r0
 800129a:	460b      	mov	r3, r1
 800129c:	4620      	mov	r0, r4
 800129e:	4629      	mov	r1, r5
 80012a0:	f7ff f912 	bl	80004c8 <__aeabi_dmul>
 80012a4:	4602      	mov	r2, r0
 80012a6:	460b      	mov	r3, r1
 80012a8:	4614      	mov	r4, r2
 80012aa:	461d      	mov	r5, r3
 80012ac:	6978      	ldr	r0, [r7, #20]
 80012ae:	f7ff f891 	bl	80003d4 <__aeabi_ui2d>
 80012b2:	4602      	mov	r2, r0
 80012b4:	460b      	mov	r3, r1
 80012b6:	4620      	mov	r0, r4
 80012b8:	4629      	mov	r1, r5
 80012ba:	f7fe ff4f 	bl	800015c <__adddf3>
 80012be:	4602      	mov	r2, r0
 80012c0:	460b      	mov	r3, r1
 80012c2:	4610      	mov	r0, r2
 80012c4:	4619      	mov	r1, r3
 80012c6:	f7ff fbaf 	bl	8000a28 <__aeabi_d2uiz>
 80012ca:	4603      	mov	r3, r0
 80012cc:	617b      	str	r3, [r7, #20]
		++i;
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	3301      	adds	r3, #1
 80012d2:	613b      	str	r3, [r7, #16]
	while (num != 0)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d1bd      	bne.n	8001256 <convert+0x12>
  }
	return dec;
 80012da:	697b      	ldr	r3, [r7, #20]
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3718      	adds	r7, #24
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bdb0      	pop	{r4, r5, r7, pc}
 80012e4:	cccccccd 	.word	0xcccccccd

080012e8 <on_led>:

void on_led (uint32_t led_state)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
	switch(led_state) {
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	3b01      	subs	r3, #1
 80012f4:	2b07      	cmp	r3, #7
 80012f6:	d86b      	bhi.n	80013d0 <on_led+0xe8>
 80012f8:	a201      	add	r2, pc, #4	; (adr r2, 8001300 <on_led+0x18>)
 80012fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012fe:	bf00      	nop
 8001300:	08001321 	.word	0x08001321
 8001304:	08001337 	.word	0x08001337
 8001308:	0800134d 	.word	0x0800134d
 800130c:	08001363 	.word	0x08001363
 8001310:	08001379 	.word	0x08001379
 8001314:	0800138f 	.word	0x0800138f
 8001318:	080013a5 	.word	0x080013a5
 800131c:	080013bb 	.word	0x080013bb
		case 1 :
			HAL_GPIO_WritePin(h->LEDsForBlink[0].Port, h->LEDsForBlink[0].Pin, GPIO_PIN_SET);
 8001320:	4b2d      	ldr	r3, [pc, #180]	; (80013d8 <on_led+0xf0>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	6818      	ldr	r0, [r3, #0]
 8001326:	4b2c      	ldr	r3, [pc, #176]	; (80013d8 <on_led+0xf0>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	889b      	ldrh	r3, [r3, #4]
 800132c:	2201      	movs	r2, #1
 800132e:	4619      	mov	r1, r3
 8001330:	f000 fea3 	bl	800207a <HAL_GPIO_WritePin>
			break;
 8001334:	e04c      	b.n	80013d0 <on_led+0xe8>
		case 2 :
			HAL_GPIO_WritePin(h->LEDsForBlink[1].Port, h->LEDsForBlink[1].Pin, GPIO_PIN_SET);
 8001336:	4b28      	ldr	r3, [pc, #160]	; (80013d8 <on_led+0xf0>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	6898      	ldr	r0, [r3, #8]
 800133c:	4b26      	ldr	r3, [pc, #152]	; (80013d8 <on_led+0xf0>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	899b      	ldrh	r3, [r3, #12]
 8001342:	2201      	movs	r2, #1
 8001344:	4619      	mov	r1, r3
 8001346:	f000 fe98 	bl	800207a <HAL_GPIO_WritePin>
			break;
 800134a:	e041      	b.n	80013d0 <on_led+0xe8>
		case 3 :
			HAL_GPIO_WritePin(h->LEDsForBlink[2].Port, h->LEDsForBlink[2].Pin, GPIO_PIN_SET);
 800134c:	4b22      	ldr	r3, [pc, #136]	; (80013d8 <on_led+0xf0>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	6918      	ldr	r0, [r3, #16]
 8001352:	4b21      	ldr	r3, [pc, #132]	; (80013d8 <on_led+0xf0>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	8a9b      	ldrh	r3, [r3, #20]
 8001358:	2201      	movs	r2, #1
 800135a:	4619      	mov	r1, r3
 800135c:	f000 fe8d 	bl	800207a <HAL_GPIO_WritePin>
			break;
 8001360:	e036      	b.n	80013d0 <on_led+0xe8>
		case 4 :
			HAL_GPIO_WritePin(h->LEDsForBlink[3].Port, h->LEDsForBlink[3].Pin, GPIO_PIN_SET);
 8001362:	4b1d      	ldr	r3, [pc, #116]	; (80013d8 <on_led+0xf0>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	6998      	ldr	r0, [r3, #24]
 8001368:	4b1b      	ldr	r3, [pc, #108]	; (80013d8 <on_led+0xf0>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	8b9b      	ldrh	r3, [r3, #28]
 800136e:	2201      	movs	r2, #1
 8001370:	4619      	mov	r1, r3
 8001372:	f000 fe82 	bl	800207a <HAL_GPIO_WritePin>
			break;
 8001376:	e02b      	b.n	80013d0 <on_led+0xe8>
		case 5 :
			HAL_GPIO_WritePin(h->LEDsForBlink[4].Port, h->LEDsForBlink[4].Pin, GPIO_PIN_RESET);
 8001378:	4b17      	ldr	r3, [pc, #92]	; (80013d8 <on_led+0xf0>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	6a18      	ldr	r0, [r3, #32]
 800137e:	4b16      	ldr	r3, [pc, #88]	; (80013d8 <on_led+0xf0>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001384:	2200      	movs	r2, #0
 8001386:	4619      	mov	r1, r3
 8001388:	f000 fe77 	bl	800207a <HAL_GPIO_WritePin>
			break;
 800138c:	e020      	b.n	80013d0 <on_led+0xe8>
		case 6 :
			HAL_GPIO_WritePin(h->LEDsForBlink[5].Port, h->LEDsForBlink[5].Pin, GPIO_PIN_RESET);
 800138e:	4b12      	ldr	r3, [pc, #72]	; (80013d8 <on_led+0xf0>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001394:	4b10      	ldr	r3, [pc, #64]	; (80013d8 <on_led+0xf0>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800139a:	2200      	movs	r2, #0
 800139c:	4619      	mov	r1, r3
 800139e:	f000 fe6c 	bl	800207a <HAL_GPIO_WritePin>
			break;
 80013a2:	e015      	b.n	80013d0 <on_led+0xe8>
		case 7 :
			HAL_GPIO_WritePin(h->LEDsForBlink[6].Port, h->LEDsForBlink[6].Pin, GPIO_PIN_RESET);
 80013a4:	4b0c      	ldr	r3, [pc, #48]	; (80013d8 <on_led+0xf0>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80013aa:	4b0b      	ldr	r3, [pc, #44]	; (80013d8 <on_led+0xf0>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80013b0:	2200      	movs	r2, #0
 80013b2:	4619      	mov	r1, r3
 80013b4:	f000 fe61 	bl	800207a <HAL_GPIO_WritePin>
			break;
 80013b8:	e00a      	b.n	80013d0 <on_led+0xe8>
		case 8 :
			HAL_GPIO_WritePin(h->LEDsForBlink[7].Port, h->LEDsForBlink[7].Pin, GPIO_PIN_RESET);
 80013ba:	4b07      	ldr	r3, [pc, #28]	; (80013d8 <on_led+0xf0>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80013c0:	4b05      	ldr	r3, [pc, #20]	; (80013d8 <on_led+0xf0>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80013c6:	2200      	movs	r2, #0
 80013c8:	4619      	mov	r1, r3
 80013ca:	f000 fe56 	bl	800207a <HAL_GPIO_WritePin>
			break;
 80013ce:	bf00      	nop
	}
}
 80013d0:	bf00      	nop
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	20000094 	.word	0x20000094

080013dc <off_led>:

void off_led (uint32_t led_state)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
	switch(led_state) {
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	3b01      	subs	r3, #1
 80013e8:	2b07      	cmp	r3, #7
 80013ea:	d86b      	bhi.n	80014c4 <off_led+0xe8>
 80013ec:	a201      	add	r2, pc, #4	; (adr r2, 80013f4 <off_led+0x18>)
 80013ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013f2:	bf00      	nop
 80013f4:	08001415 	.word	0x08001415
 80013f8:	0800142b 	.word	0x0800142b
 80013fc:	08001441 	.word	0x08001441
 8001400:	08001457 	.word	0x08001457
 8001404:	0800146d 	.word	0x0800146d
 8001408:	08001483 	.word	0x08001483
 800140c:	08001499 	.word	0x08001499
 8001410:	080014af 	.word	0x080014af
		case 1 :
			HAL_GPIO_WritePin(h->LEDsForBlink[0].Port, h->LEDsForBlink[0].Pin, GPIO_PIN_RESET);
 8001414:	4b56      	ldr	r3, [pc, #344]	; (8001570 <off_led+0x194>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	6818      	ldr	r0, [r3, #0]
 800141a:	4b55      	ldr	r3, [pc, #340]	; (8001570 <off_led+0x194>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	889b      	ldrh	r3, [r3, #4]
 8001420:	2200      	movs	r2, #0
 8001422:	4619      	mov	r1, r3
 8001424:	f000 fe29 	bl	800207a <HAL_GPIO_WritePin>
			break;
 8001428:	e09d      	b.n	8001566 <off_led+0x18a>
		case 2 :
			HAL_GPIO_WritePin(h->LEDsForBlink[1].Port, h->LEDsForBlink[1].Pin, GPIO_PIN_RESET);
 800142a:	4b51      	ldr	r3, [pc, #324]	; (8001570 <off_led+0x194>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	6898      	ldr	r0, [r3, #8]
 8001430:	4b4f      	ldr	r3, [pc, #316]	; (8001570 <off_led+0x194>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	899b      	ldrh	r3, [r3, #12]
 8001436:	2200      	movs	r2, #0
 8001438:	4619      	mov	r1, r3
 800143a:	f000 fe1e 	bl	800207a <HAL_GPIO_WritePin>
			break;
 800143e:	e092      	b.n	8001566 <off_led+0x18a>
		case 3 :
			HAL_GPIO_WritePin(h->LEDsForBlink[2].Port, h->LEDsForBlink[2].Pin, GPIO_PIN_RESET);
 8001440:	4b4b      	ldr	r3, [pc, #300]	; (8001570 <off_led+0x194>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	6918      	ldr	r0, [r3, #16]
 8001446:	4b4a      	ldr	r3, [pc, #296]	; (8001570 <off_led+0x194>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	8a9b      	ldrh	r3, [r3, #20]
 800144c:	2200      	movs	r2, #0
 800144e:	4619      	mov	r1, r3
 8001450:	f000 fe13 	bl	800207a <HAL_GPIO_WritePin>
			break;
 8001454:	e087      	b.n	8001566 <off_led+0x18a>
		case 4 :
			HAL_GPIO_WritePin(h->LEDsForBlink[3].Port, h->LEDsForBlink[3].Pin, GPIO_PIN_RESET);
 8001456:	4b46      	ldr	r3, [pc, #280]	; (8001570 <off_led+0x194>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	6998      	ldr	r0, [r3, #24]
 800145c:	4b44      	ldr	r3, [pc, #272]	; (8001570 <off_led+0x194>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	8b9b      	ldrh	r3, [r3, #28]
 8001462:	2200      	movs	r2, #0
 8001464:	4619      	mov	r1, r3
 8001466:	f000 fe08 	bl	800207a <HAL_GPIO_WritePin>
			break;
 800146a:	e07c      	b.n	8001566 <off_led+0x18a>
		case 5 :
			HAL_GPIO_WritePin(h->LEDsForBlink[4].Port, h->LEDsForBlink[4].Pin, GPIO_PIN_SET);
 800146c:	4b40      	ldr	r3, [pc, #256]	; (8001570 <off_led+0x194>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	6a18      	ldr	r0, [r3, #32]
 8001472:	4b3f      	ldr	r3, [pc, #252]	; (8001570 <off_led+0x194>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001478:	2201      	movs	r2, #1
 800147a:	4619      	mov	r1, r3
 800147c:	f000 fdfd 	bl	800207a <HAL_GPIO_WritePin>
			break;
 8001480:	e071      	b.n	8001566 <off_led+0x18a>
		case 6 :
			HAL_GPIO_WritePin(h->LEDsForBlink[5].Port, h->LEDsForBlink[5].Pin, GPIO_PIN_SET);
 8001482:	4b3b      	ldr	r3, [pc, #236]	; (8001570 <off_led+0x194>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001488:	4b39      	ldr	r3, [pc, #228]	; (8001570 <off_led+0x194>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800148e:	2201      	movs	r2, #1
 8001490:	4619      	mov	r1, r3
 8001492:	f000 fdf2 	bl	800207a <HAL_GPIO_WritePin>
			break;
 8001496:	e066      	b.n	8001566 <off_led+0x18a>
		case 7 :
			HAL_GPIO_WritePin(h->LEDsForBlink[6].Port, h->LEDsForBlink[6].Pin, GPIO_PIN_SET);
 8001498:	4b35      	ldr	r3, [pc, #212]	; (8001570 <off_led+0x194>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800149e:	4b34      	ldr	r3, [pc, #208]	; (8001570 <off_led+0x194>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80014a4:	2201      	movs	r2, #1
 80014a6:	4619      	mov	r1, r3
 80014a8:	f000 fde7 	bl	800207a <HAL_GPIO_WritePin>
			break;
 80014ac:	e05b      	b.n	8001566 <off_led+0x18a>
		case 8 :
			HAL_GPIO_WritePin(h->LEDsForBlink[7].Port, h->LEDsForBlink[7].Pin, GPIO_PIN_SET);
 80014ae:	4b30      	ldr	r3, [pc, #192]	; (8001570 <off_led+0x194>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80014b4:	4b2e      	ldr	r3, [pc, #184]	; (8001570 <off_led+0x194>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80014ba:	2201      	movs	r2, #1
 80014bc:	4619      	mov	r1, r3
 80014be:	f000 fddc 	bl	800207a <HAL_GPIO_WritePin>
			break;
 80014c2:	e050      	b.n	8001566 <off_led+0x18a>
		default :
			HAL_GPIO_WritePin(h->LEDsForBlink[0].Port, h->LEDsForBlink[0].Pin, GPIO_PIN_RESET);
 80014c4:	4b2a      	ldr	r3, [pc, #168]	; (8001570 <off_led+0x194>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	6818      	ldr	r0, [r3, #0]
 80014ca:	4b29      	ldr	r3, [pc, #164]	; (8001570 <off_led+0x194>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	889b      	ldrh	r3, [r3, #4]
 80014d0:	2200      	movs	r2, #0
 80014d2:	4619      	mov	r1, r3
 80014d4:	f000 fdd1 	bl	800207a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(h->LEDsForBlink[1].Port, h->LEDsForBlink[1].Pin, GPIO_PIN_RESET);
 80014d8:	4b25      	ldr	r3, [pc, #148]	; (8001570 <off_led+0x194>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	6898      	ldr	r0, [r3, #8]
 80014de:	4b24      	ldr	r3, [pc, #144]	; (8001570 <off_led+0x194>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	899b      	ldrh	r3, [r3, #12]
 80014e4:	2200      	movs	r2, #0
 80014e6:	4619      	mov	r1, r3
 80014e8:	f000 fdc7 	bl	800207a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(h->LEDsForBlink[2].Port, h->LEDsForBlink[2].Pin, GPIO_PIN_RESET);
 80014ec:	4b20      	ldr	r3, [pc, #128]	; (8001570 <off_led+0x194>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	6918      	ldr	r0, [r3, #16]
 80014f2:	4b1f      	ldr	r3, [pc, #124]	; (8001570 <off_led+0x194>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	8a9b      	ldrh	r3, [r3, #20]
 80014f8:	2200      	movs	r2, #0
 80014fa:	4619      	mov	r1, r3
 80014fc:	f000 fdbd 	bl	800207a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(h->LEDsForBlink[3].Port, h->LEDsForBlink[3].Pin, GPIO_PIN_RESET);
 8001500:	4b1b      	ldr	r3, [pc, #108]	; (8001570 <off_led+0x194>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	6998      	ldr	r0, [r3, #24]
 8001506:	4b1a      	ldr	r3, [pc, #104]	; (8001570 <off_led+0x194>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	8b9b      	ldrh	r3, [r3, #28]
 800150c:	2200      	movs	r2, #0
 800150e:	4619      	mov	r1, r3
 8001510:	f000 fdb3 	bl	800207a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(h->LEDsForBlink[4].Port, h->LEDsForBlink[4].Pin, GPIO_PIN_SET);
 8001514:	4b16      	ldr	r3, [pc, #88]	; (8001570 <off_led+0x194>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	6a18      	ldr	r0, [r3, #32]
 800151a:	4b15      	ldr	r3, [pc, #84]	; (8001570 <off_led+0x194>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001520:	2201      	movs	r2, #1
 8001522:	4619      	mov	r1, r3
 8001524:	f000 fda9 	bl	800207a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(h->LEDsForBlink[5].Port, h->LEDsForBlink[5].Pin, GPIO_PIN_SET);
 8001528:	4b11      	ldr	r3, [pc, #68]	; (8001570 <off_led+0x194>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800152e:	4b10      	ldr	r3, [pc, #64]	; (8001570 <off_led+0x194>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001534:	2201      	movs	r2, #1
 8001536:	4619      	mov	r1, r3
 8001538:	f000 fd9f 	bl	800207a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(h->LEDsForBlink[6].Port, h->LEDsForBlink[6].Pin, GPIO_PIN_SET);
 800153c:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <off_led+0x194>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001542:	4b0b      	ldr	r3, [pc, #44]	; (8001570 <off_led+0x194>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8001548:	2201      	movs	r2, #1
 800154a:	4619      	mov	r1, r3
 800154c:	f000 fd95 	bl	800207a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(h->LEDsForBlink[7].Port, h->LEDsForBlink[7].Pin, GPIO_PIN_SET);
 8001550:	4b07      	ldr	r3, [pc, #28]	; (8001570 <off_led+0x194>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001556:	4b06      	ldr	r3, [pc, #24]	; (8001570 <off_led+0x194>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800155c:	2201      	movs	r2, #1
 800155e:	4619      	mov	r1, r3
 8001560:	f000 fd8b 	bl	800207a <HAL_GPIO_WritePin>
			break;
 8001564:	bf00      	nop
	}
}
 8001566:	bf00      	nop
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	20000094 	.word	0x20000094

08001574 <main>:
>>>>>>> main
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
<<<<<<< HEAD
 8001588:	b5b0      	push	{r4, r5, r7, lr}
 800158a:	b08a      	sub	sp, #40	; 0x28
 800158c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  app_handle.ToggleBuf[0].Port 	= GPIOA;
 800158e:	4b44      	ldr	r3, [pc, #272]	; (80016a0 <main+0x118>)
 8001590:	4a44      	ldr	r2, [pc, #272]	; (80016a4 <main+0x11c>)
 8001592:	641a      	str	r2, [r3, #64]	; 0x40
  app_handle.ToggleBuf[0].Pin  	= GPIO_PIN_4;
 8001594:	4b42      	ldr	r3, [pc, #264]	; (80016a0 <main+0x118>)
 8001596:	2210      	movs	r2, #16
 8001598:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  app_handle.ToggleBuf[1].Port 	= GPIOB;
 800159c:	4b40      	ldr	r3, [pc, #256]	; (80016a0 <main+0x118>)
 800159e:	4a42      	ldr	r2, [pc, #264]	; (80016a8 <main+0x120>)
 80015a0:	649a      	str	r2, [r3, #72]	; 0x48
  app_handle.ToggleBuf[1].Pin  	= GPIO_PIN_0;
 80015a2:	4b3f      	ldr	r3, [pc, #252]	; (80016a0 <main+0x118>)
 80015a4:	2201      	movs	r2, #1
 80015a6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  app_handle.ToggleBuf[2].Port 	= GPIOB;
 80015aa:	4b3d      	ldr	r3, [pc, #244]	; (80016a0 <main+0x118>)
 80015ac:	4a3e      	ldr	r2, [pc, #248]	; (80016a8 <main+0x120>)
 80015ae:	651a      	str	r2, [r3, #80]	; 0x50
  app_handle.ToggleBuf[2].Pin  	= GPIO_PIN_11;
 80015b0:	4b3b      	ldr	r3, [pc, #236]	; (80016a0 <main+0x118>)
 80015b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015b6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  app_handle.ToggleBuf[3].Port 	= GPIOC;
 80015ba:	4b39      	ldr	r3, [pc, #228]	; (80016a0 <main+0x118>)
 80015bc:	4a3b      	ldr	r2, [pc, #236]	; (80016ac <main+0x124>)
 80015be:	659a      	str	r2, [r3, #88]	; 0x58
  app_handle.ToggleBuf[3].Pin  	= GPIO_PIN_7;
 80015c0:	4b37      	ldr	r3, [pc, #220]	; (80016a0 <main+0x118>)
 80015c2:	2280      	movs	r2, #128	; 0x80
 80015c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  app_handle.ToggleBuf[4].Port 	= GPIOA;
 80015c8:	4b35      	ldr	r3, [pc, #212]	; (80016a0 <main+0x118>)
 80015ca:	4a36      	ldr	r2, [pc, #216]	; (80016a4 <main+0x11c>)
 80015cc:	661a      	str	r2, [r3, #96]	; 0x60
  app_handle.ToggleBuf[4].Pin  	= GPIO_PIN_9;
 80015ce:	4b34      	ldr	r3, [pc, #208]	; (80016a0 <main+0x118>)
 80015d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015d4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  app_handle.ToggleBuf[5].Port 	= GPIOB;
 80015d8:	4b31      	ldr	r3, [pc, #196]	; (80016a0 <main+0x118>)
 80015da:	4a33      	ldr	r2, [pc, #204]	; (80016a8 <main+0x120>)
 80015dc:	669a      	str	r2, [r3, #104]	; 0x68
  app_handle.ToggleBuf[5].Pin 	= GPIO_PIN_2;
 80015de:	4b30      	ldr	r3, [pc, #192]	; (80016a0 <main+0x118>)
 80015e0:	2204      	movs	r2, #4
 80015e2:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c

  app_handle.LEDsForBlink[0].Port = GPIOB;
 80015e6:	4b2e      	ldr	r3, [pc, #184]	; (80016a0 <main+0x118>)
 80015e8:	4a2f      	ldr	r2, [pc, #188]	; (80016a8 <main+0x120>)
 80015ea:	601a      	str	r2, [r3, #0]
  app_handle.LEDsForBlink[0].Pin  = GPIO_PIN_8;
 80015ec:	4b2c      	ldr	r3, [pc, #176]	; (80016a0 <main+0x118>)
 80015ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015f2:	809a      	strh	r2, [r3, #4]
  app_handle.LEDsForBlink[1].Port = GPIOC;
 80015f4:	4b2a      	ldr	r3, [pc, #168]	; (80016a0 <main+0x118>)
 80015f6:	4a2d      	ldr	r2, [pc, #180]	; (80016ac <main+0x124>)
 80015f8:	609a      	str	r2, [r3, #8]
  app_handle.LEDsForBlink[1].Pin  = GPIO_PIN_6;
 80015fa:	4b29      	ldr	r3, [pc, #164]	; (80016a0 <main+0x118>)
 80015fc:	2240      	movs	r2, #64	; 0x40
 80015fe:	819a      	strh	r2, [r3, #12]
  app_handle.LEDsForBlink[2].Port = GPIOC;
 8001600:	4b27      	ldr	r3, [pc, #156]	; (80016a0 <main+0x118>)
 8001602:	4a2a      	ldr	r2, [pc, #168]	; (80016ac <main+0x124>)
 8001604:	611a      	str	r2, [r3, #16]
  app_handle.LEDsForBlink[2].Pin  = GPIO_PIN_9;
 8001606:	4b26      	ldr	r3, [pc, #152]	; (80016a0 <main+0x118>)
 8001608:	f44f 7200 	mov.w	r2, #512	; 0x200
 800160c:	829a      	strh	r2, [r3, #20]
  app_handle.LEDsForBlink[3].Port = GPIOC;
 800160e:	4b24      	ldr	r3, [pc, #144]	; (80016a0 <main+0x118>)
 8001610:	4a26      	ldr	r2, [pc, #152]	; (80016ac <main+0x124>)
 8001612:	619a      	str	r2, [r3, #24]
  app_handle.LEDsForBlink[3].Pin  = GPIO_PIN_8;
 8001614:	4b22      	ldr	r3, [pc, #136]	; (80016a0 <main+0x118>)
 8001616:	f44f 7280 	mov.w	r2, #256	; 0x100
 800161a:	839a      	strh	r2, [r3, #28]
  app_handle.LEDsForBlink[4].Port = GPIOC;
 800161c:	4b20      	ldr	r3, [pc, #128]	; (80016a0 <main+0x118>)
 800161e:	4a23      	ldr	r2, [pc, #140]	; (80016ac <main+0x124>)
 8001620:	621a      	str	r2, [r3, #32]
  app_handle.LEDsForBlink[4].Pin  = GPIO_PIN_5;
 8001622:	4b1f      	ldr	r3, [pc, #124]	; (80016a0 <main+0x118>)
 8001624:	2220      	movs	r2, #32
 8001626:	849a      	strh	r2, [r3, #36]	; 0x24
  app_handle.LEDsForBlink[5].Port = GPIOB;
 8001628:	4b1d      	ldr	r3, [pc, #116]	; (80016a0 <main+0x118>)
 800162a:	4a1f      	ldr	r2, [pc, #124]	; (80016a8 <main+0x120>)
 800162c:	629a      	str	r2, [r3, #40]	; 0x28
  app_handle.LEDsForBlink[5].Pin  = GPIO_PIN_9;
 800162e:	4b1c      	ldr	r3, [pc, #112]	; (80016a0 <main+0x118>)
 8001630:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001634:	859a      	strh	r2, [r3, #44]	; 0x2c
  app_handle.LEDsForBlink[6].Port = GPIOA;
 8001636:	4b1a      	ldr	r3, [pc, #104]	; (80016a0 <main+0x118>)
 8001638:	4a1a      	ldr	r2, [pc, #104]	; (80016a4 <main+0x11c>)
 800163a:	631a      	str	r2, [r3, #48]	; 0x30
  app_handle.LEDsForBlink[6].Pin  = GPIO_PIN_12;
 800163c:	4b18      	ldr	r3, [pc, #96]	; (80016a0 <main+0x118>)
 800163e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001642:	869a      	strh	r2, [r3, #52]	; 0x34
  app_handle.LEDsForBlink[7].Port = GPIOA;
 8001644:	4b16      	ldr	r3, [pc, #88]	; (80016a0 <main+0x118>)
 8001646:	4a17      	ldr	r2, [pc, #92]	; (80016a4 <main+0x11c>)
 8001648:	639a      	str	r2, [r3, #56]	; 0x38
  app_handle.LEDsForBlink[7].Pin  = GPIO_PIN_6;
 800164a:	4b15      	ldr	r3, [pc, #84]	; (80016a0 <main+0x118>)
 800164c:	2240      	movs	r2, #64	; 0x40
 800164e:	879a      	strh	r2, [r3, #60]	; 0x3c

  APP_init(&app_handle);
 8001650:	4813      	ldr	r0, [pc, #76]	; (80016a0 <main+0x118>)
 8001652:	f7ff fca5 	bl	8000fa0 <APP_init>
=======
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  app_handle.ToggleBuf[0].Port 	= GPIOA;
 8001578:	4b36      	ldr	r3, [pc, #216]	; (8001654 <main+0xe0>)
 800157a:	4a37      	ldr	r2, [pc, #220]	; (8001658 <main+0xe4>)
 800157c:	641a      	str	r2, [r3, #64]	; 0x40
  app_handle.ToggleBuf[0].Pin  	= GPIO_PIN_4;
 800157e:	4b35      	ldr	r3, [pc, #212]	; (8001654 <main+0xe0>)
 8001580:	2210      	movs	r2, #16
 8001582:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  app_handle.ToggleBuf[1].Port 	= GPIOB;
 8001586:	4b33      	ldr	r3, [pc, #204]	; (8001654 <main+0xe0>)
 8001588:	4a34      	ldr	r2, [pc, #208]	; (800165c <main+0xe8>)
 800158a:	649a      	str	r2, [r3, #72]	; 0x48
  app_handle.ToggleBuf[1].Pin  	= GPIO_PIN_0;
 800158c:	4b31      	ldr	r3, [pc, #196]	; (8001654 <main+0xe0>)
 800158e:	2201      	movs	r2, #1
 8001590:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  app_handle.ToggleBuf[2].Port 	= GPIOB;
 8001594:	4b2f      	ldr	r3, [pc, #188]	; (8001654 <main+0xe0>)
 8001596:	4a31      	ldr	r2, [pc, #196]	; (800165c <main+0xe8>)
 8001598:	651a      	str	r2, [r3, #80]	; 0x50
  app_handle.ToggleBuf[2].Pin  	= GPIO_PIN_11;
 800159a:	4b2e      	ldr	r3, [pc, #184]	; (8001654 <main+0xe0>)
 800159c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015a0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  app_handle.ToggleBuf[3].Port 	= GPIOC;
 80015a4:	4b2b      	ldr	r3, [pc, #172]	; (8001654 <main+0xe0>)
 80015a6:	4a2e      	ldr	r2, [pc, #184]	; (8001660 <main+0xec>)
 80015a8:	659a      	str	r2, [r3, #88]	; 0x58
  app_handle.ToggleBuf[3].Pin  	= GPIO_PIN_7;
 80015aa:	4b2a      	ldr	r3, [pc, #168]	; (8001654 <main+0xe0>)
 80015ac:	2280      	movs	r2, #128	; 0x80
 80015ae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  app_handle.ToggleBuf[4].Port 	= GPIOA;
 80015b2:	4b28      	ldr	r3, [pc, #160]	; (8001654 <main+0xe0>)
 80015b4:	4a28      	ldr	r2, [pc, #160]	; (8001658 <main+0xe4>)
 80015b6:	661a      	str	r2, [r3, #96]	; 0x60
  app_handle.ToggleBuf[4].Pin  	= GPIO_PIN_9;
 80015b8:	4b26      	ldr	r3, [pc, #152]	; (8001654 <main+0xe0>)
 80015ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015be:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  app_handle.ToggleBuf[5].Port 	= GPIOB;
 80015c2:	4b24      	ldr	r3, [pc, #144]	; (8001654 <main+0xe0>)
 80015c4:	4a25      	ldr	r2, [pc, #148]	; (800165c <main+0xe8>)
 80015c6:	669a      	str	r2, [r3, #104]	; 0x68
  app_handle.ToggleBuf[5].Pin 	= GPIO_PIN_2;
 80015c8:	4b22      	ldr	r3, [pc, #136]	; (8001654 <main+0xe0>)
 80015ca:	2204      	movs	r2, #4
 80015cc:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c

  app_handle.LEDsForBlink[0].Port = GPIOB;
 80015d0:	4b20      	ldr	r3, [pc, #128]	; (8001654 <main+0xe0>)
 80015d2:	4a22      	ldr	r2, [pc, #136]	; (800165c <main+0xe8>)
 80015d4:	601a      	str	r2, [r3, #0]
  app_handle.LEDsForBlink[0].Pin  = GPIO_PIN_8;
 80015d6:	4b1f      	ldr	r3, [pc, #124]	; (8001654 <main+0xe0>)
 80015d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015dc:	809a      	strh	r2, [r3, #4]
  app_handle.LEDsForBlink[1].Port = GPIOC;
 80015de:	4b1d      	ldr	r3, [pc, #116]	; (8001654 <main+0xe0>)
 80015e0:	4a1f      	ldr	r2, [pc, #124]	; (8001660 <main+0xec>)
 80015e2:	609a      	str	r2, [r3, #8]
  app_handle.LEDsForBlink[1].Pin  = GPIO_PIN_6;
 80015e4:	4b1b      	ldr	r3, [pc, #108]	; (8001654 <main+0xe0>)
 80015e6:	2240      	movs	r2, #64	; 0x40
 80015e8:	819a      	strh	r2, [r3, #12]
  app_handle.LEDsForBlink[2].Port = GPIOC;
 80015ea:	4b1a      	ldr	r3, [pc, #104]	; (8001654 <main+0xe0>)
 80015ec:	4a1c      	ldr	r2, [pc, #112]	; (8001660 <main+0xec>)
 80015ee:	611a      	str	r2, [r3, #16]
  app_handle.LEDsForBlink[2].Pin  = GPIO_PIN_9;
 80015f0:	4b18      	ldr	r3, [pc, #96]	; (8001654 <main+0xe0>)
 80015f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015f6:	829a      	strh	r2, [r3, #20]
  app_handle.LEDsForBlink[3].Port = GPIOC;
 80015f8:	4b16      	ldr	r3, [pc, #88]	; (8001654 <main+0xe0>)
 80015fa:	4a19      	ldr	r2, [pc, #100]	; (8001660 <main+0xec>)
 80015fc:	619a      	str	r2, [r3, #24]
  app_handle.LEDsForBlink[3].Pin  = GPIO_PIN_8;
 80015fe:	4b15      	ldr	r3, [pc, #84]	; (8001654 <main+0xe0>)
 8001600:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001604:	839a      	strh	r2, [r3, #28]
  app_handle.LEDsForBlink[4].Port = GPIOC;
 8001606:	4b13      	ldr	r3, [pc, #76]	; (8001654 <main+0xe0>)
 8001608:	4a15      	ldr	r2, [pc, #84]	; (8001660 <main+0xec>)
 800160a:	621a      	str	r2, [r3, #32]
  app_handle.LEDsForBlink[4].Pin  = GPIO_PIN_5;
 800160c:	4b11      	ldr	r3, [pc, #68]	; (8001654 <main+0xe0>)
 800160e:	2220      	movs	r2, #32
 8001610:	849a      	strh	r2, [r3, #36]	; 0x24
  app_handle.LEDsForBlink[5].Port = GPIOB;
 8001612:	4b10      	ldr	r3, [pc, #64]	; (8001654 <main+0xe0>)
 8001614:	4a11      	ldr	r2, [pc, #68]	; (800165c <main+0xe8>)
 8001616:	629a      	str	r2, [r3, #40]	; 0x28
  app_handle.LEDsForBlink[5].Pin  = GPIO_PIN_9;
 8001618:	4b0e      	ldr	r3, [pc, #56]	; (8001654 <main+0xe0>)
 800161a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800161e:	859a      	strh	r2, [r3, #44]	; 0x2c
  app_handle.LEDsForBlink[6].Port = GPIOA;
 8001620:	4b0c      	ldr	r3, [pc, #48]	; (8001654 <main+0xe0>)
 8001622:	4a0d      	ldr	r2, [pc, #52]	; (8001658 <main+0xe4>)
 8001624:	631a      	str	r2, [r3, #48]	; 0x30
  app_handle.LEDsForBlink[6].Pin  = GPIO_PIN_12;
 8001626:	4b0b      	ldr	r3, [pc, #44]	; (8001654 <main+0xe0>)
 8001628:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800162c:	869a      	strh	r2, [r3, #52]	; 0x34
  app_handle.LEDsForBlink[7].Port = GPIOA;
 800162e:	4b09      	ldr	r3, [pc, #36]	; (8001654 <main+0xe0>)
 8001630:	4a09      	ldr	r2, [pc, #36]	; (8001658 <main+0xe4>)
 8001632:	639a      	str	r2, [r3, #56]	; 0x38
  app_handle.LEDsForBlink[7].Pin  = GPIO_PIN_6;
 8001634:	4b07      	ldr	r3, [pc, #28]	; (8001654 <main+0xe0>)
 8001636:	2240      	movs	r2, #64	; 0x40
 8001638:	879a      	strh	r2, [r3, #60]	; 0x3c

  APP_init(&app_handle);
 800163a:	4806      	ldr	r0, [pc, #24]	; (8001654 <main+0xe0>)
 800163c:	f7ff fc92 	bl	8000f64 <APP_init>
>>>>>>> main
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
<<<<<<< HEAD
 8001656:	f000 fa07 	bl	8001a68 <HAL_Init>
=======
 8001640:	f000 f9ec 	bl	8001a1c <HAL_Init>
>>>>>>> main
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
<<<<<<< HEAD
 800165a:	f000 f831 	bl	80016c0 <SystemClock_Config>
=======
 8001644:	f000 f80e 	bl	8001664 <SystemClock_Config>
>>>>>>> main
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
<<<<<<< HEAD
 800165e:	f000 f875 	bl	800174c <MX_GPIO_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001662:	4b13      	ldr	r3, [pc, #76]	; (80016b0 <main+0x128>)
 8001664:	1d3c      	adds	r4, r7, #4
 8001666:	461d      	mov	r5, r3
 8001668:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800166a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800166c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001670:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001674:	1d3b      	adds	r3, r7, #4
 8001676:	2100      	movs	r1, #0
 8001678:	4618      	mov	r0, r3
 800167a:	f001 f969 	bl	8002950 <osThreadCreate>
 800167e:	4603      	mov	r3, r0
 8001680:	4a0c      	ldr	r2, [pc, #48]	; (80016b4 <main+0x12c>)
 8001682:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  xTaskCreate(NewTask1, "NewTask_for_student", 128, ( void * ) 1 , osPriorityNormal, &app_handle);
 8001684:	4b06      	ldr	r3, [pc, #24]	; (80016a0 <main+0x118>)
 8001686:	9301      	str	r3, [sp, #4]
 8001688:	2300      	movs	r3, #0
 800168a:	9300      	str	r3, [sp, #0]
 800168c:	2301      	movs	r3, #1
 800168e:	2280      	movs	r2, #128	; 0x80
 8001690:	4909      	ldr	r1, [pc, #36]	; (80016b8 <main+0x130>)
 8001692:	480a      	ldr	r0, [pc, #40]	; (80016bc <main+0x134>)
 8001694:	f001 fac7 	bl	8002c26 <xTaskCreate>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001698:	f001 f953 	bl	8002942 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800169c:	e7fe      	b.n	800169c <main+0x114>
 800169e:	bf00      	nop
 80016a0:	20000324 	.word	0x20000324
 80016a4:	40010800 	.word	0x40010800
 80016a8:	40010c00 	.word	0x40010c00
 80016ac:	40011000 	.word	0x40011000
 80016b0:	08004bb0 	.word	0x08004bb0
 80016b4:	20000320 	.word	0x20000320
 80016b8:	08004b90 	.word	0x08004b90
 80016bc:	0800191d 	.word	0x0800191d

080016c0 <SystemClock_Config>:
=======
 8001648:	f000 f852 	bl	80016f0 <MX_GPIO_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  APP_start();
 800164c:	f7ff fcd2 	bl	8000ff4 <APP_start>
 8001650:	e7fc      	b.n	800164c <main+0xd8>
 8001652:	bf00      	nop
 8001654:	200000cc 	.word	0x200000cc
 8001658:	40010800 	.word	0x40010800
 800165c:	40010c00 	.word	0x40010c00
 8001660:	40011000 	.word	0x40011000

08001664 <SystemClock_Config>:
>>>>>>> main
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
<<<<<<< HEAD
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b090      	sub	sp, #64	; 0x40
 80016c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016c6:	f107 0318 	add.w	r3, r7, #24
 80016ca:	2228      	movs	r2, #40	; 0x28
 80016cc:	2100      	movs	r1, #0
 80016ce:	4618      	mov	r0, r3
 80016d0:	f002 fb16 	bl	8003d00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016d4:	1d3b      	adds	r3, r7, #4
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	605a      	str	r2, [r3, #4]
 80016dc:	609a      	str	r2, [r3, #8]
 80016de:	60da      	str	r2, [r3, #12]
 80016e0:	611a      	str	r2, [r3, #16]
=======
 8001664:	b580      	push	{r7, lr}
 8001666:	b090      	sub	sp, #64	; 0x40
 8001668:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800166a:	f107 0318 	add.w	r3, r7, #24
 800166e:	2228      	movs	r2, #40	; 0x28
 8001670:	2100      	movs	r1, #0
 8001672:	4618      	mov	r0, r3
 8001674:	f001 f928 	bl	80028c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001678:	1d3b      	adds	r3, r7, #4
 800167a:	2200      	movs	r2, #0
 800167c:	601a      	str	r2, [r3, #0]
 800167e:	605a      	str	r2, [r3, #4]
 8001680:	609a      	str	r2, [r3, #8]
 8001682:	60da      	str	r2, [r3, #12]
 8001684:	611a      	str	r2, [r3, #16]
>>>>>>> main

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
<<<<<<< HEAD
 80016e2:	2301      	movs	r3, #1
 80016e4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80016e6:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80016ea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80016ec:	2300      	movs	r3, #0
 80016ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016f0:	2301      	movs	r3, #1
 80016f2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016f4:	2302      	movs	r3, #2
 80016f6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80016fe:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001702:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001704:	f107 0318 	add.w	r3, r7, #24
 8001708:	4618      	mov	r0, r3
 800170a:	f000 fd25 	bl	8002158 <HAL_RCC_OscConfig>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001714:	f000 f917 	bl	8001946 <Error_Handler>
=======
 8001686:	2301      	movs	r3, #1
 8001688:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800168a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800168e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001690:	2300      	movs	r3, #0
 8001692:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001694:	2301      	movs	r3, #1
 8001696:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001698:	2302      	movs	r3, #2
 800169a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800169c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80016a2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80016a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016a8:	f107 0318 	add.w	r3, r7, #24
 80016ac:	4618      	mov	r0, r3
 80016ae:	f000 fd2d 	bl	800210c <HAL_RCC_OscConfig>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80016b8:	f000 f90e 	bl	80018d8 <Error_Handler>
>>>>>>> main
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
<<<<<<< HEAD
 8001718:	230f      	movs	r3, #15
 800171a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800171c:	2302      	movs	r3, #2
 800171e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001720:	2300      	movs	r3, #0
 8001722:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001724:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001728:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800172a:	2300      	movs	r3, #0
 800172c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800172e:	1d3b      	adds	r3, r7, #4
 8001730:	2102      	movs	r1, #2
 8001732:	4618      	mov	r0, r3
 8001734:	f000 ff92 	bl	800265c <HAL_RCC_ClockConfig>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800173e:	f000 f902 	bl	8001946 <Error_Handler>
  }
}
 8001742:	bf00      	nop
 8001744:	3740      	adds	r7, #64	; 0x40
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
	...

0800174c <MX_GPIO_Init>:
=======
 80016bc:	230f      	movs	r3, #15
 80016be:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016c0:	2302      	movs	r3, #2
 80016c2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016c4:	2300      	movs	r3, #0
 80016c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016ce:	2300      	movs	r3, #0
 80016d0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016d2:	1d3b      	adds	r3, r7, #4
 80016d4:	2102      	movs	r1, #2
 80016d6:	4618      	mov	r0, r3
 80016d8:	f000 ff9a 	bl	8002610 <HAL_RCC_ClockConfig>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80016e2:	f000 f8f9 	bl	80018d8 <Error_Handler>
  }
}
 80016e6:	bf00      	nop
 80016e8:	3740      	adds	r7, #64	; 0x40
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
	...

080016f0 <MX_GPIO_Init>:
>>>>>>> main
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
<<<<<<< HEAD
 800174c:	b580      	push	{r7, lr}
 800174e:	b088      	sub	sp, #32
 8001750:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001752:	f107 0310 	add.w	r3, r7, #16
 8001756:	2200      	movs	r2, #0
 8001758:	601a      	str	r2, [r3, #0]
 800175a:	605a      	str	r2, [r3, #4]
 800175c:	609a      	str	r2, [r3, #8]
 800175e:	60da      	str	r2, [r3, #12]
=======
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b088      	sub	sp, #32
 80016f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f6:	f107 0310 	add.w	r3, r7, #16
 80016fa:	2200      	movs	r2, #0
 80016fc:	601a      	str	r2, [r3, #0]
 80016fe:	605a      	str	r2, [r3, #4]
 8001700:	609a      	str	r2, [r3, #8]
 8001702:	60da      	str	r2, [r3, #12]
>>>>>>> main
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
<<<<<<< HEAD
 8001760:	4b5c      	ldr	r3, [pc, #368]	; (80018d4 <MX_GPIO_Init+0x188>)
 8001762:	699b      	ldr	r3, [r3, #24]
 8001764:	4a5b      	ldr	r2, [pc, #364]	; (80018d4 <MX_GPIO_Init+0x188>)
 8001766:	f043 0310 	orr.w	r3, r3, #16
 800176a:	6193      	str	r3, [r2, #24]
 800176c:	4b59      	ldr	r3, [pc, #356]	; (80018d4 <MX_GPIO_Init+0x188>)
 800176e:	699b      	ldr	r3, [r3, #24]
 8001770:	f003 0310 	and.w	r3, r3, #16
 8001774:	60fb      	str	r3, [r7, #12]
 8001776:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001778:	4b56      	ldr	r3, [pc, #344]	; (80018d4 <MX_GPIO_Init+0x188>)
 800177a:	699b      	ldr	r3, [r3, #24]
 800177c:	4a55      	ldr	r2, [pc, #340]	; (80018d4 <MX_GPIO_Init+0x188>)
 800177e:	f043 0320 	orr.w	r3, r3, #32
 8001782:	6193      	str	r3, [r2, #24]
 8001784:	4b53      	ldr	r3, [pc, #332]	; (80018d4 <MX_GPIO_Init+0x188>)
 8001786:	699b      	ldr	r3, [r3, #24]
 8001788:	f003 0320 	and.w	r3, r3, #32
 800178c:	60bb      	str	r3, [r7, #8]
 800178e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001790:	4b50      	ldr	r3, [pc, #320]	; (80018d4 <MX_GPIO_Init+0x188>)
 8001792:	699b      	ldr	r3, [r3, #24]
 8001794:	4a4f      	ldr	r2, [pc, #316]	; (80018d4 <MX_GPIO_Init+0x188>)
 8001796:	f043 0304 	orr.w	r3, r3, #4
 800179a:	6193      	str	r3, [r2, #24]
 800179c:	4b4d      	ldr	r3, [pc, #308]	; (80018d4 <MX_GPIO_Init+0x188>)
 800179e:	699b      	ldr	r3, [r3, #24]
 80017a0:	f003 0304 	and.w	r3, r3, #4
 80017a4:	607b      	str	r3, [r7, #4]
 80017a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017a8:	4b4a      	ldr	r3, [pc, #296]	; (80018d4 <MX_GPIO_Init+0x188>)
 80017aa:	699b      	ldr	r3, [r3, #24]
 80017ac:	4a49      	ldr	r2, [pc, #292]	; (80018d4 <MX_GPIO_Init+0x188>)
 80017ae:	f043 0308 	orr.w	r3, r3, #8
 80017b2:	6193      	str	r3, [r2, #24]
 80017b4:	4b47      	ldr	r3, [pc, #284]	; (80018d4 <MX_GPIO_Init+0x188>)
 80017b6:	699b      	ldr	r3, [r3, #24]
 80017b8:	f003 0308 	and.w	r3, r3, #8
 80017bc:	603b      	str	r3, [r7, #0]
 80017be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6|GPIO_PIN_12, GPIO_PIN_RESET);
 80017c0:	2200      	movs	r2, #0
 80017c2:	f44f 5183 	mov.w	r1, #4192	; 0x1060
 80017c6:	4844      	ldr	r0, [pc, #272]	; (80018d8 <MX_GPIO_Init+0x18c>)
 80017c8:	f000 fc7d 	bl	80020c6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80017cc:	2200      	movs	r2, #0
 80017ce:	f44f 7158 	mov.w	r1, #864	; 0x360
 80017d2:	4842      	ldr	r0, [pc, #264]	; (80018dc <MX_GPIO_Init+0x190>)
 80017d4:	f000 fc77 	bl	80020c6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80017d8:	2200      	movs	r2, #0
 80017da:	f44f 7140 	mov.w	r1, #768	; 0x300
 80017de:	4840      	ldr	r0, [pc, #256]	; (80018e0 <MX_GPIO_Init+0x194>)
 80017e0:	f000 fc71 	bl	80020c6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 80017e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017ea:	4b3e      	ldr	r3, [pc, #248]	; (80018e4 <MX_GPIO_Init+0x198>)
 80017ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ee:	2300      	movs	r3, #0
 80017f0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 80017f2:	f107 0310 	add.w	r3, r7, #16
 80017f6:	4619      	mov	r1, r3
 80017f8:	4838      	ldr	r0, [pc, #224]	; (80018dc <MX_GPIO_Init+0x190>)
 80017fa:	f000 fac9 	bl	8001d90 <HAL_GPIO_Init>

  /*Configure GPIO pin : USART_TX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin;
 80017fe:	2304      	movs	r3, #4
 8001800:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001802:	2302      	movs	r3, #2
 8001804:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001806:	2302      	movs	r3, #2
 8001808:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USART_TX_GPIO_Port, &GPIO_InitStruct);
 800180a:	f107 0310 	add.w	r3, r7, #16
 800180e:	4619      	mov	r1, r3
 8001810:	4831      	ldr	r0, [pc, #196]	; (80018d8 <MX_GPIO_Init+0x18c>)
 8001812:	f000 fabd 	bl	8001d90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_9;
 8001816:	f44f 7304 	mov.w	r3, #528	; 0x210
 800181a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800181c:	2300      	movs	r3, #0
 800181e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001820:	2300      	movs	r3, #0
 8001822:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001824:	f107 0310 	add.w	r3, r7, #16
 8001828:	4619      	mov	r1, r3
 800182a:	482b      	ldr	r0, [pc, #172]	; (80018d8 <MX_GPIO_Init+0x18c>)
 800182c:	f000 fab0 	bl	8001d90 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA6 PA12 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6|GPIO_PIN_12;
 8001830:	f44f 5383 	mov.w	r3, #4192	; 0x1060
 8001834:	613b      	str	r3, [r7, #16]
=======
 8001704:	4b62      	ldr	r3, [pc, #392]	; (8001890 <MX_GPIO_Init+0x1a0>)
 8001706:	699b      	ldr	r3, [r3, #24]
 8001708:	4a61      	ldr	r2, [pc, #388]	; (8001890 <MX_GPIO_Init+0x1a0>)
 800170a:	f043 0310 	orr.w	r3, r3, #16
 800170e:	6193      	str	r3, [r2, #24]
 8001710:	4b5f      	ldr	r3, [pc, #380]	; (8001890 <MX_GPIO_Init+0x1a0>)
 8001712:	699b      	ldr	r3, [r3, #24]
 8001714:	f003 0310 	and.w	r3, r3, #16
 8001718:	60fb      	str	r3, [r7, #12]
 800171a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800171c:	4b5c      	ldr	r3, [pc, #368]	; (8001890 <MX_GPIO_Init+0x1a0>)
 800171e:	699b      	ldr	r3, [r3, #24]
 8001720:	4a5b      	ldr	r2, [pc, #364]	; (8001890 <MX_GPIO_Init+0x1a0>)
 8001722:	f043 0320 	orr.w	r3, r3, #32
 8001726:	6193      	str	r3, [r2, #24]
 8001728:	4b59      	ldr	r3, [pc, #356]	; (8001890 <MX_GPIO_Init+0x1a0>)
 800172a:	699b      	ldr	r3, [r3, #24]
 800172c:	f003 0320 	and.w	r3, r3, #32
 8001730:	60bb      	str	r3, [r7, #8]
 8001732:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001734:	4b56      	ldr	r3, [pc, #344]	; (8001890 <MX_GPIO_Init+0x1a0>)
 8001736:	699b      	ldr	r3, [r3, #24]
 8001738:	4a55      	ldr	r2, [pc, #340]	; (8001890 <MX_GPIO_Init+0x1a0>)
 800173a:	f043 0304 	orr.w	r3, r3, #4
 800173e:	6193      	str	r3, [r2, #24]
 8001740:	4b53      	ldr	r3, [pc, #332]	; (8001890 <MX_GPIO_Init+0x1a0>)
 8001742:	699b      	ldr	r3, [r3, #24]
 8001744:	f003 0304 	and.w	r3, r3, #4
 8001748:	607b      	str	r3, [r7, #4]
 800174a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800174c:	4b50      	ldr	r3, [pc, #320]	; (8001890 <MX_GPIO_Init+0x1a0>)
 800174e:	699b      	ldr	r3, [r3, #24]
 8001750:	4a4f      	ldr	r2, [pc, #316]	; (8001890 <MX_GPIO_Init+0x1a0>)
 8001752:	f043 0308 	orr.w	r3, r3, #8
 8001756:	6193      	str	r3, [r2, #24]
 8001758:	4b4d      	ldr	r3, [pc, #308]	; (8001890 <MX_GPIO_Init+0x1a0>)
 800175a:	699b      	ldr	r3, [r3, #24]
 800175c:	f003 0308 	and.w	r3, r3, #8
 8001760:	603b      	str	r3, [r7, #0]
 8001762:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_12, GPIO_PIN_SET);
 8001764:	2201      	movs	r2, #1
 8001766:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800176a:	484a      	ldr	r0, [pc, #296]	; (8001894 <MX_GPIO_Init+0x1a4>)
 800176c:	f000 fc85 	bl	800207a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001770:	2200      	movs	r2, #0
 8001772:	f44f 7150 	mov.w	r1, #832	; 0x340
 8001776:	4848      	ldr	r0, [pc, #288]	; (8001898 <MX_GPIO_Init+0x1a8>)
 8001778:	f000 fc7f 	bl	800207a <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 800177c:	2201      	movs	r2, #1
 800177e:	2120      	movs	r1, #32
 8001780:	4845      	ldr	r0, [pc, #276]	; (8001898 <MX_GPIO_Init+0x1a8>)
 8001782:	f000 fc7a 	bl	800207a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8001786:	2200      	movs	r2, #0
 8001788:	f44f 7180 	mov.w	r1, #256	; 0x100
 800178c:	4843      	ldr	r0, [pc, #268]	; (800189c <MX_GPIO_Init+0x1ac>)
 800178e:	f000 fc74 	bl	800207a <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8001792:	2201      	movs	r2, #1
 8001794:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001798:	4840      	ldr	r0, [pc, #256]	; (800189c <MX_GPIO_Init+0x1ac>)
 800179a:	f000 fc6e 	bl	800207a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800179e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017a4:	4b3e      	ldr	r3, [pc, #248]	; (80018a0 <MX_GPIO_Init+0x1b0>)
 80017a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a8:	2300      	movs	r3, #0
 80017aa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017ac:	f107 0310 	add.w	r3, r7, #16
 80017b0:	4619      	mov	r1, r3
 80017b2:	4839      	ldr	r0, [pc, #228]	; (8001898 <MX_GPIO_Init+0x1a8>)
 80017b4:	f000 fac6 	bl	8001d44 <HAL_GPIO_Init>

  /*Configure GPIO pin : USART_TX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin;
 80017b8:	2304      	movs	r3, #4
 80017ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017bc:	2302      	movs	r3, #2
 80017be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c0:	2302      	movs	r3, #2
 80017c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USART_TX_GPIO_Port, &GPIO_InitStruct);
 80017c4:	f107 0310 	add.w	r3, r7, #16
 80017c8:	4619      	mov	r1, r3
 80017ca:	4832      	ldr	r0, [pc, #200]	; (8001894 <MX_GPIO_Init+0x1a4>)
 80017cc:	f000 faba 	bl	8001d44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_9;
 80017d0:	f44f 7304 	mov.w	r3, #528	; 0x210
 80017d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017d6:	2300      	movs	r3, #0
 80017d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80017da:	2302      	movs	r3, #2
 80017dc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017de:	f107 0310 	add.w	r3, r7, #16
 80017e2:	4619      	mov	r1, r3
 80017e4:	482b      	ldr	r0, [pc, #172]	; (8001894 <MX_GPIO_Init+0x1a4>)
 80017e6:	f000 faad 	bl	8001d44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_12;
 80017ea:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 80017ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017f0:	2301      	movs	r3, #1
 80017f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f4:	2300      	movs	r3, #0
 80017f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f8:	2302      	movs	r3, #2
 80017fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017fc:	f107 0310 	add.w	r3, r7, #16
 8001800:	4619      	mov	r1, r3
 8001802:	4824      	ldr	r0, [pc, #144]	; (8001894 <MX_GPIO_Init+0x1a4>)
 8001804:	f000 fa9e 	bl	8001d44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC6 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 8001808:	f44f 7358 	mov.w	r3, #864	; 0x360
 800180c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800180e:	2301      	movs	r3, #1
 8001810:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001812:	2300      	movs	r3, #0
 8001814:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001816:	2302      	movs	r3, #2
 8001818:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800181a:	f107 0310 	add.w	r3, r7, #16
 800181e:	4619      	mov	r1, r3
 8001820:	481d      	ldr	r0, [pc, #116]	; (8001898 <MX_GPIO_Init+0x1a8>)
 8001822:	f000 fa8f 	bl	8001d44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_11;
 8001826:	f640 0305 	movw	r3, #2053	; 0x805
 800182a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800182c:	2300      	movs	r3, #0
 800182e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001830:	2302      	movs	r3, #2
 8001832:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001834:	f107 0310 	add.w	r3, r7, #16
 8001838:	4619      	mov	r1, r3
 800183a:	4818      	ldr	r0, [pc, #96]	; (800189c <MX_GPIO_Init+0x1ac>)
 800183c:	f000 fa82 	bl	8001d44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001840:	2380      	movs	r3, #128	; 0x80
 8001842:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001844:	2300      	movs	r3, #0
 8001846:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001848:	2302      	movs	r3, #2
 800184a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800184c:	f107 0310 	add.w	r3, r7, #16
 8001850:	4619      	mov	r1, r3
 8001852:	4811      	ldr	r0, [pc, #68]	; (8001898 <MX_GPIO_Init+0x1a8>)
 8001854:	f000 fa76 	bl	8001d44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001858:	f44f 7340 	mov.w	r3, #768	; 0x300
 800185c:	613b      	str	r3, [r7, #16]
>>>>>>> main
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800185e:	2301      	movs	r3, #1
 8001860:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
<<<<<<< HEAD
 800183a:	2300      	movs	r3, #0
 800183c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800183e:	2303      	movs	r3, #3
 8001840:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001842:	f107 0310 	add.w	r3, r7, #16
 8001846:	4619      	mov	r1, r3
 8001848:	4823      	ldr	r0, [pc, #140]	; (80018d8 <MX_GPIO_Init+0x18c>)
 800184a:	f000 faa1 	bl	8001d90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC6 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 800184e:	f44f 7358 	mov.w	r3, #864	; 0x360
 8001852:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001854:	2301      	movs	r3, #1
 8001856:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001858:	2300      	movs	r3, #0
 800185a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800185c:	2303      	movs	r3, #3
 800185e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001860:	f107 0310 	add.w	r3, r7, #16
 8001864:	4619      	mov	r1, r3
 8001866:	481d      	ldr	r0, [pc, #116]	; (80018dc <MX_GPIO_Init+0x190>)
 8001868:	f000 fa92 	bl	8001d90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_11;
 800186c:	f640 0305 	movw	r3, #2053	; 0x805
 8001870:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001872:	2300      	movs	r3, #0
 8001874:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001876:	2300      	movs	r3, #0
 8001878:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800187a:	f107 0310 	add.w	r3, r7, #16
 800187e:	4619      	mov	r1, r3
 8001880:	4817      	ldr	r0, [pc, #92]	; (80018e0 <MX_GPIO_Init+0x194>)
 8001882:	f000 fa85 	bl	8001d90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001886:	2380      	movs	r3, #128	; 0x80
 8001888:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800188a:	2300      	movs	r3, #0
 800188c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188e:	2300      	movs	r3, #0
 8001890:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001892:	f107 0310 	add.w	r3, r7, #16
 8001896:	4619      	mov	r1, r3
 8001898:	4810      	ldr	r0, [pc, #64]	; (80018dc <MX_GPIO_Init+0x190>)
 800189a:	f000 fa79 	bl	8001d90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800189e:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a4:	2301      	movs	r3, #1
 80018a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a8:	2300      	movs	r3, #0
 80018aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018ac:	2303      	movs	r3, #3
 80018ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018b0:	f107 0310 	add.w	r3, r7, #16
 80018b4:	4619      	mov	r1, r3
 80018b6:	480a      	ldr	r0, [pc, #40]	; (80018e0 <MX_GPIO_Init+0x194>)
 80018b8:	f000 fa6a 	bl	8001d90 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80018bc:	2200      	movs	r2, #0
 80018be:	2105      	movs	r1, #5
 80018c0:	2028      	movs	r0, #40	; 0x28
 80018c2:	f000 fa2e 	bl	8001d22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80018c6:	2028      	movs	r0, #40	; 0x28
 80018c8:	f000 fa47 	bl	8001d5a <HAL_NVIC_EnableIRQ>
=======
 8001862:	2300      	movs	r3, #0
 8001864:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001866:	2302      	movs	r3, #2
 8001868:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800186a:	f107 0310 	add.w	r3, r7, #16
 800186e:	4619      	mov	r1, r3
 8001870:	480a      	ldr	r0, [pc, #40]	; (800189c <MX_GPIO_Init+0x1ac>)
 8001872:	f000 fa67 	bl	8001d44 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001876:	2200      	movs	r2, #0
 8001878:	2100      	movs	r1, #0
 800187a:	2028      	movs	r0, #40	; 0x28
 800187c:	f000 fa2b 	bl	8001cd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001880:	2028      	movs	r0, #40	; 0x28
 8001882:	f000 fa44 	bl	8001d0e <HAL_NVIC_EnableIRQ>
>>>>>>> main

/* USER CODE BEGIN MX_GPIO_Init_2 */

/* USER CODE END MX_GPIO_Init_2 */
}
<<<<<<< HEAD
 80018cc:	bf00      	nop
 80018ce:	3720      	adds	r7, #32
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	40021000 	.word	0x40021000
 80018d8:	40010800 	.word	0x40010800
 80018dc:	40011000 	.word	0x40011000
 80018e0:	40010c00 	.word	0x40010c00
 80018e4:	10210000 	.word	0x10210000

080018e8 <HAL_GPIO_EXTI_Callback>:
=======
 8001886:	bf00      	nop
 8001888:	3720      	adds	r7, #32
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	40021000 	.word	0x40021000
 8001894:	40010800 	.word	0x40010800
 8001898:	40011000 	.word	0x40011000
 800189c:	40010c00 	.word	0x40010c00
 80018a0:	10210000 	.word	0x10210000

080018a4 <HAL_GPIO_EXTI_Callback>:
>>>>>>> main

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
<<<<<<< HEAD
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	4603      	mov	r3, r0
 80018f0:	80fb      	strh	r3, [r7, #6]
  if(app_handle.ButtonState == 0) {
 80018f2:	4b09      	ldr	r3, [pc, #36]	; (8001918 <HAL_GPIO_EXTI_Callback+0x30>)
 80018f4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d104      	bne.n	8001906 <HAL_GPIO_EXTI_Callback+0x1e>
	  app_handle.ButtonState = 1;
 80018fc:	4b06      	ldr	r3, [pc, #24]	; (8001918 <HAL_GPIO_EXTI_Callback+0x30>)
 80018fe:	2201      	movs	r2, #1
 8001900:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
=======
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	4603      	mov	r3, r0
 80018ac:	80fb      	strh	r3, [r7, #6]
  if(app_handle.ButtonState == 0) {
 80018ae:	4b09      	ldr	r3, [pc, #36]	; (80018d4 <HAL_GPIO_EXTI_Callback+0x30>)
 80018b0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d104      	bne.n	80018c2 <HAL_GPIO_EXTI_Callback+0x1e>
	  app_handle.ButtonState = 1;
 80018b8:	4b06      	ldr	r3, [pc, #24]	; (80018d4 <HAL_GPIO_EXTI_Callback+0x30>)
 80018ba:	2201      	movs	r2, #1
 80018bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
>>>>>>> main
  } else {
	  app_handle.ButtonState = 0;
  }
}
<<<<<<< HEAD
 8001904:	e003      	b.n	800190e <HAL_GPIO_EXTI_Callback+0x26>
	  app_handle.ButtonState = 0;
 8001906:	4b04      	ldr	r3, [pc, #16]	; (8001918 <HAL_GPIO_EXTI_Callback+0x30>)
 8001908:	2200      	movs	r2, #0
 800190a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
}
 800190e:	bf00      	nop
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	bc80      	pop	{r7}
 8001916:	4770      	bx	lr
 8001918:	20000324 	.word	0x20000324

0800191c <NewTask1>:
/* USER CODE END 4 */

/* USER CODE BEGIN Header_StartDefaultTask */

void NewTask1(void const * argument)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
	APP_handle_t *h = argument;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	osDelay(1);
 8001928:	2001      	movs	r0, #1
 800192a:	f001 f85d 	bl	80029e8 <osDelay>
 800192e:	e7fb      	b.n	8001928 <NewTask1+0xc>

08001930 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	APP_start();
 8001938:	f7ff fb7a 	bl	8001030 <APP_start>
	osDelay(1000);
 800193c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001940:	f001 f852 	bl	80029e8 <osDelay>
	APP_start();
 8001944:	e7f8      	b.n	8001938 <StartDefaultTask+0x8>

08001946 <Error_Handler>:
=======
 80018c0:	e003      	b.n	80018ca <HAL_GPIO_EXTI_Callback+0x26>
	  app_handle.ButtonState = 0;
 80018c2:	4b04      	ldr	r3, [pc, #16]	; (80018d4 <HAL_GPIO_EXTI_Callback+0x30>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
}
 80018ca:	bf00      	nop
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bc80      	pop	{r7}
 80018d2:	4770      	bx	lr
 80018d4:	200000cc 	.word	0x200000cc

080018d8 <Error_Handler>:
>>>>>>> main
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
<<<<<<< HEAD
 8001946:	b480      	push	{r7}
 8001948:	af00      	add	r7, sp, #0
=======
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
>>>>>>> main
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
<<<<<<< HEAD
 800194a:	b672      	cpsid	i
}
 800194c:	bf00      	nop
=======
 80018dc:	b672      	cpsid	i
}
 80018de:	bf00      	nop
>>>>>>> main
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
<<<<<<< HEAD
 800194e:	e7fe      	b.n	800194e <Error_Handler+0x8>

08001950 <HAL_MspInit>:
=======
 80018e0:	e7fe      	b.n	80018e0 <Error_Handler+0x8>
	...

080018e4 <HAL_MspInit>:
>>>>>>> main
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
<<<<<<< HEAD
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
=======
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
>>>>>>> main
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
<<<<<<< HEAD
 8001956:	4b15      	ldr	r3, [pc, #84]	; (80019ac <HAL_MspInit+0x5c>)
 8001958:	699b      	ldr	r3, [r3, #24]
 800195a:	4a14      	ldr	r2, [pc, #80]	; (80019ac <HAL_MspInit+0x5c>)
 800195c:	f043 0301 	orr.w	r3, r3, #1
 8001960:	6193      	str	r3, [r2, #24]
 8001962:	4b12      	ldr	r3, [pc, #72]	; (80019ac <HAL_MspInit+0x5c>)
 8001964:	699b      	ldr	r3, [r3, #24]
 8001966:	f003 0301 	and.w	r3, r3, #1
 800196a:	607b      	str	r3, [r7, #4]
 800196c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800196e:	4b0f      	ldr	r3, [pc, #60]	; (80019ac <HAL_MspInit+0x5c>)
 8001970:	69db      	ldr	r3, [r3, #28]
 8001972:	4a0e      	ldr	r2, [pc, #56]	; (80019ac <HAL_MspInit+0x5c>)
 8001974:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001978:	61d3      	str	r3, [r2, #28]
 800197a:	4b0c      	ldr	r3, [pc, #48]	; (80019ac <HAL_MspInit+0x5c>)
 800197c:	69db      	ldr	r3, [r3, #28]
 800197e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001982:	603b      	str	r3, [r7, #0]
 8001984:	683b      	ldr	r3, [r7, #0]
=======
 80018ea:	4b19      	ldr	r3, [pc, #100]	; (8001950 <HAL_MspInit+0x6c>)
 80018ec:	699b      	ldr	r3, [r3, #24]
 80018ee:	4a18      	ldr	r2, [pc, #96]	; (8001950 <HAL_MspInit+0x6c>)
 80018f0:	f043 0301 	orr.w	r3, r3, #1
 80018f4:	6193      	str	r3, [r2, #24]
 80018f6:	4b16      	ldr	r3, [pc, #88]	; (8001950 <HAL_MspInit+0x6c>)
 80018f8:	699b      	ldr	r3, [r3, #24]
 80018fa:	f003 0301 	and.w	r3, r3, #1
 80018fe:	60bb      	str	r3, [r7, #8]
 8001900:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001902:	4b13      	ldr	r3, [pc, #76]	; (8001950 <HAL_MspInit+0x6c>)
 8001904:	69db      	ldr	r3, [r3, #28]
 8001906:	4a12      	ldr	r2, [pc, #72]	; (8001950 <HAL_MspInit+0x6c>)
 8001908:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800190c:	61d3      	str	r3, [r2, #28]
 800190e:	4b10      	ldr	r3, [pc, #64]	; (8001950 <HAL_MspInit+0x6c>)
 8001910:	69db      	ldr	r3, [r3, #28]
 8001912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001916:	607b      	str	r3, [r7, #4]
 8001918:	687b      	ldr	r3, [r7, #4]
>>>>>>> main

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001986:	2200      	movs	r2, #0
 8001988:	210f      	movs	r1, #15
 800198a:	f06f 0001 	mvn.w	r0, #1
 800198e:	f000 f9c8 	bl	8001d22 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
<<<<<<< HEAD
  HAL_NVIC_SetPriority(PVD_IRQn, 5, 0);
 8001992:	2200      	movs	r2, #0
 8001994:	2105      	movs	r1, #5
 8001996:	2001      	movs	r0, #1
 8001998:	f000 f9c3 	bl	8001d22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 800199c:	2001      	movs	r0, #1
 800199e:	f000 f9dc 	bl	8001d5a <HAL_NVIC_EnableIRQ>
=======
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 800191a:	2200      	movs	r2, #0
 800191c:	2100      	movs	r1, #0
 800191e:	2001      	movs	r0, #1
 8001920:	f000 f9d9 	bl	8001cd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8001924:	2001      	movs	r0, #1
 8001926:	f000 f9f2 	bl	8001d0e <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800192a:	4b0a      	ldr	r3, [pc, #40]	; (8001954 <HAL_MspInit+0x70>)
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	60fb      	str	r3, [r7, #12]
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800193e:	60fb      	str	r3, [r7, #12]
 8001940:	4a04      	ldr	r2, [pc, #16]	; (8001954 <HAL_MspInit+0x70>)
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	6053      	str	r3, [r2, #4]
>>>>>>> main

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
<<<<<<< HEAD
 80019a2:	bf00      	nop
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	40021000 	.word	0x40021000

080019b0 <NMI_Handler>:
=======
 8001946:	bf00      	nop
 8001948:	3710      	adds	r7, #16
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	40021000 	.word	0x40021000
 8001954:	40010000 	.word	0x40010000

08001958 <NMI_Handler>:
>>>>>>> main
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
<<<<<<< HEAD
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
=======
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
>>>>>>> main
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
<<<<<<< HEAD
 80019b4:	e7fe      	b.n	80019b4 <NMI_Handler+0x4>

080019b6 <HardFault_Handler>:
=======
 800195c:	e7fe      	b.n	800195c <NMI_Handler+0x4>

0800195e <HardFault_Handler>:
>>>>>>> main

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
<<<<<<< HEAD
 80019b6:	b480      	push	{r7}
 80019b8:	af00      	add	r7, sp, #0
=======
 800195e:	b480      	push	{r7}
 8001960:	af00      	add	r7, sp, #0
>>>>>>> main
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 80019ba:	e7fe      	b.n	80019ba <HardFault_Handler+0x4>

080019bc <MemManage_Handler>:
=======
 8001962:	e7fe      	b.n	8001962 <HardFault_Handler+0x4>

08001964 <MemManage_Handler>:
>>>>>>> main

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
<<<<<<< HEAD
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
=======
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
>>>>>>> main
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
<<<<<<< HEAD
 80019c0:	e7fe      	b.n	80019c0 <MemManage_Handler+0x4>

080019c2 <BusFault_Handler>:
=======
 8001968:	e7fe      	b.n	8001968 <MemManage_Handler+0x4>

0800196a <BusFault_Handler>:
>>>>>>> main

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
<<<<<<< HEAD
 80019c2:	b480      	push	{r7}
 80019c4:	af00      	add	r7, sp, #0
=======
 800196a:	b480      	push	{r7}
 800196c:	af00      	add	r7, sp, #0
>>>>>>> main
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 80019c6:	e7fe      	b.n	80019c6 <BusFault_Handler+0x4>

080019c8 <UsageFault_Handler>:
=======
 800196e:	e7fe      	b.n	800196e <BusFault_Handler+0x4>

08001970 <UsageFault_Handler>:
>>>>>>> main

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
<<<<<<< HEAD
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
=======
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
>>>>>>> main
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 80019cc:	e7fe      	b.n	80019cc <UsageFault_Handler+0x4>

080019ce <DebugMon_Handler>:
=======
 8001974:	e7fe      	b.n	8001974 <UsageFault_Handler+0x4>

08001976 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001976:	b480      	push	{r7}
 8001978:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800197a:	bf00      	nop
 800197c:	46bd      	mov	sp, r7
 800197e:	bc80      	pop	{r7}
 8001980:	4770      	bx	lr

08001982 <DebugMon_Handler>:
>>>>>>> main

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
<<<<<<< HEAD
 80019ce:	b480      	push	{r7}
 80019d0:	af00      	add	r7, sp, #0
=======
 8001982:	b480      	push	{r7}
 8001984:	af00      	add	r7, sp, #0
>>>>>>> main

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
<<<<<<< HEAD
 80019d2:	bf00      	nop
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bc80      	pop	{r7}
 80019d8:	4770      	bx	lr

080019da <SysTick_Handler>:
=======
 8001986:	bf00      	nop
 8001988:	46bd      	mov	sp, r7
 800198a:	bc80      	pop	{r7}
 800198c:	4770      	bx	lr

0800198e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800198e:	b480      	push	{r7}
 8001990:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001992:	bf00      	nop
 8001994:	46bd      	mov	sp, r7
 8001996:	bc80      	pop	{r7}
 8001998:	4770      	bx	lr

0800199a <SysTick_Handler>:
>>>>>>> main

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
<<<<<<< HEAD
 80019da:	b580      	push	{r7, lr}
 80019dc:	af00      	add	r7, sp, #0
=======
 800199a:	b580      	push	{r7, lr}
 800199c:	af00      	add	r7, sp, #0
>>>>>>> main
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
<<<<<<< HEAD
 80019de:	f000 f889 	bl	8001af4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80019e2:	f001 fd7f 	bl	80034e4 <xTaskGetSchedulerState>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d001      	beq.n	80019f0 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80019ec:	f001 ff6c 	bl	80038c8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
=======
 800199e:	f000 f883 	bl	8001aa8 <HAL_IncTick>
>>>>>>> main
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
<<<<<<< HEAD
 80019f0:	bf00      	nop
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <PVD_IRQHandler>:
=======
 80019a2:	bf00      	nop
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <PVD_IRQHandler>:
>>>>>>> main

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
<<<<<<< HEAD
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
=======
 80019a6:	b580      	push	{r7, lr}
 80019a8:	af00      	add	r7, sp, #0
>>>>>>> main
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
<<<<<<< HEAD
 80019f8:	f000 fb96 	bl	8002128 <HAL_PWR_PVD_IRQHandler>
=======
 80019aa:	f000 fb97 	bl	80020dc <HAL_PWR_PVD_IRQHandler>
>>>>>>> main
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
<<<<<<< HEAD
 80019fc:	bf00      	nop
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <EXTI15_10_IRQHandler>:
=======
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <EXTI15_10_IRQHandler>:
>>>>>>> main

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
<<<<<<< HEAD
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_Pin);
 8001a04:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001a08:	f000 fb76 	bl	80020f8 <HAL_GPIO_EXTI_IRQHandler>
=======
 80019b2:	b580      	push	{r7, lr}
 80019b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80019b6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80019ba:	f000 fb77 	bl	80020ac <HAL_GPIO_EXTI_IRQHandler>
>>>>>>> main
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
<<<<<<< HEAD
 8001a0c:	bf00      	nop
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <SystemInit>:
=======
 80019be:	bf00      	nop
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <SystemInit>:
>>>>>>> main
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
<<<<<<< HEAD
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
=======
 80019c2:	b480      	push	{r7}
 80019c4:	af00      	add	r7, sp, #0
>>>>>>> main

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
<<<<<<< HEAD
 8001a14:	bf00      	nop
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bc80      	pop	{r7}
 8001a1a:	4770      	bx	lr

08001a1c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a1c:	f7ff fff8 	bl	8001a10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a20:	480b      	ldr	r0, [pc, #44]	; (8001a50 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001a22:	490c      	ldr	r1, [pc, #48]	; (8001a54 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001a24:	4a0c      	ldr	r2, [pc, #48]	; (8001a58 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001a26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a28:	e002      	b.n	8001a30 <LoopCopyDataInit>

08001a2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a2e:	3304      	adds	r3, #4

08001a30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a34:	d3f9      	bcc.n	8001a2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a36:	4a09      	ldr	r2, [pc, #36]	; (8001a5c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001a38:	4c09      	ldr	r4, [pc, #36]	; (8001a60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a3c:	e001      	b.n	8001a42 <LoopFillZerobss>

08001a3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a40:	3204      	adds	r2, #4

08001a42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a44:	d3fb      	bcc.n	8001a3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a46:	f002 f969 	bl	8003d1c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a4a:	f7ff fd9d 	bl	8001588 <main>
  bx lr
 8001a4e:	4770      	bx	lr
  ldr r0, =_sdata
 8001a50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a54:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001a58:	08004c30 	.word	0x08004c30
  ldr r2, =_sbss
 8001a5c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001a60:	20001224 	.word	0x20001224

08001a64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a64:	e7fe      	b.n	8001a64 <ADC1_2_IRQHandler>
	...

08001a68 <HAL_Init>:
=======
 80019c6:	bf00      	nop
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bc80      	pop	{r7}
 80019cc:	4770      	bx	lr
	...

080019d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019d0:	f7ff fff7 	bl	80019c2 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019d4:	480b      	ldr	r0, [pc, #44]	; (8001a04 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80019d6:	490c      	ldr	r1, [pc, #48]	; (8001a08 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80019d8:	4a0c      	ldr	r2, [pc, #48]	; (8001a0c <LoopFillZerobss+0x16>)
  movs r3, #0
 80019da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019dc:	e002      	b.n	80019e4 <LoopCopyDataInit>

080019de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019e2:	3304      	adds	r3, #4

080019e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019e8:	d3f9      	bcc.n	80019de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019ea:	4a09      	ldr	r2, [pc, #36]	; (8001a10 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80019ec:	4c09      	ldr	r4, [pc, #36]	; (8001a14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019f0:	e001      	b.n	80019f6 <LoopFillZerobss>

080019f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019f4:	3204      	adds	r2, #4

080019f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019f8:	d3fb      	bcc.n	80019f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019fa:	f000 ff73 	bl	80028e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019fe:	f7ff fdb9 	bl	8001574 <main>
  bx lr
 8001a02:	4770      	bx	lr
  ldr r0, =_sdata
 8001a04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a08:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001a0c:	080037b8 	.word	0x080037b8
  ldr r2, =_sbss
 8001a10:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001a14:	20000280 	.word	0x20000280

08001a18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a18:	e7fe      	b.n	8001a18 <ADC1_2_IRQHandler>
	...

08001a1c <HAL_Init>:
>>>>>>> main
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
<<<<<<< HEAD
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
=======
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
>>>>>>> main
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
<<<<<<< HEAD
 8001a6c:	4b08      	ldr	r3, [pc, #32]	; (8001a90 <HAL_Init+0x28>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a07      	ldr	r2, [pc, #28]	; (8001a90 <HAL_Init+0x28>)
 8001a72:	f043 0310 	orr.w	r3, r3, #16
 8001a76:	6013      	str	r3, [r2, #0]
=======
 8001a20:	4b08      	ldr	r3, [pc, #32]	; (8001a44 <HAL_Init+0x28>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a07      	ldr	r2, [pc, #28]	; (8001a44 <HAL_Init+0x28>)
 8001a26:	f043 0310 	orr.w	r3, r3, #16
 8001a2a:	6013      	str	r3, [r2, #0]
>>>>>>> main
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
<<<<<<< HEAD
 8001a78:	2003      	movs	r0, #3
 8001a7a:	f000 f947 	bl	8001d0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a7e:	200f      	movs	r0, #15
 8001a80:	f000 f808 	bl	8001a94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a84:	f7ff ff64 	bl	8001950 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	40022000 	.word	0x40022000

08001a94 <HAL_InitTick>:
=======
 8001a2c:	2003      	movs	r0, #3
 8001a2e:	f000 f947 	bl	8001cc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a32:	2000      	movs	r0, #0
 8001a34:	f000 f808 	bl	8001a48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a38:	f7ff ff54 	bl	80018e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a3c:	2300      	movs	r3, #0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	40022000 	.word	0x40022000

08001a48 <HAL_InitTick>:
>>>>>>> main
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
<<<<<<< HEAD
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a9c:	4b12      	ldr	r3, [pc, #72]	; (8001ae8 <HAL_InitTick+0x54>)
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	4b12      	ldr	r3, [pc, #72]	; (8001aec <HAL_InitTick+0x58>)
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f000 f95f 	bl	8001d76 <HAL_SYSTICK_Config>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e00e      	b.n	8001ae0 <HAL_InitTick+0x4c>
=======
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a50:	4b12      	ldr	r3, [pc, #72]	; (8001a9c <HAL_InitTick+0x54>)
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	4b12      	ldr	r3, [pc, #72]	; (8001aa0 <HAL_InitTick+0x58>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	4619      	mov	r1, r3
 8001a5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a66:	4618      	mov	r0, r3
 8001a68:	f000 f95f 	bl	8001d2a <HAL_SYSTICK_Config>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e00e      	b.n	8001a94 <HAL_InitTick+0x4c>
>>>>>>> main
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
<<<<<<< HEAD
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2b0f      	cmp	r3, #15
 8001ac6:	d80a      	bhi.n	8001ade <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ac8:	2200      	movs	r2, #0
 8001aca:	6879      	ldr	r1, [r7, #4]
 8001acc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ad0:	f000 f927 	bl	8001d22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ad4:	4a06      	ldr	r2, [pc, #24]	; (8001af0 <HAL_InitTick+0x5c>)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6013      	str	r3, [r2, #0]
=======
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2b0f      	cmp	r3, #15
 8001a7a:	d80a      	bhi.n	8001a92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	6879      	ldr	r1, [r7, #4]
 8001a80:	f04f 30ff 	mov.w	r0, #4294967295
 8001a84:	f000 f927 	bl	8001cd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a88:	4a06      	ldr	r2, [pc, #24]	; (8001aa4 <HAL_InitTick+0x5c>)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6013      	str	r3, [r2, #0]
>>>>>>> main
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 8001ada:	2300      	movs	r3, #0
 8001adc:	e000      	b.n	8001ae0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3708      	adds	r7, #8
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	20000008 	.word	0x20000008
 8001aec:	20000010 	.word	0x20000010
 8001af0:	2000000c 	.word	0x2000000c

08001af4 <HAL_IncTick>:
=======
 8001a8e:	2300      	movs	r3, #0
 8001a90:	e000      	b.n	8001a94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3708      	adds	r7, #8
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	20000008 	.word	0x20000008
 8001aa0:	20000010 	.word	0x20000010
 8001aa4:	2000000c 	.word	0x2000000c

08001aa8 <HAL_IncTick>:
>>>>>>> main
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
<<<<<<< HEAD
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001af8:	4b05      	ldr	r3, [pc, #20]	; (8001b10 <HAL_IncTick+0x1c>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	461a      	mov	r2, r3
 8001afe:	4b05      	ldr	r3, [pc, #20]	; (8001b14 <HAL_IncTick+0x20>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4413      	add	r3, r2
 8001b04:	4a03      	ldr	r2, [pc, #12]	; (8001b14 <HAL_IncTick+0x20>)
 8001b06:	6013      	str	r3, [r2, #0]
}
 8001b08:	bf00      	nop
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bc80      	pop	{r7}
 8001b0e:	4770      	bx	lr
 8001b10:	20000010 	.word	0x20000010
 8001b14:	2000039c 	.word	0x2000039c

08001b18 <HAL_GetTick>:
=======
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001aac:	4b05      	ldr	r3, [pc, #20]	; (8001ac4 <HAL_IncTick+0x1c>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	4b05      	ldr	r3, [pc, #20]	; (8001ac8 <HAL_IncTick+0x20>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	4a03      	ldr	r2, [pc, #12]	; (8001ac8 <HAL_IncTick+0x20>)
 8001aba:	6013      	str	r3, [r2, #0]
}
 8001abc:	bf00      	nop
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bc80      	pop	{r7}
 8001ac2:	4770      	bx	lr
 8001ac4:	20000010 	.word	0x20000010
 8001ac8:	20000144 	.word	0x20000144

08001acc <HAL_GetTick>:
>>>>>>> main
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
<<<<<<< HEAD
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b1c:	4b02      	ldr	r3, [pc, #8]	; (8001b28 <HAL_GetTick+0x10>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bc80      	pop	{r7}
 8001b26:	4770      	bx	lr
 8001b28:	2000039c 	.word	0x2000039c

08001b2c <HAL_Delay>:
=======
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  return uwTick;
 8001ad0:	4b02      	ldr	r3, [pc, #8]	; (8001adc <HAL_GetTick+0x10>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bc80      	pop	{r7}
 8001ada:	4770      	bx	lr
 8001adc:	20000144 	.word	0x20000144

08001ae0 <HAL_Delay>:
>>>>>>> main
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
<<<<<<< HEAD
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b34:	f7ff fff0 	bl	8001b18 <HAL_GetTick>
 8001b38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b44:	d005      	beq.n	8001b52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b46:	4b0a      	ldr	r3, [pc, #40]	; (8001b70 <HAL_Delay+0x44>)
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	4413      	add	r3, r2
 8001b50:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b52:	bf00      	nop
 8001b54:	f7ff ffe0 	bl	8001b18 <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	68fa      	ldr	r2, [r7, #12]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d8f7      	bhi.n	8001b54 <HAL_Delay+0x28>
  {
  }
}
 8001b64:	bf00      	nop
 8001b66:	bf00      	nop
 8001b68:	3710      	adds	r7, #16
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	20000010 	.word	0x20000010

08001b74 <__NVIC_SetPriorityGrouping>:
=======
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ae8:	f7ff fff0 	bl	8001acc <HAL_GetTick>
 8001aec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001af8:	d005      	beq.n	8001b06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001afa:	4b0a      	ldr	r3, [pc, #40]	; (8001b24 <HAL_Delay+0x44>)
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	461a      	mov	r2, r3
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	4413      	add	r3, r2
 8001b04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b06:	bf00      	nop
 8001b08:	f7ff ffe0 	bl	8001acc <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	68fa      	ldr	r2, [r7, #12]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d8f7      	bhi.n	8001b08 <HAL_Delay+0x28>
  {
  }
}
 8001b18:	bf00      	nop
 8001b1a:	bf00      	nop
 8001b1c:	3710      	adds	r7, #16
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	20000010 	.word	0x20000010

08001b28 <__NVIC_SetPriorityGrouping>:
>>>>>>> main
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f003 0307 	and.w	r3, r3, #7
 8001b82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b84:	4b0c      	ldr	r3, [pc, #48]	; (8001bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b8a:	68ba      	ldr	r2, [r7, #8]
 8001b8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b90:	4013      	ands	r3, r2
 8001b92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ba0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ba4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ba6:	4a04      	ldr	r2, [pc, #16]	; (8001bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	60d3      	str	r3, [r2, #12]
}
 8001bac:	bf00      	nop
 8001bae:	3714      	adds	r7, #20
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bc80      	pop	{r7}
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	e000ed00 	.word	0xe000ed00

08001bbc <__NVIC_GetPriorityGrouping>:
=======
 8001b28:	b480      	push	{r7}
 8001b2a:	b085      	sub	sp, #20
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f003 0307 	and.w	r3, r3, #7
 8001b36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b38:	4b0c      	ldr	r3, [pc, #48]	; (8001b6c <__NVIC_SetPriorityGrouping+0x44>)
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b3e:	68ba      	ldr	r2, [r7, #8]
 8001b40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b44:	4013      	ands	r3, r2
 8001b46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b5a:	4a04      	ldr	r2, [pc, #16]	; (8001b6c <__NVIC_SetPriorityGrouping+0x44>)
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	60d3      	str	r3, [r2, #12]
}
 8001b60:	bf00      	nop
 8001b62:	3714      	adds	r7, #20
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bc80      	pop	{r7}
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	e000ed00 	.word	0xe000ed00

08001b70 <__NVIC_GetPriorityGrouping>:
>>>>>>> main
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
<<<<<<< HEAD
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bc0:	4b04      	ldr	r3, [pc, #16]	; (8001bd4 <__NVIC_GetPriorityGrouping+0x18>)
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	0a1b      	lsrs	r3, r3, #8
 8001bc6:	f003 0307 	and.w	r3, r3, #7
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bc80      	pop	{r7}
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	e000ed00 	.word	0xe000ed00

08001bd8 <__NVIC_EnableIRQ>:
=======
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b74:	4b04      	ldr	r3, [pc, #16]	; (8001b88 <__NVIC_GetPriorityGrouping+0x18>)
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	0a1b      	lsrs	r3, r3, #8
 8001b7a:	f003 0307 	and.w	r3, r3, #7
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bc80      	pop	{r7}
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	e000ed00 	.word	0xe000ed00

08001b8c <__NVIC_EnableIRQ>:
>>>>>>> main
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	4603      	mov	r3, r0
 8001be0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	db0b      	blt.n	8001c02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bea:	79fb      	ldrb	r3, [r7, #7]
 8001bec:	f003 021f 	and.w	r2, r3, #31
 8001bf0:	4906      	ldr	r1, [pc, #24]	; (8001c0c <__NVIC_EnableIRQ+0x34>)
 8001bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf6:	095b      	lsrs	r3, r3, #5
 8001bf8:	2001      	movs	r0, #1
 8001bfa:	fa00 f202 	lsl.w	r2, r0, r2
 8001bfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c02:	bf00      	nop
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bc80      	pop	{r7}
 8001c0a:	4770      	bx	lr
 8001c0c:	e000e100 	.word	0xe000e100

08001c10 <__NVIC_SetPriority>:
=======
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4603      	mov	r3, r0
 8001b94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	db0b      	blt.n	8001bb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b9e:	79fb      	ldrb	r3, [r7, #7]
 8001ba0:	f003 021f 	and.w	r2, r3, #31
 8001ba4:	4906      	ldr	r1, [pc, #24]	; (8001bc0 <__NVIC_EnableIRQ+0x34>)
 8001ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001baa:	095b      	lsrs	r3, r3, #5
 8001bac:	2001      	movs	r0, #1
 8001bae:	fa00 f202 	lsl.w	r2, r0, r2
 8001bb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bb6:	bf00      	nop
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bc80      	pop	{r7}
 8001bbe:	4770      	bx	lr
 8001bc0:	e000e100 	.word	0xe000e100

08001bc4 <__NVIC_SetPriority>:
>>>>>>> main
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
<<<<<<< HEAD
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	4603      	mov	r3, r0
 8001c18:	6039      	str	r1, [r7, #0]
 8001c1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	db0a      	blt.n	8001c3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	b2da      	uxtb	r2, r3
 8001c28:	490c      	ldr	r1, [pc, #48]	; (8001c5c <__NVIC_SetPriority+0x4c>)
 8001c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2e:	0112      	lsls	r2, r2, #4
 8001c30:	b2d2      	uxtb	r2, r2
 8001c32:	440b      	add	r3, r1
 8001c34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
=======
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	4603      	mov	r3, r0
 8001bcc:	6039      	str	r1, [r7, #0]
 8001bce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	db0a      	blt.n	8001bee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	b2da      	uxtb	r2, r3
 8001bdc:	490c      	ldr	r1, [pc, #48]	; (8001c10 <__NVIC_SetPriority+0x4c>)
 8001bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be2:	0112      	lsls	r2, r2, #4
 8001be4:	b2d2      	uxtb	r2, r2
 8001be6:	440b      	add	r3, r1
 8001be8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
>>>>>>> main
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
<<<<<<< HEAD
 8001c38:	e00a      	b.n	8001c50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	b2da      	uxtb	r2, r3
 8001c3e:	4908      	ldr	r1, [pc, #32]	; (8001c60 <__NVIC_SetPriority+0x50>)
 8001c40:	79fb      	ldrb	r3, [r7, #7]
 8001c42:	f003 030f 	and.w	r3, r3, #15
 8001c46:	3b04      	subs	r3, #4
 8001c48:	0112      	lsls	r2, r2, #4
 8001c4a:	b2d2      	uxtb	r2, r2
 8001c4c:	440b      	add	r3, r1
 8001c4e:	761a      	strb	r2, [r3, #24]
}
 8001c50:	bf00      	nop
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bc80      	pop	{r7}
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	e000e100 	.word	0xe000e100
 8001c60:	e000ed00 	.word	0xe000ed00

08001c64 <NVIC_EncodePriority>:
=======
 8001bec:	e00a      	b.n	8001c04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	b2da      	uxtb	r2, r3
 8001bf2:	4908      	ldr	r1, [pc, #32]	; (8001c14 <__NVIC_SetPriority+0x50>)
 8001bf4:	79fb      	ldrb	r3, [r7, #7]
 8001bf6:	f003 030f 	and.w	r3, r3, #15
 8001bfa:	3b04      	subs	r3, #4
 8001bfc:	0112      	lsls	r2, r2, #4
 8001bfe:	b2d2      	uxtb	r2, r2
 8001c00:	440b      	add	r3, r1
 8001c02:	761a      	strb	r2, [r3, #24]
}
 8001c04:	bf00      	nop
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bc80      	pop	{r7}
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	e000e100 	.word	0xe000e100
 8001c14:	e000ed00 	.word	0xe000ed00

08001c18 <NVIC_EncodePriority>:
>>>>>>> main
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< HEAD
 8001c64:	b480      	push	{r7}
 8001c66:	b089      	sub	sp, #36	; 0x24
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	60f8      	str	r0, [r7, #12]
 8001c6c:	60b9      	str	r1, [r7, #8]
 8001c6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	f003 0307 	and.w	r3, r3, #7
 8001c76:	61fb      	str	r3, [r7, #28]
=======
 8001c18:	b480      	push	{r7}
 8001c1a:	b089      	sub	sp, #36	; 0x24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	60f8      	str	r0, [r7, #12]
 8001c20:	60b9      	str	r1, [r7, #8]
 8001c22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f003 0307 	and.w	r3, r3, #7
 8001c2a:	61fb      	str	r3, [r7, #28]
>>>>>>> main
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
<<<<<<< HEAD
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	f1c3 0307 	rsb	r3, r3, #7
 8001c7e:	2b04      	cmp	r3, #4
 8001c80:	bf28      	it	cs
 8001c82:	2304      	movcs	r3, #4
 8001c84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	3304      	adds	r3, #4
 8001c8a:	2b06      	cmp	r3, #6
 8001c8c:	d902      	bls.n	8001c94 <NVIC_EncodePriority+0x30>
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	3b03      	subs	r3, #3
 8001c92:	e000      	b.n	8001c96 <NVIC_EncodePriority+0x32>
 8001c94:	2300      	movs	r3, #0
 8001c96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c98:	f04f 32ff 	mov.w	r2, #4294967295
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	43da      	mvns	r2, r3
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	401a      	ands	r2, r3
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cac:	f04f 31ff 	mov.w	r1, #4294967295
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb6:	43d9      	mvns	r1, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cbc:	4313      	orrs	r3, r2
         );
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3724      	adds	r7, #36	; 0x24
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bc80      	pop	{r7}
 8001cc6:	4770      	bx	lr

08001cc8 <SysTick_Config>:
=======
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	f1c3 0307 	rsb	r3, r3, #7
 8001c32:	2b04      	cmp	r3, #4
 8001c34:	bf28      	it	cs
 8001c36:	2304      	movcs	r3, #4
 8001c38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	3304      	adds	r3, #4
 8001c3e:	2b06      	cmp	r3, #6
 8001c40:	d902      	bls.n	8001c48 <NVIC_EncodePriority+0x30>
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	3b03      	subs	r3, #3
 8001c46:	e000      	b.n	8001c4a <NVIC_EncodePriority+0x32>
 8001c48:	2300      	movs	r3, #0
 8001c4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	fa02 f303 	lsl.w	r3, r2, r3
 8001c56:	43da      	mvns	r2, r3
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	401a      	ands	r2, r3
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c60:	f04f 31ff 	mov.w	r1, #4294967295
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6a:	43d9      	mvns	r1, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c70:	4313      	orrs	r3, r2
         );
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3724      	adds	r7, #36	; 0x24
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bc80      	pop	{r7}
 8001c7a:	4770      	bx	lr

08001c7c <SysTick_Config>:
>>>>>>> main
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
<<<<<<< HEAD
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	3b01      	subs	r3, #1
 8001cd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cd8:	d301      	bcc.n	8001cde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e00f      	b.n	8001cfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cde:	4a0a      	ldr	r2, [pc, #40]	; (8001d08 <SysTick_Config+0x40>)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	3b01      	subs	r3, #1
 8001ce4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ce6:	210f      	movs	r1, #15
 8001ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cec:	f7ff ff90 	bl	8001c10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cf0:	4b05      	ldr	r3, [pc, #20]	; (8001d08 <SysTick_Config+0x40>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cf6:	4b04      	ldr	r3, [pc, #16]	; (8001d08 <SysTick_Config+0x40>)
 8001cf8:	2207      	movs	r2, #7
 8001cfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	e000e010 	.word	0xe000e010

08001d0c <HAL_NVIC_SetPriorityGrouping>:
=======
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	3b01      	subs	r3, #1
 8001c88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c8c:	d301      	bcc.n	8001c92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e00f      	b.n	8001cb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c92:	4a0a      	ldr	r2, [pc, #40]	; (8001cbc <SysTick_Config+0x40>)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	3b01      	subs	r3, #1
 8001c98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c9a:	210f      	movs	r1, #15
 8001c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001ca0:	f7ff ff90 	bl	8001bc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ca4:	4b05      	ldr	r3, [pc, #20]	; (8001cbc <SysTick_Config+0x40>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001caa:	4b04      	ldr	r3, [pc, #16]	; (8001cbc <SysTick_Config+0x40>)
 8001cac:	2207      	movs	r2, #7
 8001cae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	e000e010 	.word	0xe000e010

08001cc0 <HAL_NVIC_SetPriorityGrouping>:
>>>>>>> main
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
=======
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
>>>>>>> main
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
<<<<<<< HEAD
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f7ff ff2d 	bl	8001b74 <__NVIC_SetPriorityGrouping>
}
 8001d1a:	bf00      	nop
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <HAL_NVIC_SetPriority>:
=======
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f7ff ff2d 	bl	8001b28 <__NVIC_SetPriorityGrouping>
}
 8001cce:	bf00      	nop
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}

08001cd6 <HAL_NVIC_SetPriority>:
>>>>>>> main
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
<<<<<<< HEAD
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b086      	sub	sp, #24
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	4603      	mov	r3, r0
 8001d2a:	60b9      	str	r1, [r7, #8]
 8001d2c:	607a      	str	r2, [r7, #4]
 8001d2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d30:	2300      	movs	r3, #0
 8001d32:	617b      	str	r3, [r7, #20]
=======
 8001cd6:	b580      	push	{r7, lr}
 8001cd8:	b086      	sub	sp, #24
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	4603      	mov	r3, r0
 8001cde:	60b9      	str	r1, [r7, #8]
 8001ce0:	607a      	str	r2, [r7, #4]
 8001ce2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	617b      	str	r3, [r7, #20]
>>>>>>> main
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
<<<<<<< HEAD
 8001d34:	f7ff ff42 	bl	8001bbc <__NVIC_GetPriorityGrouping>
 8001d38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	68b9      	ldr	r1, [r7, #8]
 8001d3e:	6978      	ldr	r0, [r7, #20]
 8001d40:	f7ff ff90 	bl	8001c64 <NVIC_EncodePriority>
 8001d44:	4602      	mov	r2, r0
 8001d46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d4a:	4611      	mov	r1, r2
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff ff5f 	bl	8001c10 <__NVIC_SetPriority>
}
 8001d52:	bf00      	nop
 8001d54:	3718      	adds	r7, #24
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <HAL_NVIC_EnableIRQ>:
=======
 8001ce8:	f7ff ff42 	bl	8001b70 <__NVIC_GetPriorityGrouping>
 8001cec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	68b9      	ldr	r1, [r7, #8]
 8001cf2:	6978      	ldr	r0, [r7, #20]
 8001cf4:	f7ff ff90 	bl	8001c18 <NVIC_EncodePriority>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cfe:	4611      	mov	r1, r2
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff ff5f 	bl	8001bc4 <__NVIC_SetPriority>
}
 8001d06:	bf00      	nop
 8001d08:	3718      	adds	r7, #24
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <HAL_NVIC_EnableIRQ>:
>>>>>>> main
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b082      	sub	sp, #8
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	4603      	mov	r3, r0
 8001d62:	71fb      	strb	r3, [r7, #7]
=======
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	b082      	sub	sp, #8
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	4603      	mov	r3, r0
 8001d16:	71fb      	strb	r3, [r7, #7]
>>>>>>> main
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
<<<<<<< HEAD
 8001d64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7ff ff35 	bl	8001bd8 <__NVIC_EnableIRQ>
}
 8001d6e:	bf00      	nop
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <HAL_SYSTICK_Config>:
=======
 8001d18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7ff ff35 	bl	8001b8c <__NVIC_EnableIRQ>
}
 8001d22:	bf00      	nop
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <HAL_SYSTICK_Config>:
>>>>>>> main
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
<<<<<<< HEAD
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b082      	sub	sp, #8
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f7ff ffa2 	bl	8001cc8 <SysTick_Config>
 8001d84:	4603      	mov	r3, r0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
	...

08001d90 <HAL_GPIO_Init>:
=======
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	b082      	sub	sp, #8
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f7ff ffa2 	bl	8001c7c <SysTick_Config>
 8001d38:	4603      	mov	r3, r0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
	...

08001d44 <HAL_GPIO_Init>:
>>>>>>> main
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
<<<<<<< HEAD
 8001d90:	b480      	push	{r7}
 8001d92:	b08b      	sub	sp, #44	; 0x2c
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	627b      	str	r3, [r7, #36]	; 0x24
=======
 8001d44:	b480      	push	{r7}
 8001d46:	b08b      	sub	sp, #44	; 0x2c
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	627b      	str	r3, [r7, #36]	; 0x24
>>>>>>> main
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
<<<<<<< HEAD
 8001d9e:	2300      	movs	r3, #0
 8001da0:	623b      	str	r3, [r7, #32]
=======
 8001d52:	2300      	movs	r3, #0
 8001d54:	623b      	str	r3, [r7, #32]
>>>>>>> main
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
<<<<<<< HEAD
 8001da2:	e169      	b.n	8002078 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001da4:	2201      	movs	r2, #1
 8001da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	69fa      	ldr	r2, [r7, #28]
 8001db4:	4013      	ands	r3, r2
 8001db6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	f040 8158 	bne.w	8002072 <HAL_GPIO_Init+0x2e2>
=======
 8001d56:	e169      	b.n	800202c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d58:	2201      	movs	r2, #1
 8001d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	69fa      	ldr	r2, [r7, #28]
 8001d68:	4013      	ands	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	f040 8158 	bne.w	8002026 <HAL_GPIO_Init+0x2e2>
>>>>>>> main
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
<<<<<<< HEAD
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	4a9a      	ldr	r2, [pc, #616]	; (8002030 <HAL_GPIO_Init+0x2a0>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d05e      	beq.n	8001e8a <HAL_GPIO_Init+0xfa>
 8001dcc:	4a98      	ldr	r2, [pc, #608]	; (8002030 <HAL_GPIO_Init+0x2a0>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d875      	bhi.n	8001ebe <HAL_GPIO_Init+0x12e>
 8001dd2:	4a98      	ldr	r2, [pc, #608]	; (8002034 <HAL_GPIO_Init+0x2a4>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d058      	beq.n	8001e8a <HAL_GPIO_Init+0xfa>
 8001dd8:	4a96      	ldr	r2, [pc, #600]	; (8002034 <HAL_GPIO_Init+0x2a4>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d86f      	bhi.n	8001ebe <HAL_GPIO_Init+0x12e>
 8001dde:	4a96      	ldr	r2, [pc, #600]	; (8002038 <HAL_GPIO_Init+0x2a8>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d052      	beq.n	8001e8a <HAL_GPIO_Init+0xfa>
 8001de4:	4a94      	ldr	r2, [pc, #592]	; (8002038 <HAL_GPIO_Init+0x2a8>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d869      	bhi.n	8001ebe <HAL_GPIO_Init+0x12e>
 8001dea:	4a94      	ldr	r2, [pc, #592]	; (800203c <HAL_GPIO_Init+0x2ac>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d04c      	beq.n	8001e8a <HAL_GPIO_Init+0xfa>
 8001df0:	4a92      	ldr	r2, [pc, #584]	; (800203c <HAL_GPIO_Init+0x2ac>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d863      	bhi.n	8001ebe <HAL_GPIO_Init+0x12e>
 8001df6:	4a92      	ldr	r2, [pc, #584]	; (8002040 <HAL_GPIO_Init+0x2b0>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d046      	beq.n	8001e8a <HAL_GPIO_Init+0xfa>
 8001dfc:	4a90      	ldr	r2, [pc, #576]	; (8002040 <HAL_GPIO_Init+0x2b0>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d85d      	bhi.n	8001ebe <HAL_GPIO_Init+0x12e>
 8001e02:	2b12      	cmp	r3, #18
 8001e04:	d82a      	bhi.n	8001e5c <HAL_GPIO_Init+0xcc>
 8001e06:	2b12      	cmp	r3, #18
 8001e08:	d859      	bhi.n	8001ebe <HAL_GPIO_Init+0x12e>
 8001e0a:	a201      	add	r2, pc, #4	; (adr r2, 8001e10 <HAL_GPIO_Init+0x80>)
 8001e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e10:	08001e8b 	.word	0x08001e8b
 8001e14:	08001e65 	.word	0x08001e65
 8001e18:	08001e77 	.word	0x08001e77
 8001e1c:	08001eb9 	.word	0x08001eb9
 8001e20:	08001ebf 	.word	0x08001ebf
 8001e24:	08001ebf 	.word	0x08001ebf
 8001e28:	08001ebf 	.word	0x08001ebf
 8001e2c:	08001ebf 	.word	0x08001ebf
 8001e30:	08001ebf 	.word	0x08001ebf
 8001e34:	08001ebf 	.word	0x08001ebf
 8001e38:	08001ebf 	.word	0x08001ebf
 8001e3c:	08001ebf 	.word	0x08001ebf
 8001e40:	08001ebf 	.word	0x08001ebf
 8001e44:	08001ebf 	.word	0x08001ebf
 8001e48:	08001ebf 	.word	0x08001ebf
 8001e4c:	08001ebf 	.word	0x08001ebf
 8001e50:	08001ebf 	.word	0x08001ebf
 8001e54:	08001e6d 	.word	0x08001e6d
 8001e58:	08001e81 	.word	0x08001e81
 8001e5c:	4a79      	ldr	r2, [pc, #484]	; (8002044 <HAL_GPIO_Init+0x2b4>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d013      	beq.n	8001e8a <HAL_GPIO_Init+0xfa>
=======
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	4a9a      	ldr	r2, [pc, #616]	; (8001fe4 <HAL_GPIO_Init+0x2a0>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d05e      	beq.n	8001e3e <HAL_GPIO_Init+0xfa>
 8001d80:	4a98      	ldr	r2, [pc, #608]	; (8001fe4 <HAL_GPIO_Init+0x2a0>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d875      	bhi.n	8001e72 <HAL_GPIO_Init+0x12e>
 8001d86:	4a98      	ldr	r2, [pc, #608]	; (8001fe8 <HAL_GPIO_Init+0x2a4>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d058      	beq.n	8001e3e <HAL_GPIO_Init+0xfa>
 8001d8c:	4a96      	ldr	r2, [pc, #600]	; (8001fe8 <HAL_GPIO_Init+0x2a4>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d86f      	bhi.n	8001e72 <HAL_GPIO_Init+0x12e>
 8001d92:	4a96      	ldr	r2, [pc, #600]	; (8001fec <HAL_GPIO_Init+0x2a8>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d052      	beq.n	8001e3e <HAL_GPIO_Init+0xfa>
 8001d98:	4a94      	ldr	r2, [pc, #592]	; (8001fec <HAL_GPIO_Init+0x2a8>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d869      	bhi.n	8001e72 <HAL_GPIO_Init+0x12e>
 8001d9e:	4a94      	ldr	r2, [pc, #592]	; (8001ff0 <HAL_GPIO_Init+0x2ac>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d04c      	beq.n	8001e3e <HAL_GPIO_Init+0xfa>
 8001da4:	4a92      	ldr	r2, [pc, #584]	; (8001ff0 <HAL_GPIO_Init+0x2ac>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d863      	bhi.n	8001e72 <HAL_GPIO_Init+0x12e>
 8001daa:	4a92      	ldr	r2, [pc, #584]	; (8001ff4 <HAL_GPIO_Init+0x2b0>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d046      	beq.n	8001e3e <HAL_GPIO_Init+0xfa>
 8001db0:	4a90      	ldr	r2, [pc, #576]	; (8001ff4 <HAL_GPIO_Init+0x2b0>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d85d      	bhi.n	8001e72 <HAL_GPIO_Init+0x12e>
 8001db6:	2b12      	cmp	r3, #18
 8001db8:	d82a      	bhi.n	8001e10 <HAL_GPIO_Init+0xcc>
 8001dba:	2b12      	cmp	r3, #18
 8001dbc:	d859      	bhi.n	8001e72 <HAL_GPIO_Init+0x12e>
 8001dbe:	a201      	add	r2, pc, #4	; (adr r2, 8001dc4 <HAL_GPIO_Init+0x80>)
 8001dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dc4:	08001e3f 	.word	0x08001e3f
 8001dc8:	08001e19 	.word	0x08001e19
 8001dcc:	08001e2b 	.word	0x08001e2b
 8001dd0:	08001e6d 	.word	0x08001e6d
 8001dd4:	08001e73 	.word	0x08001e73
 8001dd8:	08001e73 	.word	0x08001e73
 8001ddc:	08001e73 	.word	0x08001e73
 8001de0:	08001e73 	.word	0x08001e73
 8001de4:	08001e73 	.word	0x08001e73
 8001de8:	08001e73 	.word	0x08001e73
 8001dec:	08001e73 	.word	0x08001e73
 8001df0:	08001e73 	.word	0x08001e73
 8001df4:	08001e73 	.word	0x08001e73
 8001df8:	08001e73 	.word	0x08001e73
 8001dfc:	08001e73 	.word	0x08001e73
 8001e00:	08001e73 	.word	0x08001e73
 8001e04:	08001e73 	.word	0x08001e73
 8001e08:	08001e21 	.word	0x08001e21
 8001e0c:	08001e35 	.word	0x08001e35
 8001e10:	4a79      	ldr	r2, [pc, #484]	; (8001ff8 <HAL_GPIO_Init+0x2b4>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d013      	beq.n	8001e3e <HAL_GPIO_Init+0xfa>
>>>>>>> main
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
<<<<<<< HEAD
 8001e62:	e02c      	b.n	8001ebe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	623b      	str	r3, [r7, #32]
          break;
 8001e6a:	e029      	b.n	8001ec0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	3304      	adds	r3, #4
 8001e72:	623b      	str	r3, [r7, #32]
          break;
 8001e74:	e024      	b.n	8001ec0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	68db      	ldr	r3, [r3, #12]
 8001e7a:	3308      	adds	r3, #8
 8001e7c:	623b      	str	r3, [r7, #32]
          break;
 8001e7e:	e01f      	b.n	8001ec0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	330c      	adds	r3, #12
 8001e86:	623b      	str	r3, [r7, #32]
          break;
 8001e88:	e01a      	b.n	8001ec0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d102      	bne.n	8001e98 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e92:	2304      	movs	r3, #4
 8001e94:	623b      	str	r3, [r7, #32]
          break;
 8001e96:	e013      	b.n	8001ec0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d105      	bne.n	8001eac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ea0:	2308      	movs	r3, #8
 8001ea2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	69fa      	ldr	r2, [r7, #28]
 8001ea8:	611a      	str	r2, [r3, #16]
          break;
 8001eaa:	e009      	b.n	8001ec0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001eac:	2308      	movs	r3, #8
 8001eae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	69fa      	ldr	r2, [r7, #28]
 8001eb4:	615a      	str	r2, [r3, #20]
          break;
 8001eb6:	e003      	b.n	8001ec0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	623b      	str	r3, [r7, #32]
          break;
 8001ebc:	e000      	b.n	8001ec0 <HAL_GPIO_Init+0x130>
          break;
 8001ebe:	bf00      	nop
=======
 8001e16:	e02c      	b.n	8001e72 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	623b      	str	r3, [r7, #32]
          break;
 8001e1e:	e029      	b.n	8001e74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	3304      	adds	r3, #4
 8001e26:	623b      	str	r3, [r7, #32]
          break;
 8001e28:	e024      	b.n	8001e74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	3308      	adds	r3, #8
 8001e30:	623b      	str	r3, [r7, #32]
          break;
 8001e32:	e01f      	b.n	8001e74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	330c      	adds	r3, #12
 8001e3a:	623b      	str	r3, [r7, #32]
          break;
 8001e3c:	e01a      	b.n	8001e74 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d102      	bne.n	8001e4c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e46:	2304      	movs	r3, #4
 8001e48:	623b      	str	r3, [r7, #32]
          break;
 8001e4a:	e013      	b.n	8001e74 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d105      	bne.n	8001e60 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e54:	2308      	movs	r3, #8
 8001e56:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	69fa      	ldr	r2, [r7, #28]
 8001e5c:	611a      	str	r2, [r3, #16]
          break;
 8001e5e:	e009      	b.n	8001e74 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e60:	2308      	movs	r3, #8
 8001e62:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	69fa      	ldr	r2, [r7, #28]
 8001e68:	615a      	str	r2, [r3, #20]
          break;
 8001e6a:	e003      	b.n	8001e74 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	623b      	str	r3, [r7, #32]
          break;
 8001e70:	e000      	b.n	8001e74 <HAL_GPIO_Init+0x130>
          break;
 8001e72:	bf00      	nop
>>>>>>> main
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
<<<<<<< HEAD
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	2bff      	cmp	r3, #255	; 0xff
 8001ec4:	d801      	bhi.n	8001eca <HAL_GPIO_Init+0x13a>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	e001      	b.n	8001ece <HAL_GPIO_Init+0x13e>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	3304      	adds	r3, #4
 8001ece:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	2bff      	cmp	r3, #255	; 0xff
 8001ed4:	d802      	bhi.n	8001edc <HAL_GPIO_Init+0x14c>
 8001ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	e002      	b.n	8001ee2 <HAL_GPIO_Init+0x152>
 8001edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ede:	3b08      	subs	r3, #8
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	210f      	movs	r1, #15
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef0:	43db      	mvns	r3, r3
 8001ef2:	401a      	ands	r2, r3
 8001ef4:	6a39      	ldr	r1, [r7, #32]
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8001efc:	431a      	orrs	r2, r3
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	601a      	str	r2, [r3, #0]
=======
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	2bff      	cmp	r3, #255	; 0xff
 8001e78:	d801      	bhi.n	8001e7e <HAL_GPIO_Init+0x13a>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	e001      	b.n	8001e82 <HAL_GPIO_Init+0x13e>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	3304      	adds	r3, #4
 8001e82:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e84:	69bb      	ldr	r3, [r7, #24]
 8001e86:	2bff      	cmp	r3, #255	; 0xff
 8001e88:	d802      	bhi.n	8001e90 <HAL_GPIO_Init+0x14c>
 8001e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	e002      	b.n	8001e96 <HAL_GPIO_Init+0x152>
 8001e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e92:	3b08      	subs	r3, #8
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	210f      	movs	r1, #15
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea4:	43db      	mvns	r3, r3
 8001ea6:	401a      	ands	r2, r3
 8001ea8:	6a39      	ldr	r1, [r7, #32]
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb0:	431a      	orrs	r2, r3
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	601a      	str	r2, [r3, #0]
>>>>>>> main

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
<<<<<<< HEAD
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	f000 80b1 	beq.w	8002072 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f10:	4b4d      	ldr	r3, [pc, #308]	; (8002048 <HAL_GPIO_Init+0x2b8>)
 8001f12:	699b      	ldr	r3, [r3, #24]
 8001f14:	4a4c      	ldr	r2, [pc, #304]	; (8002048 <HAL_GPIO_Init+0x2b8>)
 8001f16:	f043 0301 	orr.w	r3, r3, #1
 8001f1a:	6193      	str	r3, [r2, #24]
 8001f1c:	4b4a      	ldr	r3, [pc, #296]	; (8002048 <HAL_GPIO_Init+0x2b8>)
 8001f1e:	699b      	ldr	r3, [r3, #24]
 8001f20:	f003 0301 	and.w	r3, r3, #1
 8001f24:	60bb      	str	r3, [r7, #8]
 8001f26:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f28:	4a48      	ldr	r2, [pc, #288]	; (800204c <HAL_GPIO_Init+0x2bc>)
 8001f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2c:	089b      	lsrs	r3, r3, #2
 8001f2e:	3302      	adds	r3, #2
 8001f30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f34:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f38:	f003 0303 	and.w	r3, r3, #3
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	220f      	movs	r2, #15
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	43db      	mvns	r3, r3
 8001f46:	68fa      	ldr	r2, [r7, #12]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	4a40      	ldr	r2, [pc, #256]	; (8002050 <HAL_GPIO_Init+0x2c0>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d013      	beq.n	8001f7c <HAL_GPIO_Init+0x1ec>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	4a3f      	ldr	r2, [pc, #252]	; (8002054 <HAL_GPIO_Init+0x2c4>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d00d      	beq.n	8001f78 <HAL_GPIO_Init+0x1e8>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	4a3e      	ldr	r2, [pc, #248]	; (8002058 <HAL_GPIO_Init+0x2c8>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d007      	beq.n	8001f74 <HAL_GPIO_Init+0x1e4>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	4a3d      	ldr	r2, [pc, #244]	; (800205c <HAL_GPIO_Init+0x2cc>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d101      	bne.n	8001f70 <HAL_GPIO_Init+0x1e0>
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	e006      	b.n	8001f7e <HAL_GPIO_Init+0x1ee>
 8001f70:	2304      	movs	r3, #4
 8001f72:	e004      	b.n	8001f7e <HAL_GPIO_Init+0x1ee>
 8001f74:	2302      	movs	r3, #2
 8001f76:	e002      	b.n	8001f7e <HAL_GPIO_Init+0x1ee>
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e000      	b.n	8001f7e <HAL_GPIO_Init+0x1ee>
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f80:	f002 0203 	and.w	r2, r2, #3
 8001f84:	0092      	lsls	r2, r2, #2
 8001f86:	4093      	lsls	r3, r2
 8001f88:	68fa      	ldr	r2, [r7, #12]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f8e:	492f      	ldr	r1, [pc, #188]	; (800204c <HAL_GPIO_Init+0x2bc>)
 8001f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f92:	089b      	lsrs	r3, r3, #2
 8001f94:	3302      	adds	r3, #2
 8001f96:	68fa      	ldr	r2, [r7, #12]
 8001f98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
=======
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	f000 80b1 	beq.w	8002026 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ec4:	4b4d      	ldr	r3, [pc, #308]	; (8001ffc <HAL_GPIO_Init+0x2b8>)
 8001ec6:	699b      	ldr	r3, [r3, #24]
 8001ec8:	4a4c      	ldr	r2, [pc, #304]	; (8001ffc <HAL_GPIO_Init+0x2b8>)
 8001eca:	f043 0301 	orr.w	r3, r3, #1
 8001ece:	6193      	str	r3, [r2, #24]
 8001ed0:	4b4a      	ldr	r3, [pc, #296]	; (8001ffc <HAL_GPIO_Init+0x2b8>)
 8001ed2:	699b      	ldr	r3, [r3, #24]
 8001ed4:	f003 0301 	and.w	r3, r3, #1
 8001ed8:	60bb      	str	r3, [r7, #8]
 8001eda:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001edc:	4a48      	ldr	r2, [pc, #288]	; (8002000 <HAL_GPIO_Init+0x2bc>)
 8001ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee0:	089b      	lsrs	r3, r3, #2
 8001ee2:	3302      	adds	r3, #2
 8001ee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ee8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eec:	f003 0303 	and.w	r3, r3, #3
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	220f      	movs	r2, #15
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	68fa      	ldr	r2, [r7, #12]
 8001efc:	4013      	ands	r3, r2
 8001efe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	4a40      	ldr	r2, [pc, #256]	; (8002004 <HAL_GPIO_Init+0x2c0>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d013      	beq.n	8001f30 <HAL_GPIO_Init+0x1ec>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	4a3f      	ldr	r2, [pc, #252]	; (8002008 <HAL_GPIO_Init+0x2c4>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d00d      	beq.n	8001f2c <HAL_GPIO_Init+0x1e8>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	4a3e      	ldr	r2, [pc, #248]	; (800200c <HAL_GPIO_Init+0x2c8>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d007      	beq.n	8001f28 <HAL_GPIO_Init+0x1e4>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	4a3d      	ldr	r2, [pc, #244]	; (8002010 <HAL_GPIO_Init+0x2cc>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d101      	bne.n	8001f24 <HAL_GPIO_Init+0x1e0>
 8001f20:	2303      	movs	r3, #3
 8001f22:	e006      	b.n	8001f32 <HAL_GPIO_Init+0x1ee>
 8001f24:	2304      	movs	r3, #4
 8001f26:	e004      	b.n	8001f32 <HAL_GPIO_Init+0x1ee>
 8001f28:	2302      	movs	r3, #2
 8001f2a:	e002      	b.n	8001f32 <HAL_GPIO_Init+0x1ee>
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e000      	b.n	8001f32 <HAL_GPIO_Init+0x1ee>
 8001f30:	2300      	movs	r3, #0
 8001f32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f34:	f002 0203 	and.w	r2, r2, #3
 8001f38:	0092      	lsls	r2, r2, #2
 8001f3a:	4093      	lsls	r3, r2
 8001f3c:	68fa      	ldr	r2, [r7, #12]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f42:	492f      	ldr	r1, [pc, #188]	; (8002000 <HAL_GPIO_Init+0x2bc>)
 8001f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f46:	089b      	lsrs	r3, r3, #2
 8001f48:	3302      	adds	r3, #2
 8001f4a:	68fa      	ldr	r2, [r7, #12]
 8001f4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
>>>>>>> main


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
<<<<<<< HEAD
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d006      	beq.n	8001fb6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001fa8:	4b2d      	ldr	r3, [pc, #180]	; (8002060 <HAL_GPIO_Init+0x2d0>)
 8001faa:	689a      	ldr	r2, [r3, #8]
 8001fac:	492c      	ldr	r1, [pc, #176]	; (8002060 <HAL_GPIO_Init+0x2d0>)
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	608b      	str	r3, [r1, #8]
 8001fb4:	e006      	b.n	8001fc4 <HAL_GPIO_Init+0x234>
=======
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d006      	beq.n	8001f6a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f5c:	4b2d      	ldr	r3, [pc, #180]	; (8002014 <HAL_GPIO_Init+0x2d0>)
 8001f5e:	689a      	ldr	r2, [r3, #8]
 8001f60:	492c      	ldr	r1, [pc, #176]	; (8002014 <HAL_GPIO_Init+0x2d0>)
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	608b      	str	r3, [r1, #8]
 8001f68:	e006      	b.n	8001f78 <HAL_GPIO_Init+0x234>
>>>>>>> main
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
<<<<<<< HEAD
 8001fb6:	4b2a      	ldr	r3, [pc, #168]	; (8002060 <HAL_GPIO_Init+0x2d0>)
 8001fb8:	689a      	ldr	r2, [r3, #8]
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	43db      	mvns	r3, r3
 8001fbe:	4928      	ldr	r1, [pc, #160]	; (8002060 <HAL_GPIO_Init+0x2d0>)
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	608b      	str	r3, [r1, #8]
=======
 8001f6a:	4b2a      	ldr	r3, [pc, #168]	; (8002014 <HAL_GPIO_Init+0x2d0>)
 8001f6c:	689a      	ldr	r2, [r3, #8]
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	43db      	mvns	r3, r3
 8001f72:	4928      	ldr	r1, [pc, #160]	; (8002014 <HAL_GPIO_Init+0x2d0>)
 8001f74:	4013      	ands	r3, r2
 8001f76:	608b      	str	r3, [r1, #8]
>>>>>>> main
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
<<<<<<< HEAD
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d006      	beq.n	8001fde <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001fd0:	4b23      	ldr	r3, [pc, #140]	; (8002060 <HAL_GPIO_Init+0x2d0>)
 8001fd2:	68da      	ldr	r2, [r3, #12]
 8001fd4:	4922      	ldr	r1, [pc, #136]	; (8002060 <HAL_GPIO_Init+0x2d0>)
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	60cb      	str	r3, [r1, #12]
 8001fdc:	e006      	b.n	8001fec <HAL_GPIO_Init+0x25c>
=======
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d006      	beq.n	8001f92 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f84:	4b23      	ldr	r3, [pc, #140]	; (8002014 <HAL_GPIO_Init+0x2d0>)
 8001f86:	68da      	ldr	r2, [r3, #12]
 8001f88:	4922      	ldr	r1, [pc, #136]	; (8002014 <HAL_GPIO_Init+0x2d0>)
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	60cb      	str	r3, [r1, #12]
 8001f90:	e006      	b.n	8001fa0 <HAL_GPIO_Init+0x25c>
>>>>>>> main
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
<<<<<<< HEAD
 8001fde:	4b20      	ldr	r3, [pc, #128]	; (8002060 <HAL_GPIO_Init+0x2d0>)
 8001fe0:	68da      	ldr	r2, [r3, #12]
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	43db      	mvns	r3, r3
 8001fe6:	491e      	ldr	r1, [pc, #120]	; (8002060 <HAL_GPIO_Init+0x2d0>)
 8001fe8:	4013      	ands	r3, r2
 8001fea:	60cb      	str	r3, [r1, #12]
=======
 8001f92:	4b20      	ldr	r3, [pc, #128]	; (8002014 <HAL_GPIO_Init+0x2d0>)
 8001f94:	68da      	ldr	r2, [r3, #12]
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	491e      	ldr	r1, [pc, #120]	; (8002014 <HAL_GPIO_Init+0x2d0>)
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	60cb      	str	r3, [r1, #12]
>>>>>>> main
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
<<<<<<< HEAD
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d006      	beq.n	8002006 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ff8:	4b19      	ldr	r3, [pc, #100]	; (8002060 <HAL_GPIO_Init+0x2d0>)
 8001ffa:	685a      	ldr	r2, [r3, #4]
 8001ffc:	4918      	ldr	r1, [pc, #96]	; (8002060 <HAL_GPIO_Init+0x2d0>)
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	4313      	orrs	r3, r2
 8002002:	604b      	str	r3, [r1, #4]
 8002004:	e006      	b.n	8002014 <HAL_GPIO_Init+0x284>
=======
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d006      	beq.n	8001fba <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001fac:	4b19      	ldr	r3, [pc, #100]	; (8002014 <HAL_GPIO_Init+0x2d0>)
 8001fae:	685a      	ldr	r2, [r3, #4]
 8001fb0:	4918      	ldr	r1, [pc, #96]	; (8002014 <HAL_GPIO_Init+0x2d0>)
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	604b      	str	r3, [r1, #4]
 8001fb8:	e006      	b.n	8001fc8 <HAL_GPIO_Init+0x284>
>>>>>>> main
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
<<<<<<< HEAD
 8002006:	4b16      	ldr	r3, [pc, #88]	; (8002060 <HAL_GPIO_Init+0x2d0>)
 8002008:	685a      	ldr	r2, [r3, #4]
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	43db      	mvns	r3, r3
 800200e:	4914      	ldr	r1, [pc, #80]	; (8002060 <HAL_GPIO_Init+0x2d0>)
 8002010:	4013      	ands	r3, r2
 8002012:	604b      	str	r3, [r1, #4]
=======
 8001fba:	4b16      	ldr	r3, [pc, #88]	; (8002014 <HAL_GPIO_Init+0x2d0>)
 8001fbc:	685a      	ldr	r2, [r3, #4]
 8001fbe:	69bb      	ldr	r3, [r7, #24]
 8001fc0:	43db      	mvns	r3, r3
 8001fc2:	4914      	ldr	r1, [pc, #80]	; (8002014 <HAL_GPIO_Init+0x2d0>)
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	604b      	str	r3, [r1, #4]
>>>>>>> main
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
<<<<<<< HEAD
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800201c:	2b00      	cmp	r3, #0
 800201e:	d021      	beq.n	8002064 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002020:	4b0f      	ldr	r3, [pc, #60]	; (8002060 <HAL_GPIO_Init+0x2d0>)
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	490e      	ldr	r1, [pc, #56]	; (8002060 <HAL_GPIO_Init+0x2d0>)
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	4313      	orrs	r3, r2
 800202a:	600b      	str	r3, [r1, #0]
 800202c:	e021      	b.n	8002072 <HAL_GPIO_Init+0x2e2>
 800202e:	bf00      	nop
 8002030:	10320000 	.word	0x10320000
 8002034:	10310000 	.word	0x10310000
 8002038:	10220000 	.word	0x10220000
 800203c:	10210000 	.word	0x10210000
 8002040:	10120000 	.word	0x10120000
 8002044:	10110000 	.word	0x10110000
 8002048:	40021000 	.word	0x40021000
 800204c:	40010000 	.word	0x40010000
 8002050:	40010800 	.word	0x40010800
 8002054:	40010c00 	.word	0x40010c00
 8002058:	40011000 	.word	0x40011000
 800205c:	40011400 	.word	0x40011400
 8002060:	40010400 	.word	0x40010400
=======
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d021      	beq.n	8002018 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001fd4:	4b0f      	ldr	r3, [pc, #60]	; (8002014 <HAL_GPIO_Init+0x2d0>)
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	490e      	ldr	r1, [pc, #56]	; (8002014 <HAL_GPIO_Init+0x2d0>)
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	600b      	str	r3, [r1, #0]
 8001fe0:	e021      	b.n	8002026 <HAL_GPIO_Init+0x2e2>
 8001fe2:	bf00      	nop
 8001fe4:	10320000 	.word	0x10320000
 8001fe8:	10310000 	.word	0x10310000
 8001fec:	10220000 	.word	0x10220000
 8001ff0:	10210000 	.word	0x10210000
 8001ff4:	10120000 	.word	0x10120000
 8001ff8:	10110000 	.word	0x10110000
 8001ffc:	40021000 	.word	0x40021000
 8002000:	40010000 	.word	0x40010000
 8002004:	40010800 	.word	0x40010800
 8002008:	40010c00 	.word	0x40010c00
 800200c:	40011000 	.word	0x40011000
 8002010:	40011400 	.word	0x40011400
 8002014:	40010400 	.word	0x40010400
>>>>>>> main
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
<<<<<<< HEAD
 8002064:	4b0b      	ldr	r3, [pc, #44]	; (8002094 <HAL_GPIO_Init+0x304>)
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	43db      	mvns	r3, r3
 800206c:	4909      	ldr	r1, [pc, #36]	; (8002094 <HAL_GPIO_Init+0x304>)
 800206e:	4013      	ands	r3, r2
 8002070:	600b      	str	r3, [r1, #0]
=======
 8002018:	4b0b      	ldr	r3, [pc, #44]	; (8002048 <HAL_GPIO_Init+0x304>)
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	43db      	mvns	r3, r3
 8002020:	4909      	ldr	r1, [pc, #36]	; (8002048 <HAL_GPIO_Init+0x304>)
 8002022:	4013      	ands	r3, r2
 8002024:	600b      	str	r3, [r1, #0]
>>>>>>> main
        }
      }
    }

	position++;
<<<<<<< HEAD
 8002072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002074:	3301      	adds	r3, #1
 8002076:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207e:	fa22 f303 	lsr.w	r3, r2, r3
 8002082:	2b00      	cmp	r3, #0
 8002084:	f47f ae8e 	bne.w	8001da4 <HAL_GPIO_Init+0x14>
  }
}
 8002088:	bf00      	nop
 800208a:	bf00      	nop
 800208c:	372c      	adds	r7, #44	; 0x2c
 800208e:	46bd      	mov	sp, r7
 8002090:	bc80      	pop	{r7}
 8002092:	4770      	bx	lr
 8002094:	40010400 	.word	0x40010400

08002098 <HAL_GPIO_ReadPin>:
=======
 8002026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002028:	3301      	adds	r3, #1
 800202a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002032:	fa22 f303 	lsr.w	r3, r2, r3
 8002036:	2b00      	cmp	r3, #0
 8002038:	f47f ae8e 	bne.w	8001d58 <HAL_GPIO_Init+0x14>
  }
}
 800203c:	bf00      	nop
 800203e:	bf00      	nop
 8002040:	372c      	adds	r7, #44	; 0x2c
 8002042:	46bd      	mov	sp, r7
 8002044:	bc80      	pop	{r7}
 8002046:	4770      	bx	lr
 8002048:	40010400 	.word	0x40010400

0800204c <HAL_GPIO_ReadPin>:
>>>>>>> main
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
<<<<<<< HEAD
 8002098:	b480      	push	{r7}
 800209a:	b085      	sub	sp, #20
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	460b      	mov	r3, r1
 80020a2:	807b      	strh	r3, [r7, #2]
=======
 800204c:	b480      	push	{r7}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	460b      	mov	r3, r1
 8002056:	807b      	strh	r3, [r7, #2]
>>>>>>> main
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
<<<<<<< HEAD
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	689a      	ldr	r2, [r3, #8]
 80020a8:	887b      	ldrh	r3, [r7, #2]
 80020aa:	4013      	ands	r3, r2
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d002      	beq.n	80020b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020b0:	2301      	movs	r3, #1
 80020b2:	73fb      	strb	r3, [r7, #15]
 80020b4:	e001      	b.n	80020ba <HAL_GPIO_ReadPin+0x22>
=======
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	689a      	ldr	r2, [r3, #8]
 800205c:	887b      	ldrh	r3, [r7, #2]
 800205e:	4013      	ands	r3, r2
 8002060:	2b00      	cmp	r3, #0
 8002062:	d002      	beq.n	800206a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002064:	2301      	movs	r3, #1
 8002066:	73fb      	strb	r3, [r7, #15]
 8002068:	e001      	b.n	800206e <HAL_GPIO_ReadPin+0x22>
>>>>>>> main
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
<<<<<<< HEAD
 80020b6:	2300      	movs	r3, #0
 80020b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3714      	adds	r7, #20
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bc80      	pop	{r7}
 80020c4:	4770      	bx	lr

080020c6 <HAL_GPIO_WritePin>:
=======
 800206a:	2300      	movs	r3, #0
 800206c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800206e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002070:	4618      	mov	r0, r3
 8002072:	3714      	adds	r7, #20
 8002074:	46bd      	mov	sp, r7
 8002076:	bc80      	pop	{r7}
 8002078:	4770      	bx	lr

0800207a <HAL_GPIO_WritePin>:
>>>>>>> main
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
<<<<<<< HEAD
 80020c6:	b480      	push	{r7}
 80020c8:	b083      	sub	sp, #12
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
 80020ce:	460b      	mov	r3, r1
 80020d0:	807b      	strh	r3, [r7, #2]
 80020d2:	4613      	mov	r3, r2
 80020d4:	707b      	strb	r3, [r7, #1]
=======
 800207a:	b480      	push	{r7}
 800207c:	b083      	sub	sp, #12
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
 8002082:	460b      	mov	r3, r1
 8002084:	807b      	strh	r3, [r7, #2]
 8002086:	4613      	mov	r3, r2
 8002088:	707b      	strb	r3, [r7, #1]
>>>>>>> main
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
<<<<<<< HEAD
 80020d6:	787b      	ldrb	r3, [r7, #1]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d003      	beq.n	80020e4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020dc:	887a      	ldrh	r2, [r7, #2]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	611a      	str	r2, [r3, #16]
=======
 800208a:	787b      	ldrb	r3, [r7, #1]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d003      	beq.n	8002098 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002090:	887a      	ldrh	r2, [r7, #2]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	611a      	str	r2, [r3, #16]
>>>>>>> main
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
<<<<<<< HEAD
 80020e2:	e003      	b.n	80020ec <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020e4:	887b      	ldrh	r3, [r7, #2]
 80020e6:	041a      	lsls	r2, r3, #16
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	611a      	str	r2, [r3, #16]
}
 80020ec:	bf00      	nop
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bc80      	pop	{r7}
 80020f4:	4770      	bx	lr
	...

080020f8 <HAL_GPIO_EXTI_IRQHandler>:
=======
 8002096:	e003      	b.n	80020a0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002098:	887b      	ldrh	r3, [r7, #2]
 800209a:	041a      	lsls	r2, r3, #16
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	611a      	str	r2, [r3, #16]
}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bc80      	pop	{r7}
 80020a8:	4770      	bx	lr
	...

080020ac <HAL_GPIO_EXTI_IRQHandler>:
>>>>>>> main
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
<<<<<<< HEAD
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	4603      	mov	r3, r0
 8002100:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002102:	4b08      	ldr	r3, [pc, #32]	; (8002124 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002104:	695a      	ldr	r2, [r3, #20]
 8002106:	88fb      	ldrh	r3, [r7, #6]
 8002108:	4013      	ands	r3, r2
 800210a:	2b00      	cmp	r3, #0
 800210c:	d006      	beq.n	800211c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800210e:	4a05      	ldr	r2, [pc, #20]	; (8002124 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002110:	88fb      	ldrh	r3, [r7, #6]
 8002112:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002114:	88fb      	ldrh	r3, [r7, #6]
 8002116:	4618      	mov	r0, r3
 8002118:	f7ff fbe6 	bl	80018e8 <HAL_GPIO_EXTI_Callback>
  }
}
 800211c:	bf00      	nop
 800211e:	3708      	adds	r7, #8
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	40010400 	.word	0x40010400

08002128 <HAL_PWR_PVD_IRQHandler>:
=======
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	4603      	mov	r3, r0
 80020b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80020b6:	4b08      	ldr	r3, [pc, #32]	; (80020d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020b8:	695a      	ldr	r2, [r3, #20]
 80020ba:	88fb      	ldrh	r3, [r7, #6]
 80020bc:	4013      	ands	r3, r2
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d006      	beq.n	80020d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80020c2:	4a05      	ldr	r2, [pc, #20]	; (80020d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020c4:	88fb      	ldrh	r3, [r7, #6]
 80020c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80020c8:	88fb      	ldrh	r3, [r7, #6]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7ff fbea 	bl	80018a4 <HAL_GPIO_EXTI_Callback>
  }
}
 80020d0:	bf00      	nop
 80020d2:	3708      	adds	r7, #8
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	40010400 	.word	0x40010400

080020dc <HAL_PWR_PVD_IRQHandler>:
>>>>>>> main
  * @brief  This function handles the PWR PVD interrupt request.
  * @note   This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
<<<<<<< HEAD
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 800212c:	4b06      	ldr	r3, [pc, #24]	; (8002148 <HAL_PWR_PVD_IRQHandler+0x20>)
 800212e:	695b      	ldr	r3, [r3, #20]
 8002130:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d005      	beq.n	8002144 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8002138:	f000 f808 	bl	800214c <HAL_PWR_PVDCallback>

    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 800213c:	4b02      	ldr	r3, [pc, #8]	; (8002148 <HAL_PWR_PVD_IRQHandler+0x20>)
 800213e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002142:	615a      	str	r2, [r3, #20]
  }
}
 8002144:	bf00      	nop
 8002146:	bd80      	pop	{r7, pc}
 8002148:	40010400 	.word	0x40010400

0800214c <HAL_PWR_PVDCallback>:
=======
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 80020e0:	4b06      	ldr	r3, [pc, #24]	; (80020fc <HAL_PWR_PVD_IRQHandler+0x20>)
 80020e2:	695b      	ldr	r3, [r3, #20]
 80020e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d005      	beq.n	80020f8 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 80020ec:	f000 f808 	bl	8002100 <HAL_PWR_PVDCallback>

    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 80020f0:	4b02      	ldr	r3, [pc, #8]	; (80020fc <HAL_PWR_PVD_IRQHandler+0x20>)
 80020f2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80020f6:	615a      	str	r2, [r3, #20]
  }
}
 80020f8:	bf00      	nop
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	40010400 	.word	0x40010400

08002100 <HAL_PWR_PVDCallback>:
>>>>>>> main
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
<<<<<<< HEAD
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
=======
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
>>>>>>> main
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
<<<<<<< HEAD
 8002150:	bf00      	nop
 8002152:	46bd      	mov	sp, r7
 8002154:	bc80      	pop	{r7}
 8002156:	4770      	bx	lr

08002158 <HAL_RCC_OscConfig>:
=======
 8002104:	bf00      	nop
 8002106:	46bd      	mov	sp, r7
 8002108:	bc80      	pop	{r7}
 800210a:	4770      	bx	lr

0800210c <HAL_RCC_OscConfig>:
>>>>>>> main
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
<<<<<<< HEAD
 8002158:	b580      	push	{r7, lr}
 800215a:	b086      	sub	sp, #24
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
=======
 800210c:	b580      	push	{r7, lr}
 800210e:	b086      	sub	sp, #24
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
>>>>>>> main
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
<<<<<<< HEAD
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d101      	bne.n	800216a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e272      	b.n	8002650 <HAL_RCC_OscConfig+0x4f8>
=======
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d101      	bne.n	800211e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e272      	b.n	8002604 <HAL_RCC_OscConfig+0x4f8>
>>>>>>> main

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
<<<<<<< HEAD
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	2b00      	cmp	r3, #0
 8002174:	f000 8087 	beq.w	8002286 <HAL_RCC_OscConfig+0x12e>
=======
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0301 	and.w	r3, r3, #1
 8002126:	2b00      	cmp	r3, #0
 8002128:	f000 8087 	beq.w	800223a <HAL_RCC_OscConfig+0x12e>
>>>>>>> main
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
<<<<<<< HEAD
 8002178:	4b92      	ldr	r3, [pc, #584]	; (80023c4 <HAL_RCC_OscConfig+0x26c>)
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f003 030c 	and.w	r3, r3, #12
 8002180:	2b04      	cmp	r3, #4
 8002182:	d00c      	beq.n	800219e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002184:	4b8f      	ldr	r3, [pc, #572]	; (80023c4 <HAL_RCC_OscConfig+0x26c>)
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f003 030c 	and.w	r3, r3, #12
 800218c:	2b08      	cmp	r3, #8
 800218e:	d112      	bne.n	80021b6 <HAL_RCC_OscConfig+0x5e>
 8002190:	4b8c      	ldr	r3, [pc, #560]	; (80023c4 <HAL_RCC_OscConfig+0x26c>)
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002198:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800219c:	d10b      	bne.n	80021b6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800219e:	4b89      	ldr	r3, [pc, #548]	; (80023c4 <HAL_RCC_OscConfig+0x26c>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d06c      	beq.n	8002284 <HAL_RCC_OscConfig+0x12c>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d168      	bne.n	8002284 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e24c      	b.n	8002650 <HAL_RCC_OscConfig+0x4f8>
=======
 800212c:	4b92      	ldr	r3, [pc, #584]	; (8002378 <HAL_RCC_OscConfig+0x26c>)
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f003 030c 	and.w	r3, r3, #12
 8002134:	2b04      	cmp	r3, #4
 8002136:	d00c      	beq.n	8002152 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002138:	4b8f      	ldr	r3, [pc, #572]	; (8002378 <HAL_RCC_OscConfig+0x26c>)
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f003 030c 	and.w	r3, r3, #12
 8002140:	2b08      	cmp	r3, #8
 8002142:	d112      	bne.n	800216a <HAL_RCC_OscConfig+0x5e>
 8002144:	4b8c      	ldr	r3, [pc, #560]	; (8002378 <HAL_RCC_OscConfig+0x26c>)
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800214c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002150:	d10b      	bne.n	800216a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002152:	4b89      	ldr	r3, [pc, #548]	; (8002378 <HAL_RCC_OscConfig+0x26c>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d06c      	beq.n	8002238 <HAL_RCC_OscConfig+0x12c>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d168      	bne.n	8002238 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e24c      	b.n	8002604 <HAL_RCC_OscConfig+0x4f8>
>>>>>>> main
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
<<<<<<< HEAD
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021be:	d106      	bne.n	80021ce <HAL_RCC_OscConfig+0x76>
 80021c0:	4b80      	ldr	r3, [pc, #512]	; (80023c4 <HAL_RCC_OscConfig+0x26c>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a7f      	ldr	r2, [pc, #508]	; (80023c4 <HAL_RCC_OscConfig+0x26c>)
 80021c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021ca:	6013      	str	r3, [r2, #0]
 80021cc:	e02e      	b.n	800222c <HAL_RCC_OscConfig+0xd4>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d10c      	bne.n	80021f0 <HAL_RCC_OscConfig+0x98>
 80021d6:	4b7b      	ldr	r3, [pc, #492]	; (80023c4 <HAL_RCC_OscConfig+0x26c>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a7a      	ldr	r2, [pc, #488]	; (80023c4 <HAL_RCC_OscConfig+0x26c>)
 80021dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021e0:	6013      	str	r3, [r2, #0]
 80021e2:	4b78      	ldr	r3, [pc, #480]	; (80023c4 <HAL_RCC_OscConfig+0x26c>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a77      	ldr	r2, [pc, #476]	; (80023c4 <HAL_RCC_OscConfig+0x26c>)
 80021e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021ec:	6013      	str	r3, [r2, #0]
 80021ee:	e01d      	b.n	800222c <HAL_RCC_OscConfig+0xd4>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021f8:	d10c      	bne.n	8002214 <HAL_RCC_OscConfig+0xbc>
 80021fa:	4b72      	ldr	r3, [pc, #456]	; (80023c4 <HAL_RCC_OscConfig+0x26c>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a71      	ldr	r2, [pc, #452]	; (80023c4 <HAL_RCC_OscConfig+0x26c>)
 8002200:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002204:	6013      	str	r3, [r2, #0]
 8002206:	4b6f      	ldr	r3, [pc, #444]	; (80023c4 <HAL_RCC_OscConfig+0x26c>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a6e      	ldr	r2, [pc, #440]	; (80023c4 <HAL_RCC_OscConfig+0x26c>)
 800220c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002210:	6013      	str	r3, [r2, #0]
 8002212:	e00b      	b.n	800222c <HAL_RCC_OscConfig+0xd4>
 8002214:	4b6b      	ldr	r3, [pc, #428]	; (80023c4 <HAL_RCC_OscConfig+0x26c>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a6a      	ldr	r2, [pc, #424]	; (80023c4 <HAL_RCC_OscConfig+0x26c>)
 800221a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800221e:	6013      	str	r3, [r2, #0]
 8002220:	4b68      	ldr	r3, [pc, #416]	; (80023c4 <HAL_RCC_OscConfig+0x26c>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a67      	ldr	r2, [pc, #412]	; (80023c4 <HAL_RCC_OscConfig+0x26c>)
 8002226:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800222a:	6013      	str	r3, [r2, #0]
=======
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002172:	d106      	bne.n	8002182 <HAL_RCC_OscConfig+0x76>
 8002174:	4b80      	ldr	r3, [pc, #512]	; (8002378 <HAL_RCC_OscConfig+0x26c>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a7f      	ldr	r2, [pc, #508]	; (8002378 <HAL_RCC_OscConfig+0x26c>)
 800217a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800217e:	6013      	str	r3, [r2, #0]
 8002180:	e02e      	b.n	80021e0 <HAL_RCC_OscConfig+0xd4>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d10c      	bne.n	80021a4 <HAL_RCC_OscConfig+0x98>
 800218a:	4b7b      	ldr	r3, [pc, #492]	; (8002378 <HAL_RCC_OscConfig+0x26c>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a7a      	ldr	r2, [pc, #488]	; (8002378 <HAL_RCC_OscConfig+0x26c>)
 8002190:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002194:	6013      	str	r3, [r2, #0]
 8002196:	4b78      	ldr	r3, [pc, #480]	; (8002378 <HAL_RCC_OscConfig+0x26c>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a77      	ldr	r2, [pc, #476]	; (8002378 <HAL_RCC_OscConfig+0x26c>)
 800219c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021a0:	6013      	str	r3, [r2, #0]
 80021a2:	e01d      	b.n	80021e0 <HAL_RCC_OscConfig+0xd4>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021ac:	d10c      	bne.n	80021c8 <HAL_RCC_OscConfig+0xbc>
 80021ae:	4b72      	ldr	r3, [pc, #456]	; (8002378 <HAL_RCC_OscConfig+0x26c>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a71      	ldr	r2, [pc, #452]	; (8002378 <HAL_RCC_OscConfig+0x26c>)
 80021b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021b8:	6013      	str	r3, [r2, #0]
 80021ba:	4b6f      	ldr	r3, [pc, #444]	; (8002378 <HAL_RCC_OscConfig+0x26c>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a6e      	ldr	r2, [pc, #440]	; (8002378 <HAL_RCC_OscConfig+0x26c>)
 80021c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021c4:	6013      	str	r3, [r2, #0]
 80021c6:	e00b      	b.n	80021e0 <HAL_RCC_OscConfig+0xd4>
 80021c8:	4b6b      	ldr	r3, [pc, #428]	; (8002378 <HAL_RCC_OscConfig+0x26c>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a6a      	ldr	r2, [pc, #424]	; (8002378 <HAL_RCC_OscConfig+0x26c>)
 80021ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021d2:	6013      	str	r3, [r2, #0]
 80021d4:	4b68      	ldr	r3, [pc, #416]	; (8002378 <HAL_RCC_OscConfig+0x26c>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a67      	ldr	r2, [pc, #412]	; (8002378 <HAL_RCC_OscConfig+0x26c>)
 80021da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021de:	6013      	str	r3, [r2, #0]
>>>>>>> main


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
<<<<<<< HEAD
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d013      	beq.n	800225c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002234:	f7ff fc70 	bl	8001b18 <HAL_GetTick>
 8002238:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800223a:	e008      	b.n	800224e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800223c:	f7ff fc6c 	bl	8001b18 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b64      	cmp	r3, #100	; 0x64
 8002248:	d901      	bls.n	800224e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e200      	b.n	8002650 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800224e:	4b5d      	ldr	r3, [pc, #372]	; (80023c4 <HAL_RCC_OscConfig+0x26c>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d0f0      	beq.n	800223c <HAL_RCC_OscConfig+0xe4>
 800225a:	e014      	b.n	8002286 <HAL_RCC_OscConfig+0x12e>
=======
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d013      	beq.n	8002210 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e8:	f7ff fc70 	bl	8001acc <HAL_GetTick>
 80021ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ee:	e008      	b.n	8002202 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021f0:	f7ff fc6c 	bl	8001acc <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	2b64      	cmp	r3, #100	; 0x64
 80021fc:	d901      	bls.n	8002202 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e200      	b.n	8002604 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002202:	4b5d      	ldr	r3, [pc, #372]	; (8002378 <HAL_RCC_OscConfig+0x26c>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d0f0      	beq.n	80021f0 <HAL_RCC_OscConfig+0xe4>
 800220e:	e014      	b.n	800223a <HAL_RCC_OscConfig+0x12e>
>>>>>>> main
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
<<<<<<< HEAD
 800225c:	f7ff fc5c 	bl	8001b18 <HAL_GetTick>
 8002260:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002262:	e008      	b.n	8002276 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002264:	f7ff fc58 	bl	8001b18 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b64      	cmp	r3, #100	; 0x64
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e1ec      	b.n	8002650 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002276:	4b53      	ldr	r3, [pc, #332]	; (80023c4 <HAL_RCC_OscConfig+0x26c>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1f0      	bne.n	8002264 <HAL_RCC_OscConfig+0x10c>
 8002282:	e000      	b.n	8002286 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002284:	bf00      	nop
=======
 8002210:	f7ff fc5c 	bl	8001acc <HAL_GetTick>
 8002214:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002216:	e008      	b.n	800222a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002218:	f7ff fc58 	bl	8001acc <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	2b64      	cmp	r3, #100	; 0x64
 8002224:	d901      	bls.n	800222a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e1ec      	b.n	8002604 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800222a:	4b53      	ldr	r3, [pc, #332]	; (8002378 <HAL_RCC_OscConfig+0x26c>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d1f0      	bne.n	8002218 <HAL_RCC_OscConfig+0x10c>
 8002236:	e000      	b.n	800223a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002238:	bf00      	nop
>>>>>>> main
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
<<<<<<< HEAD
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	2b00      	cmp	r3, #0
 8002290:	d063      	beq.n	800235a <HAL_RCC_OscConfig+0x202>
=======
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b00      	cmp	r3, #0
 8002244:	d063      	beq.n	800230e <HAL_RCC_OscConfig+0x202>
>>>>>>> main
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
<<<<<<< HEAD
 8002292:	4b4c      	ldr	r3, [pc, #304]	; (80023c4 <HAL_RCC_OscConfig+0x26c>)
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f003 030c 	and.w	r3, r3, #12
 800229a:	2b00      	cmp	r3, #0
 800229c:	d00b      	beq.n	80022b6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800229e:	4b49      	ldr	r3, [pc, #292]	; (80023c4 <HAL_RCC_OscConfig+0x26c>)
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f003 030c 	and.w	r3, r3, #12
 80022a6:	2b08      	cmp	r3, #8
 80022a8:	d11c      	bne.n	80022e4 <HAL_RCC_OscConfig+0x18c>
 80022aa:	4b46      	ldr	r3, [pc, #280]	; (80023c4 <HAL_RCC_OscConfig+0x26c>)
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d116      	bne.n	80022e4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022b6:	4b43      	ldr	r3, [pc, #268]	; (80023c4 <HAL_RCC_OscConfig+0x26c>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d005      	beq.n	80022ce <HAL_RCC_OscConfig+0x176>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	691b      	ldr	r3, [r3, #16]
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d001      	beq.n	80022ce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e1c0      	b.n	8002650 <HAL_RCC_OscConfig+0x4f8>
=======
 8002246:	4b4c      	ldr	r3, [pc, #304]	; (8002378 <HAL_RCC_OscConfig+0x26c>)
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f003 030c 	and.w	r3, r3, #12
 800224e:	2b00      	cmp	r3, #0
 8002250:	d00b      	beq.n	800226a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002252:	4b49      	ldr	r3, [pc, #292]	; (8002378 <HAL_RCC_OscConfig+0x26c>)
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f003 030c 	and.w	r3, r3, #12
 800225a:	2b08      	cmp	r3, #8
 800225c:	d11c      	bne.n	8002298 <HAL_RCC_OscConfig+0x18c>
 800225e:	4b46      	ldr	r3, [pc, #280]	; (8002378 <HAL_RCC_OscConfig+0x26c>)
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d116      	bne.n	8002298 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800226a:	4b43      	ldr	r3, [pc, #268]	; (8002378 <HAL_RCC_OscConfig+0x26c>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0302 	and.w	r3, r3, #2
 8002272:	2b00      	cmp	r3, #0
 8002274:	d005      	beq.n	8002282 <HAL_RCC_OscConfig+0x176>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	691b      	ldr	r3, [r3, #16]
 800227a:	2b01      	cmp	r3, #1
 800227c:	d001      	beq.n	8002282 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e1c0      	b.n	8002604 <HAL_RCC_OscConfig+0x4f8>
>>>>>>> main
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 80022ce:	4b3d      	ldr	r3, [pc, #244]	; (80023c4 <HAL_RCC_OscConfig+0x26c>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	695b      	ldr	r3, [r3, #20]
 80022da:	00db      	lsls	r3, r3, #3
 80022dc:	4939      	ldr	r1, [pc, #228]	; (80023c4 <HAL_RCC_OscConfig+0x26c>)
 80022de:	4313      	orrs	r3, r2
 80022e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022e2:	e03a      	b.n	800235a <HAL_RCC_OscConfig+0x202>
=======
 8002282:	4b3d      	ldr	r3, [pc, #244]	; (8002378 <HAL_RCC_OscConfig+0x26c>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	695b      	ldr	r3, [r3, #20]
 800228e:	00db      	lsls	r3, r3, #3
 8002290:	4939      	ldr	r1, [pc, #228]	; (8002378 <HAL_RCC_OscConfig+0x26c>)
 8002292:	4313      	orrs	r3, r2
 8002294:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002296:	e03a      	b.n	800230e <HAL_RCC_OscConfig+0x202>
>>>>>>> main
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
<<<<<<< HEAD
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	691b      	ldr	r3, [r3, #16]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d020      	beq.n	800232e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022ec:	4b36      	ldr	r3, [pc, #216]	; (80023c8 <HAL_RCC_OscConfig+0x270>)
 80022ee:	2201      	movs	r2, #1
 80022f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f2:	f7ff fc11 	bl	8001b18 <HAL_GetTick>
 80022f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022f8:	e008      	b.n	800230c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022fa:	f7ff fc0d 	bl	8001b18 <HAL_GetTick>
 80022fe:	4602      	mov	r2, r0
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	2b02      	cmp	r3, #2
 8002306:	d901      	bls.n	800230c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002308:	2303      	movs	r3, #3
 800230a:	e1a1      	b.n	8002650 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800230c:	4b2d      	ldr	r3, [pc, #180]	; (80023c4 <HAL_RCC_OscConfig+0x26c>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0302 	and.w	r3, r3, #2
 8002314:	2b00      	cmp	r3, #0
 8002316:	d0f0      	beq.n	80022fa <HAL_RCC_OscConfig+0x1a2>
=======
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	691b      	ldr	r3, [r3, #16]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d020      	beq.n	80022e2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022a0:	4b36      	ldr	r3, [pc, #216]	; (800237c <HAL_RCC_OscConfig+0x270>)
 80022a2:	2201      	movs	r2, #1
 80022a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a6:	f7ff fc11 	bl	8001acc <HAL_GetTick>
 80022aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022ac:	e008      	b.n	80022c0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022ae:	f7ff fc0d 	bl	8001acc <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d901      	bls.n	80022c0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80022bc:	2303      	movs	r3, #3
 80022be:	e1a1      	b.n	8002604 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022c0:	4b2d      	ldr	r3, [pc, #180]	; (8002378 <HAL_RCC_OscConfig+0x26c>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0302 	and.w	r3, r3, #2
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d0f0      	beq.n	80022ae <HAL_RCC_OscConfig+0x1a2>
>>>>>>> main
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 8002318:	4b2a      	ldr	r3, [pc, #168]	; (80023c4 <HAL_RCC_OscConfig+0x26c>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	695b      	ldr	r3, [r3, #20]
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	4927      	ldr	r1, [pc, #156]	; (80023c4 <HAL_RCC_OscConfig+0x26c>)
 8002328:	4313      	orrs	r3, r2
 800232a:	600b      	str	r3, [r1, #0]
 800232c:	e015      	b.n	800235a <HAL_RCC_OscConfig+0x202>
=======
 80022cc:	4b2a      	ldr	r3, [pc, #168]	; (8002378 <HAL_RCC_OscConfig+0x26c>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	695b      	ldr	r3, [r3, #20]
 80022d8:	00db      	lsls	r3, r3, #3
 80022da:	4927      	ldr	r1, [pc, #156]	; (8002378 <HAL_RCC_OscConfig+0x26c>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	600b      	str	r3, [r1, #0]
 80022e0:	e015      	b.n	800230e <HAL_RCC_OscConfig+0x202>
>>>>>>> main
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
<<<<<<< HEAD
 800232e:	4b26      	ldr	r3, [pc, #152]	; (80023c8 <HAL_RCC_OscConfig+0x270>)
 8002330:	2200      	movs	r2, #0
 8002332:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002334:	f7ff fbf0 	bl	8001b18 <HAL_GetTick>
 8002338:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800233a:	e008      	b.n	800234e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800233c:	f7ff fbec 	bl	8001b18 <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	2b02      	cmp	r3, #2
 8002348:	d901      	bls.n	800234e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e180      	b.n	8002650 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800234e:	4b1d      	ldr	r3, [pc, #116]	; (80023c4 <HAL_RCC_OscConfig+0x26c>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0302 	and.w	r3, r3, #2
 8002356:	2b00      	cmp	r3, #0
 8002358:	d1f0      	bne.n	800233c <HAL_RCC_OscConfig+0x1e4>
=======
 80022e2:	4b26      	ldr	r3, [pc, #152]	; (800237c <HAL_RCC_OscConfig+0x270>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e8:	f7ff fbf0 	bl	8001acc <HAL_GetTick>
 80022ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022ee:	e008      	b.n	8002302 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022f0:	f7ff fbec 	bl	8001acc <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e180      	b.n	8002604 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002302:	4b1d      	ldr	r3, [pc, #116]	; (8002378 <HAL_RCC_OscConfig+0x26c>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0302 	and.w	r3, r3, #2
 800230a:	2b00      	cmp	r3, #0
 800230c:	d1f0      	bne.n	80022f0 <HAL_RCC_OscConfig+0x1e4>
>>>>>>> main
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
<<<<<<< HEAD
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0308 	and.w	r3, r3, #8
 8002362:	2b00      	cmp	r3, #0
 8002364:	d03a      	beq.n	80023dc <HAL_RCC_OscConfig+0x284>
=======
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0308 	and.w	r3, r3, #8
 8002316:	2b00      	cmp	r3, #0
 8002318:	d03a      	beq.n	8002390 <HAL_RCC_OscConfig+0x284>
>>>>>>> main
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
<<<<<<< HEAD
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	699b      	ldr	r3, [r3, #24]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d019      	beq.n	80023a2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800236e:	4b17      	ldr	r3, [pc, #92]	; (80023cc <HAL_RCC_OscConfig+0x274>)
 8002370:	2201      	movs	r2, #1
 8002372:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002374:	f7ff fbd0 	bl	8001b18 <HAL_GetTick>
 8002378:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800237a:	e008      	b.n	800238e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800237c:	f7ff fbcc 	bl	8001b18 <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b02      	cmp	r3, #2
 8002388:	d901      	bls.n	800238e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e160      	b.n	8002650 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800238e:	4b0d      	ldr	r3, [pc, #52]	; (80023c4 <HAL_RCC_OscConfig+0x26c>)
 8002390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002392:	f003 0302 	and.w	r3, r3, #2
 8002396:	2b00      	cmp	r3, #0
 8002398:	d0f0      	beq.n	800237c <HAL_RCC_OscConfig+0x224>
=======
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	699b      	ldr	r3, [r3, #24]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d019      	beq.n	8002356 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002322:	4b17      	ldr	r3, [pc, #92]	; (8002380 <HAL_RCC_OscConfig+0x274>)
 8002324:	2201      	movs	r2, #1
 8002326:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002328:	f7ff fbd0 	bl	8001acc <HAL_GetTick>
 800232c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800232e:	e008      	b.n	8002342 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002330:	f7ff fbcc 	bl	8001acc <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	2b02      	cmp	r3, #2
 800233c:	d901      	bls.n	8002342 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e160      	b.n	8002604 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002342:	4b0d      	ldr	r3, [pc, #52]	; (8002378 <HAL_RCC_OscConfig+0x26c>)
 8002344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002346:	f003 0302 	and.w	r3, r3, #2
 800234a:	2b00      	cmp	r3, #0
 800234c:	d0f0      	beq.n	8002330 <HAL_RCC_OscConfig+0x224>
>>>>>>> main
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
<<<<<<< HEAD
 800239a:	2001      	movs	r0, #1
 800239c:	f000 fa9c 	bl	80028d8 <RCC_Delay>
 80023a0:	e01c      	b.n	80023dc <HAL_RCC_OscConfig+0x284>
=======
 800234e:	2001      	movs	r0, #1
 8002350:	f000 fa9c 	bl	800288c <RCC_Delay>
 8002354:	e01c      	b.n	8002390 <HAL_RCC_OscConfig+0x284>
>>>>>>> main
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
<<<<<<< HEAD
 80023a2:	4b0a      	ldr	r3, [pc, #40]	; (80023cc <HAL_RCC_OscConfig+0x274>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023a8:	f7ff fbb6 	bl	8001b18 <HAL_GetTick>
 80023ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023ae:	e00f      	b.n	80023d0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023b0:	f7ff fbb2 	bl	8001b18 <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d908      	bls.n	80023d0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e146      	b.n	8002650 <HAL_RCC_OscConfig+0x4f8>
 80023c2:	bf00      	nop
 80023c4:	40021000 	.word	0x40021000
 80023c8:	42420000 	.word	0x42420000
 80023cc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023d0:	4b92      	ldr	r3, [pc, #584]	; (800261c <HAL_RCC_OscConfig+0x4c4>)
 80023d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d4:	f003 0302 	and.w	r3, r3, #2
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d1e9      	bne.n	80023b0 <HAL_RCC_OscConfig+0x258>
=======
 8002356:	4b0a      	ldr	r3, [pc, #40]	; (8002380 <HAL_RCC_OscConfig+0x274>)
 8002358:	2200      	movs	r2, #0
 800235a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800235c:	f7ff fbb6 	bl	8001acc <HAL_GetTick>
 8002360:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002362:	e00f      	b.n	8002384 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002364:	f7ff fbb2 	bl	8001acc <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b02      	cmp	r3, #2
 8002370:	d908      	bls.n	8002384 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e146      	b.n	8002604 <HAL_RCC_OscConfig+0x4f8>
 8002376:	bf00      	nop
 8002378:	40021000 	.word	0x40021000
 800237c:	42420000 	.word	0x42420000
 8002380:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002384:	4b92      	ldr	r3, [pc, #584]	; (80025d0 <HAL_RCC_OscConfig+0x4c4>)
 8002386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002388:	f003 0302 	and.w	r3, r3, #2
 800238c:	2b00      	cmp	r3, #0
 800238e:	d1e9      	bne.n	8002364 <HAL_RCC_OscConfig+0x258>
>>>>>>> main
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
<<<<<<< HEAD
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0304 	and.w	r3, r3, #4
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	f000 80a6 	beq.w	8002536 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023ea:	2300      	movs	r3, #0
 80023ec:	75fb      	strb	r3, [r7, #23]
=======
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0304 	and.w	r3, r3, #4
 8002398:	2b00      	cmp	r3, #0
 800239a:	f000 80a6 	beq.w	80024ea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800239e:	2300      	movs	r3, #0
 80023a0:	75fb      	strb	r3, [r7, #23]
>>>>>>> main
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
<<<<<<< HEAD
 80023ee:	4b8b      	ldr	r3, [pc, #556]	; (800261c <HAL_RCC_OscConfig+0x4c4>)
 80023f0:	69db      	ldr	r3, [r3, #28]
 80023f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d10d      	bne.n	8002416 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023fa:	4b88      	ldr	r3, [pc, #544]	; (800261c <HAL_RCC_OscConfig+0x4c4>)
 80023fc:	69db      	ldr	r3, [r3, #28]
 80023fe:	4a87      	ldr	r2, [pc, #540]	; (800261c <HAL_RCC_OscConfig+0x4c4>)
 8002400:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002404:	61d3      	str	r3, [r2, #28]
 8002406:	4b85      	ldr	r3, [pc, #532]	; (800261c <HAL_RCC_OscConfig+0x4c4>)
 8002408:	69db      	ldr	r3, [r3, #28]
 800240a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800240e:	60bb      	str	r3, [r7, #8]
 8002410:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002412:	2301      	movs	r3, #1
 8002414:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002416:	4b82      	ldr	r3, [pc, #520]	; (8002620 <HAL_RCC_OscConfig+0x4c8>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800241e:	2b00      	cmp	r3, #0
 8002420:	d118      	bne.n	8002454 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002422:	4b7f      	ldr	r3, [pc, #508]	; (8002620 <HAL_RCC_OscConfig+0x4c8>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a7e      	ldr	r2, [pc, #504]	; (8002620 <HAL_RCC_OscConfig+0x4c8>)
 8002428:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800242c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800242e:	f7ff fb73 	bl	8001b18 <HAL_GetTick>
 8002432:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002434:	e008      	b.n	8002448 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002436:	f7ff fb6f 	bl	8001b18 <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	2b64      	cmp	r3, #100	; 0x64
 8002442:	d901      	bls.n	8002448 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e103      	b.n	8002650 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002448:	4b75      	ldr	r3, [pc, #468]	; (8002620 <HAL_RCC_OscConfig+0x4c8>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002450:	2b00      	cmp	r3, #0
 8002452:	d0f0      	beq.n	8002436 <HAL_RCC_OscConfig+0x2de>
=======
 80023a2:	4b8b      	ldr	r3, [pc, #556]	; (80025d0 <HAL_RCC_OscConfig+0x4c4>)
 80023a4:	69db      	ldr	r3, [r3, #28]
 80023a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d10d      	bne.n	80023ca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023ae:	4b88      	ldr	r3, [pc, #544]	; (80025d0 <HAL_RCC_OscConfig+0x4c4>)
 80023b0:	69db      	ldr	r3, [r3, #28]
 80023b2:	4a87      	ldr	r2, [pc, #540]	; (80025d0 <HAL_RCC_OscConfig+0x4c4>)
 80023b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023b8:	61d3      	str	r3, [r2, #28]
 80023ba:	4b85      	ldr	r3, [pc, #532]	; (80025d0 <HAL_RCC_OscConfig+0x4c4>)
 80023bc:	69db      	ldr	r3, [r3, #28]
 80023be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023c2:	60bb      	str	r3, [r7, #8]
 80023c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023c6:	2301      	movs	r3, #1
 80023c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ca:	4b82      	ldr	r3, [pc, #520]	; (80025d4 <HAL_RCC_OscConfig+0x4c8>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d118      	bne.n	8002408 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023d6:	4b7f      	ldr	r3, [pc, #508]	; (80025d4 <HAL_RCC_OscConfig+0x4c8>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a7e      	ldr	r2, [pc, #504]	; (80025d4 <HAL_RCC_OscConfig+0x4c8>)
 80023dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023e2:	f7ff fb73 	bl	8001acc <HAL_GetTick>
 80023e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023e8:	e008      	b.n	80023fc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023ea:	f7ff fb6f 	bl	8001acc <HAL_GetTick>
 80023ee:	4602      	mov	r2, r0
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	2b64      	cmp	r3, #100	; 0x64
 80023f6:	d901      	bls.n	80023fc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	e103      	b.n	8002604 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023fc:	4b75      	ldr	r3, [pc, #468]	; (80025d4 <HAL_RCC_OscConfig+0x4c8>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002404:	2b00      	cmp	r3, #0
 8002406:	d0f0      	beq.n	80023ea <HAL_RCC_OscConfig+0x2de>
>>>>>>> main
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
<<<<<<< HEAD
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	2b01      	cmp	r3, #1
 800245a:	d106      	bne.n	800246a <HAL_RCC_OscConfig+0x312>
 800245c:	4b6f      	ldr	r3, [pc, #444]	; (800261c <HAL_RCC_OscConfig+0x4c4>)
 800245e:	6a1b      	ldr	r3, [r3, #32]
 8002460:	4a6e      	ldr	r2, [pc, #440]	; (800261c <HAL_RCC_OscConfig+0x4c4>)
 8002462:	f043 0301 	orr.w	r3, r3, #1
 8002466:	6213      	str	r3, [r2, #32]
 8002468:	e02d      	b.n	80024c6 <HAL_RCC_OscConfig+0x36e>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d10c      	bne.n	800248c <HAL_RCC_OscConfig+0x334>
 8002472:	4b6a      	ldr	r3, [pc, #424]	; (800261c <HAL_RCC_OscConfig+0x4c4>)
 8002474:	6a1b      	ldr	r3, [r3, #32]
 8002476:	4a69      	ldr	r2, [pc, #420]	; (800261c <HAL_RCC_OscConfig+0x4c4>)
 8002478:	f023 0301 	bic.w	r3, r3, #1
 800247c:	6213      	str	r3, [r2, #32]
 800247e:	4b67      	ldr	r3, [pc, #412]	; (800261c <HAL_RCC_OscConfig+0x4c4>)
 8002480:	6a1b      	ldr	r3, [r3, #32]
 8002482:	4a66      	ldr	r2, [pc, #408]	; (800261c <HAL_RCC_OscConfig+0x4c4>)
 8002484:	f023 0304 	bic.w	r3, r3, #4
 8002488:	6213      	str	r3, [r2, #32]
 800248a:	e01c      	b.n	80024c6 <HAL_RCC_OscConfig+0x36e>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	2b05      	cmp	r3, #5
 8002492:	d10c      	bne.n	80024ae <HAL_RCC_OscConfig+0x356>
 8002494:	4b61      	ldr	r3, [pc, #388]	; (800261c <HAL_RCC_OscConfig+0x4c4>)
 8002496:	6a1b      	ldr	r3, [r3, #32]
 8002498:	4a60      	ldr	r2, [pc, #384]	; (800261c <HAL_RCC_OscConfig+0x4c4>)
 800249a:	f043 0304 	orr.w	r3, r3, #4
 800249e:	6213      	str	r3, [r2, #32]
 80024a0:	4b5e      	ldr	r3, [pc, #376]	; (800261c <HAL_RCC_OscConfig+0x4c4>)
 80024a2:	6a1b      	ldr	r3, [r3, #32]
 80024a4:	4a5d      	ldr	r2, [pc, #372]	; (800261c <HAL_RCC_OscConfig+0x4c4>)
 80024a6:	f043 0301 	orr.w	r3, r3, #1
 80024aa:	6213      	str	r3, [r2, #32]
 80024ac:	e00b      	b.n	80024c6 <HAL_RCC_OscConfig+0x36e>
 80024ae:	4b5b      	ldr	r3, [pc, #364]	; (800261c <HAL_RCC_OscConfig+0x4c4>)
 80024b0:	6a1b      	ldr	r3, [r3, #32]
 80024b2:	4a5a      	ldr	r2, [pc, #360]	; (800261c <HAL_RCC_OscConfig+0x4c4>)
 80024b4:	f023 0301 	bic.w	r3, r3, #1
 80024b8:	6213      	str	r3, [r2, #32]
 80024ba:	4b58      	ldr	r3, [pc, #352]	; (800261c <HAL_RCC_OscConfig+0x4c4>)
 80024bc:	6a1b      	ldr	r3, [r3, #32]
 80024be:	4a57      	ldr	r2, [pc, #348]	; (800261c <HAL_RCC_OscConfig+0x4c4>)
 80024c0:	f023 0304 	bic.w	r3, r3, #4
 80024c4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d015      	beq.n	80024fa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024ce:	f7ff fb23 	bl	8001b18 <HAL_GetTick>
 80024d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024d4:	e00a      	b.n	80024ec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024d6:	f7ff fb1f 	bl	8001b18 <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d901      	bls.n	80024ec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e0b1      	b.n	8002650 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024ec:	4b4b      	ldr	r3, [pc, #300]	; (800261c <HAL_RCC_OscConfig+0x4c4>)
 80024ee:	6a1b      	ldr	r3, [r3, #32]
 80024f0:	f003 0302 	and.w	r3, r3, #2
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d0ee      	beq.n	80024d6 <HAL_RCC_OscConfig+0x37e>
 80024f8:	e014      	b.n	8002524 <HAL_RCC_OscConfig+0x3cc>
=======
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	2b01      	cmp	r3, #1
 800240e:	d106      	bne.n	800241e <HAL_RCC_OscConfig+0x312>
 8002410:	4b6f      	ldr	r3, [pc, #444]	; (80025d0 <HAL_RCC_OscConfig+0x4c4>)
 8002412:	6a1b      	ldr	r3, [r3, #32]
 8002414:	4a6e      	ldr	r2, [pc, #440]	; (80025d0 <HAL_RCC_OscConfig+0x4c4>)
 8002416:	f043 0301 	orr.w	r3, r3, #1
 800241a:	6213      	str	r3, [r2, #32]
 800241c:	e02d      	b.n	800247a <HAL_RCC_OscConfig+0x36e>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d10c      	bne.n	8002440 <HAL_RCC_OscConfig+0x334>
 8002426:	4b6a      	ldr	r3, [pc, #424]	; (80025d0 <HAL_RCC_OscConfig+0x4c4>)
 8002428:	6a1b      	ldr	r3, [r3, #32]
 800242a:	4a69      	ldr	r2, [pc, #420]	; (80025d0 <HAL_RCC_OscConfig+0x4c4>)
 800242c:	f023 0301 	bic.w	r3, r3, #1
 8002430:	6213      	str	r3, [r2, #32]
 8002432:	4b67      	ldr	r3, [pc, #412]	; (80025d0 <HAL_RCC_OscConfig+0x4c4>)
 8002434:	6a1b      	ldr	r3, [r3, #32]
 8002436:	4a66      	ldr	r2, [pc, #408]	; (80025d0 <HAL_RCC_OscConfig+0x4c4>)
 8002438:	f023 0304 	bic.w	r3, r3, #4
 800243c:	6213      	str	r3, [r2, #32]
 800243e:	e01c      	b.n	800247a <HAL_RCC_OscConfig+0x36e>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	2b05      	cmp	r3, #5
 8002446:	d10c      	bne.n	8002462 <HAL_RCC_OscConfig+0x356>
 8002448:	4b61      	ldr	r3, [pc, #388]	; (80025d0 <HAL_RCC_OscConfig+0x4c4>)
 800244a:	6a1b      	ldr	r3, [r3, #32]
 800244c:	4a60      	ldr	r2, [pc, #384]	; (80025d0 <HAL_RCC_OscConfig+0x4c4>)
 800244e:	f043 0304 	orr.w	r3, r3, #4
 8002452:	6213      	str	r3, [r2, #32]
 8002454:	4b5e      	ldr	r3, [pc, #376]	; (80025d0 <HAL_RCC_OscConfig+0x4c4>)
 8002456:	6a1b      	ldr	r3, [r3, #32]
 8002458:	4a5d      	ldr	r2, [pc, #372]	; (80025d0 <HAL_RCC_OscConfig+0x4c4>)
 800245a:	f043 0301 	orr.w	r3, r3, #1
 800245e:	6213      	str	r3, [r2, #32]
 8002460:	e00b      	b.n	800247a <HAL_RCC_OscConfig+0x36e>
 8002462:	4b5b      	ldr	r3, [pc, #364]	; (80025d0 <HAL_RCC_OscConfig+0x4c4>)
 8002464:	6a1b      	ldr	r3, [r3, #32]
 8002466:	4a5a      	ldr	r2, [pc, #360]	; (80025d0 <HAL_RCC_OscConfig+0x4c4>)
 8002468:	f023 0301 	bic.w	r3, r3, #1
 800246c:	6213      	str	r3, [r2, #32]
 800246e:	4b58      	ldr	r3, [pc, #352]	; (80025d0 <HAL_RCC_OscConfig+0x4c4>)
 8002470:	6a1b      	ldr	r3, [r3, #32]
 8002472:	4a57      	ldr	r2, [pc, #348]	; (80025d0 <HAL_RCC_OscConfig+0x4c4>)
 8002474:	f023 0304 	bic.w	r3, r3, #4
 8002478:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d015      	beq.n	80024ae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002482:	f7ff fb23 	bl	8001acc <HAL_GetTick>
 8002486:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002488:	e00a      	b.n	80024a0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800248a:	f7ff fb1f 	bl	8001acc <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	f241 3288 	movw	r2, #5000	; 0x1388
 8002498:	4293      	cmp	r3, r2
 800249a:	d901      	bls.n	80024a0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800249c:	2303      	movs	r3, #3
 800249e:	e0b1      	b.n	8002604 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024a0:	4b4b      	ldr	r3, [pc, #300]	; (80025d0 <HAL_RCC_OscConfig+0x4c4>)
 80024a2:	6a1b      	ldr	r3, [r3, #32]
 80024a4:	f003 0302 	and.w	r3, r3, #2
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d0ee      	beq.n	800248a <HAL_RCC_OscConfig+0x37e>
 80024ac:	e014      	b.n	80024d8 <HAL_RCC_OscConfig+0x3cc>
>>>>>>> main
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
<<<<<<< HEAD
 80024fa:	f7ff fb0d 	bl	8001b18 <HAL_GetTick>
 80024fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002500:	e00a      	b.n	8002518 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002502:	f7ff fb09 	bl	8001b18 <HAL_GetTick>
 8002506:	4602      	mov	r2, r0
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002510:	4293      	cmp	r3, r2
 8002512:	d901      	bls.n	8002518 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002514:	2303      	movs	r3, #3
 8002516:	e09b      	b.n	8002650 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002518:	4b40      	ldr	r3, [pc, #256]	; (800261c <HAL_RCC_OscConfig+0x4c4>)
 800251a:	6a1b      	ldr	r3, [r3, #32]
 800251c:	f003 0302 	and.w	r3, r3, #2
 8002520:	2b00      	cmp	r3, #0
 8002522:	d1ee      	bne.n	8002502 <HAL_RCC_OscConfig+0x3aa>
=======
 80024ae:	f7ff fb0d 	bl	8001acc <HAL_GetTick>
 80024b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024b4:	e00a      	b.n	80024cc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024b6:	f7ff fb09 	bl	8001acc <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d901      	bls.n	80024cc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e09b      	b.n	8002604 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024cc:	4b40      	ldr	r3, [pc, #256]	; (80025d0 <HAL_RCC_OscConfig+0x4c4>)
 80024ce:	6a1b      	ldr	r3, [r3, #32]
 80024d0:	f003 0302 	and.w	r3, r3, #2
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d1ee      	bne.n	80024b6 <HAL_RCC_OscConfig+0x3aa>
>>>>>>> main
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
<<<<<<< HEAD
 8002524:	7dfb      	ldrb	r3, [r7, #23]
 8002526:	2b01      	cmp	r3, #1
 8002528:	d105      	bne.n	8002536 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800252a:	4b3c      	ldr	r3, [pc, #240]	; (800261c <HAL_RCC_OscConfig+0x4c4>)
 800252c:	69db      	ldr	r3, [r3, #28]
 800252e:	4a3b      	ldr	r2, [pc, #236]	; (800261c <HAL_RCC_OscConfig+0x4c4>)
 8002530:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002534:	61d3      	str	r3, [r2, #28]
=======
 80024d8:	7dfb      	ldrb	r3, [r7, #23]
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d105      	bne.n	80024ea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024de:	4b3c      	ldr	r3, [pc, #240]	; (80025d0 <HAL_RCC_OscConfig+0x4c4>)
 80024e0:	69db      	ldr	r3, [r3, #28]
 80024e2:	4a3b      	ldr	r2, [pc, #236]	; (80025d0 <HAL_RCC_OscConfig+0x4c4>)
 80024e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024e8:	61d3      	str	r3, [r2, #28]
>>>>>>> main

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
<<<<<<< HEAD
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	69db      	ldr	r3, [r3, #28]
 800253a:	2b00      	cmp	r3, #0
 800253c:	f000 8087 	beq.w	800264e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002540:	4b36      	ldr	r3, [pc, #216]	; (800261c <HAL_RCC_OscConfig+0x4c4>)
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f003 030c 	and.w	r3, r3, #12
 8002548:	2b08      	cmp	r3, #8
 800254a:	d061      	beq.n	8002610 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	69db      	ldr	r3, [r3, #28]
 8002550:	2b02      	cmp	r3, #2
 8002552:	d146      	bne.n	80025e2 <HAL_RCC_OscConfig+0x48a>
=======
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	69db      	ldr	r3, [r3, #28]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	f000 8087 	beq.w	8002602 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024f4:	4b36      	ldr	r3, [pc, #216]	; (80025d0 <HAL_RCC_OscConfig+0x4c4>)
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f003 030c 	and.w	r3, r3, #12
 80024fc:	2b08      	cmp	r3, #8
 80024fe:	d061      	beq.n	80025c4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	69db      	ldr	r3, [r3, #28]
 8002504:	2b02      	cmp	r3, #2
 8002506:	d146      	bne.n	8002596 <HAL_RCC_OscConfig+0x48a>
>>>>>>> main
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 8002554:	4b33      	ldr	r3, [pc, #204]	; (8002624 <HAL_RCC_OscConfig+0x4cc>)
 8002556:	2200      	movs	r2, #0
 8002558:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800255a:	f7ff fadd 	bl	8001b18 <HAL_GetTick>
 800255e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002560:	e008      	b.n	8002574 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002562:	f7ff fad9 	bl	8001b18 <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	2b02      	cmp	r3, #2
 800256e:	d901      	bls.n	8002574 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	e06d      	b.n	8002650 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002574:	4b29      	ldr	r3, [pc, #164]	; (800261c <HAL_RCC_OscConfig+0x4c4>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d1f0      	bne.n	8002562 <HAL_RCC_OscConfig+0x40a>
=======
 8002508:	4b33      	ldr	r3, [pc, #204]	; (80025d8 <HAL_RCC_OscConfig+0x4cc>)
 800250a:	2200      	movs	r2, #0
 800250c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800250e:	f7ff fadd 	bl	8001acc <HAL_GetTick>
 8002512:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002514:	e008      	b.n	8002528 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002516:	f7ff fad9 	bl	8001acc <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	2b02      	cmp	r3, #2
 8002522:	d901      	bls.n	8002528 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	e06d      	b.n	8002604 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002528:	4b29      	ldr	r3, [pc, #164]	; (80025d0 <HAL_RCC_OscConfig+0x4c4>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d1f0      	bne.n	8002516 <HAL_RCC_OscConfig+0x40a>
>>>>>>> main
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
<<<<<<< HEAD
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6a1b      	ldr	r3, [r3, #32]
 8002584:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002588:	d108      	bne.n	800259c <HAL_RCC_OscConfig+0x444>
=======
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6a1b      	ldr	r3, [r3, #32]
 8002538:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800253c:	d108      	bne.n	8002550 <HAL_RCC_OscConfig+0x444>
>>>>>>> main
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
<<<<<<< HEAD
 800258a:	4b24      	ldr	r3, [pc, #144]	; (800261c <HAL_RCC_OscConfig+0x4c4>)
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	4921      	ldr	r1, [pc, #132]	; (800261c <HAL_RCC_OscConfig+0x4c4>)
 8002598:	4313      	orrs	r3, r2
 800259a:	604b      	str	r3, [r1, #4]
=======
 800253e:	4b24      	ldr	r3, [pc, #144]	; (80025d0 <HAL_RCC_OscConfig+0x4c4>)
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	4921      	ldr	r1, [pc, #132]	; (80025d0 <HAL_RCC_OscConfig+0x4c4>)
 800254c:	4313      	orrs	r3, r2
 800254e:	604b      	str	r3, [r1, #4]
>>>>>>> main
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
<<<<<<< HEAD
 800259c:	4b1f      	ldr	r3, [pc, #124]	; (800261c <HAL_RCC_OscConfig+0x4c4>)
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a19      	ldr	r1, [r3, #32]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ac:	430b      	orrs	r3, r1
 80025ae:	491b      	ldr	r1, [pc, #108]	; (800261c <HAL_RCC_OscConfig+0x4c4>)
 80025b0:	4313      	orrs	r3, r2
 80025b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025b4:	4b1b      	ldr	r3, [pc, #108]	; (8002624 <HAL_RCC_OscConfig+0x4cc>)
 80025b6:	2201      	movs	r2, #1
 80025b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ba:	f7ff faad 	bl	8001b18 <HAL_GetTick>
 80025be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025c0:	e008      	b.n	80025d4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025c2:	f7ff faa9 	bl	8001b18 <HAL_GetTick>
 80025c6:	4602      	mov	r2, r0
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d901      	bls.n	80025d4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	e03d      	b.n	8002650 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025d4:	4b11      	ldr	r3, [pc, #68]	; (800261c <HAL_RCC_OscConfig+0x4c4>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d0f0      	beq.n	80025c2 <HAL_RCC_OscConfig+0x46a>
 80025e0:	e035      	b.n	800264e <HAL_RCC_OscConfig+0x4f6>
=======
 8002550:	4b1f      	ldr	r3, [pc, #124]	; (80025d0 <HAL_RCC_OscConfig+0x4c4>)
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6a19      	ldr	r1, [r3, #32]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002560:	430b      	orrs	r3, r1
 8002562:	491b      	ldr	r1, [pc, #108]	; (80025d0 <HAL_RCC_OscConfig+0x4c4>)
 8002564:	4313      	orrs	r3, r2
 8002566:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002568:	4b1b      	ldr	r3, [pc, #108]	; (80025d8 <HAL_RCC_OscConfig+0x4cc>)
 800256a:	2201      	movs	r2, #1
 800256c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800256e:	f7ff faad 	bl	8001acc <HAL_GetTick>
 8002572:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002574:	e008      	b.n	8002588 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002576:	f7ff faa9 	bl	8001acc <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	2b02      	cmp	r3, #2
 8002582:	d901      	bls.n	8002588 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	e03d      	b.n	8002604 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002588:	4b11      	ldr	r3, [pc, #68]	; (80025d0 <HAL_RCC_OscConfig+0x4c4>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d0f0      	beq.n	8002576 <HAL_RCC_OscConfig+0x46a>
 8002594:	e035      	b.n	8002602 <HAL_RCC_OscConfig+0x4f6>
>>>>>>> main
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 80025e2:	4b10      	ldr	r3, [pc, #64]	; (8002624 <HAL_RCC_OscConfig+0x4cc>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e8:	f7ff fa96 	bl	8001b18 <HAL_GetTick>
 80025ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025ee:	e008      	b.n	8002602 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025f0:	f7ff fa92 	bl	8001b18 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e026      	b.n	8002650 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002602:	4b06      	ldr	r3, [pc, #24]	; (800261c <HAL_RCC_OscConfig+0x4c4>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d1f0      	bne.n	80025f0 <HAL_RCC_OscConfig+0x498>
 800260e:	e01e      	b.n	800264e <HAL_RCC_OscConfig+0x4f6>
=======
 8002596:	4b10      	ldr	r3, [pc, #64]	; (80025d8 <HAL_RCC_OscConfig+0x4cc>)
 8002598:	2200      	movs	r2, #0
 800259a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800259c:	f7ff fa96 	bl	8001acc <HAL_GetTick>
 80025a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025a2:	e008      	b.n	80025b6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025a4:	f7ff fa92 	bl	8001acc <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e026      	b.n	8002604 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025b6:	4b06      	ldr	r3, [pc, #24]	; (80025d0 <HAL_RCC_OscConfig+0x4c4>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d1f0      	bne.n	80025a4 <HAL_RCC_OscConfig+0x498>
 80025c2:	e01e      	b.n	8002602 <HAL_RCC_OscConfig+0x4f6>
>>>>>>> main
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
<<<<<<< HEAD
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	69db      	ldr	r3, [r3, #28]
 8002614:	2b01      	cmp	r3, #1
 8002616:	d107      	bne.n	8002628 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e019      	b.n	8002650 <HAL_RCC_OscConfig+0x4f8>
 800261c:	40021000 	.word	0x40021000
 8002620:	40007000 	.word	0x40007000
 8002624:	42420060 	.word	0x42420060
=======
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	69db      	ldr	r3, [r3, #28]
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d107      	bne.n	80025dc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e019      	b.n	8002604 <HAL_RCC_OscConfig+0x4f8>
 80025d0:	40021000 	.word	0x40021000
 80025d4:	40007000 	.word	0x40007000
 80025d8:	42420060 	.word	0x42420060
>>>>>>> main
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
<<<<<<< HEAD
 8002628:	4b0b      	ldr	r3, [pc, #44]	; (8002658 <HAL_RCC_OscConfig+0x500>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6a1b      	ldr	r3, [r3, #32]
 8002638:	429a      	cmp	r2, r3
 800263a:	d106      	bne.n	800264a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002646:	429a      	cmp	r2, r3
 8002648:	d001      	beq.n	800264e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e000      	b.n	8002650 <HAL_RCC_OscConfig+0x4f8>
=======
 80025dc:	4b0b      	ldr	r3, [pc, #44]	; (800260c <HAL_RCC_OscConfig+0x500>)
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6a1b      	ldr	r3, [r3, #32]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d106      	bne.n	80025fe <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d001      	beq.n	8002602 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e000      	b.n	8002604 <HAL_RCC_OscConfig+0x4f8>
>>>>>>> main
        }
      }
    }
  }

  return HAL_OK;
<<<<<<< HEAD
 800264e:	2300      	movs	r3, #0
}
 8002650:	4618      	mov	r0, r3
 8002652:	3718      	adds	r7, #24
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	40021000 	.word	0x40021000

0800265c <HAL_RCC_ClockConfig>:
=======
 8002602:	2300      	movs	r3, #0
}
 8002604:	4618      	mov	r0, r3
 8002606:	3718      	adds	r7, #24
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	40021000 	.word	0x40021000

08002610 <HAL_RCC_ClockConfig>:
>>>>>>> main
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
<<<<<<< HEAD
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	6039      	str	r1, [r7, #0]
=======
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
>>>>>>> main
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
<<<<<<< HEAD
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d101      	bne.n	8002670 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e0d0      	b.n	8002812 <HAL_RCC_ClockConfig+0x1b6>
=======
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d101      	bne.n	8002624 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e0d0      	b.n	80027c6 <HAL_RCC_ClockConfig+0x1b6>
>>>>>>> main
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 8002670:	4b6a      	ldr	r3, [pc, #424]	; (800281c <HAL_RCC_ClockConfig+0x1c0>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0307 	and.w	r3, r3, #7
 8002678:	683a      	ldr	r2, [r7, #0]
 800267a:	429a      	cmp	r2, r3
 800267c:	d910      	bls.n	80026a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800267e:	4b67      	ldr	r3, [pc, #412]	; (800281c <HAL_RCC_ClockConfig+0x1c0>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f023 0207 	bic.w	r2, r3, #7
 8002686:	4965      	ldr	r1, [pc, #404]	; (800281c <HAL_RCC_ClockConfig+0x1c0>)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	4313      	orrs	r3, r2
 800268c:	600b      	str	r3, [r1, #0]
=======
 8002624:	4b6a      	ldr	r3, [pc, #424]	; (80027d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0307 	and.w	r3, r3, #7
 800262c:	683a      	ldr	r2, [r7, #0]
 800262e:	429a      	cmp	r2, r3
 8002630:	d910      	bls.n	8002654 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002632:	4b67      	ldr	r3, [pc, #412]	; (80027d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f023 0207 	bic.w	r2, r3, #7
 800263a:	4965      	ldr	r1, [pc, #404]	; (80027d0 <HAL_RCC_ClockConfig+0x1c0>)
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	4313      	orrs	r3, r2
 8002640:	600b      	str	r3, [r1, #0]
>>>>>>> main

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 800268e:	4b63      	ldr	r3, [pc, #396]	; (800281c <HAL_RCC_ClockConfig+0x1c0>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0307 	and.w	r3, r3, #7
 8002696:	683a      	ldr	r2, [r7, #0]
 8002698:	429a      	cmp	r2, r3
 800269a:	d001      	beq.n	80026a0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e0b8      	b.n	8002812 <HAL_RCC_ClockConfig+0x1b6>
=======
 8002642:	4b63      	ldr	r3, [pc, #396]	; (80027d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0307 	and.w	r3, r3, #7
 800264a:	683a      	ldr	r2, [r7, #0]
 800264c:	429a      	cmp	r2, r3
 800264e:	d001      	beq.n	8002654 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e0b8      	b.n	80027c6 <HAL_RCC_ClockConfig+0x1b6>
>>>>>>> main
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
<<<<<<< HEAD
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0302 	and.w	r3, r3, #2
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d020      	beq.n	80026ee <HAL_RCC_ClockConfig+0x92>
=======
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0302 	and.w	r3, r3, #2
 800265c:	2b00      	cmp	r3, #0
 800265e:	d020      	beq.n	80026a2 <HAL_RCC_ClockConfig+0x92>
>>>>>>> main
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0304 	and.w	r3, r3, #4
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d005      	beq.n	80026c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026b8:	4b59      	ldr	r3, [pc, #356]	; (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	4a58      	ldr	r2, [pc, #352]	; (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 80026be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80026c2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0308 	and.w	r3, r3, #8
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d005      	beq.n	80026dc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026d0:	4b53      	ldr	r3, [pc, #332]	; (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	4a52      	ldr	r2, [pc, #328]	; (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 80026d6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80026da:	6053      	str	r3, [r2, #4]
=======
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0304 	and.w	r3, r3, #4
 8002668:	2b00      	cmp	r3, #0
 800266a:	d005      	beq.n	8002678 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800266c:	4b59      	ldr	r3, [pc, #356]	; (80027d4 <HAL_RCC_ClockConfig+0x1c4>)
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	4a58      	ldr	r2, [pc, #352]	; (80027d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002672:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002676:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0308 	and.w	r3, r3, #8
 8002680:	2b00      	cmp	r3, #0
 8002682:	d005      	beq.n	8002690 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002684:	4b53      	ldr	r3, [pc, #332]	; (80027d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	4a52      	ldr	r2, [pc, #328]	; (80027d4 <HAL_RCC_ClockConfig+0x1c4>)
 800268a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800268e:	6053      	str	r3, [r2, #4]
>>>>>>> main
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
<<<<<<< HEAD
 80026dc:	4b50      	ldr	r3, [pc, #320]	; (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	494d      	ldr	r1, [pc, #308]	; (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	604b      	str	r3, [r1, #4]
=======
 8002690:	4b50      	ldr	r3, [pc, #320]	; (80027d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	494d      	ldr	r1, [pc, #308]	; (80027d4 <HAL_RCC_ClockConfig+0x1c4>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	604b      	str	r3, [r1, #4]
>>>>>>> main
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
<<<<<<< HEAD
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0301 	and.w	r3, r3, #1
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d040      	beq.n	800277c <HAL_RCC_ClockConfig+0x120>
=======
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0301 	and.w	r3, r3, #1
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d040      	beq.n	8002730 <HAL_RCC_ClockConfig+0x120>
>>>>>>> main
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
<<<<<<< HEAD
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d107      	bne.n	8002712 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002702:	4b47      	ldr	r3, [pc, #284]	; (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d115      	bne.n	800273a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e07f      	b.n	8002812 <HAL_RCC_ClockConfig+0x1b6>
=======
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d107      	bne.n	80026c6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026b6:	4b47      	ldr	r3, [pc, #284]	; (80027d4 <HAL_RCC_ClockConfig+0x1c4>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d115      	bne.n	80026ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e07f      	b.n	80027c6 <HAL_RCC_ClockConfig+0x1b6>
>>>>>>> main
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
<<<<<<< HEAD
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	2b02      	cmp	r3, #2
 8002718:	d107      	bne.n	800272a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800271a:	4b41      	ldr	r3, [pc, #260]	; (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d109      	bne.n	800273a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e073      	b.n	8002812 <HAL_RCC_ClockConfig+0x1b6>
=======
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d107      	bne.n	80026de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026ce:	4b41      	ldr	r3, [pc, #260]	; (80027d4 <HAL_RCC_ClockConfig+0x1c4>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d109      	bne.n	80026ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e073      	b.n	80027c6 <HAL_RCC_ClockConfig+0x1b6>
>>>>>>> main
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
<<<<<<< HEAD
 800272a:	4b3d      	ldr	r3, [pc, #244]	; (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0302 	and.w	r3, r3, #2
 8002732:	2b00      	cmp	r3, #0
 8002734:	d101      	bne.n	800273a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e06b      	b.n	8002812 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800273a:	4b39      	ldr	r3, [pc, #228]	; (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f023 0203 	bic.w	r2, r3, #3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	4936      	ldr	r1, [pc, #216]	; (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 8002748:	4313      	orrs	r3, r2
 800274a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800274c:	f7ff f9e4 	bl	8001b18 <HAL_GetTick>
 8002750:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002752:	e00a      	b.n	800276a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002754:	f7ff f9e0 	bl	8001b18 <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002762:	4293      	cmp	r3, r2
 8002764:	d901      	bls.n	800276a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e053      	b.n	8002812 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800276a:	4b2d      	ldr	r3, [pc, #180]	; (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f003 020c 	and.w	r2, r3, #12
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	429a      	cmp	r2, r3
 800277a:	d1eb      	bne.n	8002754 <HAL_RCC_ClockConfig+0xf8>
=======
 80026de:	4b3d      	ldr	r3, [pc, #244]	; (80027d4 <HAL_RCC_ClockConfig+0x1c4>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d101      	bne.n	80026ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e06b      	b.n	80027c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026ee:	4b39      	ldr	r3, [pc, #228]	; (80027d4 <HAL_RCC_ClockConfig+0x1c4>)
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f023 0203 	bic.w	r2, r3, #3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	4936      	ldr	r1, [pc, #216]	; (80027d4 <HAL_RCC_ClockConfig+0x1c4>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002700:	f7ff f9e4 	bl	8001acc <HAL_GetTick>
 8002704:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002706:	e00a      	b.n	800271e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002708:	f7ff f9e0 	bl	8001acc <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	f241 3288 	movw	r2, #5000	; 0x1388
 8002716:	4293      	cmp	r3, r2
 8002718:	d901      	bls.n	800271e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e053      	b.n	80027c6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800271e:	4b2d      	ldr	r3, [pc, #180]	; (80027d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f003 020c 	and.w	r2, r3, #12
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	429a      	cmp	r2, r3
 800272e:	d1eb      	bne.n	8002708 <HAL_RCC_ClockConfig+0xf8>
>>>>>>> main
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 800277c:	4b27      	ldr	r3, [pc, #156]	; (800281c <HAL_RCC_ClockConfig+0x1c0>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0307 	and.w	r3, r3, #7
 8002784:	683a      	ldr	r2, [r7, #0]
 8002786:	429a      	cmp	r2, r3
 8002788:	d210      	bcs.n	80027ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800278a:	4b24      	ldr	r3, [pc, #144]	; (800281c <HAL_RCC_ClockConfig+0x1c0>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f023 0207 	bic.w	r2, r3, #7
 8002792:	4922      	ldr	r1, [pc, #136]	; (800281c <HAL_RCC_ClockConfig+0x1c0>)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	4313      	orrs	r3, r2
 8002798:	600b      	str	r3, [r1, #0]
=======
 8002730:	4b27      	ldr	r3, [pc, #156]	; (80027d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0307 	and.w	r3, r3, #7
 8002738:	683a      	ldr	r2, [r7, #0]
 800273a:	429a      	cmp	r2, r3
 800273c:	d210      	bcs.n	8002760 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800273e:	4b24      	ldr	r3, [pc, #144]	; (80027d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f023 0207 	bic.w	r2, r3, #7
 8002746:	4922      	ldr	r1, [pc, #136]	; (80027d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	4313      	orrs	r3, r2
 800274c:	600b      	str	r3, [r1, #0]
>>>>>>> main

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 800279a:	4b20      	ldr	r3, [pc, #128]	; (800281c <HAL_RCC_ClockConfig+0x1c0>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0307 	and.w	r3, r3, #7
 80027a2:	683a      	ldr	r2, [r7, #0]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d001      	beq.n	80027ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e032      	b.n	8002812 <HAL_RCC_ClockConfig+0x1b6>
=======
 800274e:	4b20      	ldr	r3, [pc, #128]	; (80027d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0307 	and.w	r3, r3, #7
 8002756:	683a      	ldr	r2, [r7, #0]
 8002758:	429a      	cmp	r2, r3
 800275a:	d001      	beq.n	8002760 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e032      	b.n	80027c6 <HAL_RCC_ClockConfig+0x1b6>
>>>>>>> main
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0304 	and.w	r3, r3, #4
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d008      	beq.n	80027ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027b8:	4b19      	ldr	r3, [pc, #100]	; (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	4916      	ldr	r1, [pc, #88]	; (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 80027c6:	4313      	orrs	r3, r2
 80027c8:	604b      	str	r3, [r1, #4]
=======
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0304 	and.w	r3, r3, #4
 8002768:	2b00      	cmp	r3, #0
 800276a:	d008      	beq.n	800277e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800276c:	4b19      	ldr	r3, [pc, #100]	; (80027d4 <HAL_RCC_ClockConfig+0x1c4>)
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	4916      	ldr	r1, [pc, #88]	; (80027d4 <HAL_RCC_ClockConfig+0x1c4>)
 800277a:	4313      	orrs	r3, r2
 800277c:	604b      	str	r3, [r1, #4]
>>>>>>> main
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
<<<<<<< HEAD
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0308 	and.w	r3, r3, #8
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d009      	beq.n	80027ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027d6:	4b12      	ldr	r3, [pc, #72]	; (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	00db      	lsls	r3, r3, #3
 80027e4:	490e      	ldr	r1, [pc, #56]	; (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 80027e6:	4313      	orrs	r3, r2
 80027e8:	604b      	str	r3, [r1, #4]
=======
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0308 	and.w	r3, r3, #8
 8002786:	2b00      	cmp	r3, #0
 8002788:	d009      	beq.n	800279e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800278a:	4b12      	ldr	r3, [pc, #72]	; (80027d4 <HAL_RCC_ClockConfig+0x1c4>)
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	691b      	ldr	r3, [r3, #16]
 8002796:	00db      	lsls	r3, r3, #3
 8002798:	490e      	ldr	r1, [pc, #56]	; (80027d4 <HAL_RCC_ClockConfig+0x1c4>)
 800279a:	4313      	orrs	r3, r2
 800279c:	604b      	str	r3, [r1, #4]
>>>>>>> main
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
<<<<<<< HEAD
 80027ea:	f000 f821 	bl	8002830 <HAL_RCC_GetSysClockFreq>
 80027ee:	4602      	mov	r2, r0
 80027f0:	4b0b      	ldr	r3, [pc, #44]	; (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	091b      	lsrs	r3, r3, #4
 80027f6:	f003 030f 	and.w	r3, r3, #15
 80027fa:	490a      	ldr	r1, [pc, #40]	; (8002824 <HAL_RCC_ClockConfig+0x1c8>)
 80027fc:	5ccb      	ldrb	r3, [r1, r3]
 80027fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002802:	4a09      	ldr	r2, [pc, #36]	; (8002828 <HAL_RCC_ClockConfig+0x1cc>)
 8002804:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002806:	4b09      	ldr	r3, [pc, #36]	; (800282c <HAL_RCC_ClockConfig+0x1d0>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4618      	mov	r0, r3
 800280c:	f7ff f942 	bl	8001a94 <HAL_InitTick>

  return HAL_OK;
 8002810:	2300      	movs	r3, #0
}
 8002812:	4618      	mov	r0, r3
 8002814:	3710      	adds	r7, #16
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	40022000 	.word	0x40022000
 8002820:	40021000 	.word	0x40021000
 8002824:	08004bd4 	.word	0x08004bd4
 8002828:	20000008 	.word	0x20000008
 800282c:	2000000c 	.word	0x2000000c

08002830 <HAL_RCC_GetSysClockFreq>:
=======
 800279e:	f000 f821 	bl	80027e4 <HAL_RCC_GetSysClockFreq>
 80027a2:	4602      	mov	r2, r0
 80027a4:	4b0b      	ldr	r3, [pc, #44]	; (80027d4 <HAL_RCC_ClockConfig+0x1c4>)
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	091b      	lsrs	r3, r3, #4
 80027aa:	f003 030f 	and.w	r3, r3, #15
 80027ae:	490a      	ldr	r1, [pc, #40]	; (80027d8 <HAL_RCC_ClockConfig+0x1c8>)
 80027b0:	5ccb      	ldrb	r3, [r1, r3]
 80027b2:	fa22 f303 	lsr.w	r3, r2, r3
 80027b6:	4a09      	ldr	r2, [pc, #36]	; (80027dc <HAL_RCC_ClockConfig+0x1cc>)
 80027b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80027ba:	4b09      	ldr	r3, [pc, #36]	; (80027e0 <HAL_RCC_ClockConfig+0x1d0>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4618      	mov	r0, r3
 80027c0:	f7ff f942 	bl	8001a48 <HAL_InitTick>

  return HAL_OK;
 80027c4:	2300      	movs	r3, #0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3710      	adds	r7, #16
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	40022000 	.word	0x40022000
 80027d4:	40021000 	.word	0x40021000
 80027d8:	08003758 	.word	0x08003758
 80027dc:	20000008 	.word	0x20000008
 80027e0:	2000000c 	.word	0x2000000c

080027e4 <HAL_RCC_GetSysClockFreq>:
>>>>>>> main
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
<<<<<<< HEAD
 8002830:	b480      	push	{r7}
 8002832:	b087      	sub	sp, #28
 8002834:	af00      	add	r7, sp, #0
=======
 80027e4:	b480      	push	{r7}
 80027e6:	b087      	sub	sp, #28
 80027e8:	af00      	add	r7, sp, #0
>>>>>>> main
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
<<<<<<< HEAD
 8002836:	2300      	movs	r3, #0
 8002838:	60fb      	str	r3, [r7, #12]
 800283a:	2300      	movs	r3, #0
 800283c:	60bb      	str	r3, [r7, #8]
 800283e:	2300      	movs	r3, #0
 8002840:	617b      	str	r3, [r7, #20]
 8002842:	2300      	movs	r3, #0
 8002844:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002846:	2300      	movs	r3, #0
 8002848:	613b      	str	r3, [r7, #16]
=======
 80027ea:	2300      	movs	r3, #0
 80027ec:	60fb      	str	r3, [r7, #12]
 80027ee:	2300      	movs	r3, #0
 80027f0:	60bb      	str	r3, [r7, #8]
 80027f2:	2300      	movs	r3, #0
 80027f4:	617b      	str	r3, [r7, #20]
 80027f6:	2300      	movs	r3, #0
 80027f8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80027fa:	2300      	movs	r3, #0
 80027fc:	613b      	str	r3, [r7, #16]
>>>>>>> main
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
<<<<<<< HEAD
 800284a:	4b1e      	ldr	r3, [pc, #120]	; (80028c4 <HAL_RCC_GetSysClockFreq+0x94>)
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f003 030c 	and.w	r3, r3, #12
 8002856:	2b04      	cmp	r3, #4
 8002858:	d002      	beq.n	8002860 <HAL_RCC_GetSysClockFreq+0x30>
 800285a:	2b08      	cmp	r3, #8
 800285c:	d003      	beq.n	8002866 <HAL_RCC_GetSysClockFreq+0x36>
 800285e:	e027      	b.n	80028b0 <HAL_RCC_GetSysClockFreq+0x80>
=======
 80027fe:	4b1e      	ldr	r3, [pc, #120]	; (8002878 <HAL_RCC_GetSysClockFreq+0x94>)
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	f003 030c 	and.w	r3, r3, #12
 800280a:	2b04      	cmp	r3, #4
 800280c:	d002      	beq.n	8002814 <HAL_RCC_GetSysClockFreq+0x30>
 800280e:	2b08      	cmp	r3, #8
 8002810:	d003      	beq.n	800281a <HAL_RCC_GetSysClockFreq+0x36>
 8002812:	e027      	b.n	8002864 <HAL_RCC_GetSysClockFreq+0x80>
>>>>>>> main
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
<<<<<<< HEAD
 8002860:	4b19      	ldr	r3, [pc, #100]	; (80028c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002862:	613b      	str	r3, [r7, #16]
      break;
 8002864:	e027      	b.n	80028b6 <HAL_RCC_GetSysClockFreq+0x86>
=======
 8002814:	4b19      	ldr	r3, [pc, #100]	; (800287c <HAL_RCC_GetSysClockFreq+0x98>)
 8002816:	613b      	str	r3, [r7, #16]
      break;
 8002818:	e027      	b.n	800286a <HAL_RCC_GetSysClockFreq+0x86>
>>>>>>> main
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
<<<<<<< HEAD
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	0c9b      	lsrs	r3, r3, #18
 800286a:	f003 030f 	and.w	r3, r3, #15
 800286e:	4a17      	ldr	r2, [pc, #92]	; (80028cc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002870:	5cd3      	ldrb	r3, [r2, r3]
 8002872:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d010      	beq.n	80028a0 <HAL_RCC_GetSysClockFreq+0x70>
=======
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	0c9b      	lsrs	r3, r3, #18
 800281e:	f003 030f 	and.w	r3, r3, #15
 8002822:	4a17      	ldr	r2, [pc, #92]	; (8002880 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002824:	5cd3      	ldrb	r3, [r2, r3]
 8002826:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d010      	beq.n	8002854 <HAL_RCC_GetSysClockFreq+0x70>
>>>>>>> main
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
<<<<<<< HEAD
 800287e:	4b11      	ldr	r3, [pc, #68]	; (80028c4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	0c5b      	lsrs	r3, r3, #17
 8002884:	f003 0301 	and.w	r3, r3, #1
 8002888:	4a11      	ldr	r2, [pc, #68]	; (80028d0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800288a:	5cd3      	ldrb	r3, [r2, r3]
 800288c:	60bb      	str	r3, [r7, #8]
=======
 8002832:	4b11      	ldr	r3, [pc, #68]	; (8002878 <HAL_RCC_GetSysClockFreq+0x94>)
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	0c5b      	lsrs	r3, r3, #17
 8002838:	f003 0301 	and.w	r3, r3, #1
 800283c:	4a11      	ldr	r2, [pc, #68]	; (8002884 <HAL_RCC_GetSysClockFreq+0xa0>)
 800283e:	5cd3      	ldrb	r3, [r2, r3]
 8002840:	60bb      	str	r3, [r7, #8]
>>>>>>> main
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
<<<<<<< HEAD
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a0d      	ldr	r2, [pc, #52]	; (80028c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002892:	fb03 f202 	mul.w	r2, r3, r2
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	fbb2 f3f3 	udiv	r3, r2, r3
 800289c:	617b      	str	r3, [r7, #20]
 800289e:	e004      	b.n	80028aa <HAL_RCC_GetSysClockFreq+0x7a>
=======
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a0d      	ldr	r2, [pc, #52]	; (800287c <HAL_RCC_GetSysClockFreq+0x98>)
 8002846:	fb03 f202 	mul.w	r2, r3, r2
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002850:	617b      	str	r3, [r7, #20]
 8002852:	e004      	b.n	800285e <HAL_RCC_GetSysClockFreq+0x7a>
>>>>>>> main
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
<<<<<<< HEAD
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	4a0c      	ldr	r2, [pc, #48]	; (80028d4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80028a4:	fb02 f303 	mul.w	r3, r2, r3
 80028a8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	613b      	str	r3, [r7, #16]
      break;
 80028ae:	e002      	b.n	80028b6 <HAL_RCC_GetSysClockFreq+0x86>
=======
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	4a0c      	ldr	r2, [pc, #48]	; (8002888 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002858:	fb02 f303 	mul.w	r3, r2, r3
 800285c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	613b      	str	r3, [r7, #16]
      break;
 8002862:	e002      	b.n	800286a <HAL_RCC_GetSysClockFreq+0x86>
>>>>>>> main
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< HEAD
 80028b0:	4b05      	ldr	r3, [pc, #20]	; (80028c8 <HAL_RCC_GetSysClockFreq+0x98>)
 80028b2:	613b      	str	r3, [r7, #16]
      break;
 80028b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028b6:	693b      	ldr	r3, [r7, #16]
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	371c      	adds	r7, #28
 80028bc:	46bd      	mov	sp, r7
 80028be:	bc80      	pop	{r7}
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
 80028c4:	40021000 	.word	0x40021000
 80028c8:	007a1200 	.word	0x007a1200
 80028cc:	08004be4 	.word	0x08004be4
 80028d0:	08004bf4 	.word	0x08004bf4
 80028d4:	003d0900 	.word	0x003d0900

080028d8 <RCC_Delay>:
=======
 8002864:	4b05      	ldr	r3, [pc, #20]	; (800287c <HAL_RCC_GetSysClockFreq+0x98>)
 8002866:	613b      	str	r3, [r7, #16]
      break;
 8002868:	bf00      	nop
    }
  }
  return sysclockfreq;
 800286a:	693b      	ldr	r3, [r7, #16]
}
 800286c:	4618      	mov	r0, r3
 800286e:	371c      	adds	r7, #28
 8002870:	46bd      	mov	sp, r7
 8002872:	bc80      	pop	{r7}
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	40021000 	.word	0x40021000
 800287c:	007a1200 	.word	0x007a1200
 8002880:	08003768 	.word	0x08003768
 8002884:	08003778 	.word	0x08003778
 8002888:	003d0900 	.word	0x003d0900

0800288c <RCC_Delay>:
>>>>>>> main
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
<<<<<<< HEAD
 80028d8:	b480      	push	{r7}
 80028da:	b085      	sub	sp, #20
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80028e0:	4b0a      	ldr	r3, [pc, #40]	; (800290c <RCC_Delay+0x34>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a0a      	ldr	r2, [pc, #40]	; (8002910 <RCC_Delay+0x38>)
 80028e6:	fba2 2303 	umull	r2, r3, r2, r3
 80028ea:	0a5b      	lsrs	r3, r3, #9
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	fb02 f303 	mul.w	r3, r2, r3
 80028f2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80028f4:	bf00      	nop
  }
  while (Delay --);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	1e5a      	subs	r2, r3, #1
 80028fa:	60fa      	str	r2, [r7, #12]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d1f9      	bne.n	80028f4 <RCC_Delay+0x1c>
}
 8002900:	bf00      	nop
 8002902:	bf00      	nop
 8002904:	3714      	adds	r7, #20
 8002906:	46bd      	mov	sp, r7
 8002908:	bc80      	pop	{r7}
 800290a:	4770      	bx	lr
 800290c:	20000008 	.word	0x20000008
 8002910:	10624dd3 	.word	0x10624dd3

08002914 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002914:	b480      	push	{r7}
 8002916:	b085      	sub	sp, #20
 8002918:	af00      	add	r7, sp, #0
 800291a:	4603      	mov	r3, r0
 800291c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800291e:	2300      	movs	r3, #0
 8002920:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002922:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002926:	2b84      	cmp	r3, #132	; 0x84
 8002928:	d005      	beq.n	8002936 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800292a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	4413      	add	r3, r2
 8002932:	3303      	adds	r3, #3
 8002934:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002936:	68fb      	ldr	r3, [r7, #12]
}
 8002938:	4618      	mov	r0, r3
 800293a:	3714      	adds	r7, #20
 800293c:	46bd      	mov	sp, r7
 800293e:	bc80      	pop	{r7}
 8002940:	4770      	bx	lr

08002942 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002942:	b580      	push	{r7, lr}
 8002944:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002946:	f000 fad1 	bl	8002eec <vTaskStartScheduler>
  
  return osOK;
 800294a:	2300      	movs	r3, #0
}
 800294c:	4618      	mov	r0, r3
 800294e:	bd80      	pop	{r7, pc}

08002950 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002950:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002952:	b089      	sub	sp, #36	; 0x24
 8002954:	af04      	add	r7, sp, #16
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	695b      	ldr	r3, [r3, #20]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d020      	beq.n	80029a4 <osThreadCreate+0x54>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	699b      	ldr	r3, [r3, #24]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d01c      	beq.n	80029a4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685c      	ldr	r4, [r3, #4]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	691e      	ldr	r6, [r3, #16]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800297c:	4618      	mov	r0, r3
 800297e:	f7ff ffc9 	bl	8002914 <makeFreeRtosPriority>
 8002982:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	695b      	ldr	r3, [r3, #20]
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800298c:	9202      	str	r2, [sp, #8]
 800298e:	9301      	str	r3, [sp, #4]
 8002990:	9100      	str	r1, [sp, #0]
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	4632      	mov	r2, r6
 8002996:	4629      	mov	r1, r5
 8002998:	4620      	mov	r0, r4
 800299a:	f000 f8e8 	bl	8002b6e <xTaskCreateStatic>
 800299e:	4603      	mov	r3, r0
 80029a0:	60fb      	str	r3, [r7, #12]
 80029a2:	e01c      	b.n	80029de <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	685c      	ldr	r4, [r3, #4]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80029b0:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7ff ffab 	bl	8002914 <makeFreeRtosPriority>
 80029be:	4602      	mov	r2, r0
 80029c0:	f107 030c 	add.w	r3, r7, #12
 80029c4:	9301      	str	r3, [sp, #4]
 80029c6:	9200      	str	r2, [sp, #0]
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	4632      	mov	r2, r6
 80029cc:	4629      	mov	r1, r5
 80029ce:	4620      	mov	r0, r4
 80029d0:	f000 f929 	bl	8002c26 <xTaskCreate>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d001      	beq.n	80029de <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80029da:	2300      	movs	r3, #0
 80029dc:	e000      	b.n	80029e0 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80029de:	68fb      	ldr	r3, [r7, #12]
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3714      	adds	r7, #20
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080029e8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d001      	beq.n	80029fe <osDelay+0x16>
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	e000      	b.n	8002a00 <osDelay+0x18>
 80029fe:	2301      	movs	r3, #1
 8002a00:	4618      	mov	r0, r3
 8002a02:	f000 fa3f 	bl	8002e84 <vTaskDelay>
  
  return osOK;
 8002a06:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3710      	adds	r7, #16
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f103 0208 	add.w	r2, r3, #8
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f04f 32ff 	mov.w	r2, #4294967295
 8002a28:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f103 0208 	add.w	r2, r3, #8
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f103 0208 	add.w	r2, r3, #8
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002a44:	bf00      	nop
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bc80      	pop	{r7}
 8002a4c:	4770      	bx	lr

08002a4e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002a4e:	b480      	push	{r7}
 8002a50:	b083      	sub	sp, #12
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002a5c:	bf00      	nop
 8002a5e:	370c      	adds	r7, #12
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bc80      	pop	{r7}
 8002a64:	4770      	bx	lr

08002a66 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002a66:	b480      	push	{r7}
 8002a68:	b085      	sub	sp, #20
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	6078      	str	r0, [r7, #4]
 8002a6e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	68fa      	ldr	r2, [r7, #12]
 8002a7a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	689a      	ldr	r2, [r3, #8]
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	683a      	ldr	r2, [r7, #0]
 8002a8a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	683a      	ldr	r2, [r7, #0]
 8002a90:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	1c5a      	adds	r2, r3, #1
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	601a      	str	r2, [r3, #0]
}
 8002aa2:	bf00      	nop
 8002aa4:	3714      	adds	r7, #20
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bc80      	pop	{r7}
 8002aaa:	4770      	bx	lr

08002aac <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002aac:	b480      	push	{r7}
 8002aae:	b085      	sub	sp, #20
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ac2:	d103      	bne.n	8002acc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	691b      	ldr	r3, [r3, #16]
 8002ac8:	60fb      	str	r3, [r7, #12]
 8002aca:	e00c      	b.n	8002ae6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	3308      	adds	r3, #8
 8002ad0:	60fb      	str	r3, [r7, #12]
 8002ad2:	e002      	b.n	8002ada <vListInsert+0x2e>
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	60fb      	str	r3, [r7, #12]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	68ba      	ldr	r2, [r7, #8]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d2f6      	bcs.n	8002ad4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	685a      	ldr	r2, [r3, #4]
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	683a      	ldr	r2, [r7, #0]
 8002af4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	68fa      	ldr	r2, [r7, #12]
 8002afa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	683a      	ldr	r2, [r7, #0]
 8002b00:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	1c5a      	adds	r2, r3, #1
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	601a      	str	r2, [r3, #0]
}
 8002b12:	bf00      	nop
 8002b14:	3714      	adds	r7, #20
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bc80      	pop	{r7}
 8002b1a:	4770      	bx	lr

08002b1c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b085      	sub	sp, #20
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	691b      	ldr	r3, [r3, #16]
 8002b28:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	6892      	ldr	r2, [r2, #8]
 8002b32:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	6852      	ldr	r2, [r2, #4]
 8002b3c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d103      	bne.n	8002b50 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689a      	ldr	r2, [r3, #8]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	1e5a      	subs	r2, r3, #1
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3714      	adds	r7, #20
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bc80      	pop	{r7}
 8002b6c:	4770      	bx	lr

08002b6e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	b08e      	sub	sp, #56	; 0x38
 8002b72:	af04      	add	r7, sp, #16
 8002b74:	60f8      	str	r0, [r7, #12]
 8002b76:	60b9      	str	r1, [r7, #8]
 8002b78:	607a      	str	r2, [r7, #4]
 8002b7a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d10a      	bne.n	8002b98 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b86:	f383 8811 	msr	BASEPRI, r3
 8002b8a:	f3bf 8f6f 	isb	sy
 8002b8e:	f3bf 8f4f 	dsb	sy
 8002b92:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002b94:	bf00      	nop
 8002b96:	e7fe      	b.n	8002b96 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d10a      	bne.n	8002bb4 <xTaskCreateStatic+0x46>
	__asm volatile
 8002b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ba2:	f383 8811 	msr	BASEPRI, r3
 8002ba6:	f3bf 8f6f 	isb	sy
 8002baa:	f3bf 8f4f 	dsb	sy
 8002bae:	61fb      	str	r3, [r7, #28]
}
 8002bb0:	bf00      	nop
 8002bb2:	e7fe      	b.n	8002bb2 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002bb4:	2354      	movs	r3, #84	; 0x54
 8002bb6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	2b54      	cmp	r3, #84	; 0x54
 8002bbc:	d00a      	beq.n	8002bd4 <xTaskCreateStatic+0x66>
	__asm volatile
 8002bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bc2:	f383 8811 	msr	BASEPRI, r3
 8002bc6:	f3bf 8f6f 	isb	sy
 8002bca:	f3bf 8f4f 	dsb	sy
 8002bce:	61bb      	str	r3, [r7, #24]
}
 8002bd0:	bf00      	nop
 8002bd2:	e7fe      	b.n	8002bd2 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d01e      	beq.n	8002c18 <xTaskCreateStatic+0xaa>
 8002bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d01b      	beq.n	8002c18 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002be2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002be8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bec:	2202      	movs	r2, #2
 8002bee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	9303      	str	r3, [sp, #12]
 8002bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf8:	9302      	str	r3, [sp, #8]
 8002bfa:	f107 0314 	add.w	r3, r7, #20
 8002bfe:	9301      	str	r3, [sp, #4]
 8002c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c02:	9300      	str	r3, [sp, #0]
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	68b9      	ldr	r1, [r7, #8]
 8002c0a:	68f8      	ldr	r0, [r7, #12]
 8002c0c:	f000 f850 	bl	8002cb0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002c10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002c12:	f000 f8cd 	bl	8002db0 <prvAddNewTaskToReadyList>
 8002c16:	e001      	b.n	8002c1c <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002c1c:	697b      	ldr	r3, [r7, #20]
	}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3728      	adds	r7, #40	; 0x28
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002c26:	b580      	push	{r7, lr}
 8002c28:	b08c      	sub	sp, #48	; 0x30
 8002c2a:	af04      	add	r7, sp, #16
 8002c2c:	60f8      	str	r0, [r7, #12]
 8002c2e:	60b9      	str	r1, [r7, #8]
 8002c30:	603b      	str	r3, [r7, #0]
 8002c32:	4613      	mov	r3, r2
 8002c34:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c36:	88fb      	ldrh	r3, [r7, #6]
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f000 fe88 	bl	8003950 <pvPortMalloc>
 8002c40:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d00e      	beq.n	8002c66 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002c48:	2054      	movs	r0, #84	; 0x54
 8002c4a:	f000 fe81 	bl	8003950 <pvPortMalloc>
 8002c4e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d003      	beq.n	8002c5e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	697a      	ldr	r2, [r7, #20]
 8002c5a:	631a      	str	r2, [r3, #48]	; 0x30
 8002c5c:	e005      	b.n	8002c6a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002c5e:	6978      	ldr	r0, [r7, #20]
 8002c60:	f000 ff3a 	bl	8003ad8 <vPortFree>
 8002c64:	e001      	b.n	8002c6a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002c66:	2300      	movs	r3, #0
 8002c68:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d017      	beq.n	8002ca0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002c78:	88fa      	ldrh	r2, [r7, #6]
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	9303      	str	r3, [sp, #12]
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	9302      	str	r3, [sp, #8]
 8002c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c84:	9301      	str	r3, [sp, #4]
 8002c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c88:	9300      	str	r3, [sp, #0]
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	68b9      	ldr	r1, [r7, #8]
 8002c8e:	68f8      	ldr	r0, [r7, #12]
 8002c90:	f000 f80e 	bl	8002cb0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002c94:	69f8      	ldr	r0, [r7, #28]
 8002c96:	f000 f88b 	bl	8002db0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	61bb      	str	r3, [r7, #24]
 8002c9e:	e002      	b.n	8002ca6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002ca0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ca4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002ca6:	69bb      	ldr	r3, [r7, #24]
	}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3720      	adds	r7, #32
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b088      	sub	sp, #32
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	607a      	str	r2, [r7, #4]
 8002cbc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002cc8:	3b01      	subs	r3, #1
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	4413      	add	r3, r2
 8002cce:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	f023 0307 	bic.w	r3, r3, #7
 8002cd6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	f003 0307 	and.w	r3, r3, #7
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d00a      	beq.n	8002cf8 <prvInitialiseNewTask+0x48>
	__asm volatile
 8002ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ce6:	f383 8811 	msr	BASEPRI, r3
 8002cea:	f3bf 8f6f 	isb	sy
 8002cee:	f3bf 8f4f 	dsb	sy
 8002cf2:	617b      	str	r3, [r7, #20]
}
 8002cf4:	bf00      	nop
 8002cf6:	e7fe      	b.n	8002cf6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	61fb      	str	r3, [r7, #28]
 8002cfc:	e012      	b.n	8002d24 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002cfe:	68ba      	ldr	r2, [r7, #8]
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	4413      	add	r3, r2
 8002d04:	7819      	ldrb	r1, [r3, #0]
 8002d06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	4413      	add	r3, r2
 8002d0c:	3334      	adds	r3, #52	; 0x34
 8002d0e:	460a      	mov	r2, r1
 8002d10:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002d12:	68ba      	ldr	r2, [r7, #8]
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	4413      	add	r3, r2
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d006      	beq.n	8002d2c <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	3301      	adds	r3, #1
 8002d22:	61fb      	str	r3, [r7, #28]
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	2b0f      	cmp	r3, #15
 8002d28:	d9e9      	bls.n	8002cfe <prvInitialiseNewTask+0x4e>
 8002d2a:	e000      	b.n	8002d2e <prvInitialiseNewTask+0x7e>
		{
			break;
 8002d2c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d38:	2b06      	cmp	r3, #6
 8002d3a:	d901      	bls.n	8002d40 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002d3c:	2306      	movs	r3, #6
 8002d3e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d44:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d4a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d4e:	2200      	movs	r2, #0
 8002d50:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d54:	3304      	adds	r3, #4
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7ff fe79 	bl	8002a4e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d5e:	3318      	adds	r3, #24
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7ff fe74 	bl	8002a4e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d6a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d6e:	f1c3 0207 	rsb	r2, r3, #7
 8002d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d74:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d7a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d7e:	2200      	movs	r2, #0
 8002d80:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002d8a:	683a      	ldr	r2, [r7, #0]
 8002d8c:	68f9      	ldr	r1, [r7, #12]
 8002d8e:	69b8      	ldr	r0, [r7, #24]
 8002d90:	f000 fc2c 	bl	80035ec <pxPortInitialiseStack>
 8002d94:	4602      	mov	r2, r0
 8002d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d98:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d002      	beq.n	8002da6 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002da2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002da4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002da6:	bf00      	nop
 8002da8:	3720      	adds	r7, #32
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
	...

08002db0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002db8:	f000 fd08 	bl	80037cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002dbc:	4b2a      	ldr	r3, [pc, #168]	; (8002e68 <prvAddNewTaskToReadyList+0xb8>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	4a29      	ldr	r2, [pc, #164]	; (8002e68 <prvAddNewTaskToReadyList+0xb8>)
 8002dc4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002dc6:	4b29      	ldr	r3, [pc, #164]	; (8002e6c <prvAddNewTaskToReadyList+0xbc>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d109      	bne.n	8002de2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002dce:	4a27      	ldr	r2, [pc, #156]	; (8002e6c <prvAddNewTaskToReadyList+0xbc>)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002dd4:	4b24      	ldr	r3, [pc, #144]	; (8002e68 <prvAddNewTaskToReadyList+0xb8>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d110      	bne.n	8002dfe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002ddc:	f000 fac0 	bl	8003360 <prvInitialiseTaskLists>
 8002de0:	e00d      	b.n	8002dfe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002de2:	4b23      	ldr	r3, [pc, #140]	; (8002e70 <prvAddNewTaskToReadyList+0xc0>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d109      	bne.n	8002dfe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002dea:	4b20      	ldr	r3, [pc, #128]	; (8002e6c <prvAddNewTaskToReadyList+0xbc>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d802      	bhi.n	8002dfe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002df8:	4a1c      	ldr	r2, [pc, #112]	; (8002e6c <prvAddNewTaskToReadyList+0xbc>)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002dfe:	4b1d      	ldr	r3, [pc, #116]	; (8002e74 <prvAddNewTaskToReadyList+0xc4>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	3301      	adds	r3, #1
 8002e04:	4a1b      	ldr	r2, [pc, #108]	; (8002e74 <prvAddNewTaskToReadyList+0xc4>)
 8002e06:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	409a      	lsls	r2, r3
 8002e10:	4b19      	ldr	r3, [pc, #100]	; (8002e78 <prvAddNewTaskToReadyList+0xc8>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	4a18      	ldr	r2, [pc, #96]	; (8002e78 <prvAddNewTaskToReadyList+0xc8>)
 8002e18:	6013      	str	r3, [r2, #0]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e1e:	4613      	mov	r3, r2
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	4413      	add	r3, r2
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	4a15      	ldr	r2, [pc, #84]	; (8002e7c <prvAddNewTaskToReadyList+0xcc>)
 8002e28:	441a      	add	r2, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	3304      	adds	r3, #4
 8002e2e:	4619      	mov	r1, r3
 8002e30:	4610      	mov	r0, r2
 8002e32:	f7ff fe18 	bl	8002a66 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002e36:	f000 fcf9 	bl	800382c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002e3a:	4b0d      	ldr	r3, [pc, #52]	; (8002e70 <prvAddNewTaskToReadyList+0xc0>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d00e      	beq.n	8002e60 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002e42:	4b0a      	ldr	r3, [pc, #40]	; (8002e6c <prvAddNewTaskToReadyList+0xbc>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d207      	bcs.n	8002e60 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002e50:	4b0b      	ldr	r3, [pc, #44]	; (8002e80 <prvAddNewTaskToReadyList+0xd0>)
 8002e52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e56:	601a      	str	r2, [r3, #0]
 8002e58:	f3bf 8f4f 	dsb	sy
 8002e5c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002e60:	bf00      	nop
 8002e62:	3708      	adds	r7, #8
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	200004a0 	.word	0x200004a0
 8002e6c:	200003a0 	.word	0x200003a0
 8002e70:	200004ac 	.word	0x200004ac
 8002e74:	200004bc 	.word	0x200004bc
 8002e78:	200004a8 	.word	0x200004a8
 8002e7c:	200003a4 	.word	0x200003a4
 8002e80:	e000ed04 	.word	0xe000ed04

08002e84 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d017      	beq.n	8002ec6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002e96:	4b13      	ldr	r3, [pc, #76]	; (8002ee4 <vTaskDelay+0x60>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00a      	beq.n	8002eb4 <vTaskDelay+0x30>
	__asm volatile
 8002e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ea2:	f383 8811 	msr	BASEPRI, r3
 8002ea6:	f3bf 8f6f 	isb	sy
 8002eaa:	f3bf 8f4f 	dsb	sy
 8002eae:	60bb      	str	r3, [r7, #8]
}
 8002eb0:	bf00      	nop
 8002eb2:	e7fe      	b.n	8002eb2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002eb4:	f000 f87a 	bl	8002fac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002eb8:	2100      	movs	r1, #0
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f000 fb30 	bl	8003520 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002ec0:	f000 f882 	bl	8002fc8 <xTaskResumeAll>
 8002ec4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d107      	bne.n	8002edc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002ecc:	4b06      	ldr	r3, [pc, #24]	; (8002ee8 <vTaskDelay+0x64>)
 8002ece:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ed2:	601a      	str	r2, [r3, #0]
 8002ed4:	f3bf 8f4f 	dsb	sy
 8002ed8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002edc:	bf00      	nop
 8002ede:	3710      	adds	r7, #16
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	200004c8 	.word	0x200004c8
 8002ee8:	e000ed04 	.word	0xe000ed04

08002eec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b08a      	sub	sp, #40	; 0x28
 8002ef0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002efa:	463a      	mov	r2, r7
 8002efc:	1d39      	adds	r1, r7, #4
 8002efe:	f107 0308 	add.w	r3, r7, #8
 8002f02:	4618      	mov	r0, r3
 8002f04:	f7fe f834 	bl	8000f70 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002f08:	6839      	ldr	r1, [r7, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	68ba      	ldr	r2, [r7, #8]
 8002f0e:	9202      	str	r2, [sp, #8]
 8002f10:	9301      	str	r3, [sp, #4]
 8002f12:	2300      	movs	r3, #0
 8002f14:	9300      	str	r3, [sp, #0]
 8002f16:	2300      	movs	r3, #0
 8002f18:	460a      	mov	r2, r1
 8002f1a:	491e      	ldr	r1, [pc, #120]	; (8002f94 <vTaskStartScheduler+0xa8>)
 8002f1c:	481e      	ldr	r0, [pc, #120]	; (8002f98 <vTaskStartScheduler+0xac>)
 8002f1e:	f7ff fe26 	bl	8002b6e <xTaskCreateStatic>
 8002f22:	4603      	mov	r3, r0
 8002f24:	4a1d      	ldr	r2, [pc, #116]	; (8002f9c <vTaskStartScheduler+0xb0>)
 8002f26:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002f28:	4b1c      	ldr	r3, [pc, #112]	; (8002f9c <vTaskStartScheduler+0xb0>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d002      	beq.n	8002f36 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002f30:	2301      	movs	r3, #1
 8002f32:	617b      	str	r3, [r7, #20]
 8002f34:	e001      	b.n	8002f3a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002f36:	2300      	movs	r3, #0
 8002f38:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d116      	bne.n	8002f6e <vTaskStartScheduler+0x82>
	__asm volatile
 8002f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f44:	f383 8811 	msr	BASEPRI, r3
 8002f48:	f3bf 8f6f 	isb	sy
 8002f4c:	f3bf 8f4f 	dsb	sy
 8002f50:	613b      	str	r3, [r7, #16]
}
 8002f52:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002f54:	4b12      	ldr	r3, [pc, #72]	; (8002fa0 <vTaskStartScheduler+0xb4>)
 8002f56:	f04f 32ff 	mov.w	r2, #4294967295
 8002f5a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002f5c:	4b11      	ldr	r3, [pc, #68]	; (8002fa4 <vTaskStartScheduler+0xb8>)
 8002f5e:	2201      	movs	r2, #1
 8002f60:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002f62:	4b11      	ldr	r3, [pc, #68]	; (8002fa8 <vTaskStartScheduler+0xbc>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002f68:	f000 fbbe 	bl	80036e8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002f6c:	e00e      	b.n	8002f8c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f74:	d10a      	bne.n	8002f8c <vTaskStartScheduler+0xa0>
	__asm volatile
 8002f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f7a:	f383 8811 	msr	BASEPRI, r3
 8002f7e:	f3bf 8f6f 	isb	sy
 8002f82:	f3bf 8f4f 	dsb	sy
 8002f86:	60fb      	str	r3, [r7, #12]
}
 8002f88:	bf00      	nop
 8002f8a:	e7fe      	b.n	8002f8a <vTaskStartScheduler+0x9e>
}
 8002f8c:	bf00      	nop
 8002f8e:	3718      	adds	r7, #24
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	08004bcc 	.word	0x08004bcc
 8002f98:	08003331 	.word	0x08003331
 8002f9c:	200004c4 	.word	0x200004c4
 8002fa0:	200004c0 	.word	0x200004c0
 8002fa4:	200004ac 	.word	0x200004ac
 8002fa8:	200004a4 	.word	0x200004a4

08002fac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002fac:	b480      	push	{r7}
 8002fae:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002fb0:	4b04      	ldr	r3, [pc, #16]	; (8002fc4 <vTaskSuspendAll+0x18>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	4a03      	ldr	r2, [pc, #12]	; (8002fc4 <vTaskSuspendAll+0x18>)
 8002fb8:	6013      	str	r3, [r2, #0]
}
 8002fba:	bf00      	nop
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bc80      	pop	{r7}
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	200004c8 	.word	0x200004c8

08002fc8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002fd6:	4b41      	ldr	r3, [pc, #260]	; (80030dc <xTaskResumeAll+0x114>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d10a      	bne.n	8002ff4 <xTaskResumeAll+0x2c>
	__asm volatile
 8002fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fe2:	f383 8811 	msr	BASEPRI, r3
 8002fe6:	f3bf 8f6f 	isb	sy
 8002fea:	f3bf 8f4f 	dsb	sy
 8002fee:	603b      	str	r3, [r7, #0]
}
 8002ff0:	bf00      	nop
 8002ff2:	e7fe      	b.n	8002ff2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002ff4:	f000 fbea 	bl	80037cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002ff8:	4b38      	ldr	r3, [pc, #224]	; (80030dc <xTaskResumeAll+0x114>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	3b01      	subs	r3, #1
 8002ffe:	4a37      	ldr	r2, [pc, #220]	; (80030dc <xTaskResumeAll+0x114>)
 8003000:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003002:	4b36      	ldr	r3, [pc, #216]	; (80030dc <xTaskResumeAll+0x114>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d161      	bne.n	80030ce <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800300a:	4b35      	ldr	r3, [pc, #212]	; (80030e0 <xTaskResumeAll+0x118>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d05d      	beq.n	80030ce <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003012:	e02e      	b.n	8003072 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003014:	4b33      	ldr	r3, [pc, #204]	; (80030e4 <xTaskResumeAll+0x11c>)
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	3318      	adds	r3, #24
 8003020:	4618      	mov	r0, r3
 8003022:	f7ff fd7b 	bl	8002b1c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	3304      	adds	r3, #4
 800302a:	4618      	mov	r0, r3
 800302c:	f7ff fd76 	bl	8002b1c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003034:	2201      	movs	r2, #1
 8003036:	409a      	lsls	r2, r3
 8003038:	4b2b      	ldr	r3, [pc, #172]	; (80030e8 <xTaskResumeAll+0x120>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4313      	orrs	r3, r2
 800303e:	4a2a      	ldr	r2, [pc, #168]	; (80030e8 <xTaskResumeAll+0x120>)
 8003040:	6013      	str	r3, [r2, #0]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003046:	4613      	mov	r3, r2
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	4413      	add	r3, r2
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	4a27      	ldr	r2, [pc, #156]	; (80030ec <xTaskResumeAll+0x124>)
 8003050:	441a      	add	r2, r3
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	3304      	adds	r3, #4
 8003056:	4619      	mov	r1, r3
 8003058:	4610      	mov	r0, r2
 800305a:	f7ff fd04 	bl	8002a66 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003062:	4b23      	ldr	r3, [pc, #140]	; (80030f0 <xTaskResumeAll+0x128>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003068:	429a      	cmp	r2, r3
 800306a:	d302      	bcc.n	8003072 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800306c:	4b21      	ldr	r3, [pc, #132]	; (80030f4 <xTaskResumeAll+0x12c>)
 800306e:	2201      	movs	r2, #1
 8003070:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003072:	4b1c      	ldr	r3, [pc, #112]	; (80030e4 <xTaskResumeAll+0x11c>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d1cc      	bne.n	8003014 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d001      	beq.n	8003084 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003080:	f000 fa0c 	bl	800349c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003084:	4b1c      	ldr	r3, [pc, #112]	; (80030f8 <xTaskResumeAll+0x130>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d010      	beq.n	80030b2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003090:	f000 f836 	bl	8003100 <xTaskIncrementTick>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d002      	beq.n	80030a0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800309a:	4b16      	ldr	r3, [pc, #88]	; (80030f4 <xTaskResumeAll+0x12c>)
 800309c:	2201      	movs	r2, #1
 800309e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	3b01      	subs	r3, #1
 80030a4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d1f1      	bne.n	8003090 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80030ac:	4b12      	ldr	r3, [pc, #72]	; (80030f8 <xTaskResumeAll+0x130>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80030b2:	4b10      	ldr	r3, [pc, #64]	; (80030f4 <xTaskResumeAll+0x12c>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d009      	beq.n	80030ce <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80030ba:	2301      	movs	r3, #1
 80030bc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80030be:	4b0f      	ldr	r3, [pc, #60]	; (80030fc <xTaskResumeAll+0x134>)
 80030c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030c4:	601a      	str	r2, [r3, #0]
 80030c6:	f3bf 8f4f 	dsb	sy
 80030ca:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80030ce:	f000 fbad 	bl	800382c <vPortExitCritical>

	return xAlreadyYielded;
 80030d2:	68bb      	ldr	r3, [r7, #8]
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3710      	adds	r7, #16
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	200004c8 	.word	0x200004c8
 80030e0:	200004a0 	.word	0x200004a0
 80030e4:	20000460 	.word	0x20000460
 80030e8:	200004a8 	.word	0x200004a8
 80030ec:	200003a4 	.word	0x200003a4
 80030f0:	200003a0 	.word	0x200003a0
 80030f4:	200004b4 	.word	0x200004b4
 80030f8:	200004b0 	.word	0x200004b0
 80030fc:	e000ed04 	.word	0xe000ed04

08003100 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b086      	sub	sp, #24
 8003104:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003106:	2300      	movs	r3, #0
 8003108:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800310a:	4b51      	ldr	r3, [pc, #324]	; (8003250 <xTaskIncrementTick+0x150>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	2b00      	cmp	r3, #0
 8003110:	f040 808d 	bne.w	800322e <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003114:	4b4f      	ldr	r3, [pc, #316]	; (8003254 <xTaskIncrementTick+0x154>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	3301      	adds	r3, #1
 800311a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800311c:	4a4d      	ldr	r2, [pc, #308]	; (8003254 <xTaskIncrementTick+0x154>)
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d120      	bne.n	800316a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003128:	4b4b      	ldr	r3, [pc, #300]	; (8003258 <xTaskIncrementTick+0x158>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d00a      	beq.n	8003148 <xTaskIncrementTick+0x48>
	__asm volatile
 8003132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003136:	f383 8811 	msr	BASEPRI, r3
 800313a:	f3bf 8f6f 	isb	sy
 800313e:	f3bf 8f4f 	dsb	sy
 8003142:	603b      	str	r3, [r7, #0]
}
 8003144:	bf00      	nop
 8003146:	e7fe      	b.n	8003146 <xTaskIncrementTick+0x46>
 8003148:	4b43      	ldr	r3, [pc, #268]	; (8003258 <xTaskIncrementTick+0x158>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	60fb      	str	r3, [r7, #12]
 800314e:	4b43      	ldr	r3, [pc, #268]	; (800325c <xTaskIncrementTick+0x15c>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a41      	ldr	r2, [pc, #260]	; (8003258 <xTaskIncrementTick+0x158>)
 8003154:	6013      	str	r3, [r2, #0]
 8003156:	4a41      	ldr	r2, [pc, #260]	; (800325c <xTaskIncrementTick+0x15c>)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6013      	str	r3, [r2, #0]
 800315c:	4b40      	ldr	r3, [pc, #256]	; (8003260 <xTaskIncrementTick+0x160>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	3301      	adds	r3, #1
 8003162:	4a3f      	ldr	r2, [pc, #252]	; (8003260 <xTaskIncrementTick+0x160>)
 8003164:	6013      	str	r3, [r2, #0]
 8003166:	f000 f999 	bl	800349c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800316a:	4b3e      	ldr	r3, [pc, #248]	; (8003264 <xTaskIncrementTick+0x164>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	693a      	ldr	r2, [r7, #16]
 8003170:	429a      	cmp	r2, r3
 8003172:	d34d      	bcc.n	8003210 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003174:	4b38      	ldr	r3, [pc, #224]	; (8003258 <xTaskIncrementTick+0x158>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d101      	bne.n	8003182 <xTaskIncrementTick+0x82>
 800317e:	2301      	movs	r3, #1
 8003180:	e000      	b.n	8003184 <xTaskIncrementTick+0x84>
 8003182:	2300      	movs	r3, #0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d004      	beq.n	8003192 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003188:	4b36      	ldr	r3, [pc, #216]	; (8003264 <xTaskIncrementTick+0x164>)
 800318a:	f04f 32ff 	mov.w	r2, #4294967295
 800318e:	601a      	str	r2, [r3, #0]
					break;
 8003190:	e03e      	b.n	8003210 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003192:	4b31      	ldr	r3, [pc, #196]	; (8003258 <xTaskIncrementTick+0x158>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80031a2:	693a      	ldr	r2, [r7, #16]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d203      	bcs.n	80031b2 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80031aa:	4a2e      	ldr	r2, [pc, #184]	; (8003264 <xTaskIncrementTick+0x164>)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6013      	str	r3, [r2, #0]
						break;
 80031b0:	e02e      	b.n	8003210 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	3304      	adds	r3, #4
 80031b6:	4618      	mov	r0, r3
 80031b8:	f7ff fcb0 	bl	8002b1c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d004      	beq.n	80031ce <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	3318      	adds	r3, #24
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7ff fca7 	bl	8002b1c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d2:	2201      	movs	r2, #1
 80031d4:	409a      	lsls	r2, r3
 80031d6:	4b24      	ldr	r3, [pc, #144]	; (8003268 <xTaskIncrementTick+0x168>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4313      	orrs	r3, r2
 80031dc:	4a22      	ldr	r2, [pc, #136]	; (8003268 <xTaskIncrementTick+0x168>)
 80031de:	6013      	str	r3, [r2, #0]
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031e4:	4613      	mov	r3, r2
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	4413      	add	r3, r2
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	4a1f      	ldr	r2, [pc, #124]	; (800326c <xTaskIncrementTick+0x16c>)
 80031ee:	441a      	add	r2, r3
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	3304      	adds	r3, #4
 80031f4:	4619      	mov	r1, r3
 80031f6:	4610      	mov	r0, r2
 80031f8:	f7ff fc35 	bl	8002a66 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003200:	4b1b      	ldr	r3, [pc, #108]	; (8003270 <xTaskIncrementTick+0x170>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003206:	429a      	cmp	r2, r3
 8003208:	d3b4      	bcc.n	8003174 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800320a:	2301      	movs	r3, #1
 800320c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800320e:	e7b1      	b.n	8003174 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003210:	4b17      	ldr	r3, [pc, #92]	; (8003270 <xTaskIncrementTick+0x170>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003216:	4915      	ldr	r1, [pc, #84]	; (800326c <xTaskIncrementTick+0x16c>)
 8003218:	4613      	mov	r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	4413      	add	r3, r2
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	440b      	add	r3, r1
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2b01      	cmp	r3, #1
 8003226:	d907      	bls.n	8003238 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8003228:	2301      	movs	r3, #1
 800322a:	617b      	str	r3, [r7, #20]
 800322c:	e004      	b.n	8003238 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800322e:	4b11      	ldr	r3, [pc, #68]	; (8003274 <xTaskIncrementTick+0x174>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	3301      	adds	r3, #1
 8003234:	4a0f      	ldr	r2, [pc, #60]	; (8003274 <xTaskIncrementTick+0x174>)
 8003236:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003238:	4b0f      	ldr	r3, [pc, #60]	; (8003278 <xTaskIncrementTick+0x178>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d001      	beq.n	8003244 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8003240:	2301      	movs	r3, #1
 8003242:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003244:	697b      	ldr	r3, [r7, #20]
}
 8003246:	4618      	mov	r0, r3
 8003248:	3718      	adds	r7, #24
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	200004c8 	.word	0x200004c8
 8003254:	200004a4 	.word	0x200004a4
 8003258:	20000458 	.word	0x20000458
 800325c:	2000045c 	.word	0x2000045c
 8003260:	200004b8 	.word	0x200004b8
 8003264:	200004c0 	.word	0x200004c0
 8003268:	200004a8 	.word	0x200004a8
 800326c:	200003a4 	.word	0x200003a4
 8003270:	200003a0 	.word	0x200003a0
 8003274:	200004b0 	.word	0x200004b0
 8003278:	200004b4 	.word	0x200004b4

0800327c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800327c:	b480      	push	{r7}
 800327e:	b087      	sub	sp, #28
 8003280:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003282:	4b26      	ldr	r3, [pc, #152]	; (800331c <vTaskSwitchContext+0xa0>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d003      	beq.n	8003292 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800328a:	4b25      	ldr	r3, [pc, #148]	; (8003320 <vTaskSwitchContext+0xa4>)
 800328c:	2201      	movs	r2, #1
 800328e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003290:	e03f      	b.n	8003312 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8003292:	4b23      	ldr	r3, [pc, #140]	; (8003320 <vTaskSwitchContext+0xa4>)
 8003294:	2200      	movs	r2, #0
 8003296:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003298:	4b22      	ldr	r3, [pc, #136]	; (8003324 <vTaskSwitchContext+0xa8>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	fab3 f383 	clz	r3, r3
 80032a4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80032a6:	7afb      	ldrb	r3, [r7, #11]
 80032a8:	f1c3 031f 	rsb	r3, r3, #31
 80032ac:	617b      	str	r3, [r7, #20]
 80032ae:	491e      	ldr	r1, [pc, #120]	; (8003328 <vTaskSwitchContext+0xac>)
 80032b0:	697a      	ldr	r2, [r7, #20]
 80032b2:	4613      	mov	r3, r2
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	4413      	add	r3, r2
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	440b      	add	r3, r1
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d10a      	bne.n	80032d8 <vTaskSwitchContext+0x5c>
	__asm volatile
 80032c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032c6:	f383 8811 	msr	BASEPRI, r3
 80032ca:	f3bf 8f6f 	isb	sy
 80032ce:	f3bf 8f4f 	dsb	sy
 80032d2:	607b      	str	r3, [r7, #4]
}
 80032d4:	bf00      	nop
 80032d6:	e7fe      	b.n	80032d6 <vTaskSwitchContext+0x5a>
 80032d8:	697a      	ldr	r2, [r7, #20]
 80032da:	4613      	mov	r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	4413      	add	r3, r2
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	4a11      	ldr	r2, [pc, #68]	; (8003328 <vTaskSwitchContext+0xac>)
 80032e4:	4413      	add	r3, r2
 80032e6:	613b      	str	r3, [r7, #16]
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	685a      	ldr	r2, [r3, #4]
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	605a      	str	r2, [r3, #4]
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	685a      	ldr	r2, [r3, #4]
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	3308      	adds	r3, #8
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d104      	bne.n	8003308 <vTaskSwitchContext+0x8c>
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	685a      	ldr	r2, [r3, #4]
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	605a      	str	r2, [r3, #4]
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	4a07      	ldr	r2, [pc, #28]	; (800332c <vTaskSwitchContext+0xb0>)
 8003310:	6013      	str	r3, [r2, #0]
}
 8003312:	bf00      	nop
 8003314:	371c      	adds	r7, #28
 8003316:	46bd      	mov	sp, r7
 8003318:	bc80      	pop	{r7}
 800331a:	4770      	bx	lr
 800331c:	200004c8 	.word	0x200004c8
 8003320:	200004b4 	.word	0x200004b4
 8003324:	200004a8 	.word	0x200004a8
 8003328:	200003a4 	.word	0x200003a4
 800332c:	200003a0 	.word	0x200003a0

08003330 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003338:	f000 f852 	bl	80033e0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800333c:	4b06      	ldr	r3, [pc, #24]	; (8003358 <prvIdleTask+0x28>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2b01      	cmp	r3, #1
 8003342:	d9f9      	bls.n	8003338 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003344:	4b05      	ldr	r3, [pc, #20]	; (800335c <prvIdleTask+0x2c>)
 8003346:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800334a:	601a      	str	r2, [r3, #0]
 800334c:	f3bf 8f4f 	dsb	sy
 8003350:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003354:	e7f0      	b.n	8003338 <prvIdleTask+0x8>
 8003356:	bf00      	nop
 8003358:	200003a4 	.word	0x200003a4
 800335c:	e000ed04 	.word	0xe000ed04

08003360 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003366:	2300      	movs	r3, #0
 8003368:	607b      	str	r3, [r7, #4]
 800336a:	e00c      	b.n	8003386 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	4613      	mov	r3, r2
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	4413      	add	r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	4a12      	ldr	r2, [pc, #72]	; (80033c0 <prvInitialiseTaskLists+0x60>)
 8003378:	4413      	add	r3, r2
 800337a:	4618      	mov	r0, r3
 800337c:	f7ff fb48 	bl	8002a10 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	3301      	adds	r3, #1
 8003384:	607b      	str	r3, [r7, #4]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2b06      	cmp	r3, #6
 800338a:	d9ef      	bls.n	800336c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800338c:	480d      	ldr	r0, [pc, #52]	; (80033c4 <prvInitialiseTaskLists+0x64>)
 800338e:	f7ff fb3f 	bl	8002a10 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003392:	480d      	ldr	r0, [pc, #52]	; (80033c8 <prvInitialiseTaskLists+0x68>)
 8003394:	f7ff fb3c 	bl	8002a10 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003398:	480c      	ldr	r0, [pc, #48]	; (80033cc <prvInitialiseTaskLists+0x6c>)
 800339a:	f7ff fb39 	bl	8002a10 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800339e:	480c      	ldr	r0, [pc, #48]	; (80033d0 <prvInitialiseTaskLists+0x70>)
 80033a0:	f7ff fb36 	bl	8002a10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80033a4:	480b      	ldr	r0, [pc, #44]	; (80033d4 <prvInitialiseTaskLists+0x74>)
 80033a6:	f7ff fb33 	bl	8002a10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80033aa:	4b0b      	ldr	r3, [pc, #44]	; (80033d8 <prvInitialiseTaskLists+0x78>)
 80033ac:	4a05      	ldr	r2, [pc, #20]	; (80033c4 <prvInitialiseTaskLists+0x64>)
 80033ae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80033b0:	4b0a      	ldr	r3, [pc, #40]	; (80033dc <prvInitialiseTaskLists+0x7c>)
 80033b2:	4a05      	ldr	r2, [pc, #20]	; (80033c8 <prvInitialiseTaskLists+0x68>)
 80033b4:	601a      	str	r2, [r3, #0]
}
 80033b6:	bf00      	nop
 80033b8:	3708      	adds	r7, #8
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	200003a4 	.word	0x200003a4
 80033c4:	20000430 	.word	0x20000430
 80033c8:	20000444 	.word	0x20000444
 80033cc:	20000460 	.word	0x20000460
 80033d0:	20000474 	.word	0x20000474
 80033d4:	2000048c 	.word	0x2000048c
 80033d8:	20000458 	.word	0x20000458
 80033dc:	2000045c 	.word	0x2000045c

080033e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80033e6:	e019      	b.n	800341c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80033e8:	f000 f9f0 	bl	80037cc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80033ec:	4b10      	ldr	r3, [pc, #64]	; (8003430 <prvCheckTasksWaitingTermination+0x50>)
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	3304      	adds	r3, #4
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7ff fb8f 	bl	8002b1c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80033fe:	4b0d      	ldr	r3, [pc, #52]	; (8003434 <prvCheckTasksWaitingTermination+0x54>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	3b01      	subs	r3, #1
 8003404:	4a0b      	ldr	r2, [pc, #44]	; (8003434 <prvCheckTasksWaitingTermination+0x54>)
 8003406:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003408:	4b0b      	ldr	r3, [pc, #44]	; (8003438 <prvCheckTasksWaitingTermination+0x58>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	3b01      	subs	r3, #1
 800340e:	4a0a      	ldr	r2, [pc, #40]	; (8003438 <prvCheckTasksWaitingTermination+0x58>)
 8003410:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003412:	f000 fa0b 	bl	800382c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f000 f810 	bl	800343c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800341c:	4b06      	ldr	r3, [pc, #24]	; (8003438 <prvCheckTasksWaitingTermination+0x58>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d1e1      	bne.n	80033e8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003424:	bf00      	nop
 8003426:	bf00      	nop
 8003428:	3708      	adds	r7, #8
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	20000474 	.word	0x20000474
 8003434:	200004a0 	.word	0x200004a0
 8003438:	20000488 	.word	0x20000488

0800343c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800344a:	2b00      	cmp	r3, #0
 800344c:	d108      	bne.n	8003460 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003452:	4618      	mov	r0, r3
 8003454:	f000 fb40 	bl	8003ad8 <vPortFree>
				vPortFree( pxTCB );
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f000 fb3d 	bl	8003ad8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800345e:	e018      	b.n	8003492 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003466:	2b01      	cmp	r3, #1
 8003468:	d103      	bne.n	8003472 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f000 fb34 	bl	8003ad8 <vPortFree>
	}
 8003470:	e00f      	b.n	8003492 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003478:	2b02      	cmp	r3, #2
 800347a:	d00a      	beq.n	8003492 <prvDeleteTCB+0x56>
	__asm volatile
 800347c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003480:	f383 8811 	msr	BASEPRI, r3
 8003484:	f3bf 8f6f 	isb	sy
 8003488:	f3bf 8f4f 	dsb	sy
 800348c:	60fb      	str	r3, [r7, #12]
}
 800348e:	bf00      	nop
 8003490:	e7fe      	b.n	8003490 <prvDeleteTCB+0x54>
	}
 8003492:	bf00      	nop
 8003494:	3710      	adds	r7, #16
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
	...

0800349c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80034a2:	4b0e      	ldr	r3, [pc, #56]	; (80034dc <prvResetNextTaskUnblockTime+0x40>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d101      	bne.n	80034b0 <prvResetNextTaskUnblockTime+0x14>
 80034ac:	2301      	movs	r3, #1
 80034ae:	e000      	b.n	80034b2 <prvResetNextTaskUnblockTime+0x16>
 80034b0:	2300      	movs	r3, #0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d004      	beq.n	80034c0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80034b6:	4b0a      	ldr	r3, [pc, #40]	; (80034e0 <prvResetNextTaskUnblockTime+0x44>)
 80034b8:	f04f 32ff 	mov.w	r2, #4294967295
 80034bc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80034be:	e008      	b.n	80034d2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80034c0:	4b06      	ldr	r3, [pc, #24]	; (80034dc <prvResetNextTaskUnblockTime+0x40>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	4a04      	ldr	r2, [pc, #16]	; (80034e0 <prvResetNextTaskUnblockTime+0x44>)
 80034d0:	6013      	str	r3, [r2, #0]
}
 80034d2:	bf00      	nop
 80034d4:	370c      	adds	r7, #12
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bc80      	pop	{r7}
 80034da:	4770      	bx	lr
 80034dc:	20000458 	.word	0x20000458
 80034e0:	200004c0 	.word	0x200004c0

080034e4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80034ea:	4b0b      	ldr	r3, [pc, #44]	; (8003518 <xTaskGetSchedulerState+0x34>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d102      	bne.n	80034f8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80034f2:	2301      	movs	r3, #1
 80034f4:	607b      	str	r3, [r7, #4]
 80034f6:	e008      	b.n	800350a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034f8:	4b08      	ldr	r3, [pc, #32]	; (800351c <xTaskGetSchedulerState+0x38>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d102      	bne.n	8003506 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003500:	2302      	movs	r3, #2
 8003502:	607b      	str	r3, [r7, #4]
 8003504:	e001      	b.n	800350a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003506:	2300      	movs	r3, #0
 8003508:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800350a:	687b      	ldr	r3, [r7, #4]
	}
 800350c:	4618      	mov	r0, r3
 800350e:	370c      	adds	r7, #12
 8003510:	46bd      	mov	sp, r7
 8003512:	bc80      	pop	{r7}
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop
 8003518:	200004ac 	.word	0x200004ac
 800351c:	200004c8 	.word	0x200004c8

08003520 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800352a:	4b29      	ldr	r3, [pc, #164]	; (80035d0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003530:	4b28      	ldr	r3, [pc, #160]	; (80035d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	3304      	adds	r3, #4
 8003536:	4618      	mov	r0, r3
 8003538:	f7ff faf0 	bl	8002b1c <uxListRemove>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d10b      	bne.n	800355a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003542:	4b24      	ldr	r3, [pc, #144]	; (80035d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003548:	2201      	movs	r2, #1
 800354a:	fa02 f303 	lsl.w	r3, r2, r3
 800354e:	43da      	mvns	r2, r3
 8003550:	4b21      	ldr	r3, [pc, #132]	; (80035d8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4013      	ands	r3, r2
 8003556:	4a20      	ldr	r2, [pc, #128]	; (80035d8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003558:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003560:	d10a      	bne.n	8003578 <prvAddCurrentTaskToDelayedList+0x58>
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d007      	beq.n	8003578 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003568:	4b1a      	ldr	r3, [pc, #104]	; (80035d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	3304      	adds	r3, #4
 800356e:	4619      	mov	r1, r3
 8003570:	481a      	ldr	r0, [pc, #104]	; (80035dc <prvAddCurrentTaskToDelayedList+0xbc>)
 8003572:	f7ff fa78 	bl	8002a66 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003576:	e026      	b.n	80035c6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003578:	68fa      	ldr	r2, [r7, #12]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4413      	add	r3, r2
 800357e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003580:	4b14      	ldr	r3, [pc, #80]	; (80035d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	68ba      	ldr	r2, [r7, #8]
 8003586:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003588:	68ba      	ldr	r2, [r7, #8]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	429a      	cmp	r2, r3
 800358e:	d209      	bcs.n	80035a4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003590:	4b13      	ldr	r3, [pc, #76]	; (80035e0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	4b0f      	ldr	r3, [pc, #60]	; (80035d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	3304      	adds	r3, #4
 800359a:	4619      	mov	r1, r3
 800359c:	4610      	mov	r0, r2
 800359e:	f7ff fa85 	bl	8002aac <vListInsert>
}
 80035a2:	e010      	b.n	80035c6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80035a4:	4b0f      	ldr	r3, [pc, #60]	; (80035e4 <prvAddCurrentTaskToDelayedList+0xc4>)
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	4b0a      	ldr	r3, [pc, #40]	; (80035d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	3304      	adds	r3, #4
 80035ae:	4619      	mov	r1, r3
 80035b0:	4610      	mov	r0, r2
 80035b2:	f7ff fa7b 	bl	8002aac <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80035b6:	4b0c      	ldr	r3, [pc, #48]	; (80035e8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	68ba      	ldr	r2, [r7, #8]
 80035bc:	429a      	cmp	r2, r3
 80035be:	d202      	bcs.n	80035c6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80035c0:	4a09      	ldr	r2, [pc, #36]	; (80035e8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	6013      	str	r3, [r2, #0]
}
 80035c6:	bf00      	nop
 80035c8:	3710      	adds	r7, #16
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	200004a4 	.word	0x200004a4
 80035d4:	200003a0 	.word	0x200003a0
 80035d8:	200004a8 	.word	0x200004a8
 80035dc:	2000048c 	.word	0x2000048c
 80035e0:	2000045c 	.word	0x2000045c
 80035e4:	20000458 	.word	0x20000458
 80035e8:	200004c0 	.word	0x200004c0

080035ec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80035ec:	b480      	push	{r7}
 80035ee:	b085      	sub	sp, #20
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	60f8      	str	r0, [r7, #12]
 80035f4:	60b9      	str	r1, [r7, #8]
 80035f6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	3b04      	subs	r3, #4
 80035fc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003604:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	3b04      	subs	r3, #4
 800360a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	f023 0201 	bic.w	r2, r3, #1
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	3b04      	subs	r3, #4
 800361a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800361c:	4a08      	ldr	r2, [pc, #32]	; (8003640 <pxPortInitialiseStack+0x54>)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	3b14      	subs	r3, #20
 8003626:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	3b20      	subs	r3, #32
 8003632:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003634:	68fb      	ldr	r3, [r7, #12]
}
 8003636:	4618      	mov	r0, r3
 8003638:	3714      	adds	r7, #20
 800363a:	46bd      	mov	sp, r7
 800363c:	bc80      	pop	{r7}
 800363e:	4770      	bx	lr
 8003640:	08003645 	.word	0x08003645

08003644 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003644:	b480      	push	{r7}
 8003646:	b085      	sub	sp, #20
 8003648:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800364a:	2300      	movs	r3, #0
 800364c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800364e:	4b12      	ldr	r3, [pc, #72]	; (8003698 <prvTaskExitError+0x54>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003656:	d00a      	beq.n	800366e <prvTaskExitError+0x2a>
	__asm volatile
 8003658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800365c:	f383 8811 	msr	BASEPRI, r3
 8003660:	f3bf 8f6f 	isb	sy
 8003664:	f3bf 8f4f 	dsb	sy
 8003668:	60fb      	str	r3, [r7, #12]
}
 800366a:	bf00      	nop
 800366c:	e7fe      	b.n	800366c <prvTaskExitError+0x28>
	__asm volatile
 800366e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003672:	f383 8811 	msr	BASEPRI, r3
 8003676:	f3bf 8f6f 	isb	sy
 800367a:	f3bf 8f4f 	dsb	sy
 800367e:	60bb      	str	r3, [r7, #8]
}
 8003680:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003682:	bf00      	nop
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d0fc      	beq.n	8003684 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800368a:	bf00      	nop
 800368c:	bf00      	nop
 800368e:	3714      	adds	r7, #20
 8003690:	46bd      	mov	sp, r7
 8003692:	bc80      	pop	{r7}
 8003694:	4770      	bx	lr
 8003696:	bf00      	nop
 8003698:	20000014 	.word	0x20000014
 800369c:	00000000 	.word	0x00000000

080036a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80036a0:	4b07      	ldr	r3, [pc, #28]	; (80036c0 <pxCurrentTCBConst2>)
 80036a2:	6819      	ldr	r1, [r3, #0]
 80036a4:	6808      	ldr	r0, [r1, #0]
 80036a6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80036aa:	f380 8809 	msr	PSP, r0
 80036ae:	f3bf 8f6f 	isb	sy
 80036b2:	f04f 0000 	mov.w	r0, #0
 80036b6:	f380 8811 	msr	BASEPRI, r0
 80036ba:	f04e 0e0d 	orr.w	lr, lr, #13
 80036be:	4770      	bx	lr

080036c0 <pxCurrentTCBConst2>:
 80036c0:	200003a0 	.word	0x200003a0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80036c4:	bf00      	nop
 80036c6:	bf00      	nop

080036c8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80036c8:	4806      	ldr	r0, [pc, #24]	; (80036e4 <prvPortStartFirstTask+0x1c>)
 80036ca:	6800      	ldr	r0, [r0, #0]
 80036cc:	6800      	ldr	r0, [r0, #0]
 80036ce:	f380 8808 	msr	MSP, r0
 80036d2:	b662      	cpsie	i
 80036d4:	b661      	cpsie	f
 80036d6:	f3bf 8f4f 	dsb	sy
 80036da:	f3bf 8f6f 	isb	sy
 80036de:	df00      	svc	0
 80036e0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80036e2:	bf00      	nop
 80036e4:	e000ed08 	.word	0xe000ed08

080036e8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80036ee:	4b32      	ldr	r3, [pc, #200]	; (80037b8 <xPortStartScheduler+0xd0>)
 80036f0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	22ff      	movs	r2, #255	; 0xff
 80036fe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	b2db      	uxtb	r3, r3
 8003706:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003708:	78fb      	ldrb	r3, [r7, #3]
 800370a:	b2db      	uxtb	r3, r3
 800370c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003710:	b2da      	uxtb	r2, r3
 8003712:	4b2a      	ldr	r3, [pc, #168]	; (80037bc <xPortStartScheduler+0xd4>)
 8003714:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003716:	4b2a      	ldr	r3, [pc, #168]	; (80037c0 <xPortStartScheduler+0xd8>)
 8003718:	2207      	movs	r2, #7
 800371a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800371c:	e009      	b.n	8003732 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800371e:	4b28      	ldr	r3, [pc, #160]	; (80037c0 <xPortStartScheduler+0xd8>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	3b01      	subs	r3, #1
 8003724:	4a26      	ldr	r2, [pc, #152]	; (80037c0 <xPortStartScheduler+0xd8>)
 8003726:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003728:	78fb      	ldrb	r3, [r7, #3]
 800372a:	b2db      	uxtb	r3, r3
 800372c:	005b      	lsls	r3, r3, #1
 800372e:	b2db      	uxtb	r3, r3
 8003730:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003732:	78fb      	ldrb	r3, [r7, #3]
 8003734:	b2db      	uxtb	r3, r3
 8003736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800373a:	2b80      	cmp	r3, #128	; 0x80
 800373c:	d0ef      	beq.n	800371e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800373e:	4b20      	ldr	r3, [pc, #128]	; (80037c0 <xPortStartScheduler+0xd8>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f1c3 0307 	rsb	r3, r3, #7
 8003746:	2b04      	cmp	r3, #4
 8003748:	d00a      	beq.n	8003760 <xPortStartScheduler+0x78>
	__asm volatile
 800374a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800374e:	f383 8811 	msr	BASEPRI, r3
 8003752:	f3bf 8f6f 	isb	sy
 8003756:	f3bf 8f4f 	dsb	sy
 800375a:	60bb      	str	r3, [r7, #8]
}
 800375c:	bf00      	nop
 800375e:	e7fe      	b.n	800375e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003760:	4b17      	ldr	r3, [pc, #92]	; (80037c0 <xPortStartScheduler+0xd8>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	021b      	lsls	r3, r3, #8
 8003766:	4a16      	ldr	r2, [pc, #88]	; (80037c0 <xPortStartScheduler+0xd8>)
 8003768:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800376a:	4b15      	ldr	r3, [pc, #84]	; (80037c0 <xPortStartScheduler+0xd8>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003772:	4a13      	ldr	r2, [pc, #76]	; (80037c0 <xPortStartScheduler+0xd8>)
 8003774:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	b2da      	uxtb	r2, r3
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800377e:	4b11      	ldr	r3, [pc, #68]	; (80037c4 <xPortStartScheduler+0xdc>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a10      	ldr	r2, [pc, #64]	; (80037c4 <xPortStartScheduler+0xdc>)
 8003784:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003788:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800378a:	4b0e      	ldr	r3, [pc, #56]	; (80037c4 <xPortStartScheduler+0xdc>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a0d      	ldr	r2, [pc, #52]	; (80037c4 <xPortStartScheduler+0xdc>)
 8003790:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003794:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003796:	f000 f8b9 	bl	800390c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800379a:	4b0b      	ldr	r3, [pc, #44]	; (80037c8 <xPortStartScheduler+0xe0>)
 800379c:	2200      	movs	r2, #0
 800379e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80037a0:	f7ff ff92 	bl	80036c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80037a4:	f7ff fd6a 	bl	800327c <vTaskSwitchContext>
	prvTaskExitError();
 80037a8:	f7ff ff4c 	bl	8003644 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80037ac:	2300      	movs	r3, #0
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3710      	adds	r7, #16
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	e000e400 	.word	0xe000e400
 80037bc:	200004cc 	.word	0x200004cc
 80037c0:	200004d0 	.word	0x200004d0
 80037c4:	e000ed20 	.word	0xe000ed20
 80037c8:	20000014 	.word	0x20000014

080037cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
	__asm volatile
 80037d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037d6:	f383 8811 	msr	BASEPRI, r3
 80037da:	f3bf 8f6f 	isb	sy
 80037de:	f3bf 8f4f 	dsb	sy
 80037e2:	607b      	str	r3, [r7, #4]
}
 80037e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80037e6:	4b0f      	ldr	r3, [pc, #60]	; (8003824 <vPortEnterCritical+0x58>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	3301      	adds	r3, #1
 80037ec:	4a0d      	ldr	r2, [pc, #52]	; (8003824 <vPortEnterCritical+0x58>)
 80037ee:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80037f0:	4b0c      	ldr	r3, [pc, #48]	; (8003824 <vPortEnterCritical+0x58>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d10f      	bne.n	8003818 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80037f8:	4b0b      	ldr	r3, [pc, #44]	; (8003828 <vPortEnterCritical+0x5c>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d00a      	beq.n	8003818 <vPortEnterCritical+0x4c>
	__asm volatile
 8003802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003806:	f383 8811 	msr	BASEPRI, r3
 800380a:	f3bf 8f6f 	isb	sy
 800380e:	f3bf 8f4f 	dsb	sy
 8003812:	603b      	str	r3, [r7, #0]
}
 8003814:	bf00      	nop
 8003816:	e7fe      	b.n	8003816 <vPortEnterCritical+0x4a>
	}
}
 8003818:	bf00      	nop
 800381a:	370c      	adds	r7, #12
 800381c:	46bd      	mov	sp, r7
 800381e:	bc80      	pop	{r7}
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	20000014 	.word	0x20000014
 8003828:	e000ed04 	.word	0xe000ed04

0800382c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003832:	4b11      	ldr	r3, [pc, #68]	; (8003878 <vPortExitCritical+0x4c>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d10a      	bne.n	8003850 <vPortExitCritical+0x24>
	__asm volatile
 800383a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800383e:	f383 8811 	msr	BASEPRI, r3
 8003842:	f3bf 8f6f 	isb	sy
 8003846:	f3bf 8f4f 	dsb	sy
 800384a:	607b      	str	r3, [r7, #4]
}
 800384c:	bf00      	nop
 800384e:	e7fe      	b.n	800384e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003850:	4b09      	ldr	r3, [pc, #36]	; (8003878 <vPortExitCritical+0x4c>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	3b01      	subs	r3, #1
 8003856:	4a08      	ldr	r2, [pc, #32]	; (8003878 <vPortExitCritical+0x4c>)
 8003858:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800385a:	4b07      	ldr	r3, [pc, #28]	; (8003878 <vPortExitCritical+0x4c>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d105      	bne.n	800386e <vPortExitCritical+0x42>
 8003862:	2300      	movs	r3, #0
 8003864:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800386c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800386e:	bf00      	nop
 8003870:	370c      	adds	r7, #12
 8003872:	46bd      	mov	sp, r7
 8003874:	bc80      	pop	{r7}
 8003876:	4770      	bx	lr
 8003878:	20000014 	.word	0x20000014
 800387c:	00000000 	.word	0x00000000

08003880 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003880:	f3ef 8009 	mrs	r0, PSP
 8003884:	f3bf 8f6f 	isb	sy
 8003888:	4b0d      	ldr	r3, [pc, #52]	; (80038c0 <pxCurrentTCBConst>)
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003890:	6010      	str	r0, [r2, #0]
 8003892:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003896:	f04f 0050 	mov.w	r0, #80	; 0x50
 800389a:	f380 8811 	msr	BASEPRI, r0
 800389e:	f7ff fced 	bl	800327c <vTaskSwitchContext>
 80038a2:	f04f 0000 	mov.w	r0, #0
 80038a6:	f380 8811 	msr	BASEPRI, r0
 80038aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80038ae:	6819      	ldr	r1, [r3, #0]
 80038b0:	6808      	ldr	r0, [r1, #0]
 80038b2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80038b6:	f380 8809 	msr	PSP, r0
 80038ba:	f3bf 8f6f 	isb	sy
 80038be:	4770      	bx	lr

080038c0 <pxCurrentTCBConst>:
 80038c0:	200003a0 	.word	0x200003a0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80038c4:	bf00      	nop
 80038c6:	bf00      	nop

080038c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
	__asm volatile
 80038ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038d2:	f383 8811 	msr	BASEPRI, r3
 80038d6:	f3bf 8f6f 	isb	sy
 80038da:	f3bf 8f4f 	dsb	sy
 80038de:	607b      	str	r3, [r7, #4]
}
 80038e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80038e2:	f7ff fc0d 	bl	8003100 <xTaskIncrementTick>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d003      	beq.n	80038f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80038ec:	4b06      	ldr	r3, [pc, #24]	; (8003908 <xPortSysTickHandler+0x40>)
 80038ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038f2:	601a      	str	r2, [r3, #0]
 80038f4:	2300      	movs	r3, #0
 80038f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	f383 8811 	msr	BASEPRI, r3
}
 80038fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003900:	bf00      	nop
 8003902:	3708      	adds	r7, #8
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}
 8003908:	e000ed04 	.word	0xe000ed04

0800390c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800390c:	b480      	push	{r7}
 800390e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003910:	4b0a      	ldr	r3, [pc, #40]	; (800393c <vPortSetupTimerInterrupt+0x30>)
 8003912:	2200      	movs	r2, #0
 8003914:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003916:	4b0a      	ldr	r3, [pc, #40]	; (8003940 <vPortSetupTimerInterrupt+0x34>)
 8003918:	2200      	movs	r2, #0
 800391a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800391c:	4b09      	ldr	r3, [pc, #36]	; (8003944 <vPortSetupTimerInterrupt+0x38>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a09      	ldr	r2, [pc, #36]	; (8003948 <vPortSetupTimerInterrupt+0x3c>)
 8003922:	fba2 2303 	umull	r2, r3, r2, r3
 8003926:	099b      	lsrs	r3, r3, #6
 8003928:	4a08      	ldr	r2, [pc, #32]	; (800394c <vPortSetupTimerInterrupt+0x40>)
 800392a:	3b01      	subs	r3, #1
 800392c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800392e:	4b03      	ldr	r3, [pc, #12]	; (800393c <vPortSetupTimerInterrupt+0x30>)
 8003930:	2207      	movs	r2, #7
 8003932:	601a      	str	r2, [r3, #0]
}
 8003934:	bf00      	nop
 8003936:	46bd      	mov	sp, r7
 8003938:	bc80      	pop	{r7}
 800393a:	4770      	bx	lr
 800393c:	e000e010 	.word	0xe000e010
 8003940:	e000e018 	.word	0xe000e018
 8003944:	20000008 	.word	0x20000008
 8003948:	10624dd3 	.word	0x10624dd3
 800394c:	e000e014 	.word	0xe000e014

08003950 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b08a      	sub	sp, #40	; 0x28
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003958:	2300      	movs	r3, #0
 800395a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800395c:	f7ff fb26 	bl	8002fac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003960:	4b58      	ldr	r3, [pc, #352]	; (8003ac4 <pvPortMalloc+0x174>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d101      	bne.n	800396c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003968:	f000 f910 	bl	8003b8c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800396c:	4b56      	ldr	r3, [pc, #344]	; (8003ac8 <pvPortMalloc+0x178>)
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4013      	ands	r3, r2
 8003974:	2b00      	cmp	r3, #0
 8003976:	f040 808e 	bne.w	8003a96 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d01d      	beq.n	80039bc <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003980:	2208      	movs	r2, #8
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4413      	add	r3, r2
 8003986:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f003 0307 	and.w	r3, r3, #7
 800398e:	2b00      	cmp	r3, #0
 8003990:	d014      	beq.n	80039bc <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f023 0307 	bic.w	r3, r3, #7
 8003998:	3308      	adds	r3, #8
 800399a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f003 0307 	and.w	r3, r3, #7
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d00a      	beq.n	80039bc <pvPortMalloc+0x6c>
	__asm volatile
 80039a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039aa:	f383 8811 	msr	BASEPRI, r3
 80039ae:	f3bf 8f6f 	isb	sy
 80039b2:	f3bf 8f4f 	dsb	sy
 80039b6:	617b      	str	r3, [r7, #20]
}
 80039b8:	bf00      	nop
 80039ba:	e7fe      	b.n	80039ba <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d069      	beq.n	8003a96 <pvPortMalloc+0x146>
 80039c2:	4b42      	ldr	r3, [pc, #264]	; (8003acc <pvPortMalloc+0x17c>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d864      	bhi.n	8003a96 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80039cc:	4b40      	ldr	r3, [pc, #256]	; (8003ad0 <pvPortMalloc+0x180>)
 80039ce:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80039d0:	4b3f      	ldr	r3, [pc, #252]	; (8003ad0 <pvPortMalloc+0x180>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80039d6:	e004      	b.n	80039e2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80039d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039da:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80039dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80039e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d903      	bls.n	80039f4 <pvPortMalloc+0xa4>
 80039ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d1f1      	bne.n	80039d8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80039f4:	4b33      	ldr	r3, [pc, #204]	; (8003ac4 <pvPortMalloc+0x174>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d04b      	beq.n	8003a96 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80039fe:	6a3b      	ldr	r3, [r7, #32]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2208      	movs	r2, #8
 8003a04:	4413      	add	r3, r2
 8003a06:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	6a3b      	ldr	r3, [r7, #32]
 8003a0e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a12:	685a      	ldr	r2, [r3, #4]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	1ad2      	subs	r2, r2, r3
 8003a18:	2308      	movs	r3, #8
 8003a1a:	005b      	lsls	r3, r3, #1
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d91f      	bls.n	8003a60 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003a20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4413      	add	r3, r2
 8003a26:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003a28:	69bb      	ldr	r3, [r7, #24]
 8003a2a:	f003 0307 	and.w	r3, r3, #7
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d00a      	beq.n	8003a48 <pvPortMalloc+0xf8>
	__asm volatile
 8003a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a36:	f383 8811 	msr	BASEPRI, r3
 8003a3a:	f3bf 8f6f 	isb	sy
 8003a3e:	f3bf 8f4f 	dsb	sy
 8003a42:	613b      	str	r3, [r7, #16]
}
 8003a44:	bf00      	nop
 8003a46:	e7fe      	b.n	8003a46 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4a:	685a      	ldr	r2, [r3, #4]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	1ad2      	subs	r2, r2, r3
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003a5a:	69b8      	ldr	r0, [r7, #24]
 8003a5c:	f000 f8f8 	bl	8003c50 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003a60:	4b1a      	ldr	r3, [pc, #104]	; (8003acc <pvPortMalloc+0x17c>)
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	4a18      	ldr	r2, [pc, #96]	; (8003acc <pvPortMalloc+0x17c>)
 8003a6c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003a6e:	4b17      	ldr	r3, [pc, #92]	; (8003acc <pvPortMalloc+0x17c>)
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	4b18      	ldr	r3, [pc, #96]	; (8003ad4 <pvPortMalloc+0x184>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d203      	bcs.n	8003a82 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003a7a:	4b14      	ldr	r3, [pc, #80]	; (8003acc <pvPortMalloc+0x17c>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a15      	ldr	r2, [pc, #84]	; (8003ad4 <pvPortMalloc+0x184>)
 8003a80:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a84:	685a      	ldr	r2, [r3, #4]
 8003a86:	4b10      	ldr	r3, [pc, #64]	; (8003ac8 <pvPortMalloc+0x178>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	431a      	orrs	r2, r3
 8003a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a92:	2200      	movs	r2, #0
 8003a94:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003a96:	f7ff fa97 	bl	8002fc8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	f003 0307 	and.w	r3, r3, #7
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d00a      	beq.n	8003aba <pvPortMalloc+0x16a>
	__asm volatile
 8003aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aa8:	f383 8811 	msr	BASEPRI, r3
 8003aac:	f3bf 8f6f 	isb	sy
 8003ab0:	f3bf 8f4f 	dsb	sy
 8003ab4:	60fb      	str	r3, [r7, #12]
}
 8003ab6:	bf00      	nop
 8003ab8:	e7fe      	b.n	8003ab8 <pvPortMalloc+0x168>
	return pvReturn;
 8003aba:	69fb      	ldr	r3, [r7, #28]
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3728      	adds	r7, #40	; 0x28
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	200010dc 	.word	0x200010dc
 8003ac8:	200010e8 	.word	0x200010e8
 8003acc:	200010e0 	.word	0x200010e0
 8003ad0:	200010d4 	.word	0x200010d4
 8003ad4:	200010e4 	.word	0x200010e4

08003ad8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b086      	sub	sp, #24
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d048      	beq.n	8003b7c <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003aea:	2308      	movs	r3, #8
 8003aec:	425b      	negs	r3, r3
 8003aee:	697a      	ldr	r2, [r7, #20]
 8003af0:	4413      	add	r3, r2
 8003af2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	685a      	ldr	r2, [r3, #4]
 8003afc:	4b21      	ldr	r3, [pc, #132]	; (8003b84 <vPortFree+0xac>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4013      	ands	r3, r2
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d10a      	bne.n	8003b1c <vPortFree+0x44>
	__asm volatile
 8003b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b0a:	f383 8811 	msr	BASEPRI, r3
 8003b0e:	f3bf 8f6f 	isb	sy
 8003b12:	f3bf 8f4f 	dsb	sy
 8003b16:	60fb      	str	r3, [r7, #12]
}
 8003b18:	bf00      	nop
 8003b1a:	e7fe      	b.n	8003b1a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d00a      	beq.n	8003b3a <vPortFree+0x62>
	__asm volatile
 8003b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b28:	f383 8811 	msr	BASEPRI, r3
 8003b2c:	f3bf 8f6f 	isb	sy
 8003b30:	f3bf 8f4f 	dsb	sy
 8003b34:	60bb      	str	r3, [r7, #8]
}
 8003b36:	bf00      	nop
 8003b38:	e7fe      	b.n	8003b38 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	685a      	ldr	r2, [r3, #4]
 8003b3e:	4b11      	ldr	r3, [pc, #68]	; (8003b84 <vPortFree+0xac>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4013      	ands	r3, r2
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d019      	beq.n	8003b7c <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d115      	bne.n	8003b7c <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	685a      	ldr	r2, [r3, #4]
 8003b54:	4b0b      	ldr	r3, [pc, #44]	; (8003b84 <vPortFree+0xac>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	43db      	mvns	r3, r3
 8003b5a:	401a      	ands	r2, r3
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003b60:	f7ff fa24 	bl	8002fac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	685a      	ldr	r2, [r3, #4]
 8003b68:	4b07      	ldr	r3, [pc, #28]	; (8003b88 <vPortFree+0xb0>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4413      	add	r3, r2
 8003b6e:	4a06      	ldr	r2, [pc, #24]	; (8003b88 <vPortFree+0xb0>)
 8003b70:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003b72:	6938      	ldr	r0, [r7, #16]
 8003b74:	f000 f86c 	bl	8003c50 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003b78:	f7ff fa26 	bl	8002fc8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003b7c:	bf00      	nop
 8003b7e:	3718      	adds	r7, #24
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	200010e8 	.word	0x200010e8
 8003b88:	200010e0 	.word	0x200010e0

08003b8c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b085      	sub	sp, #20
 8003b90:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003b92:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003b96:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003b98:	4b27      	ldr	r3, [pc, #156]	; (8003c38 <prvHeapInit+0xac>)
 8003b9a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f003 0307 	and.w	r3, r3, #7
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d00c      	beq.n	8003bc0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	3307      	adds	r3, #7
 8003baa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f023 0307 	bic.w	r3, r3, #7
 8003bb2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003bb4:	68ba      	ldr	r2, [r7, #8]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	4a1f      	ldr	r2, [pc, #124]	; (8003c38 <prvHeapInit+0xac>)
 8003bbc:	4413      	add	r3, r2
 8003bbe:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003bc4:	4a1d      	ldr	r2, [pc, #116]	; (8003c3c <prvHeapInit+0xb0>)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003bca:	4b1c      	ldr	r3, [pc, #112]	; (8003c3c <prvHeapInit+0xb0>)
 8003bcc:	2200      	movs	r2, #0
 8003bce:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	68ba      	ldr	r2, [r7, #8]
 8003bd4:	4413      	add	r3, r2
 8003bd6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003bd8:	2208      	movs	r2, #8
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	1a9b      	subs	r3, r3, r2
 8003bde:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f023 0307 	bic.w	r3, r3, #7
 8003be6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	4a15      	ldr	r2, [pc, #84]	; (8003c40 <prvHeapInit+0xb4>)
 8003bec:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003bee:	4b14      	ldr	r3, [pc, #80]	; (8003c40 <prvHeapInit+0xb4>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003bf6:	4b12      	ldr	r3, [pc, #72]	; (8003c40 <prvHeapInit+0xb4>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	68fa      	ldr	r2, [r7, #12]
 8003c06:	1ad2      	subs	r2, r2, r3
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003c0c:	4b0c      	ldr	r3, [pc, #48]	; (8003c40 <prvHeapInit+0xb4>)
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	4a0a      	ldr	r2, [pc, #40]	; (8003c44 <prvHeapInit+0xb8>)
 8003c1a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	4a09      	ldr	r2, [pc, #36]	; (8003c48 <prvHeapInit+0xbc>)
 8003c22:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003c24:	4b09      	ldr	r3, [pc, #36]	; (8003c4c <prvHeapInit+0xc0>)
 8003c26:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003c2a:	601a      	str	r2, [r3, #0]
}
 8003c2c:	bf00      	nop
 8003c2e:	3714      	adds	r7, #20
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bc80      	pop	{r7}
 8003c34:	4770      	bx	lr
 8003c36:	bf00      	nop
 8003c38:	200004d4 	.word	0x200004d4
 8003c3c:	200010d4 	.word	0x200010d4
 8003c40:	200010dc 	.word	0x200010dc
 8003c44:	200010e4 	.word	0x200010e4
 8003c48:	200010e0 	.word	0x200010e0
 8003c4c:	200010e8 	.word	0x200010e8

08003c50 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003c50:	b480      	push	{r7}
 8003c52:	b085      	sub	sp, #20
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003c58:	4b27      	ldr	r3, [pc, #156]	; (8003cf8 <prvInsertBlockIntoFreeList+0xa8>)
 8003c5a:	60fb      	str	r3, [r7, #12]
 8003c5c:	e002      	b.n	8003c64 <prvInsertBlockIntoFreeList+0x14>
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	60fb      	str	r3, [r7, #12]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d8f7      	bhi.n	8003c5e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	68ba      	ldr	r2, [r7, #8]
 8003c78:	4413      	add	r3, r2
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d108      	bne.n	8003c92 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	685a      	ldr	r2, [r3, #4]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	441a      	add	r2, r3
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	68ba      	ldr	r2, [r7, #8]
 8003c9c:	441a      	add	r2, r3
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d118      	bne.n	8003cd8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	4b14      	ldr	r3, [pc, #80]	; (8003cfc <prvInsertBlockIntoFreeList+0xac>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d00d      	beq.n	8003cce <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	685a      	ldr	r2, [r3, #4]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	441a      	add	r2, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	601a      	str	r2, [r3, #0]
 8003ccc:	e008      	b.n	8003ce0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003cce:	4b0b      	ldr	r3, [pc, #44]	; (8003cfc <prvInsertBlockIntoFreeList+0xac>)
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	601a      	str	r2, [r3, #0]
 8003cd6:	e003      	b.n	8003ce0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003ce0:	68fa      	ldr	r2, [r7, #12]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d002      	beq.n	8003cee <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003cee:	bf00      	nop
 8003cf0:	3714      	adds	r7, #20
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bc80      	pop	{r7}
 8003cf6:	4770      	bx	lr
 8003cf8:	200010d4 	.word	0x200010d4
 8003cfc:	200010dc 	.word	0x200010dc

08003d00 <memset>:
 8003d00:	4603      	mov	r3, r0
 8003d02:	4402      	add	r2, r0
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d100      	bne.n	8003d0a <memset+0xa>
 8003d08:	4770      	bx	lr
 8003d0a:	f803 1b01 	strb.w	r1, [r3], #1
 8003d0e:	e7f9      	b.n	8003d04 <memset+0x4>

08003d10 <__errno>:
 8003d10:	4b01      	ldr	r3, [pc, #4]	; (8003d18 <__errno+0x8>)
 8003d12:	6818      	ldr	r0, [r3, #0]
 8003d14:	4770      	bx	lr
 8003d16:	bf00      	nop
 8003d18:	20000064 	.word	0x20000064

08003d1c <__libc_init_array>:
 8003d1c:	b570      	push	{r4, r5, r6, lr}
 8003d1e:	2600      	movs	r6, #0
 8003d20:	4d0c      	ldr	r5, [pc, #48]	; (8003d54 <__libc_init_array+0x38>)
 8003d22:	4c0d      	ldr	r4, [pc, #52]	; (8003d58 <__libc_init_array+0x3c>)
 8003d24:	1b64      	subs	r4, r4, r5
 8003d26:	10a4      	asrs	r4, r4, #2
 8003d28:	42a6      	cmp	r6, r4
 8003d2a:	d109      	bne.n	8003d40 <__libc_init_array+0x24>
 8003d2c:	f000 ff22 	bl	8004b74 <_init>
 8003d30:	2600      	movs	r6, #0
 8003d32:	4d0a      	ldr	r5, [pc, #40]	; (8003d5c <__libc_init_array+0x40>)
 8003d34:	4c0a      	ldr	r4, [pc, #40]	; (8003d60 <__libc_init_array+0x44>)
 8003d36:	1b64      	subs	r4, r4, r5
 8003d38:	10a4      	asrs	r4, r4, #2
 8003d3a:	42a6      	cmp	r6, r4
 8003d3c:	d105      	bne.n	8003d4a <__libc_init_array+0x2e>
 8003d3e:	bd70      	pop	{r4, r5, r6, pc}
 8003d40:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d44:	4798      	blx	r3
 8003d46:	3601      	adds	r6, #1
 8003d48:	e7ee      	b.n	8003d28 <__libc_init_array+0xc>
 8003d4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d4e:	4798      	blx	r3
 8003d50:	3601      	adds	r6, #1
 8003d52:	e7f2      	b.n	8003d3a <__libc_init_array+0x1e>
 8003d54:	08004c28 	.word	0x08004c28
 8003d58:	08004c28 	.word	0x08004c28
 8003d5c:	08004c28 	.word	0x08004c28
 8003d60:	08004c2c 	.word	0x08004c2c

08003d64 <pow>:
 8003d64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d68:	4614      	mov	r4, r2
 8003d6a:	461d      	mov	r5, r3
 8003d6c:	4680      	mov	r8, r0
 8003d6e:	4689      	mov	r9, r1
 8003d70:	f000 f866 	bl	8003e40 <__ieee754_pow>
 8003d74:	4622      	mov	r2, r4
 8003d76:	4606      	mov	r6, r0
 8003d78:	460f      	mov	r7, r1
 8003d7a:	462b      	mov	r3, r5
 8003d7c:	4620      	mov	r0, r4
 8003d7e:	4629      	mov	r1, r5
 8003d80:	f7fc fe3c 	bl	80009fc <__aeabi_dcmpun>
 8003d84:	bbc8      	cbnz	r0, 8003dfa <pow+0x96>
 8003d86:	2200      	movs	r2, #0
 8003d88:	2300      	movs	r3, #0
 8003d8a:	4640      	mov	r0, r8
 8003d8c:	4649      	mov	r1, r9
 8003d8e:	f7fc fe03 	bl	8000998 <__aeabi_dcmpeq>
 8003d92:	b1b8      	cbz	r0, 8003dc4 <pow+0x60>
 8003d94:	2200      	movs	r2, #0
 8003d96:	2300      	movs	r3, #0
 8003d98:	4620      	mov	r0, r4
 8003d9a:	4629      	mov	r1, r5
 8003d9c:	f7fc fdfc 	bl	8000998 <__aeabi_dcmpeq>
 8003da0:	2800      	cmp	r0, #0
 8003da2:	d141      	bne.n	8003e28 <pow+0xc4>
 8003da4:	4620      	mov	r0, r4
 8003da6:	4629      	mov	r1, r5
 8003da8:	f000 f844 	bl	8003e34 <finite>
 8003dac:	b328      	cbz	r0, 8003dfa <pow+0x96>
 8003dae:	2200      	movs	r2, #0
 8003db0:	2300      	movs	r3, #0
 8003db2:	4620      	mov	r0, r4
 8003db4:	4629      	mov	r1, r5
 8003db6:	f7fc fdf9 	bl	80009ac <__aeabi_dcmplt>
 8003dba:	b1f0      	cbz	r0, 8003dfa <pow+0x96>
 8003dbc:	f7ff ffa8 	bl	8003d10 <__errno>
 8003dc0:	2322      	movs	r3, #34	; 0x22
 8003dc2:	e019      	b.n	8003df8 <pow+0x94>
 8003dc4:	4630      	mov	r0, r6
 8003dc6:	4639      	mov	r1, r7
 8003dc8:	f000 f834 	bl	8003e34 <finite>
 8003dcc:	b9c8      	cbnz	r0, 8003e02 <pow+0x9e>
 8003dce:	4640      	mov	r0, r8
 8003dd0:	4649      	mov	r1, r9
 8003dd2:	f000 f82f 	bl	8003e34 <finite>
 8003dd6:	b1a0      	cbz	r0, 8003e02 <pow+0x9e>
 8003dd8:	4620      	mov	r0, r4
 8003dda:	4629      	mov	r1, r5
 8003ddc:	f000 f82a 	bl	8003e34 <finite>
 8003de0:	b178      	cbz	r0, 8003e02 <pow+0x9e>
 8003de2:	4632      	mov	r2, r6
 8003de4:	463b      	mov	r3, r7
 8003de6:	4630      	mov	r0, r6
 8003de8:	4639      	mov	r1, r7
 8003dea:	f7fc fe07 	bl	80009fc <__aeabi_dcmpun>
 8003dee:	2800      	cmp	r0, #0
 8003df0:	d0e4      	beq.n	8003dbc <pow+0x58>
 8003df2:	f7ff ff8d 	bl	8003d10 <__errno>
 8003df6:	2321      	movs	r3, #33	; 0x21
 8003df8:	6003      	str	r3, [r0, #0]
 8003dfa:	4630      	mov	r0, r6
 8003dfc:	4639      	mov	r1, r7
 8003dfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e02:	2200      	movs	r2, #0
 8003e04:	2300      	movs	r3, #0
 8003e06:	4630      	mov	r0, r6
 8003e08:	4639      	mov	r1, r7
 8003e0a:	f7fc fdc5 	bl	8000998 <__aeabi_dcmpeq>
 8003e0e:	2800      	cmp	r0, #0
 8003e10:	d0f3      	beq.n	8003dfa <pow+0x96>
 8003e12:	4640      	mov	r0, r8
 8003e14:	4649      	mov	r1, r9
 8003e16:	f000 f80d 	bl	8003e34 <finite>
 8003e1a:	2800      	cmp	r0, #0
 8003e1c:	d0ed      	beq.n	8003dfa <pow+0x96>
 8003e1e:	4620      	mov	r0, r4
 8003e20:	4629      	mov	r1, r5
 8003e22:	f000 f807 	bl	8003e34 <finite>
 8003e26:	e7c8      	b.n	8003dba <pow+0x56>
 8003e28:	2600      	movs	r6, #0
 8003e2a:	4f01      	ldr	r7, [pc, #4]	; (8003e30 <pow+0xcc>)
 8003e2c:	e7e5      	b.n	8003dfa <pow+0x96>
 8003e2e:	bf00      	nop
 8003e30:	3ff00000 	.word	0x3ff00000

08003e34 <finite>:
 8003e34:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8003e38:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8003e3c:	0fc0      	lsrs	r0, r0, #31
 8003e3e:	4770      	bx	lr

08003e40 <__ieee754_pow>:
 8003e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e44:	b093      	sub	sp, #76	; 0x4c
 8003e46:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003e4a:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 8003e4e:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8003e52:	4689      	mov	r9, r1
 8003e54:	ea56 0102 	orrs.w	r1, r6, r2
 8003e58:	4680      	mov	r8, r0
 8003e5a:	d111      	bne.n	8003e80 <__ieee754_pow+0x40>
 8003e5c:	1803      	adds	r3, r0, r0
 8003e5e:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 8003e62:	4152      	adcs	r2, r2
 8003e64:	4299      	cmp	r1, r3
 8003e66:	4b82      	ldr	r3, [pc, #520]	; (8004070 <__ieee754_pow+0x230>)
 8003e68:	4193      	sbcs	r3, r2
 8003e6a:	f080 84ba 	bcs.w	80047e2 <__ieee754_pow+0x9a2>
 8003e6e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003e72:	4640      	mov	r0, r8
 8003e74:	4649      	mov	r1, r9
 8003e76:	f7fc f971 	bl	800015c <__adddf3>
 8003e7a:	4683      	mov	fp, r0
 8003e7c:	468c      	mov	ip, r1
 8003e7e:	e06f      	b.n	8003f60 <__ieee754_pow+0x120>
 8003e80:	4b7c      	ldr	r3, [pc, #496]	; (8004074 <__ieee754_pow+0x234>)
 8003e82:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 8003e86:	429c      	cmp	r4, r3
 8003e88:	464d      	mov	r5, r9
 8003e8a:	4682      	mov	sl, r0
 8003e8c:	dc06      	bgt.n	8003e9c <__ieee754_pow+0x5c>
 8003e8e:	d101      	bne.n	8003e94 <__ieee754_pow+0x54>
 8003e90:	2800      	cmp	r0, #0
 8003e92:	d1ec      	bne.n	8003e6e <__ieee754_pow+0x2e>
 8003e94:	429e      	cmp	r6, r3
 8003e96:	dc01      	bgt.n	8003e9c <__ieee754_pow+0x5c>
 8003e98:	d10f      	bne.n	8003eba <__ieee754_pow+0x7a>
 8003e9a:	b172      	cbz	r2, 8003eba <__ieee754_pow+0x7a>
 8003e9c:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8003ea0:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8003ea4:	ea55 050a 	orrs.w	r5, r5, sl
 8003ea8:	d1e1      	bne.n	8003e6e <__ieee754_pow+0x2e>
 8003eaa:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8003eae:	18db      	adds	r3, r3, r3
 8003eb0:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8003eb4:	4152      	adcs	r2, r2
 8003eb6:	429d      	cmp	r5, r3
 8003eb8:	e7d5      	b.n	8003e66 <__ieee754_pow+0x26>
 8003eba:	2d00      	cmp	r5, #0
 8003ebc:	da39      	bge.n	8003f32 <__ieee754_pow+0xf2>
 8003ebe:	4b6e      	ldr	r3, [pc, #440]	; (8004078 <__ieee754_pow+0x238>)
 8003ec0:	429e      	cmp	r6, r3
 8003ec2:	dc52      	bgt.n	8003f6a <__ieee754_pow+0x12a>
 8003ec4:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8003ec8:	429e      	cmp	r6, r3
 8003eca:	f340 849d 	ble.w	8004808 <__ieee754_pow+0x9c8>
 8003ece:	1533      	asrs	r3, r6, #20
 8003ed0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8003ed4:	2b14      	cmp	r3, #20
 8003ed6:	dd0f      	ble.n	8003ef8 <__ieee754_pow+0xb8>
 8003ed8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8003edc:	fa22 f103 	lsr.w	r1, r2, r3
 8003ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	f040 848f 	bne.w	8004808 <__ieee754_pow+0x9c8>
 8003eea:	f001 0101 	and.w	r1, r1, #1
 8003eee:	f1c1 0302 	rsb	r3, r1, #2
 8003ef2:	9300      	str	r3, [sp, #0]
 8003ef4:	b182      	cbz	r2, 8003f18 <__ieee754_pow+0xd8>
 8003ef6:	e05d      	b.n	8003fb4 <__ieee754_pow+0x174>
 8003ef8:	2a00      	cmp	r2, #0
 8003efa:	d159      	bne.n	8003fb0 <__ieee754_pow+0x170>
 8003efc:	f1c3 0314 	rsb	r3, r3, #20
 8003f00:	fa46 f103 	asr.w	r1, r6, r3
 8003f04:	fa01 f303 	lsl.w	r3, r1, r3
 8003f08:	42b3      	cmp	r3, r6
 8003f0a:	f040 847a 	bne.w	8004802 <__ieee754_pow+0x9c2>
 8003f0e:	f001 0101 	and.w	r1, r1, #1
 8003f12:	f1c1 0302 	rsb	r3, r1, #2
 8003f16:	9300      	str	r3, [sp, #0]
 8003f18:	4b58      	ldr	r3, [pc, #352]	; (800407c <__ieee754_pow+0x23c>)
 8003f1a:	429e      	cmp	r6, r3
 8003f1c:	d132      	bne.n	8003f84 <__ieee754_pow+0x144>
 8003f1e:	2f00      	cmp	r7, #0
 8003f20:	f280 846b 	bge.w	80047fa <__ieee754_pow+0x9ba>
 8003f24:	4642      	mov	r2, r8
 8003f26:	464b      	mov	r3, r9
 8003f28:	2000      	movs	r0, #0
 8003f2a:	4954      	ldr	r1, [pc, #336]	; (800407c <__ieee754_pow+0x23c>)
 8003f2c:	f7fc fbf6 	bl	800071c <__aeabi_ddiv>
 8003f30:	e7a3      	b.n	8003e7a <__ieee754_pow+0x3a>
 8003f32:	2300      	movs	r3, #0
 8003f34:	9300      	str	r3, [sp, #0]
 8003f36:	2a00      	cmp	r2, #0
 8003f38:	d13c      	bne.n	8003fb4 <__ieee754_pow+0x174>
 8003f3a:	4b4e      	ldr	r3, [pc, #312]	; (8004074 <__ieee754_pow+0x234>)
 8003f3c:	429e      	cmp	r6, r3
 8003f3e:	d1eb      	bne.n	8003f18 <__ieee754_pow+0xd8>
 8003f40:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8003f44:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8003f48:	ea53 030a 	orrs.w	r3, r3, sl
 8003f4c:	f000 8449 	beq.w	80047e2 <__ieee754_pow+0x9a2>
 8003f50:	4b4b      	ldr	r3, [pc, #300]	; (8004080 <__ieee754_pow+0x240>)
 8003f52:	429c      	cmp	r4, r3
 8003f54:	dd0b      	ble.n	8003f6e <__ieee754_pow+0x12e>
 8003f56:	2f00      	cmp	r7, #0
 8003f58:	f2c0 8449 	blt.w	80047ee <__ieee754_pow+0x9ae>
 8003f5c:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8003f60:	4658      	mov	r0, fp
 8003f62:	4661      	mov	r1, ip
 8003f64:	b013      	add	sp, #76	; 0x4c
 8003f66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f6a:	2302      	movs	r3, #2
 8003f6c:	e7e2      	b.n	8003f34 <__ieee754_pow+0xf4>
 8003f6e:	2f00      	cmp	r7, #0
 8003f70:	f04f 0b00 	mov.w	fp, #0
 8003f74:	f04f 0c00 	mov.w	ip, #0
 8003f78:	daf2      	bge.n	8003f60 <__ieee754_pow+0x120>
 8003f7a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8003f7e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8003f82:	e7ed      	b.n	8003f60 <__ieee754_pow+0x120>
 8003f84:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8003f88:	d106      	bne.n	8003f98 <__ieee754_pow+0x158>
 8003f8a:	4642      	mov	r2, r8
 8003f8c:	464b      	mov	r3, r9
 8003f8e:	4640      	mov	r0, r8
 8003f90:	4649      	mov	r1, r9
 8003f92:	f7fc fa99 	bl	80004c8 <__aeabi_dmul>
 8003f96:	e770      	b.n	8003e7a <__ieee754_pow+0x3a>
 8003f98:	4b3a      	ldr	r3, [pc, #232]	; (8004084 <__ieee754_pow+0x244>)
 8003f9a:	429f      	cmp	r7, r3
 8003f9c:	d10a      	bne.n	8003fb4 <__ieee754_pow+0x174>
 8003f9e:	2d00      	cmp	r5, #0
 8003fa0:	db08      	blt.n	8003fb4 <__ieee754_pow+0x174>
 8003fa2:	4640      	mov	r0, r8
 8003fa4:	4649      	mov	r1, r9
 8003fa6:	b013      	add	sp, #76	; 0x4c
 8003fa8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fac:	f000 bd0a 	b.w	80049c4 <__ieee754_sqrt>
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	9300      	str	r3, [sp, #0]
 8003fb4:	4640      	mov	r0, r8
 8003fb6:	4649      	mov	r1, r9
 8003fb8:	f000 fc58 	bl	800486c <fabs>
 8003fbc:	4683      	mov	fp, r0
 8003fbe:	468c      	mov	ip, r1
 8003fc0:	f1ba 0f00 	cmp.w	sl, #0
 8003fc4:	d128      	bne.n	8004018 <__ieee754_pow+0x1d8>
 8003fc6:	b124      	cbz	r4, 8003fd2 <__ieee754_pow+0x192>
 8003fc8:	4b2c      	ldr	r3, [pc, #176]	; (800407c <__ieee754_pow+0x23c>)
 8003fca:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d122      	bne.n	8004018 <__ieee754_pow+0x1d8>
 8003fd2:	2f00      	cmp	r7, #0
 8003fd4:	da07      	bge.n	8003fe6 <__ieee754_pow+0x1a6>
 8003fd6:	465a      	mov	r2, fp
 8003fd8:	4663      	mov	r3, ip
 8003fda:	2000      	movs	r0, #0
 8003fdc:	4927      	ldr	r1, [pc, #156]	; (800407c <__ieee754_pow+0x23c>)
 8003fde:	f7fc fb9d 	bl	800071c <__aeabi_ddiv>
 8003fe2:	4683      	mov	fp, r0
 8003fe4:	468c      	mov	ip, r1
 8003fe6:	2d00      	cmp	r5, #0
 8003fe8:	daba      	bge.n	8003f60 <__ieee754_pow+0x120>
 8003fea:	9b00      	ldr	r3, [sp, #0]
 8003fec:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8003ff0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8003ff4:	431c      	orrs	r4, r3
 8003ff6:	d108      	bne.n	800400a <__ieee754_pow+0x1ca>
 8003ff8:	465a      	mov	r2, fp
 8003ffa:	4663      	mov	r3, ip
 8003ffc:	4658      	mov	r0, fp
 8003ffe:	4661      	mov	r1, ip
 8004000:	f7fc f8aa 	bl	8000158 <__aeabi_dsub>
 8004004:	4602      	mov	r2, r0
 8004006:	460b      	mov	r3, r1
 8004008:	e790      	b.n	8003f2c <__ieee754_pow+0xec>
 800400a:	9b00      	ldr	r3, [sp, #0]
 800400c:	2b01      	cmp	r3, #1
 800400e:	d1a7      	bne.n	8003f60 <__ieee754_pow+0x120>
 8004010:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8004014:	469c      	mov	ip, r3
 8004016:	e7a3      	b.n	8003f60 <__ieee754_pow+0x120>
 8004018:	0feb      	lsrs	r3, r5, #31
 800401a:	3b01      	subs	r3, #1
 800401c:	930c      	str	r3, [sp, #48]	; 0x30
 800401e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004020:	9b00      	ldr	r3, [sp, #0]
 8004022:	4313      	orrs	r3, r2
 8004024:	d104      	bne.n	8004030 <__ieee754_pow+0x1f0>
 8004026:	4642      	mov	r2, r8
 8004028:	464b      	mov	r3, r9
 800402a:	4640      	mov	r0, r8
 800402c:	4649      	mov	r1, r9
 800402e:	e7e7      	b.n	8004000 <__ieee754_pow+0x1c0>
 8004030:	4b15      	ldr	r3, [pc, #84]	; (8004088 <__ieee754_pow+0x248>)
 8004032:	429e      	cmp	r6, r3
 8004034:	f340 80f6 	ble.w	8004224 <__ieee754_pow+0x3e4>
 8004038:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800403c:	429e      	cmp	r6, r3
 800403e:	4b10      	ldr	r3, [pc, #64]	; (8004080 <__ieee754_pow+0x240>)
 8004040:	dd09      	ble.n	8004056 <__ieee754_pow+0x216>
 8004042:	429c      	cmp	r4, r3
 8004044:	dc0c      	bgt.n	8004060 <__ieee754_pow+0x220>
 8004046:	2f00      	cmp	r7, #0
 8004048:	da0c      	bge.n	8004064 <__ieee754_pow+0x224>
 800404a:	2000      	movs	r0, #0
 800404c:	b013      	add	sp, #76	; 0x4c
 800404e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004052:	f000 bcb2 	b.w	80049ba <__math_oflow>
 8004056:	429c      	cmp	r4, r3
 8004058:	dbf5      	blt.n	8004046 <__ieee754_pow+0x206>
 800405a:	4b08      	ldr	r3, [pc, #32]	; (800407c <__ieee754_pow+0x23c>)
 800405c:	429c      	cmp	r4, r3
 800405e:	dd15      	ble.n	800408c <__ieee754_pow+0x24c>
 8004060:	2f00      	cmp	r7, #0
 8004062:	dcf2      	bgt.n	800404a <__ieee754_pow+0x20a>
 8004064:	2000      	movs	r0, #0
 8004066:	b013      	add	sp, #76	; 0x4c
 8004068:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800406c:	f000 bca0 	b.w	80049b0 <__math_uflow>
 8004070:	fff00000 	.word	0xfff00000
 8004074:	7ff00000 	.word	0x7ff00000
 8004078:	433fffff 	.word	0x433fffff
 800407c:	3ff00000 	.word	0x3ff00000
 8004080:	3fefffff 	.word	0x3fefffff
 8004084:	3fe00000 	.word	0x3fe00000
 8004088:	41e00000 	.word	0x41e00000
 800408c:	4661      	mov	r1, ip
 800408e:	2200      	movs	r2, #0
 8004090:	4658      	mov	r0, fp
 8004092:	4b5f      	ldr	r3, [pc, #380]	; (8004210 <__ieee754_pow+0x3d0>)
 8004094:	f7fc f860 	bl	8000158 <__aeabi_dsub>
 8004098:	a355      	add	r3, pc, #340	; (adr r3, 80041f0 <__ieee754_pow+0x3b0>)
 800409a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800409e:	4604      	mov	r4, r0
 80040a0:	460d      	mov	r5, r1
 80040a2:	f7fc fa11 	bl	80004c8 <__aeabi_dmul>
 80040a6:	a354      	add	r3, pc, #336	; (adr r3, 80041f8 <__ieee754_pow+0x3b8>)
 80040a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ac:	4606      	mov	r6, r0
 80040ae:	460f      	mov	r7, r1
 80040b0:	4620      	mov	r0, r4
 80040b2:	4629      	mov	r1, r5
 80040b4:	f7fc fa08 	bl	80004c8 <__aeabi_dmul>
 80040b8:	2200      	movs	r2, #0
 80040ba:	4682      	mov	sl, r0
 80040bc:	468b      	mov	fp, r1
 80040be:	4620      	mov	r0, r4
 80040c0:	4629      	mov	r1, r5
 80040c2:	4b54      	ldr	r3, [pc, #336]	; (8004214 <__ieee754_pow+0x3d4>)
 80040c4:	f7fc fa00 	bl	80004c8 <__aeabi_dmul>
 80040c8:	4602      	mov	r2, r0
 80040ca:	460b      	mov	r3, r1
 80040cc:	a14c      	add	r1, pc, #304	; (adr r1, 8004200 <__ieee754_pow+0x3c0>)
 80040ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80040d2:	f7fc f841 	bl	8000158 <__aeabi_dsub>
 80040d6:	4622      	mov	r2, r4
 80040d8:	462b      	mov	r3, r5
 80040da:	f7fc f9f5 	bl	80004c8 <__aeabi_dmul>
 80040de:	4602      	mov	r2, r0
 80040e0:	460b      	mov	r3, r1
 80040e2:	2000      	movs	r0, #0
 80040e4:	494c      	ldr	r1, [pc, #304]	; (8004218 <__ieee754_pow+0x3d8>)
 80040e6:	f7fc f837 	bl	8000158 <__aeabi_dsub>
 80040ea:	4622      	mov	r2, r4
 80040ec:	462b      	mov	r3, r5
 80040ee:	4680      	mov	r8, r0
 80040f0:	4689      	mov	r9, r1
 80040f2:	4620      	mov	r0, r4
 80040f4:	4629      	mov	r1, r5
 80040f6:	f7fc f9e7 	bl	80004c8 <__aeabi_dmul>
 80040fa:	4602      	mov	r2, r0
 80040fc:	460b      	mov	r3, r1
 80040fe:	4640      	mov	r0, r8
 8004100:	4649      	mov	r1, r9
 8004102:	f7fc f9e1 	bl	80004c8 <__aeabi_dmul>
 8004106:	a340      	add	r3, pc, #256	; (adr r3, 8004208 <__ieee754_pow+0x3c8>)
 8004108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800410c:	f7fc f9dc 	bl	80004c8 <__aeabi_dmul>
 8004110:	4602      	mov	r2, r0
 8004112:	460b      	mov	r3, r1
 8004114:	4650      	mov	r0, sl
 8004116:	4659      	mov	r1, fp
 8004118:	f7fc f81e 	bl	8000158 <__aeabi_dsub>
 800411c:	4602      	mov	r2, r0
 800411e:	460b      	mov	r3, r1
 8004120:	4604      	mov	r4, r0
 8004122:	460d      	mov	r5, r1
 8004124:	4630      	mov	r0, r6
 8004126:	4639      	mov	r1, r7
 8004128:	f7fc f818 	bl	800015c <__adddf3>
 800412c:	2000      	movs	r0, #0
 800412e:	4632      	mov	r2, r6
 8004130:	463b      	mov	r3, r7
 8004132:	4682      	mov	sl, r0
 8004134:	468b      	mov	fp, r1
 8004136:	f7fc f80f 	bl	8000158 <__aeabi_dsub>
 800413a:	4602      	mov	r2, r0
 800413c:	460b      	mov	r3, r1
 800413e:	4620      	mov	r0, r4
 8004140:	4629      	mov	r1, r5
 8004142:	f7fc f809 	bl	8000158 <__aeabi_dsub>
 8004146:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800414a:	9b00      	ldr	r3, [sp, #0]
 800414c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800414e:	3b01      	subs	r3, #1
 8004150:	4313      	orrs	r3, r2
 8004152:	f04f 0600 	mov.w	r6, #0
 8004156:	f04f 0200 	mov.w	r2, #0
 800415a:	bf0c      	ite	eq
 800415c:	4b2f      	ldreq	r3, [pc, #188]	; (800421c <__ieee754_pow+0x3dc>)
 800415e:	4b2c      	ldrne	r3, [pc, #176]	; (8004210 <__ieee754_pow+0x3d0>)
 8004160:	4604      	mov	r4, r0
 8004162:	460d      	mov	r5, r1
 8004164:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004168:	e9cd 2300 	strd	r2, r3, [sp]
 800416c:	4632      	mov	r2, r6
 800416e:	463b      	mov	r3, r7
 8004170:	f7fb fff2 	bl	8000158 <__aeabi_dsub>
 8004174:	4652      	mov	r2, sl
 8004176:	465b      	mov	r3, fp
 8004178:	f7fc f9a6 	bl	80004c8 <__aeabi_dmul>
 800417c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004180:	4680      	mov	r8, r0
 8004182:	4689      	mov	r9, r1
 8004184:	4620      	mov	r0, r4
 8004186:	4629      	mov	r1, r5
 8004188:	f7fc f99e 	bl	80004c8 <__aeabi_dmul>
 800418c:	4602      	mov	r2, r0
 800418e:	460b      	mov	r3, r1
 8004190:	4640      	mov	r0, r8
 8004192:	4649      	mov	r1, r9
 8004194:	f7fb ffe2 	bl	800015c <__adddf3>
 8004198:	4632      	mov	r2, r6
 800419a:	463b      	mov	r3, r7
 800419c:	4680      	mov	r8, r0
 800419e:	4689      	mov	r9, r1
 80041a0:	4650      	mov	r0, sl
 80041a2:	4659      	mov	r1, fp
 80041a4:	f7fc f990 	bl	80004c8 <__aeabi_dmul>
 80041a8:	4604      	mov	r4, r0
 80041aa:	460d      	mov	r5, r1
 80041ac:	460b      	mov	r3, r1
 80041ae:	4602      	mov	r2, r0
 80041b0:	4649      	mov	r1, r9
 80041b2:	4640      	mov	r0, r8
 80041b4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80041b8:	f7fb ffd0 	bl	800015c <__adddf3>
 80041bc:	4b18      	ldr	r3, [pc, #96]	; (8004220 <__ieee754_pow+0x3e0>)
 80041be:	4682      	mov	sl, r0
 80041c0:	4299      	cmp	r1, r3
 80041c2:	460f      	mov	r7, r1
 80041c4:	460e      	mov	r6, r1
 80041c6:	f340 82e7 	ble.w	8004798 <__ieee754_pow+0x958>
 80041ca:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80041ce:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80041d2:	4303      	orrs	r3, r0
 80041d4:	f000 81e2 	beq.w	800459c <__ieee754_pow+0x75c>
 80041d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80041dc:	2200      	movs	r2, #0
 80041de:	2300      	movs	r3, #0
 80041e0:	f7fc fbe4 	bl	80009ac <__aeabi_dcmplt>
 80041e4:	3800      	subs	r0, #0
 80041e6:	bf18      	it	ne
 80041e8:	2001      	movne	r0, #1
 80041ea:	e72f      	b.n	800404c <__ieee754_pow+0x20c>
 80041ec:	f3af 8000 	nop.w
 80041f0:	60000000 	.word	0x60000000
 80041f4:	3ff71547 	.word	0x3ff71547
 80041f8:	f85ddf44 	.word	0xf85ddf44
 80041fc:	3e54ae0b 	.word	0x3e54ae0b
 8004200:	55555555 	.word	0x55555555
 8004204:	3fd55555 	.word	0x3fd55555
 8004208:	652b82fe 	.word	0x652b82fe
 800420c:	3ff71547 	.word	0x3ff71547
 8004210:	3ff00000 	.word	0x3ff00000
 8004214:	3fd00000 	.word	0x3fd00000
 8004218:	3fe00000 	.word	0x3fe00000
 800421c:	bff00000 	.word	0xbff00000
 8004220:	408fffff 	.word	0x408fffff
 8004224:	4bd4      	ldr	r3, [pc, #848]	; (8004578 <__ieee754_pow+0x738>)
 8004226:	2200      	movs	r2, #0
 8004228:	402b      	ands	r3, r5
 800422a:	b943      	cbnz	r3, 800423e <__ieee754_pow+0x3fe>
 800422c:	4658      	mov	r0, fp
 800422e:	4661      	mov	r1, ip
 8004230:	4bd2      	ldr	r3, [pc, #840]	; (800457c <__ieee754_pow+0x73c>)
 8004232:	f7fc f949 	bl	80004c8 <__aeabi_dmul>
 8004236:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800423a:	4683      	mov	fp, r0
 800423c:	460c      	mov	r4, r1
 800423e:	1523      	asrs	r3, r4, #20
 8004240:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004244:	4413      	add	r3, r2
 8004246:	930b      	str	r3, [sp, #44]	; 0x2c
 8004248:	4bcd      	ldr	r3, [pc, #820]	; (8004580 <__ieee754_pow+0x740>)
 800424a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800424e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8004252:	429c      	cmp	r4, r3
 8004254:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8004258:	dd08      	ble.n	800426c <__ieee754_pow+0x42c>
 800425a:	4bca      	ldr	r3, [pc, #808]	; (8004584 <__ieee754_pow+0x744>)
 800425c:	429c      	cmp	r4, r3
 800425e:	f340 8164 	ble.w	800452a <__ieee754_pow+0x6ea>
 8004262:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004264:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8004268:	3301      	adds	r3, #1
 800426a:	930b      	str	r3, [sp, #44]	; 0x2c
 800426c:	2600      	movs	r6, #0
 800426e:	00f3      	lsls	r3, r6, #3
 8004270:	930d      	str	r3, [sp, #52]	; 0x34
 8004272:	4bc5      	ldr	r3, [pc, #788]	; (8004588 <__ieee754_pow+0x748>)
 8004274:	4658      	mov	r0, fp
 8004276:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800427a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800427e:	4629      	mov	r1, r5
 8004280:	461a      	mov	r2, r3
 8004282:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8004286:	4623      	mov	r3, r4
 8004288:	f7fb ff66 	bl	8000158 <__aeabi_dsub>
 800428c:	46da      	mov	sl, fp
 800428e:	462b      	mov	r3, r5
 8004290:	4652      	mov	r2, sl
 8004292:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8004296:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800429a:	f7fb ff5f 	bl	800015c <__adddf3>
 800429e:	4602      	mov	r2, r0
 80042a0:	460b      	mov	r3, r1
 80042a2:	2000      	movs	r0, #0
 80042a4:	49b9      	ldr	r1, [pc, #740]	; (800458c <__ieee754_pow+0x74c>)
 80042a6:	f7fc fa39 	bl	800071c <__aeabi_ddiv>
 80042aa:	4602      	mov	r2, r0
 80042ac:	460b      	mov	r3, r1
 80042ae:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80042b2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80042b6:	f7fc f907 	bl	80004c8 <__aeabi_dmul>
 80042ba:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80042be:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 80042c2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80042c6:	2300      	movs	r3, #0
 80042c8:	2200      	movs	r2, #0
 80042ca:	46ab      	mov	fp, r5
 80042cc:	106d      	asrs	r5, r5, #1
 80042ce:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80042d2:	9304      	str	r3, [sp, #16]
 80042d4:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80042d8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80042dc:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 80042e0:	4640      	mov	r0, r8
 80042e2:	4649      	mov	r1, r9
 80042e4:	4614      	mov	r4, r2
 80042e6:	461d      	mov	r5, r3
 80042e8:	f7fc f8ee 	bl	80004c8 <__aeabi_dmul>
 80042ec:	4602      	mov	r2, r0
 80042ee:	460b      	mov	r3, r1
 80042f0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80042f4:	f7fb ff30 	bl	8000158 <__aeabi_dsub>
 80042f8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80042fc:	4606      	mov	r6, r0
 80042fe:	460f      	mov	r7, r1
 8004300:	4620      	mov	r0, r4
 8004302:	4629      	mov	r1, r5
 8004304:	f7fb ff28 	bl	8000158 <__aeabi_dsub>
 8004308:	4602      	mov	r2, r0
 800430a:	460b      	mov	r3, r1
 800430c:	4650      	mov	r0, sl
 800430e:	4659      	mov	r1, fp
 8004310:	f7fb ff22 	bl	8000158 <__aeabi_dsub>
 8004314:	4642      	mov	r2, r8
 8004316:	464b      	mov	r3, r9
 8004318:	f7fc f8d6 	bl	80004c8 <__aeabi_dmul>
 800431c:	4602      	mov	r2, r0
 800431e:	460b      	mov	r3, r1
 8004320:	4630      	mov	r0, r6
 8004322:	4639      	mov	r1, r7
 8004324:	f7fb ff18 	bl	8000158 <__aeabi_dsub>
 8004328:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800432c:	f7fc f8cc 	bl	80004c8 <__aeabi_dmul>
 8004330:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004334:	4682      	mov	sl, r0
 8004336:	468b      	mov	fp, r1
 8004338:	4610      	mov	r0, r2
 800433a:	4619      	mov	r1, r3
 800433c:	f7fc f8c4 	bl	80004c8 <__aeabi_dmul>
 8004340:	a37b      	add	r3, pc, #492	; (adr r3, 8004530 <__ieee754_pow+0x6f0>)
 8004342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004346:	4604      	mov	r4, r0
 8004348:	460d      	mov	r5, r1
 800434a:	f7fc f8bd 	bl	80004c8 <__aeabi_dmul>
 800434e:	a37a      	add	r3, pc, #488	; (adr r3, 8004538 <__ieee754_pow+0x6f8>)
 8004350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004354:	f7fb ff02 	bl	800015c <__adddf3>
 8004358:	4622      	mov	r2, r4
 800435a:	462b      	mov	r3, r5
 800435c:	f7fc f8b4 	bl	80004c8 <__aeabi_dmul>
 8004360:	a377      	add	r3, pc, #476	; (adr r3, 8004540 <__ieee754_pow+0x700>)
 8004362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004366:	f7fb fef9 	bl	800015c <__adddf3>
 800436a:	4622      	mov	r2, r4
 800436c:	462b      	mov	r3, r5
 800436e:	f7fc f8ab 	bl	80004c8 <__aeabi_dmul>
 8004372:	a375      	add	r3, pc, #468	; (adr r3, 8004548 <__ieee754_pow+0x708>)
 8004374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004378:	f7fb fef0 	bl	800015c <__adddf3>
 800437c:	4622      	mov	r2, r4
 800437e:	462b      	mov	r3, r5
 8004380:	f7fc f8a2 	bl	80004c8 <__aeabi_dmul>
 8004384:	a372      	add	r3, pc, #456	; (adr r3, 8004550 <__ieee754_pow+0x710>)
 8004386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800438a:	f7fb fee7 	bl	800015c <__adddf3>
 800438e:	4622      	mov	r2, r4
 8004390:	462b      	mov	r3, r5
 8004392:	f7fc f899 	bl	80004c8 <__aeabi_dmul>
 8004396:	a370      	add	r3, pc, #448	; (adr r3, 8004558 <__ieee754_pow+0x718>)
 8004398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800439c:	f7fb fede 	bl	800015c <__adddf3>
 80043a0:	4622      	mov	r2, r4
 80043a2:	4606      	mov	r6, r0
 80043a4:	460f      	mov	r7, r1
 80043a6:	462b      	mov	r3, r5
 80043a8:	4620      	mov	r0, r4
 80043aa:	4629      	mov	r1, r5
 80043ac:	f7fc f88c 	bl	80004c8 <__aeabi_dmul>
 80043b0:	4602      	mov	r2, r0
 80043b2:	460b      	mov	r3, r1
 80043b4:	4630      	mov	r0, r6
 80043b6:	4639      	mov	r1, r7
 80043b8:	f7fc f886 	bl	80004c8 <__aeabi_dmul>
 80043bc:	4604      	mov	r4, r0
 80043be:	460d      	mov	r5, r1
 80043c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80043c4:	4642      	mov	r2, r8
 80043c6:	464b      	mov	r3, r9
 80043c8:	f7fb fec8 	bl	800015c <__adddf3>
 80043cc:	4652      	mov	r2, sl
 80043ce:	465b      	mov	r3, fp
 80043d0:	f7fc f87a 	bl	80004c8 <__aeabi_dmul>
 80043d4:	4622      	mov	r2, r4
 80043d6:	462b      	mov	r3, r5
 80043d8:	f7fb fec0 	bl	800015c <__adddf3>
 80043dc:	4642      	mov	r2, r8
 80043de:	4606      	mov	r6, r0
 80043e0:	460f      	mov	r7, r1
 80043e2:	464b      	mov	r3, r9
 80043e4:	4640      	mov	r0, r8
 80043e6:	4649      	mov	r1, r9
 80043e8:	f7fc f86e 	bl	80004c8 <__aeabi_dmul>
 80043ec:	4602      	mov	r2, r0
 80043ee:	460b      	mov	r3, r1
 80043f0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80043f4:	2200      	movs	r2, #0
 80043f6:	4b66      	ldr	r3, [pc, #408]	; (8004590 <__ieee754_pow+0x750>)
 80043f8:	f7fb feb0 	bl	800015c <__adddf3>
 80043fc:	4632      	mov	r2, r6
 80043fe:	463b      	mov	r3, r7
 8004400:	f7fb feac 	bl	800015c <__adddf3>
 8004404:	2400      	movs	r4, #0
 8004406:	460d      	mov	r5, r1
 8004408:	4622      	mov	r2, r4
 800440a:	460b      	mov	r3, r1
 800440c:	4640      	mov	r0, r8
 800440e:	4649      	mov	r1, r9
 8004410:	f7fc f85a 	bl	80004c8 <__aeabi_dmul>
 8004414:	2200      	movs	r2, #0
 8004416:	4680      	mov	r8, r0
 8004418:	4689      	mov	r9, r1
 800441a:	4620      	mov	r0, r4
 800441c:	4629      	mov	r1, r5
 800441e:	4b5c      	ldr	r3, [pc, #368]	; (8004590 <__ieee754_pow+0x750>)
 8004420:	f7fb fe9a 	bl	8000158 <__aeabi_dsub>
 8004424:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004428:	f7fb fe96 	bl	8000158 <__aeabi_dsub>
 800442c:	4602      	mov	r2, r0
 800442e:	460b      	mov	r3, r1
 8004430:	4630      	mov	r0, r6
 8004432:	4639      	mov	r1, r7
 8004434:	f7fb fe90 	bl	8000158 <__aeabi_dsub>
 8004438:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800443c:	f7fc f844 	bl	80004c8 <__aeabi_dmul>
 8004440:	4622      	mov	r2, r4
 8004442:	4606      	mov	r6, r0
 8004444:	460f      	mov	r7, r1
 8004446:	462b      	mov	r3, r5
 8004448:	4650      	mov	r0, sl
 800444a:	4659      	mov	r1, fp
 800444c:	f7fc f83c 	bl	80004c8 <__aeabi_dmul>
 8004450:	4602      	mov	r2, r0
 8004452:	460b      	mov	r3, r1
 8004454:	4630      	mov	r0, r6
 8004456:	4639      	mov	r1, r7
 8004458:	f7fb fe80 	bl	800015c <__adddf3>
 800445c:	2400      	movs	r4, #0
 800445e:	4606      	mov	r6, r0
 8004460:	460f      	mov	r7, r1
 8004462:	4602      	mov	r2, r0
 8004464:	460b      	mov	r3, r1
 8004466:	4640      	mov	r0, r8
 8004468:	4649      	mov	r1, r9
 800446a:	f7fb fe77 	bl	800015c <__adddf3>
 800446e:	a33c      	add	r3, pc, #240	; (adr r3, 8004560 <__ieee754_pow+0x720>)
 8004470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004474:	4620      	mov	r0, r4
 8004476:	460d      	mov	r5, r1
 8004478:	f7fc f826 	bl	80004c8 <__aeabi_dmul>
 800447c:	4642      	mov	r2, r8
 800447e:	464b      	mov	r3, r9
 8004480:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004484:	4620      	mov	r0, r4
 8004486:	4629      	mov	r1, r5
 8004488:	f7fb fe66 	bl	8000158 <__aeabi_dsub>
 800448c:	4602      	mov	r2, r0
 800448e:	460b      	mov	r3, r1
 8004490:	4630      	mov	r0, r6
 8004492:	4639      	mov	r1, r7
 8004494:	f7fb fe60 	bl	8000158 <__aeabi_dsub>
 8004498:	a333      	add	r3, pc, #204	; (adr r3, 8004568 <__ieee754_pow+0x728>)
 800449a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800449e:	f7fc f813 	bl	80004c8 <__aeabi_dmul>
 80044a2:	a333      	add	r3, pc, #204	; (adr r3, 8004570 <__ieee754_pow+0x730>)
 80044a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044a8:	4606      	mov	r6, r0
 80044aa:	460f      	mov	r7, r1
 80044ac:	4620      	mov	r0, r4
 80044ae:	4629      	mov	r1, r5
 80044b0:	f7fc f80a 	bl	80004c8 <__aeabi_dmul>
 80044b4:	4602      	mov	r2, r0
 80044b6:	460b      	mov	r3, r1
 80044b8:	4630      	mov	r0, r6
 80044ba:	4639      	mov	r1, r7
 80044bc:	f7fb fe4e 	bl	800015c <__adddf3>
 80044c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80044c2:	4b34      	ldr	r3, [pc, #208]	; (8004594 <__ieee754_pow+0x754>)
 80044c4:	4413      	add	r3, r2
 80044c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ca:	f7fb fe47 	bl	800015c <__adddf3>
 80044ce:	4680      	mov	r8, r0
 80044d0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80044d2:	4689      	mov	r9, r1
 80044d4:	f7fb ff8e 	bl	80003f4 <__aeabi_i2d>
 80044d8:	4604      	mov	r4, r0
 80044da:	460d      	mov	r5, r1
 80044dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80044e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80044e2:	4b2d      	ldr	r3, [pc, #180]	; (8004598 <__ieee754_pow+0x758>)
 80044e4:	4413      	add	r3, r2
 80044e6:	e9d3 6700 	ldrd	r6, r7, [r3]
 80044ea:	4642      	mov	r2, r8
 80044ec:	464b      	mov	r3, r9
 80044ee:	f7fb fe35 	bl	800015c <__adddf3>
 80044f2:	4632      	mov	r2, r6
 80044f4:	463b      	mov	r3, r7
 80044f6:	f7fb fe31 	bl	800015c <__adddf3>
 80044fa:	4622      	mov	r2, r4
 80044fc:	462b      	mov	r3, r5
 80044fe:	f7fb fe2d 	bl	800015c <__adddf3>
 8004502:	2000      	movs	r0, #0
 8004504:	4622      	mov	r2, r4
 8004506:	462b      	mov	r3, r5
 8004508:	4682      	mov	sl, r0
 800450a:	468b      	mov	fp, r1
 800450c:	f7fb fe24 	bl	8000158 <__aeabi_dsub>
 8004510:	4632      	mov	r2, r6
 8004512:	463b      	mov	r3, r7
 8004514:	f7fb fe20 	bl	8000158 <__aeabi_dsub>
 8004518:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800451c:	f7fb fe1c 	bl	8000158 <__aeabi_dsub>
 8004520:	4602      	mov	r2, r0
 8004522:	460b      	mov	r3, r1
 8004524:	4640      	mov	r0, r8
 8004526:	4649      	mov	r1, r9
 8004528:	e60b      	b.n	8004142 <__ieee754_pow+0x302>
 800452a:	2601      	movs	r6, #1
 800452c:	e69f      	b.n	800426e <__ieee754_pow+0x42e>
 800452e:	bf00      	nop
 8004530:	4a454eef 	.word	0x4a454eef
 8004534:	3fca7e28 	.word	0x3fca7e28
 8004538:	93c9db65 	.word	0x93c9db65
 800453c:	3fcd864a 	.word	0x3fcd864a
 8004540:	a91d4101 	.word	0xa91d4101
 8004544:	3fd17460 	.word	0x3fd17460
 8004548:	518f264d 	.word	0x518f264d
 800454c:	3fd55555 	.word	0x3fd55555
 8004550:	db6fabff 	.word	0xdb6fabff
 8004554:	3fdb6db6 	.word	0x3fdb6db6
 8004558:	33333303 	.word	0x33333303
 800455c:	3fe33333 	.word	0x3fe33333
 8004560:	e0000000 	.word	0xe0000000
 8004564:	3feec709 	.word	0x3feec709
 8004568:	dc3a03fd 	.word	0xdc3a03fd
 800456c:	3feec709 	.word	0x3feec709
 8004570:	145b01f5 	.word	0x145b01f5
 8004574:	be3e2fe0 	.word	0xbe3e2fe0
 8004578:	7ff00000 	.word	0x7ff00000
 800457c:	43400000 	.word	0x43400000
 8004580:	0003988e 	.word	0x0003988e
 8004584:	000bb679 	.word	0x000bb679
 8004588:	08004bf8 	.word	0x08004bf8
 800458c:	3ff00000 	.word	0x3ff00000
 8004590:	40080000 	.word	0x40080000
 8004594:	08004c18 	.word	0x08004c18
 8004598:	08004c08 	.word	0x08004c08
 800459c:	a39c      	add	r3, pc, #624	; (adr r3, 8004810 <__ieee754_pow+0x9d0>)
 800459e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045a2:	4640      	mov	r0, r8
 80045a4:	4649      	mov	r1, r9
 80045a6:	f7fb fdd9 	bl	800015c <__adddf3>
 80045aa:	4622      	mov	r2, r4
 80045ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80045b0:	462b      	mov	r3, r5
 80045b2:	4650      	mov	r0, sl
 80045b4:	4639      	mov	r1, r7
 80045b6:	f7fb fdcf 	bl	8000158 <__aeabi_dsub>
 80045ba:	4602      	mov	r2, r0
 80045bc:	460b      	mov	r3, r1
 80045be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80045c2:	f7fc fa11 	bl	80009e8 <__aeabi_dcmpgt>
 80045c6:	2800      	cmp	r0, #0
 80045c8:	f47f ae06 	bne.w	80041d8 <__ieee754_pow+0x398>
 80045cc:	4aa2      	ldr	r2, [pc, #648]	; (8004858 <__ieee754_pow+0xa18>)
 80045ce:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 80045d2:	4293      	cmp	r3, r2
 80045d4:	f340 8100 	ble.w	80047d8 <__ieee754_pow+0x998>
 80045d8:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80045dc:	151b      	asrs	r3, r3, #20
 80045de:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80045e2:	fa4a fa03 	asr.w	sl, sl, r3
 80045e6:	44b2      	add	sl, r6
 80045e8:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80045ec:	489b      	ldr	r0, [pc, #620]	; (800485c <__ieee754_pow+0xa1c>)
 80045ee:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80045f2:	4108      	asrs	r0, r1
 80045f4:	ea00 030a 	and.w	r3, r0, sl
 80045f8:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80045fc:	f1c1 0114 	rsb	r1, r1, #20
 8004600:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8004604:	fa4a fa01 	asr.w	sl, sl, r1
 8004608:	2e00      	cmp	r6, #0
 800460a:	f04f 0200 	mov.w	r2, #0
 800460e:	4620      	mov	r0, r4
 8004610:	4629      	mov	r1, r5
 8004612:	bfb8      	it	lt
 8004614:	f1ca 0a00 	rsblt	sl, sl, #0
 8004618:	f7fb fd9e 	bl	8000158 <__aeabi_dsub>
 800461c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004620:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004624:	2400      	movs	r4, #0
 8004626:	4642      	mov	r2, r8
 8004628:	464b      	mov	r3, r9
 800462a:	f7fb fd97 	bl	800015c <__adddf3>
 800462e:	a37a      	add	r3, pc, #488	; (adr r3, 8004818 <__ieee754_pow+0x9d8>)
 8004630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004634:	4620      	mov	r0, r4
 8004636:	460d      	mov	r5, r1
 8004638:	f7fb ff46 	bl	80004c8 <__aeabi_dmul>
 800463c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004640:	4606      	mov	r6, r0
 8004642:	460f      	mov	r7, r1
 8004644:	4620      	mov	r0, r4
 8004646:	4629      	mov	r1, r5
 8004648:	f7fb fd86 	bl	8000158 <__aeabi_dsub>
 800464c:	4602      	mov	r2, r0
 800464e:	460b      	mov	r3, r1
 8004650:	4640      	mov	r0, r8
 8004652:	4649      	mov	r1, r9
 8004654:	f7fb fd80 	bl	8000158 <__aeabi_dsub>
 8004658:	a371      	add	r3, pc, #452	; (adr r3, 8004820 <__ieee754_pow+0x9e0>)
 800465a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800465e:	f7fb ff33 	bl	80004c8 <__aeabi_dmul>
 8004662:	a371      	add	r3, pc, #452	; (adr r3, 8004828 <__ieee754_pow+0x9e8>)
 8004664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004668:	4680      	mov	r8, r0
 800466a:	4689      	mov	r9, r1
 800466c:	4620      	mov	r0, r4
 800466e:	4629      	mov	r1, r5
 8004670:	f7fb ff2a 	bl	80004c8 <__aeabi_dmul>
 8004674:	4602      	mov	r2, r0
 8004676:	460b      	mov	r3, r1
 8004678:	4640      	mov	r0, r8
 800467a:	4649      	mov	r1, r9
 800467c:	f7fb fd6e 	bl	800015c <__adddf3>
 8004680:	4604      	mov	r4, r0
 8004682:	460d      	mov	r5, r1
 8004684:	4602      	mov	r2, r0
 8004686:	460b      	mov	r3, r1
 8004688:	4630      	mov	r0, r6
 800468a:	4639      	mov	r1, r7
 800468c:	f7fb fd66 	bl	800015c <__adddf3>
 8004690:	4632      	mov	r2, r6
 8004692:	463b      	mov	r3, r7
 8004694:	4680      	mov	r8, r0
 8004696:	4689      	mov	r9, r1
 8004698:	f7fb fd5e 	bl	8000158 <__aeabi_dsub>
 800469c:	4602      	mov	r2, r0
 800469e:	460b      	mov	r3, r1
 80046a0:	4620      	mov	r0, r4
 80046a2:	4629      	mov	r1, r5
 80046a4:	f7fb fd58 	bl	8000158 <__aeabi_dsub>
 80046a8:	4642      	mov	r2, r8
 80046aa:	4606      	mov	r6, r0
 80046ac:	460f      	mov	r7, r1
 80046ae:	464b      	mov	r3, r9
 80046b0:	4640      	mov	r0, r8
 80046b2:	4649      	mov	r1, r9
 80046b4:	f7fb ff08 	bl	80004c8 <__aeabi_dmul>
 80046b8:	a35d      	add	r3, pc, #372	; (adr r3, 8004830 <__ieee754_pow+0x9f0>)
 80046ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046be:	4604      	mov	r4, r0
 80046c0:	460d      	mov	r5, r1
 80046c2:	f7fb ff01 	bl	80004c8 <__aeabi_dmul>
 80046c6:	a35c      	add	r3, pc, #368	; (adr r3, 8004838 <__ieee754_pow+0x9f8>)
 80046c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046cc:	f7fb fd44 	bl	8000158 <__aeabi_dsub>
 80046d0:	4622      	mov	r2, r4
 80046d2:	462b      	mov	r3, r5
 80046d4:	f7fb fef8 	bl	80004c8 <__aeabi_dmul>
 80046d8:	a359      	add	r3, pc, #356	; (adr r3, 8004840 <__ieee754_pow+0xa00>)
 80046da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046de:	f7fb fd3d 	bl	800015c <__adddf3>
 80046e2:	4622      	mov	r2, r4
 80046e4:	462b      	mov	r3, r5
 80046e6:	f7fb feef 	bl	80004c8 <__aeabi_dmul>
 80046ea:	a357      	add	r3, pc, #348	; (adr r3, 8004848 <__ieee754_pow+0xa08>)
 80046ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046f0:	f7fb fd32 	bl	8000158 <__aeabi_dsub>
 80046f4:	4622      	mov	r2, r4
 80046f6:	462b      	mov	r3, r5
 80046f8:	f7fb fee6 	bl	80004c8 <__aeabi_dmul>
 80046fc:	a354      	add	r3, pc, #336	; (adr r3, 8004850 <__ieee754_pow+0xa10>)
 80046fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004702:	f7fb fd2b 	bl	800015c <__adddf3>
 8004706:	4622      	mov	r2, r4
 8004708:	462b      	mov	r3, r5
 800470a:	f7fb fedd 	bl	80004c8 <__aeabi_dmul>
 800470e:	4602      	mov	r2, r0
 8004710:	460b      	mov	r3, r1
 8004712:	4640      	mov	r0, r8
 8004714:	4649      	mov	r1, r9
 8004716:	f7fb fd1f 	bl	8000158 <__aeabi_dsub>
 800471a:	4604      	mov	r4, r0
 800471c:	460d      	mov	r5, r1
 800471e:	4602      	mov	r2, r0
 8004720:	460b      	mov	r3, r1
 8004722:	4640      	mov	r0, r8
 8004724:	4649      	mov	r1, r9
 8004726:	f7fb fecf 	bl	80004c8 <__aeabi_dmul>
 800472a:	2200      	movs	r2, #0
 800472c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004730:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004734:	4620      	mov	r0, r4
 8004736:	4629      	mov	r1, r5
 8004738:	f7fb fd0e 	bl	8000158 <__aeabi_dsub>
 800473c:	4602      	mov	r2, r0
 800473e:	460b      	mov	r3, r1
 8004740:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004744:	f7fb ffea 	bl	800071c <__aeabi_ddiv>
 8004748:	4632      	mov	r2, r6
 800474a:	4604      	mov	r4, r0
 800474c:	460d      	mov	r5, r1
 800474e:	463b      	mov	r3, r7
 8004750:	4640      	mov	r0, r8
 8004752:	4649      	mov	r1, r9
 8004754:	f7fb feb8 	bl	80004c8 <__aeabi_dmul>
 8004758:	4632      	mov	r2, r6
 800475a:	463b      	mov	r3, r7
 800475c:	f7fb fcfe 	bl	800015c <__adddf3>
 8004760:	4602      	mov	r2, r0
 8004762:	460b      	mov	r3, r1
 8004764:	4620      	mov	r0, r4
 8004766:	4629      	mov	r1, r5
 8004768:	f7fb fcf6 	bl	8000158 <__aeabi_dsub>
 800476c:	4642      	mov	r2, r8
 800476e:	464b      	mov	r3, r9
 8004770:	f7fb fcf2 	bl	8000158 <__aeabi_dsub>
 8004774:	4602      	mov	r2, r0
 8004776:	460b      	mov	r3, r1
 8004778:	2000      	movs	r0, #0
 800477a:	4939      	ldr	r1, [pc, #228]	; (8004860 <__ieee754_pow+0xa20>)
 800477c:	f7fb fcec 	bl	8000158 <__aeabi_dsub>
 8004780:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8004784:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8004788:	da29      	bge.n	80047de <__ieee754_pow+0x99e>
 800478a:	4652      	mov	r2, sl
 800478c:	f000 f874 	bl	8004878 <scalbn>
 8004790:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004794:	f7ff bbfd 	b.w	8003f92 <__ieee754_pow+0x152>
 8004798:	4b32      	ldr	r3, [pc, #200]	; (8004864 <__ieee754_pow+0xa24>)
 800479a:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800479e:	429f      	cmp	r7, r3
 80047a0:	f77f af14 	ble.w	80045cc <__ieee754_pow+0x78c>
 80047a4:	4b30      	ldr	r3, [pc, #192]	; (8004868 <__ieee754_pow+0xa28>)
 80047a6:	440b      	add	r3, r1
 80047a8:	4303      	orrs	r3, r0
 80047aa:	d009      	beq.n	80047c0 <__ieee754_pow+0x980>
 80047ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80047b0:	2200      	movs	r2, #0
 80047b2:	2300      	movs	r3, #0
 80047b4:	f7fc f8fa 	bl	80009ac <__aeabi_dcmplt>
 80047b8:	3800      	subs	r0, #0
 80047ba:	bf18      	it	ne
 80047bc:	2001      	movne	r0, #1
 80047be:	e452      	b.n	8004066 <__ieee754_pow+0x226>
 80047c0:	4622      	mov	r2, r4
 80047c2:	462b      	mov	r3, r5
 80047c4:	f7fb fcc8 	bl	8000158 <__aeabi_dsub>
 80047c8:	4642      	mov	r2, r8
 80047ca:	464b      	mov	r3, r9
 80047cc:	f7fc f902 	bl	80009d4 <__aeabi_dcmpge>
 80047d0:	2800      	cmp	r0, #0
 80047d2:	f43f aefb 	beq.w	80045cc <__ieee754_pow+0x78c>
 80047d6:	e7e9      	b.n	80047ac <__ieee754_pow+0x96c>
 80047d8:	f04f 0a00 	mov.w	sl, #0
 80047dc:	e720      	b.n	8004620 <__ieee754_pow+0x7e0>
 80047de:	4621      	mov	r1, r4
 80047e0:	e7d6      	b.n	8004790 <__ieee754_pow+0x950>
 80047e2:	f04f 0b00 	mov.w	fp, #0
 80047e6:	f8df c078 	ldr.w	ip, [pc, #120]	; 8004860 <__ieee754_pow+0xa20>
 80047ea:	f7ff bbb9 	b.w	8003f60 <__ieee754_pow+0x120>
 80047ee:	f04f 0b00 	mov.w	fp, #0
 80047f2:	f04f 0c00 	mov.w	ip, #0
 80047f6:	f7ff bbb3 	b.w	8003f60 <__ieee754_pow+0x120>
 80047fa:	4640      	mov	r0, r8
 80047fc:	4649      	mov	r1, r9
 80047fe:	f7ff bb3c 	b.w	8003e7a <__ieee754_pow+0x3a>
 8004802:	9200      	str	r2, [sp, #0]
 8004804:	f7ff bb88 	b.w	8003f18 <__ieee754_pow+0xd8>
 8004808:	2300      	movs	r3, #0
 800480a:	f7ff bb72 	b.w	8003ef2 <__ieee754_pow+0xb2>
 800480e:	bf00      	nop
 8004810:	652b82fe 	.word	0x652b82fe
 8004814:	3c971547 	.word	0x3c971547
 8004818:	00000000 	.word	0x00000000
 800481c:	3fe62e43 	.word	0x3fe62e43
 8004820:	fefa39ef 	.word	0xfefa39ef
 8004824:	3fe62e42 	.word	0x3fe62e42
 8004828:	0ca86c39 	.word	0x0ca86c39
 800482c:	be205c61 	.word	0xbe205c61
 8004830:	72bea4d0 	.word	0x72bea4d0
 8004834:	3e663769 	.word	0x3e663769
 8004838:	c5d26bf1 	.word	0xc5d26bf1
 800483c:	3ebbbd41 	.word	0x3ebbbd41
 8004840:	af25de2c 	.word	0xaf25de2c
 8004844:	3f11566a 	.word	0x3f11566a
 8004848:	16bebd93 	.word	0x16bebd93
 800484c:	3f66c16c 	.word	0x3f66c16c
 8004850:	5555553e 	.word	0x5555553e
 8004854:	3fc55555 	.word	0x3fc55555
 8004858:	3fe00000 	.word	0x3fe00000
 800485c:	fff00000 	.word	0xfff00000
 8004860:	3ff00000 	.word	0x3ff00000
 8004864:	4090cbff 	.word	0x4090cbff
 8004868:	3f6f3400 	.word	0x3f6f3400

0800486c <fabs>:
 800486c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004870:	4619      	mov	r1, r3
 8004872:	4770      	bx	lr
 8004874:	0000      	movs	r0, r0
	...

08004878 <scalbn>:
 8004878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800487a:	4616      	mov	r6, r2
 800487c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004880:	4604      	mov	r4, r0
 8004882:	460d      	mov	r5, r1
 8004884:	460b      	mov	r3, r1
 8004886:	b992      	cbnz	r2, 80048ae <scalbn+0x36>
 8004888:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800488c:	4303      	orrs	r3, r0
 800488e:	d03c      	beq.n	800490a <scalbn+0x92>
 8004890:	4b31      	ldr	r3, [pc, #196]	; (8004958 <scalbn+0xe0>)
 8004892:	2200      	movs	r2, #0
 8004894:	f7fb fe18 	bl	80004c8 <__aeabi_dmul>
 8004898:	4b30      	ldr	r3, [pc, #192]	; (800495c <scalbn+0xe4>)
 800489a:	4604      	mov	r4, r0
 800489c:	429e      	cmp	r6, r3
 800489e:	460d      	mov	r5, r1
 80048a0:	da0f      	bge.n	80048c2 <scalbn+0x4a>
 80048a2:	a329      	add	r3, pc, #164	; (adr r3, 8004948 <scalbn+0xd0>)
 80048a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048a8:	f7fb fe0e 	bl	80004c8 <__aeabi_dmul>
 80048ac:	e006      	b.n	80048bc <scalbn+0x44>
 80048ae:	f240 77ff 	movw	r7, #2047	; 0x7ff
 80048b2:	42ba      	cmp	r2, r7
 80048b4:	d109      	bne.n	80048ca <scalbn+0x52>
 80048b6:	4602      	mov	r2, r0
 80048b8:	f7fb fc50 	bl	800015c <__adddf3>
 80048bc:	4604      	mov	r4, r0
 80048be:	460d      	mov	r5, r1
 80048c0:	e023      	b.n	800490a <scalbn+0x92>
 80048c2:	460b      	mov	r3, r1
 80048c4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80048c8:	3a36      	subs	r2, #54	; 0x36
 80048ca:	f24c 3150 	movw	r1, #50000	; 0xc350
 80048ce:	428e      	cmp	r6, r1
 80048d0:	dd0e      	ble.n	80048f0 <scalbn+0x78>
 80048d2:	a31f      	add	r3, pc, #124	; (adr r3, 8004950 <scalbn+0xd8>)
 80048d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048d8:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 80048dc:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 80048e0:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 80048e4:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 80048e8:	481d      	ldr	r0, [pc, #116]	; (8004960 <scalbn+0xe8>)
 80048ea:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 80048ee:	e7db      	b.n	80048a8 <scalbn+0x30>
 80048f0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80048f4:	4432      	add	r2, r6
 80048f6:	428a      	cmp	r2, r1
 80048f8:	dceb      	bgt.n	80048d2 <scalbn+0x5a>
 80048fa:	2a00      	cmp	r2, #0
 80048fc:	dd08      	ble.n	8004910 <scalbn+0x98>
 80048fe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004902:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004906:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800490a:	4620      	mov	r0, r4
 800490c:	4629      	mov	r1, r5
 800490e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004910:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8004914:	da0c      	bge.n	8004930 <scalbn+0xb8>
 8004916:	a30c      	add	r3, pc, #48	; (adr r3, 8004948 <scalbn+0xd0>)
 8004918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800491c:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8004920:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8004924:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8004928:	480e      	ldr	r0, [pc, #56]	; (8004964 <scalbn+0xec>)
 800492a:	f041 011f 	orr.w	r1, r1, #31
 800492e:	e7bb      	b.n	80048a8 <scalbn+0x30>
 8004930:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004934:	3236      	adds	r2, #54	; 0x36
 8004936:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800493a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800493e:	4620      	mov	r0, r4
 8004940:	4629      	mov	r1, r5
 8004942:	2200      	movs	r2, #0
 8004944:	4b08      	ldr	r3, [pc, #32]	; (8004968 <scalbn+0xf0>)
 8004946:	e7af      	b.n	80048a8 <scalbn+0x30>
 8004948:	c2f8f359 	.word	0xc2f8f359
 800494c:	01a56e1f 	.word	0x01a56e1f
 8004950:	8800759c 	.word	0x8800759c
 8004954:	7e37e43c 	.word	0x7e37e43c
 8004958:	43500000 	.word	0x43500000
 800495c:	ffff3cb0 	.word	0xffff3cb0
 8004960:	8800759c 	.word	0x8800759c
 8004964:	c2f8f359 	.word	0xc2f8f359
 8004968:	3c900000 	.word	0x3c900000

0800496c <with_errno>:
 800496c:	b570      	push	{r4, r5, r6, lr}
 800496e:	4604      	mov	r4, r0
 8004970:	460d      	mov	r5, r1
 8004972:	4616      	mov	r6, r2
 8004974:	f7ff f9cc 	bl	8003d10 <__errno>
 8004978:	4629      	mov	r1, r5
 800497a:	6006      	str	r6, [r0, #0]
 800497c:	4620      	mov	r0, r4
 800497e:	bd70      	pop	{r4, r5, r6, pc}

08004980 <xflow>:
 8004980:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004982:	4615      	mov	r5, r2
 8004984:	461c      	mov	r4, r3
 8004986:	b180      	cbz	r0, 80049aa <xflow+0x2a>
 8004988:	4610      	mov	r0, r2
 800498a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800498e:	e9cd 0100 	strd	r0, r1, [sp]
 8004992:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004996:	4628      	mov	r0, r5
 8004998:	4621      	mov	r1, r4
 800499a:	f7fb fd95 	bl	80004c8 <__aeabi_dmul>
 800499e:	2222      	movs	r2, #34	; 0x22
 80049a0:	b003      	add	sp, #12
 80049a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80049a6:	f7ff bfe1 	b.w	800496c <with_errno>
 80049aa:	4610      	mov	r0, r2
 80049ac:	4619      	mov	r1, r3
 80049ae:	e7ee      	b.n	800498e <xflow+0xe>

080049b0 <__math_uflow>:
 80049b0:	2200      	movs	r2, #0
 80049b2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80049b6:	f7ff bfe3 	b.w	8004980 <xflow>

080049ba <__math_oflow>:
 80049ba:	2200      	movs	r2, #0
 80049bc:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80049c0:	f7ff bfde 	b.w	8004980 <xflow>

080049c4 <__ieee754_sqrt>:
 80049c4:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 8004b68 <__ieee754_sqrt+0x1a4>
 80049c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049cc:	ea3c 0c01 	bics.w	ip, ip, r1
 80049d0:	460b      	mov	r3, r1
 80049d2:	4606      	mov	r6, r0
 80049d4:	460d      	mov	r5, r1
 80049d6:	460a      	mov	r2, r1
 80049d8:	4604      	mov	r4, r0
 80049da:	d10e      	bne.n	80049fa <__ieee754_sqrt+0x36>
 80049dc:	4602      	mov	r2, r0
 80049de:	f7fb fd73 	bl	80004c8 <__aeabi_dmul>
 80049e2:	4602      	mov	r2, r0
 80049e4:	460b      	mov	r3, r1
 80049e6:	4630      	mov	r0, r6
 80049e8:	4629      	mov	r1, r5
 80049ea:	f7fb fbb7 	bl	800015c <__adddf3>
 80049ee:	4606      	mov	r6, r0
 80049f0:	460d      	mov	r5, r1
 80049f2:	4630      	mov	r0, r6
 80049f4:	4629      	mov	r1, r5
 80049f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049fa:	2900      	cmp	r1, #0
 80049fc:	dc0d      	bgt.n	8004a1a <__ieee754_sqrt+0x56>
 80049fe:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8004a02:	ea5c 0c00 	orrs.w	ip, ip, r0
 8004a06:	d0f4      	beq.n	80049f2 <__ieee754_sqrt+0x2e>
 8004a08:	b139      	cbz	r1, 8004a1a <__ieee754_sqrt+0x56>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	f7fb fba4 	bl	8000158 <__aeabi_dsub>
 8004a10:	4602      	mov	r2, r0
 8004a12:	460b      	mov	r3, r1
 8004a14:	f7fb fe82 	bl	800071c <__aeabi_ddiv>
 8004a18:	e7e9      	b.n	80049ee <__ieee754_sqrt+0x2a>
 8004a1a:	1512      	asrs	r2, r2, #20
 8004a1c:	f000 8089 	beq.w	8004b32 <__ieee754_sqrt+0x16e>
 8004a20:	2500      	movs	r5, #0
 8004a22:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a26:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8004a2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a2e:	07d2      	lsls	r2, r2, #31
 8004a30:	bf5c      	itt	pl
 8004a32:	005b      	lslpl	r3, r3, #1
 8004a34:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8004a38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004a3c:	bf58      	it	pl
 8004a3e:	0064      	lslpl	r4, r4, #1
 8004a40:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8004a44:	0062      	lsls	r2, r4, #1
 8004a46:	2016      	movs	r0, #22
 8004a48:	4629      	mov	r1, r5
 8004a4a:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 8004a4e:	1076      	asrs	r6, r6, #1
 8004a50:	190f      	adds	r7, r1, r4
 8004a52:	429f      	cmp	r7, r3
 8004a54:	bfde      	ittt	le
 8004a56:	1bdb      	suble	r3, r3, r7
 8004a58:	1939      	addle	r1, r7, r4
 8004a5a:	192d      	addle	r5, r5, r4
 8004a5c:	005b      	lsls	r3, r3, #1
 8004a5e:	3801      	subs	r0, #1
 8004a60:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8004a64:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8004a68:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8004a6c:	d1f0      	bne.n	8004a50 <__ieee754_sqrt+0x8c>
 8004a6e:	4604      	mov	r4, r0
 8004a70:	2720      	movs	r7, #32
 8004a72:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8004a76:	428b      	cmp	r3, r1
 8004a78:	eb0c 0e00 	add.w	lr, ip, r0
 8004a7c:	dc02      	bgt.n	8004a84 <__ieee754_sqrt+0xc0>
 8004a7e:	d113      	bne.n	8004aa8 <__ieee754_sqrt+0xe4>
 8004a80:	4596      	cmp	lr, r2
 8004a82:	d811      	bhi.n	8004aa8 <__ieee754_sqrt+0xe4>
 8004a84:	f1be 0f00 	cmp.w	lr, #0
 8004a88:	eb0e 000c 	add.w	r0, lr, ip
 8004a8c:	da56      	bge.n	8004b3c <__ieee754_sqrt+0x178>
 8004a8e:	2800      	cmp	r0, #0
 8004a90:	db54      	blt.n	8004b3c <__ieee754_sqrt+0x178>
 8004a92:	f101 0801 	add.w	r8, r1, #1
 8004a96:	1a5b      	subs	r3, r3, r1
 8004a98:	4641      	mov	r1, r8
 8004a9a:	4596      	cmp	lr, r2
 8004a9c:	bf88      	it	hi
 8004a9e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8004aa2:	eba2 020e 	sub.w	r2, r2, lr
 8004aa6:	4464      	add	r4, ip
 8004aa8:	005b      	lsls	r3, r3, #1
 8004aaa:	3f01      	subs	r7, #1
 8004aac:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8004ab0:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8004ab4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8004ab8:	d1dd      	bne.n	8004a76 <__ieee754_sqrt+0xb2>
 8004aba:	4313      	orrs	r3, r2
 8004abc:	d01b      	beq.n	8004af6 <__ieee754_sqrt+0x132>
 8004abe:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8004b6c <__ieee754_sqrt+0x1a8>
 8004ac2:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8004b70 <__ieee754_sqrt+0x1ac>
 8004ac6:	e9da 0100 	ldrd	r0, r1, [sl]
 8004aca:	e9db 2300 	ldrd	r2, r3, [fp]
 8004ace:	f7fb fb43 	bl	8000158 <__aeabi_dsub>
 8004ad2:	e9da 8900 	ldrd	r8, r9, [sl]
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	460b      	mov	r3, r1
 8004ada:	4640      	mov	r0, r8
 8004adc:	4649      	mov	r1, r9
 8004ade:	f7fb ff6f 	bl	80009c0 <__aeabi_dcmple>
 8004ae2:	b140      	cbz	r0, 8004af6 <__ieee754_sqrt+0x132>
 8004ae4:	e9da 0100 	ldrd	r0, r1, [sl]
 8004ae8:	e9db 2300 	ldrd	r2, r3, [fp]
 8004aec:	f1b4 3fff 	cmp.w	r4, #4294967295
 8004af0:	d126      	bne.n	8004b40 <__ieee754_sqrt+0x17c>
 8004af2:	463c      	mov	r4, r7
 8004af4:	3501      	adds	r5, #1
 8004af6:	106b      	asrs	r3, r5, #1
 8004af8:	0864      	lsrs	r4, r4, #1
 8004afa:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8004afe:	07ea      	lsls	r2, r5, #31
 8004b00:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8004b04:	bf48      	it	mi
 8004b06:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 8004b0a:	4620      	mov	r0, r4
 8004b0c:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8004b10:	e76d      	b.n	80049ee <__ieee754_sqrt+0x2a>
 8004b12:	0ae3      	lsrs	r3, r4, #11
 8004b14:	3915      	subs	r1, #21
 8004b16:	0564      	lsls	r4, r4, #21
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d0fa      	beq.n	8004b12 <__ieee754_sqrt+0x14e>
 8004b1c:	02d8      	lsls	r0, r3, #11
 8004b1e:	d50a      	bpl.n	8004b36 <__ieee754_sqrt+0x172>
 8004b20:	f1c2 0020 	rsb	r0, r2, #32
 8004b24:	fa24 f000 	lsr.w	r0, r4, r0
 8004b28:	1e55      	subs	r5, r2, #1
 8004b2a:	4094      	lsls	r4, r2
 8004b2c:	4303      	orrs	r3, r0
 8004b2e:	1b4a      	subs	r2, r1, r5
 8004b30:	e776      	b.n	8004a20 <__ieee754_sqrt+0x5c>
 8004b32:	4611      	mov	r1, r2
 8004b34:	e7f0      	b.n	8004b18 <__ieee754_sqrt+0x154>
 8004b36:	005b      	lsls	r3, r3, #1
 8004b38:	3201      	adds	r2, #1
 8004b3a:	e7ef      	b.n	8004b1c <__ieee754_sqrt+0x158>
 8004b3c:	4688      	mov	r8, r1
 8004b3e:	e7aa      	b.n	8004a96 <__ieee754_sqrt+0xd2>
 8004b40:	f7fb fb0c 	bl	800015c <__adddf3>
 8004b44:	e9da 8900 	ldrd	r8, r9, [sl]
 8004b48:	4602      	mov	r2, r0
 8004b4a:	460b      	mov	r3, r1
 8004b4c:	4640      	mov	r0, r8
 8004b4e:	4649      	mov	r1, r9
 8004b50:	f7fb ff2c 	bl	80009ac <__aeabi_dcmplt>
 8004b54:	b120      	cbz	r0, 8004b60 <__ieee754_sqrt+0x19c>
 8004b56:	1ca1      	adds	r1, r4, #2
 8004b58:	bf08      	it	eq
 8004b5a:	3501      	addeq	r5, #1
 8004b5c:	3402      	adds	r4, #2
 8004b5e:	e7ca      	b.n	8004af6 <__ieee754_sqrt+0x132>
 8004b60:	3401      	adds	r4, #1
 8004b62:	f024 0401 	bic.w	r4, r4, #1
 8004b66:	e7c6      	b.n	8004af6 <__ieee754_sqrt+0x132>
 8004b68:	7ff00000 	.word	0x7ff00000
 8004b6c:	20000068 	.word	0x20000068
 8004b70:	20000070 	.word	0x20000070

08004b74 <_init>:
 8004b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b76:	bf00      	nop
 8004b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b7a:	bc08      	pop	{r3}
 8004b7c:	469e      	mov	lr, r3
 8004b7e:	4770      	bx	lr

08004b80 <_fini>:
 8004b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b82:	bf00      	nop
 8004b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b86:	bc08      	pop	{r3}
 8004b88:	469e      	mov	lr, r3
 8004b8a:	4770      	bx	lr
=======
 800288c:	b480      	push	{r7}
 800288e:	b085      	sub	sp, #20
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002894:	4b0a      	ldr	r3, [pc, #40]	; (80028c0 <RCC_Delay+0x34>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a0a      	ldr	r2, [pc, #40]	; (80028c4 <RCC_Delay+0x38>)
 800289a:	fba2 2303 	umull	r2, r3, r2, r3
 800289e:	0a5b      	lsrs	r3, r3, #9
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	fb02 f303 	mul.w	r3, r2, r3
 80028a6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80028a8:	bf00      	nop
  }
  while (Delay --);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	1e5a      	subs	r2, r3, #1
 80028ae:	60fa      	str	r2, [r7, #12]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d1f9      	bne.n	80028a8 <RCC_Delay+0x1c>
}
 80028b4:	bf00      	nop
 80028b6:	bf00      	nop
 80028b8:	3714      	adds	r7, #20
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bc80      	pop	{r7}
 80028be:	4770      	bx	lr
 80028c0:	20000008 	.word	0x20000008
 80028c4:	10624dd3 	.word	0x10624dd3

080028c8 <memset>:
 80028c8:	4603      	mov	r3, r0
 80028ca:	4402      	add	r2, r0
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d100      	bne.n	80028d2 <memset+0xa>
 80028d0:	4770      	bx	lr
 80028d2:	f803 1b01 	strb.w	r1, [r3], #1
 80028d6:	e7f9      	b.n	80028cc <memset+0x4>

080028d8 <__errno>:
 80028d8:	4b01      	ldr	r3, [pc, #4]	; (80028e0 <__errno+0x8>)
 80028da:	6818      	ldr	r0, [r3, #0]
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	20000060 	.word	0x20000060

080028e4 <__libc_init_array>:
 80028e4:	b570      	push	{r4, r5, r6, lr}
 80028e6:	2600      	movs	r6, #0
 80028e8:	4d0c      	ldr	r5, [pc, #48]	; (800291c <__libc_init_array+0x38>)
 80028ea:	4c0d      	ldr	r4, [pc, #52]	; (8002920 <__libc_init_array+0x3c>)
 80028ec:	1b64      	subs	r4, r4, r5
 80028ee:	10a4      	asrs	r4, r4, #2
 80028f0:	42a6      	cmp	r6, r4
 80028f2:	d109      	bne.n	8002908 <__libc_init_array+0x24>
 80028f4:	f000 ff22 	bl	800373c <_init>
 80028f8:	2600      	movs	r6, #0
 80028fa:	4d0a      	ldr	r5, [pc, #40]	; (8002924 <__libc_init_array+0x40>)
 80028fc:	4c0a      	ldr	r4, [pc, #40]	; (8002928 <__libc_init_array+0x44>)
 80028fe:	1b64      	subs	r4, r4, r5
 8002900:	10a4      	asrs	r4, r4, #2
 8002902:	42a6      	cmp	r6, r4
 8002904:	d105      	bne.n	8002912 <__libc_init_array+0x2e>
 8002906:	bd70      	pop	{r4, r5, r6, pc}
 8002908:	f855 3b04 	ldr.w	r3, [r5], #4
 800290c:	4798      	blx	r3
 800290e:	3601      	adds	r6, #1
 8002910:	e7ee      	b.n	80028f0 <__libc_init_array+0xc>
 8002912:	f855 3b04 	ldr.w	r3, [r5], #4
 8002916:	4798      	blx	r3
 8002918:	3601      	adds	r6, #1
 800291a:	e7f2      	b.n	8002902 <__libc_init_array+0x1e>
 800291c:	080037b0 	.word	0x080037b0
 8002920:	080037b0 	.word	0x080037b0
 8002924:	080037b0 	.word	0x080037b0
 8002928:	080037b4 	.word	0x080037b4

0800292c <pow>:
 800292c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002930:	4614      	mov	r4, r2
 8002932:	461d      	mov	r5, r3
 8002934:	4680      	mov	r8, r0
 8002936:	4689      	mov	r9, r1
 8002938:	f000 f866 	bl	8002a08 <__ieee754_pow>
 800293c:	4622      	mov	r2, r4
 800293e:	4606      	mov	r6, r0
 8002940:	460f      	mov	r7, r1
 8002942:	462b      	mov	r3, r5
 8002944:	4620      	mov	r0, r4
 8002946:	4629      	mov	r1, r5
 8002948:	f7fe f858 	bl	80009fc <__aeabi_dcmpun>
 800294c:	bbc8      	cbnz	r0, 80029c2 <pow+0x96>
 800294e:	2200      	movs	r2, #0
 8002950:	2300      	movs	r3, #0
 8002952:	4640      	mov	r0, r8
 8002954:	4649      	mov	r1, r9
 8002956:	f7fe f81f 	bl	8000998 <__aeabi_dcmpeq>
 800295a:	b1b8      	cbz	r0, 800298c <pow+0x60>
 800295c:	2200      	movs	r2, #0
 800295e:	2300      	movs	r3, #0
 8002960:	4620      	mov	r0, r4
 8002962:	4629      	mov	r1, r5
 8002964:	f7fe f818 	bl	8000998 <__aeabi_dcmpeq>
 8002968:	2800      	cmp	r0, #0
 800296a:	d141      	bne.n	80029f0 <pow+0xc4>
 800296c:	4620      	mov	r0, r4
 800296e:	4629      	mov	r1, r5
 8002970:	f000 f844 	bl	80029fc <finite>
 8002974:	b328      	cbz	r0, 80029c2 <pow+0x96>
 8002976:	2200      	movs	r2, #0
 8002978:	2300      	movs	r3, #0
 800297a:	4620      	mov	r0, r4
 800297c:	4629      	mov	r1, r5
 800297e:	f7fe f815 	bl	80009ac <__aeabi_dcmplt>
 8002982:	b1f0      	cbz	r0, 80029c2 <pow+0x96>
 8002984:	f7ff ffa8 	bl	80028d8 <__errno>
 8002988:	2322      	movs	r3, #34	; 0x22
 800298a:	e019      	b.n	80029c0 <pow+0x94>
 800298c:	4630      	mov	r0, r6
 800298e:	4639      	mov	r1, r7
 8002990:	f000 f834 	bl	80029fc <finite>
 8002994:	b9c8      	cbnz	r0, 80029ca <pow+0x9e>
 8002996:	4640      	mov	r0, r8
 8002998:	4649      	mov	r1, r9
 800299a:	f000 f82f 	bl	80029fc <finite>
 800299e:	b1a0      	cbz	r0, 80029ca <pow+0x9e>
 80029a0:	4620      	mov	r0, r4
 80029a2:	4629      	mov	r1, r5
 80029a4:	f000 f82a 	bl	80029fc <finite>
 80029a8:	b178      	cbz	r0, 80029ca <pow+0x9e>
 80029aa:	4632      	mov	r2, r6
 80029ac:	463b      	mov	r3, r7
 80029ae:	4630      	mov	r0, r6
 80029b0:	4639      	mov	r1, r7
 80029b2:	f7fe f823 	bl	80009fc <__aeabi_dcmpun>
 80029b6:	2800      	cmp	r0, #0
 80029b8:	d0e4      	beq.n	8002984 <pow+0x58>
 80029ba:	f7ff ff8d 	bl	80028d8 <__errno>
 80029be:	2321      	movs	r3, #33	; 0x21
 80029c0:	6003      	str	r3, [r0, #0]
 80029c2:	4630      	mov	r0, r6
 80029c4:	4639      	mov	r1, r7
 80029c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80029ca:	2200      	movs	r2, #0
 80029cc:	2300      	movs	r3, #0
 80029ce:	4630      	mov	r0, r6
 80029d0:	4639      	mov	r1, r7
 80029d2:	f7fd ffe1 	bl	8000998 <__aeabi_dcmpeq>
 80029d6:	2800      	cmp	r0, #0
 80029d8:	d0f3      	beq.n	80029c2 <pow+0x96>
 80029da:	4640      	mov	r0, r8
 80029dc:	4649      	mov	r1, r9
 80029de:	f000 f80d 	bl	80029fc <finite>
 80029e2:	2800      	cmp	r0, #0
 80029e4:	d0ed      	beq.n	80029c2 <pow+0x96>
 80029e6:	4620      	mov	r0, r4
 80029e8:	4629      	mov	r1, r5
 80029ea:	f000 f807 	bl	80029fc <finite>
 80029ee:	e7c8      	b.n	8002982 <pow+0x56>
 80029f0:	2600      	movs	r6, #0
 80029f2:	4f01      	ldr	r7, [pc, #4]	; (80029f8 <pow+0xcc>)
 80029f4:	e7e5      	b.n	80029c2 <pow+0x96>
 80029f6:	bf00      	nop
 80029f8:	3ff00000 	.word	0x3ff00000

080029fc <finite>:
 80029fc:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8002a00:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8002a04:	0fc0      	lsrs	r0, r0, #31
 8002a06:	4770      	bx	lr

08002a08 <__ieee754_pow>:
 8002a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a0c:	b093      	sub	sp, #76	; 0x4c
 8002a0e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002a12:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 8002a16:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8002a1a:	4689      	mov	r9, r1
 8002a1c:	ea56 0102 	orrs.w	r1, r6, r2
 8002a20:	4680      	mov	r8, r0
 8002a22:	d111      	bne.n	8002a48 <__ieee754_pow+0x40>
 8002a24:	1803      	adds	r3, r0, r0
 8002a26:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 8002a2a:	4152      	adcs	r2, r2
 8002a2c:	4299      	cmp	r1, r3
 8002a2e:	4b82      	ldr	r3, [pc, #520]	; (8002c38 <__ieee754_pow+0x230>)
 8002a30:	4193      	sbcs	r3, r2
 8002a32:	f080 84ba 	bcs.w	80033aa <__ieee754_pow+0x9a2>
 8002a36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002a3a:	4640      	mov	r0, r8
 8002a3c:	4649      	mov	r1, r9
 8002a3e:	f7fd fb8d 	bl	800015c <__adddf3>
 8002a42:	4683      	mov	fp, r0
 8002a44:	468c      	mov	ip, r1
 8002a46:	e06f      	b.n	8002b28 <__ieee754_pow+0x120>
 8002a48:	4b7c      	ldr	r3, [pc, #496]	; (8002c3c <__ieee754_pow+0x234>)
 8002a4a:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 8002a4e:	429c      	cmp	r4, r3
 8002a50:	464d      	mov	r5, r9
 8002a52:	4682      	mov	sl, r0
 8002a54:	dc06      	bgt.n	8002a64 <__ieee754_pow+0x5c>
 8002a56:	d101      	bne.n	8002a5c <__ieee754_pow+0x54>
 8002a58:	2800      	cmp	r0, #0
 8002a5a:	d1ec      	bne.n	8002a36 <__ieee754_pow+0x2e>
 8002a5c:	429e      	cmp	r6, r3
 8002a5e:	dc01      	bgt.n	8002a64 <__ieee754_pow+0x5c>
 8002a60:	d10f      	bne.n	8002a82 <__ieee754_pow+0x7a>
 8002a62:	b172      	cbz	r2, 8002a82 <__ieee754_pow+0x7a>
 8002a64:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8002a68:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8002a6c:	ea55 050a 	orrs.w	r5, r5, sl
 8002a70:	d1e1      	bne.n	8002a36 <__ieee754_pow+0x2e>
 8002a72:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8002a76:	18db      	adds	r3, r3, r3
 8002a78:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8002a7c:	4152      	adcs	r2, r2
 8002a7e:	429d      	cmp	r5, r3
 8002a80:	e7d5      	b.n	8002a2e <__ieee754_pow+0x26>
 8002a82:	2d00      	cmp	r5, #0
 8002a84:	da39      	bge.n	8002afa <__ieee754_pow+0xf2>
 8002a86:	4b6e      	ldr	r3, [pc, #440]	; (8002c40 <__ieee754_pow+0x238>)
 8002a88:	429e      	cmp	r6, r3
 8002a8a:	dc52      	bgt.n	8002b32 <__ieee754_pow+0x12a>
 8002a8c:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8002a90:	429e      	cmp	r6, r3
 8002a92:	f340 849d 	ble.w	80033d0 <__ieee754_pow+0x9c8>
 8002a96:	1533      	asrs	r3, r6, #20
 8002a98:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8002a9c:	2b14      	cmp	r3, #20
 8002a9e:	dd0f      	ble.n	8002ac0 <__ieee754_pow+0xb8>
 8002aa0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8002aa4:	fa22 f103 	lsr.w	r1, r2, r3
 8002aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8002aac:	4293      	cmp	r3, r2
 8002aae:	f040 848f 	bne.w	80033d0 <__ieee754_pow+0x9c8>
 8002ab2:	f001 0101 	and.w	r1, r1, #1
 8002ab6:	f1c1 0302 	rsb	r3, r1, #2
 8002aba:	9300      	str	r3, [sp, #0]
 8002abc:	b182      	cbz	r2, 8002ae0 <__ieee754_pow+0xd8>
 8002abe:	e05d      	b.n	8002b7c <__ieee754_pow+0x174>
 8002ac0:	2a00      	cmp	r2, #0
 8002ac2:	d159      	bne.n	8002b78 <__ieee754_pow+0x170>
 8002ac4:	f1c3 0314 	rsb	r3, r3, #20
 8002ac8:	fa46 f103 	asr.w	r1, r6, r3
 8002acc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ad0:	42b3      	cmp	r3, r6
 8002ad2:	f040 847a 	bne.w	80033ca <__ieee754_pow+0x9c2>
 8002ad6:	f001 0101 	and.w	r1, r1, #1
 8002ada:	f1c1 0302 	rsb	r3, r1, #2
 8002ade:	9300      	str	r3, [sp, #0]
 8002ae0:	4b58      	ldr	r3, [pc, #352]	; (8002c44 <__ieee754_pow+0x23c>)
 8002ae2:	429e      	cmp	r6, r3
 8002ae4:	d132      	bne.n	8002b4c <__ieee754_pow+0x144>
 8002ae6:	2f00      	cmp	r7, #0
 8002ae8:	f280 846b 	bge.w	80033c2 <__ieee754_pow+0x9ba>
 8002aec:	4642      	mov	r2, r8
 8002aee:	464b      	mov	r3, r9
 8002af0:	2000      	movs	r0, #0
 8002af2:	4954      	ldr	r1, [pc, #336]	; (8002c44 <__ieee754_pow+0x23c>)
 8002af4:	f7fd fe12 	bl	800071c <__aeabi_ddiv>
 8002af8:	e7a3      	b.n	8002a42 <__ieee754_pow+0x3a>
 8002afa:	2300      	movs	r3, #0
 8002afc:	9300      	str	r3, [sp, #0]
 8002afe:	2a00      	cmp	r2, #0
 8002b00:	d13c      	bne.n	8002b7c <__ieee754_pow+0x174>
 8002b02:	4b4e      	ldr	r3, [pc, #312]	; (8002c3c <__ieee754_pow+0x234>)
 8002b04:	429e      	cmp	r6, r3
 8002b06:	d1eb      	bne.n	8002ae0 <__ieee754_pow+0xd8>
 8002b08:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8002b0c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8002b10:	ea53 030a 	orrs.w	r3, r3, sl
 8002b14:	f000 8449 	beq.w	80033aa <__ieee754_pow+0x9a2>
 8002b18:	4b4b      	ldr	r3, [pc, #300]	; (8002c48 <__ieee754_pow+0x240>)
 8002b1a:	429c      	cmp	r4, r3
 8002b1c:	dd0b      	ble.n	8002b36 <__ieee754_pow+0x12e>
 8002b1e:	2f00      	cmp	r7, #0
 8002b20:	f2c0 8449 	blt.w	80033b6 <__ieee754_pow+0x9ae>
 8002b24:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8002b28:	4658      	mov	r0, fp
 8002b2a:	4661      	mov	r1, ip
 8002b2c:	b013      	add	sp, #76	; 0x4c
 8002b2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b32:	2302      	movs	r3, #2
 8002b34:	e7e2      	b.n	8002afc <__ieee754_pow+0xf4>
 8002b36:	2f00      	cmp	r7, #0
 8002b38:	f04f 0b00 	mov.w	fp, #0
 8002b3c:	f04f 0c00 	mov.w	ip, #0
 8002b40:	daf2      	bge.n	8002b28 <__ieee754_pow+0x120>
 8002b42:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8002b46:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8002b4a:	e7ed      	b.n	8002b28 <__ieee754_pow+0x120>
 8002b4c:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8002b50:	d106      	bne.n	8002b60 <__ieee754_pow+0x158>
 8002b52:	4642      	mov	r2, r8
 8002b54:	464b      	mov	r3, r9
 8002b56:	4640      	mov	r0, r8
 8002b58:	4649      	mov	r1, r9
 8002b5a:	f7fd fcb5 	bl	80004c8 <__aeabi_dmul>
 8002b5e:	e770      	b.n	8002a42 <__ieee754_pow+0x3a>
 8002b60:	4b3a      	ldr	r3, [pc, #232]	; (8002c4c <__ieee754_pow+0x244>)
 8002b62:	429f      	cmp	r7, r3
 8002b64:	d10a      	bne.n	8002b7c <__ieee754_pow+0x174>
 8002b66:	2d00      	cmp	r5, #0
 8002b68:	db08      	blt.n	8002b7c <__ieee754_pow+0x174>
 8002b6a:	4640      	mov	r0, r8
 8002b6c:	4649      	mov	r1, r9
 8002b6e:	b013      	add	sp, #76	; 0x4c
 8002b70:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b74:	f000 bd0a 	b.w	800358c <__ieee754_sqrt>
 8002b78:	2300      	movs	r3, #0
 8002b7a:	9300      	str	r3, [sp, #0]
 8002b7c:	4640      	mov	r0, r8
 8002b7e:	4649      	mov	r1, r9
 8002b80:	f000 fc58 	bl	8003434 <fabs>
 8002b84:	4683      	mov	fp, r0
 8002b86:	468c      	mov	ip, r1
 8002b88:	f1ba 0f00 	cmp.w	sl, #0
 8002b8c:	d128      	bne.n	8002be0 <__ieee754_pow+0x1d8>
 8002b8e:	b124      	cbz	r4, 8002b9a <__ieee754_pow+0x192>
 8002b90:	4b2c      	ldr	r3, [pc, #176]	; (8002c44 <__ieee754_pow+0x23c>)
 8002b92:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d122      	bne.n	8002be0 <__ieee754_pow+0x1d8>
 8002b9a:	2f00      	cmp	r7, #0
 8002b9c:	da07      	bge.n	8002bae <__ieee754_pow+0x1a6>
 8002b9e:	465a      	mov	r2, fp
 8002ba0:	4663      	mov	r3, ip
 8002ba2:	2000      	movs	r0, #0
 8002ba4:	4927      	ldr	r1, [pc, #156]	; (8002c44 <__ieee754_pow+0x23c>)
 8002ba6:	f7fd fdb9 	bl	800071c <__aeabi_ddiv>
 8002baa:	4683      	mov	fp, r0
 8002bac:	468c      	mov	ip, r1
 8002bae:	2d00      	cmp	r5, #0
 8002bb0:	daba      	bge.n	8002b28 <__ieee754_pow+0x120>
 8002bb2:	9b00      	ldr	r3, [sp, #0]
 8002bb4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8002bb8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8002bbc:	431c      	orrs	r4, r3
 8002bbe:	d108      	bne.n	8002bd2 <__ieee754_pow+0x1ca>
 8002bc0:	465a      	mov	r2, fp
 8002bc2:	4663      	mov	r3, ip
 8002bc4:	4658      	mov	r0, fp
 8002bc6:	4661      	mov	r1, ip
 8002bc8:	f7fd fac6 	bl	8000158 <__aeabi_dsub>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	460b      	mov	r3, r1
 8002bd0:	e790      	b.n	8002af4 <__ieee754_pow+0xec>
 8002bd2:	9b00      	ldr	r3, [sp, #0]
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d1a7      	bne.n	8002b28 <__ieee754_pow+0x120>
 8002bd8:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8002bdc:	469c      	mov	ip, r3
 8002bde:	e7a3      	b.n	8002b28 <__ieee754_pow+0x120>
 8002be0:	0feb      	lsrs	r3, r5, #31
 8002be2:	3b01      	subs	r3, #1
 8002be4:	930c      	str	r3, [sp, #48]	; 0x30
 8002be6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002be8:	9b00      	ldr	r3, [sp, #0]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	d104      	bne.n	8002bf8 <__ieee754_pow+0x1f0>
 8002bee:	4642      	mov	r2, r8
 8002bf0:	464b      	mov	r3, r9
 8002bf2:	4640      	mov	r0, r8
 8002bf4:	4649      	mov	r1, r9
 8002bf6:	e7e7      	b.n	8002bc8 <__ieee754_pow+0x1c0>
 8002bf8:	4b15      	ldr	r3, [pc, #84]	; (8002c50 <__ieee754_pow+0x248>)
 8002bfa:	429e      	cmp	r6, r3
 8002bfc:	f340 80f6 	ble.w	8002dec <__ieee754_pow+0x3e4>
 8002c00:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8002c04:	429e      	cmp	r6, r3
 8002c06:	4b10      	ldr	r3, [pc, #64]	; (8002c48 <__ieee754_pow+0x240>)
 8002c08:	dd09      	ble.n	8002c1e <__ieee754_pow+0x216>
 8002c0a:	429c      	cmp	r4, r3
 8002c0c:	dc0c      	bgt.n	8002c28 <__ieee754_pow+0x220>
 8002c0e:	2f00      	cmp	r7, #0
 8002c10:	da0c      	bge.n	8002c2c <__ieee754_pow+0x224>
 8002c12:	2000      	movs	r0, #0
 8002c14:	b013      	add	sp, #76	; 0x4c
 8002c16:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c1a:	f000 bcb2 	b.w	8003582 <__math_oflow>
 8002c1e:	429c      	cmp	r4, r3
 8002c20:	dbf5      	blt.n	8002c0e <__ieee754_pow+0x206>
 8002c22:	4b08      	ldr	r3, [pc, #32]	; (8002c44 <__ieee754_pow+0x23c>)
 8002c24:	429c      	cmp	r4, r3
 8002c26:	dd15      	ble.n	8002c54 <__ieee754_pow+0x24c>
 8002c28:	2f00      	cmp	r7, #0
 8002c2a:	dcf2      	bgt.n	8002c12 <__ieee754_pow+0x20a>
 8002c2c:	2000      	movs	r0, #0
 8002c2e:	b013      	add	sp, #76	; 0x4c
 8002c30:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c34:	f000 bca0 	b.w	8003578 <__math_uflow>
 8002c38:	fff00000 	.word	0xfff00000
 8002c3c:	7ff00000 	.word	0x7ff00000
 8002c40:	433fffff 	.word	0x433fffff
 8002c44:	3ff00000 	.word	0x3ff00000
 8002c48:	3fefffff 	.word	0x3fefffff
 8002c4c:	3fe00000 	.word	0x3fe00000
 8002c50:	41e00000 	.word	0x41e00000
 8002c54:	4661      	mov	r1, ip
 8002c56:	2200      	movs	r2, #0
 8002c58:	4658      	mov	r0, fp
 8002c5a:	4b5f      	ldr	r3, [pc, #380]	; (8002dd8 <__ieee754_pow+0x3d0>)
 8002c5c:	f7fd fa7c 	bl	8000158 <__aeabi_dsub>
 8002c60:	a355      	add	r3, pc, #340	; (adr r3, 8002db8 <__ieee754_pow+0x3b0>)
 8002c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c66:	4604      	mov	r4, r0
 8002c68:	460d      	mov	r5, r1
 8002c6a:	f7fd fc2d 	bl	80004c8 <__aeabi_dmul>
 8002c6e:	a354      	add	r3, pc, #336	; (adr r3, 8002dc0 <__ieee754_pow+0x3b8>)
 8002c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c74:	4606      	mov	r6, r0
 8002c76:	460f      	mov	r7, r1
 8002c78:	4620      	mov	r0, r4
 8002c7a:	4629      	mov	r1, r5
 8002c7c:	f7fd fc24 	bl	80004c8 <__aeabi_dmul>
 8002c80:	2200      	movs	r2, #0
 8002c82:	4682      	mov	sl, r0
 8002c84:	468b      	mov	fp, r1
 8002c86:	4620      	mov	r0, r4
 8002c88:	4629      	mov	r1, r5
 8002c8a:	4b54      	ldr	r3, [pc, #336]	; (8002ddc <__ieee754_pow+0x3d4>)
 8002c8c:	f7fd fc1c 	bl	80004c8 <__aeabi_dmul>
 8002c90:	4602      	mov	r2, r0
 8002c92:	460b      	mov	r3, r1
 8002c94:	a14c      	add	r1, pc, #304	; (adr r1, 8002dc8 <__ieee754_pow+0x3c0>)
 8002c96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002c9a:	f7fd fa5d 	bl	8000158 <__aeabi_dsub>
 8002c9e:	4622      	mov	r2, r4
 8002ca0:	462b      	mov	r3, r5
 8002ca2:	f7fd fc11 	bl	80004c8 <__aeabi_dmul>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	460b      	mov	r3, r1
 8002caa:	2000      	movs	r0, #0
 8002cac:	494c      	ldr	r1, [pc, #304]	; (8002de0 <__ieee754_pow+0x3d8>)
 8002cae:	f7fd fa53 	bl	8000158 <__aeabi_dsub>
 8002cb2:	4622      	mov	r2, r4
 8002cb4:	462b      	mov	r3, r5
 8002cb6:	4680      	mov	r8, r0
 8002cb8:	4689      	mov	r9, r1
 8002cba:	4620      	mov	r0, r4
 8002cbc:	4629      	mov	r1, r5
 8002cbe:	f7fd fc03 	bl	80004c8 <__aeabi_dmul>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	4640      	mov	r0, r8
 8002cc8:	4649      	mov	r1, r9
 8002cca:	f7fd fbfd 	bl	80004c8 <__aeabi_dmul>
 8002cce:	a340      	add	r3, pc, #256	; (adr r3, 8002dd0 <__ieee754_pow+0x3c8>)
 8002cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cd4:	f7fd fbf8 	bl	80004c8 <__aeabi_dmul>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	460b      	mov	r3, r1
 8002cdc:	4650      	mov	r0, sl
 8002cde:	4659      	mov	r1, fp
 8002ce0:	f7fd fa3a 	bl	8000158 <__aeabi_dsub>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	460b      	mov	r3, r1
 8002ce8:	4604      	mov	r4, r0
 8002cea:	460d      	mov	r5, r1
 8002cec:	4630      	mov	r0, r6
 8002cee:	4639      	mov	r1, r7
 8002cf0:	f7fd fa34 	bl	800015c <__adddf3>
 8002cf4:	2000      	movs	r0, #0
 8002cf6:	4632      	mov	r2, r6
 8002cf8:	463b      	mov	r3, r7
 8002cfa:	4682      	mov	sl, r0
 8002cfc:	468b      	mov	fp, r1
 8002cfe:	f7fd fa2b 	bl	8000158 <__aeabi_dsub>
 8002d02:	4602      	mov	r2, r0
 8002d04:	460b      	mov	r3, r1
 8002d06:	4620      	mov	r0, r4
 8002d08:	4629      	mov	r1, r5
 8002d0a:	f7fd fa25 	bl	8000158 <__aeabi_dsub>
 8002d0e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8002d12:	9b00      	ldr	r3, [sp, #0]
 8002d14:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002d16:	3b01      	subs	r3, #1
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	f04f 0600 	mov.w	r6, #0
 8002d1e:	f04f 0200 	mov.w	r2, #0
 8002d22:	bf0c      	ite	eq
 8002d24:	4b2f      	ldreq	r3, [pc, #188]	; (8002de4 <__ieee754_pow+0x3dc>)
 8002d26:	4b2c      	ldrne	r3, [pc, #176]	; (8002dd8 <__ieee754_pow+0x3d0>)
 8002d28:	4604      	mov	r4, r0
 8002d2a:	460d      	mov	r5, r1
 8002d2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002d30:	e9cd 2300 	strd	r2, r3, [sp]
 8002d34:	4632      	mov	r2, r6
 8002d36:	463b      	mov	r3, r7
 8002d38:	f7fd fa0e 	bl	8000158 <__aeabi_dsub>
 8002d3c:	4652      	mov	r2, sl
 8002d3e:	465b      	mov	r3, fp
 8002d40:	f7fd fbc2 	bl	80004c8 <__aeabi_dmul>
 8002d44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002d48:	4680      	mov	r8, r0
 8002d4a:	4689      	mov	r9, r1
 8002d4c:	4620      	mov	r0, r4
 8002d4e:	4629      	mov	r1, r5
 8002d50:	f7fd fbba 	bl	80004c8 <__aeabi_dmul>
 8002d54:	4602      	mov	r2, r0
 8002d56:	460b      	mov	r3, r1
 8002d58:	4640      	mov	r0, r8
 8002d5a:	4649      	mov	r1, r9
 8002d5c:	f7fd f9fe 	bl	800015c <__adddf3>
 8002d60:	4632      	mov	r2, r6
 8002d62:	463b      	mov	r3, r7
 8002d64:	4680      	mov	r8, r0
 8002d66:	4689      	mov	r9, r1
 8002d68:	4650      	mov	r0, sl
 8002d6a:	4659      	mov	r1, fp
 8002d6c:	f7fd fbac 	bl	80004c8 <__aeabi_dmul>
 8002d70:	4604      	mov	r4, r0
 8002d72:	460d      	mov	r5, r1
 8002d74:	460b      	mov	r3, r1
 8002d76:	4602      	mov	r2, r0
 8002d78:	4649      	mov	r1, r9
 8002d7a:	4640      	mov	r0, r8
 8002d7c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8002d80:	f7fd f9ec 	bl	800015c <__adddf3>
 8002d84:	4b18      	ldr	r3, [pc, #96]	; (8002de8 <__ieee754_pow+0x3e0>)
 8002d86:	4682      	mov	sl, r0
 8002d88:	4299      	cmp	r1, r3
 8002d8a:	460f      	mov	r7, r1
 8002d8c:	460e      	mov	r6, r1
 8002d8e:	f340 82e7 	ble.w	8003360 <__ieee754_pow+0x958>
 8002d92:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8002d96:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8002d9a:	4303      	orrs	r3, r0
 8002d9c:	f000 81e2 	beq.w	8003164 <__ieee754_pow+0x75c>
 8002da0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002da4:	2200      	movs	r2, #0
 8002da6:	2300      	movs	r3, #0
 8002da8:	f7fd fe00 	bl	80009ac <__aeabi_dcmplt>
 8002dac:	3800      	subs	r0, #0
 8002dae:	bf18      	it	ne
 8002db0:	2001      	movne	r0, #1
 8002db2:	e72f      	b.n	8002c14 <__ieee754_pow+0x20c>
 8002db4:	f3af 8000 	nop.w
 8002db8:	60000000 	.word	0x60000000
 8002dbc:	3ff71547 	.word	0x3ff71547
 8002dc0:	f85ddf44 	.word	0xf85ddf44
 8002dc4:	3e54ae0b 	.word	0x3e54ae0b
 8002dc8:	55555555 	.word	0x55555555
 8002dcc:	3fd55555 	.word	0x3fd55555
 8002dd0:	652b82fe 	.word	0x652b82fe
 8002dd4:	3ff71547 	.word	0x3ff71547
 8002dd8:	3ff00000 	.word	0x3ff00000
 8002ddc:	3fd00000 	.word	0x3fd00000
 8002de0:	3fe00000 	.word	0x3fe00000
 8002de4:	bff00000 	.word	0xbff00000
 8002de8:	408fffff 	.word	0x408fffff
 8002dec:	4bd4      	ldr	r3, [pc, #848]	; (8003140 <__ieee754_pow+0x738>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	402b      	ands	r3, r5
 8002df2:	b943      	cbnz	r3, 8002e06 <__ieee754_pow+0x3fe>
 8002df4:	4658      	mov	r0, fp
 8002df6:	4661      	mov	r1, ip
 8002df8:	4bd2      	ldr	r3, [pc, #840]	; (8003144 <__ieee754_pow+0x73c>)
 8002dfa:	f7fd fb65 	bl	80004c8 <__aeabi_dmul>
 8002dfe:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8002e02:	4683      	mov	fp, r0
 8002e04:	460c      	mov	r4, r1
 8002e06:	1523      	asrs	r3, r4, #20
 8002e08:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8002e0c:	4413      	add	r3, r2
 8002e0e:	930b      	str	r3, [sp, #44]	; 0x2c
 8002e10:	4bcd      	ldr	r3, [pc, #820]	; (8003148 <__ieee754_pow+0x740>)
 8002e12:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8002e16:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8002e1a:	429c      	cmp	r4, r3
 8002e1c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8002e20:	dd08      	ble.n	8002e34 <__ieee754_pow+0x42c>
 8002e22:	4bca      	ldr	r3, [pc, #808]	; (800314c <__ieee754_pow+0x744>)
 8002e24:	429c      	cmp	r4, r3
 8002e26:	f340 8164 	ble.w	80030f2 <__ieee754_pow+0x6ea>
 8002e2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002e2c:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8002e30:	3301      	adds	r3, #1
 8002e32:	930b      	str	r3, [sp, #44]	; 0x2c
 8002e34:	2600      	movs	r6, #0
 8002e36:	00f3      	lsls	r3, r6, #3
 8002e38:	930d      	str	r3, [sp, #52]	; 0x34
 8002e3a:	4bc5      	ldr	r3, [pc, #788]	; (8003150 <__ieee754_pow+0x748>)
 8002e3c:	4658      	mov	r0, fp
 8002e3e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8002e42:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002e46:	4629      	mov	r1, r5
 8002e48:	461a      	mov	r2, r3
 8002e4a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8002e4e:	4623      	mov	r3, r4
 8002e50:	f7fd f982 	bl	8000158 <__aeabi_dsub>
 8002e54:	46da      	mov	sl, fp
 8002e56:	462b      	mov	r3, r5
 8002e58:	4652      	mov	r2, sl
 8002e5a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8002e5e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8002e62:	f7fd f97b 	bl	800015c <__adddf3>
 8002e66:	4602      	mov	r2, r0
 8002e68:	460b      	mov	r3, r1
 8002e6a:	2000      	movs	r0, #0
 8002e6c:	49b9      	ldr	r1, [pc, #740]	; (8003154 <__ieee754_pow+0x74c>)
 8002e6e:	f7fd fc55 	bl	800071c <__aeabi_ddiv>
 8002e72:	4602      	mov	r2, r0
 8002e74:	460b      	mov	r3, r1
 8002e76:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8002e7a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8002e7e:	f7fd fb23 	bl	80004c8 <__aeabi_dmul>
 8002e82:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8002e86:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8002e8a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8002e8e:	2300      	movs	r3, #0
 8002e90:	2200      	movs	r2, #0
 8002e92:	46ab      	mov	fp, r5
 8002e94:	106d      	asrs	r5, r5, #1
 8002e96:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8002e9a:	9304      	str	r3, [sp, #16]
 8002e9c:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8002ea0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8002ea4:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8002ea8:	4640      	mov	r0, r8
 8002eaa:	4649      	mov	r1, r9
 8002eac:	4614      	mov	r4, r2
 8002eae:	461d      	mov	r5, r3
 8002eb0:	f7fd fb0a 	bl	80004c8 <__aeabi_dmul>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	460b      	mov	r3, r1
 8002eb8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8002ebc:	f7fd f94c 	bl	8000158 <__aeabi_dsub>
 8002ec0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8002ec4:	4606      	mov	r6, r0
 8002ec6:	460f      	mov	r7, r1
 8002ec8:	4620      	mov	r0, r4
 8002eca:	4629      	mov	r1, r5
 8002ecc:	f7fd f944 	bl	8000158 <__aeabi_dsub>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	460b      	mov	r3, r1
 8002ed4:	4650      	mov	r0, sl
 8002ed6:	4659      	mov	r1, fp
 8002ed8:	f7fd f93e 	bl	8000158 <__aeabi_dsub>
 8002edc:	4642      	mov	r2, r8
 8002ede:	464b      	mov	r3, r9
 8002ee0:	f7fd faf2 	bl	80004c8 <__aeabi_dmul>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	460b      	mov	r3, r1
 8002ee8:	4630      	mov	r0, r6
 8002eea:	4639      	mov	r1, r7
 8002eec:	f7fd f934 	bl	8000158 <__aeabi_dsub>
 8002ef0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8002ef4:	f7fd fae8 	bl	80004c8 <__aeabi_dmul>
 8002ef8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8002efc:	4682      	mov	sl, r0
 8002efe:	468b      	mov	fp, r1
 8002f00:	4610      	mov	r0, r2
 8002f02:	4619      	mov	r1, r3
 8002f04:	f7fd fae0 	bl	80004c8 <__aeabi_dmul>
 8002f08:	a37b      	add	r3, pc, #492	; (adr r3, 80030f8 <__ieee754_pow+0x6f0>)
 8002f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f0e:	4604      	mov	r4, r0
 8002f10:	460d      	mov	r5, r1
 8002f12:	f7fd fad9 	bl	80004c8 <__aeabi_dmul>
 8002f16:	a37a      	add	r3, pc, #488	; (adr r3, 8003100 <__ieee754_pow+0x6f8>)
 8002f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f1c:	f7fd f91e 	bl	800015c <__adddf3>
 8002f20:	4622      	mov	r2, r4
 8002f22:	462b      	mov	r3, r5
 8002f24:	f7fd fad0 	bl	80004c8 <__aeabi_dmul>
 8002f28:	a377      	add	r3, pc, #476	; (adr r3, 8003108 <__ieee754_pow+0x700>)
 8002f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f2e:	f7fd f915 	bl	800015c <__adddf3>
 8002f32:	4622      	mov	r2, r4
 8002f34:	462b      	mov	r3, r5
 8002f36:	f7fd fac7 	bl	80004c8 <__aeabi_dmul>
 8002f3a:	a375      	add	r3, pc, #468	; (adr r3, 8003110 <__ieee754_pow+0x708>)
 8002f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f40:	f7fd f90c 	bl	800015c <__adddf3>
 8002f44:	4622      	mov	r2, r4
 8002f46:	462b      	mov	r3, r5
 8002f48:	f7fd fabe 	bl	80004c8 <__aeabi_dmul>
 8002f4c:	a372      	add	r3, pc, #456	; (adr r3, 8003118 <__ieee754_pow+0x710>)
 8002f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f52:	f7fd f903 	bl	800015c <__adddf3>
 8002f56:	4622      	mov	r2, r4
 8002f58:	462b      	mov	r3, r5
 8002f5a:	f7fd fab5 	bl	80004c8 <__aeabi_dmul>
 8002f5e:	a370      	add	r3, pc, #448	; (adr r3, 8003120 <__ieee754_pow+0x718>)
 8002f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f64:	f7fd f8fa 	bl	800015c <__adddf3>
 8002f68:	4622      	mov	r2, r4
 8002f6a:	4606      	mov	r6, r0
 8002f6c:	460f      	mov	r7, r1
 8002f6e:	462b      	mov	r3, r5
 8002f70:	4620      	mov	r0, r4
 8002f72:	4629      	mov	r1, r5
 8002f74:	f7fd faa8 	bl	80004c8 <__aeabi_dmul>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	460b      	mov	r3, r1
 8002f7c:	4630      	mov	r0, r6
 8002f7e:	4639      	mov	r1, r7
 8002f80:	f7fd faa2 	bl	80004c8 <__aeabi_dmul>
 8002f84:	4604      	mov	r4, r0
 8002f86:	460d      	mov	r5, r1
 8002f88:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002f8c:	4642      	mov	r2, r8
 8002f8e:	464b      	mov	r3, r9
 8002f90:	f7fd f8e4 	bl	800015c <__adddf3>
 8002f94:	4652      	mov	r2, sl
 8002f96:	465b      	mov	r3, fp
 8002f98:	f7fd fa96 	bl	80004c8 <__aeabi_dmul>
 8002f9c:	4622      	mov	r2, r4
 8002f9e:	462b      	mov	r3, r5
 8002fa0:	f7fd f8dc 	bl	800015c <__adddf3>
 8002fa4:	4642      	mov	r2, r8
 8002fa6:	4606      	mov	r6, r0
 8002fa8:	460f      	mov	r7, r1
 8002faa:	464b      	mov	r3, r9
 8002fac:	4640      	mov	r0, r8
 8002fae:	4649      	mov	r1, r9
 8002fb0:	f7fd fa8a 	bl	80004c8 <__aeabi_dmul>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	460b      	mov	r3, r1
 8002fb8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	4b66      	ldr	r3, [pc, #408]	; (8003158 <__ieee754_pow+0x750>)
 8002fc0:	f7fd f8cc 	bl	800015c <__adddf3>
 8002fc4:	4632      	mov	r2, r6
 8002fc6:	463b      	mov	r3, r7
 8002fc8:	f7fd f8c8 	bl	800015c <__adddf3>
 8002fcc:	2400      	movs	r4, #0
 8002fce:	460d      	mov	r5, r1
 8002fd0:	4622      	mov	r2, r4
 8002fd2:	460b      	mov	r3, r1
 8002fd4:	4640      	mov	r0, r8
 8002fd6:	4649      	mov	r1, r9
 8002fd8:	f7fd fa76 	bl	80004c8 <__aeabi_dmul>
 8002fdc:	2200      	movs	r2, #0
 8002fde:	4680      	mov	r8, r0
 8002fe0:	4689      	mov	r9, r1
 8002fe2:	4620      	mov	r0, r4
 8002fe4:	4629      	mov	r1, r5
 8002fe6:	4b5c      	ldr	r3, [pc, #368]	; (8003158 <__ieee754_pow+0x750>)
 8002fe8:	f7fd f8b6 	bl	8000158 <__aeabi_dsub>
 8002fec:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8002ff0:	f7fd f8b2 	bl	8000158 <__aeabi_dsub>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	460b      	mov	r3, r1
 8002ff8:	4630      	mov	r0, r6
 8002ffa:	4639      	mov	r1, r7
 8002ffc:	f7fd f8ac 	bl	8000158 <__aeabi_dsub>
 8003000:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003004:	f7fd fa60 	bl	80004c8 <__aeabi_dmul>
 8003008:	4622      	mov	r2, r4
 800300a:	4606      	mov	r6, r0
 800300c:	460f      	mov	r7, r1
 800300e:	462b      	mov	r3, r5
 8003010:	4650      	mov	r0, sl
 8003012:	4659      	mov	r1, fp
 8003014:	f7fd fa58 	bl	80004c8 <__aeabi_dmul>
 8003018:	4602      	mov	r2, r0
 800301a:	460b      	mov	r3, r1
 800301c:	4630      	mov	r0, r6
 800301e:	4639      	mov	r1, r7
 8003020:	f7fd f89c 	bl	800015c <__adddf3>
 8003024:	2400      	movs	r4, #0
 8003026:	4606      	mov	r6, r0
 8003028:	460f      	mov	r7, r1
 800302a:	4602      	mov	r2, r0
 800302c:	460b      	mov	r3, r1
 800302e:	4640      	mov	r0, r8
 8003030:	4649      	mov	r1, r9
 8003032:	f7fd f893 	bl	800015c <__adddf3>
 8003036:	a33c      	add	r3, pc, #240	; (adr r3, 8003128 <__ieee754_pow+0x720>)
 8003038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800303c:	4620      	mov	r0, r4
 800303e:	460d      	mov	r5, r1
 8003040:	f7fd fa42 	bl	80004c8 <__aeabi_dmul>
 8003044:	4642      	mov	r2, r8
 8003046:	464b      	mov	r3, r9
 8003048:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800304c:	4620      	mov	r0, r4
 800304e:	4629      	mov	r1, r5
 8003050:	f7fd f882 	bl	8000158 <__aeabi_dsub>
 8003054:	4602      	mov	r2, r0
 8003056:	460b      	mov	r3, r1
 8003058:	4630      	mov	r0, r6
 800305a:	4639      	mov	r1, r7
 800305c:	f7fd f87c 	bl	8000158 <__aeabi_dsub>
 8003060:	a333      	add	r3, pc, #204	; (adr r3, 8003130 <__ieee754_pow+0x728>)
 8003062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003066:	f7fd fa2f 	bl	80004c8 <__aeabi_dmul>
 800306a:	a333      	add	r3, pc, #204	; (adr r3, 8003138 <__ieee754_pow+0x730>)
 800306c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003070:	4606      	mov	r6, r0
 8003072:	460f      	mov	r7, r1
 8003074:	4620      	mov	r0, r4
 8003076:	4629      	mov	r1, r5
 8003078:	f7fd fa26 	bl	80004c8 <__aeabi_dmul>
 800307c:	4602      	mov	r2, r0
 800307e:	460b      	mov	r3, r1
 8003080:	4630      	mov	r0, r6
 8003082:	4639      	mov	r1, r7
 8003084:	f7fd f86a 	bl	800015c <__adddf3>
 8003088:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800308a:	4b34      	ldr	r3, [pc, #208]	; (800315c <__ieee754_pow+0x754>)
 800308c:	4413      	add	r3, r2
 800308e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003092:	f7fd f863 	bl	800015c <__adddf3>
 8003096:	4680      	mov	r8, r0
 8003098:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800309a:	4689      	mov	r9, r1
 800309c:	f7fd f9aa 	bl	80003f4 <__aeabi_i2d>
 80030a0:	4604      	mov	r4, r0
 80030a2:	460d      	mov	r5, r1
 80030a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80030a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80030aa:	4b2d      	ldr	r3, [pc, #180]	; (8003160 <__ieee754_pow+0x758>)
 80030ac:	4413      	add	r3, r2
 80030ae:	e9d3 6700 	ldrd	r6, r7, [r3]
 80030b2:	4642      	mov	r2, r8
 80030b4:	464b      	mov	r3, r9
 80030b6:	f7fd f851 	bl	800015c <__adddf3>
 80030ba:	4632      	mov	r2, r6
 80030bc:	463b      	mov	r3, r7
 80030be:	f7fd f84d 	bl	800015c <__adddf3>
 80030c2:	4622      	mov	r2, r4
 80030c4:	462b      	mov	r3, r5
 80030c6:	f7fd f849 	bl	800015c <__adddf3>
 80030ca:	2000      	movs	r0, #0
 80030cc:	4622      	mov	r2, r4
 80030ce:	462b      	mov	r3, r5
 80030d0:	4682      	mov	sl, r0
 80030d2:	468b      	mov	fp, r1
 80030d4:	f7fd f840 	bl	8000158 <__aeabi_dsub>
 80030d8:	4632      	mov	r2, r6
 80030da:	463b      	mov	r3, r7
 80030dc:	f7fd f83c 	bl	8000158 <__aeabi_dsub>
 80030e0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80030e4:	f7fd f838 	bl	8000158 <__aeabi_dsub>
 80030e8:	4602      	mov	r2, r0
 80030ea:	460b      	mov	r3, r1
 80030ec:	4640      	mov	r0, r8
 80030ee:	4649      	mov	r1, r9
 80030f0:	e60b      	b.n	8002d0a <__ieee754_pow+0x302>
 80030f2:	2601      	movs	r6, #1
 80030f4:	e69f      	b.n	8002e36 <__ieee754_pow+0x42e>
 80030f6:	bf00      	nop
 80030f8:	4a454eef 	.word	0x4a454eef
 80030fc:	3fca7e28 	.word	0x3fca7e28
 8003100:	93c9db65 	.word	0x93c9db65
 8003104:	3fcd864a 	.word	0x3fcd864a
 8003108:	a91d4101 	.word	0xa91d4101
 800310c:	3fd17460 	.word	0x3fd17460
 8003110:	518f264d 	.word	0x518f264d
 8003114:	3fd55555 	.word	0x3fd55555
 8003118:	db6fabff 	.word	0xdb6fabff
 800311c:	3fdb6db6 	.word	0x3fdb6db6
 8003120:	33333303 	.word	0x33333303
 8003124:	3fe33333 	.word	0x3fe33333
 8003128:	e0000000 	.word	0xe0000000
 800312c:	3feec709 	.word	0x3feec709
 8003130:	dc3a03fd 	.word	0xdc3a03fd
 8003134:	3feec709 	.word	0x3feec709
 8003138:	145b01f5 	.word	0x145b01f5
 800313c:	be3e2fe0 	.word	0xbe3e2fe0
 8003140:	7ff00000 	.word	0x7ff00000
 8003144:	43400000 	.word	0x43400000
 8003148:	0003988e 	.word	0x0003988e
 800314c:	000bb679 	.word	0x000bb679
 8003150:	08003780 	.word	0x08003780
 8003154:	3ff00000 	.word	0x3ff00000
 8003158:	40080000 	.word	0x40080000
 800315c:	080037a0 	.word	0x080037a0
 8003160:	08003790 	.word	0x08003790
 8003164:	a39c      	add	r3, pc, #624	; (adr r3, 80033d8 <__ieee754_pow+0x9d0>)
 8003166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800316a:	4640      	mov	r0, r8
 800316c:	4649      	mov	r1, r9
 800316e:	f7fc fff5 	bl	800015c <__adddf3>
 8003172:	4622      	mov	r2, r4
 8003174:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003178:	462b      	mov	r3, r5
 800317a:	4650      	mov	r0, sl
 800317c:	4639      	mov	r1, r7
 800317e:	f7fc ffeb 	bl	8000158 <__aeabi_dsub>
 8003182:	4602      	mov	r2, r0
 8003184:	460b      	mov	r3, r1
 8003186:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800318a:	f7fd fc2d 	bl	80009e8 <__aeabi_dcmpgt>
 800318e:	2800      	cmp	r0, #0
 8003190:	f47f ae06 	bne.w	8002da0 <__ieee754_pow+0x398>
 8003194:	4aa2      	ldr	r2, [pc, #648]	; (8003420 <__ieee754_pow+0xa18>)
 8003196:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800319a:	4293      	cmp	r3, r2
 800319c:	f340 8100 	ble.w	80033a0 <__ieee754_pow+0x998>
 80031a0:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80031a4:	151b      	asrs	r3, r3, #20
 80031a6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80031aa:	fa4a fa03 	asr.w	sl, sl, r3
 80031ae:	44b2      	add	sl, r6
 80031b0:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80031b4:	489b      	ldr	r0, [pc, #620]	; (8003424 <__ieee754_pow+0xa1c>)
 80031b6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80031ba:	4108      	asrs	r0, r1
 80031bc:	ea00 030a 	and.w	r3, r0, sl
 80031c0:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80031c4:	f1c1 0114 	rsb	r1, r1, #20
 80031c8:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80031cc:	fa4a fa01 	asr.w	sl, sl, r1
 80031d0:	2e00      	cmp	r6, #0
 80031d2:	f04f 0200 	mov.w	r2, #0
 80031d6:	4620      	mov	r0, r4
 80031d8:	4629      	mov	r1, r5
 80031da:	bfb8      	it	lt
 80031dc:	f1ca 0a00 	rsblt	sl, sl, #0
 80031e0:	f7fc ffba 	bl	8000158 <__aeabi_dsub>
 80031e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80031e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80031ec:	2400      	movs	r4, #0
 80031ee:	4642      	mov	r2, r8
 80031f0:	464b      	mov	r3, r9
 80031f2:	f7fc ffb3 	bl	800015c <__adddf3>
 80031f6:	a37a      	add	r3, pc, #488	; (adr r3, 80033e0 <__ieee754_pow+0x9d8>)
 80031f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031fc:	4620      	mov	r0, r4
 80031fe:	460d      	mov	r5, r1
 8003200:	f7fd f962 	bl	80004c8 <__aeabi_dmul>
 8003204:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003208:	4606      	mov	r6, r0
 800320a:	460f      	mov	r7, r1
 800320c:	4620      	mov	r0, r4
 800320e:	4629      	mov	r1, r5
 8003210:	f7fc ffa2 	bl	8000158 <__aeabi_dsub>
 8003214:	4602      	mov	r2, r0
 8003216:	460b      	mov	r3, r1
 8003218:	4640      	mov	r0, r8
 800321a:	4649      	mov	r1, r9
 800321c:	f7fc ff9c 	bl	8000158 <__aeabi_dsub>
 8003220:	a371      	add	r3, pc, #452	; (adr r3, 80033e8 <__ieee754_pow+0x9e0>)
 8003222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003226:	f7fd f94f 	bl	80004c8 <__aeabi_dmul>
 800322a:	a371      	add	r3, pc, #452	; (adr r3, 80033f0 <__ieee754_pow+0x9e8>)
 800322c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003230:	4680      	mov	r8, r0
 8003232:	4689      	mov	r9, r1
 8003234:	4620      	mov	r0, r4
 8003236:	4629      	mov	r1, r5
 8003238:	f7fd f946 	bl	80004c8 <__aeabi_dmul>
 800323c:	4602      	mov	r2, r0
 800323e:	460b      	mov	r3, r1
 8003240:	4640      	mov	r0, r8
 8003242:	4649      	mov	r1, r9
 8003244:	f7fc ff8a 	bl	800015c <__adddf3>
 8003248:	4604      	mov	r4, r0
 800324a:	460d      	mov	r5, r1
 800324c:	4602      	mov	r2, r0
 800324e:	460b      	mov	r3, r1
 8003250:	4630      	mov	r0, r6
 8003252:	4639      	mov	r1, r7
 8003254:	f7fc ff82 	bl	800015c <__adddf3>
 8003258:	4632      	mov	r2, r6
 800325a:	463b      	mov	r3, r7
 800325c:	4680      	mov	r8, r0
 800325e:	4689      	mov	r9, r1
 8003260:	f7fc ff7a 	bl	8000158 <__aeabi_dsub>
 8003264:	4602      	mov	r2, r0
 8003266:	460b      	mov	r3, r1
 8003268:	4620      	mov	r0, r4
 800326a:	4629      	mov	r1, r5
 800326c:	f7fc ff74 	bl	8000158 <__aeabi_dsub>
 8003270:	4642      	mov	r2, r8
 8003272:	4606      	mov	r6, r0
 8003274:	460f      	mov	r7, r1
 8003276:	464b      	mov	r3, r9
 8003278:	4640      	mov	r0, r8
 800327a:	4649      	mov	r1, r9
 800327c:	f7fd f924 	bl	80004c8 <__aeabi_dmul>
 8003280:	a35d      	add	r3, pc, #372	; (adr r3, 80033f8 <__ieee754_pow+0x9f0>)
 8003282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003286:	4604      	mov	r4, r0
 8003288:	460d      	mov	r5, r1
 800328a:	f7fd f91d 	bl	80004c8 <__aeabi_dmul>
 800328e:	a35c      	add	r3, pc, #368	; (adr r3, 8003400 <__ieee754_pow+0x9f8>)
 8003290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003294:	f7fc ff60 	bl	8000158 <__aeabi_dsub>
 8003298:	4622      	mov	r2, r4
 800329a:	462b      	mov	r3, r5
 800329c:	f7fd f914 	bl	80004c8 <__aeabi_dmul>
 80032a0:	a359      	add	r3, pc, #356	; (adr r3, 8003408 <__ieee754_pow+0xa00>)
 80032a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032a6:	f7fc ff59 	bl	800015c <__adddf3>
 80032aa:	4622      	mov	r2, r4
 80032ac:	462b      	mov	r3, r5
 80032ae:	f7fd f90b 	bl	80004c8 <__aeabi_dmul>
 80032b2:	a357      	add	r3, pc, #348	; (adr r3, 8003410 <__ieee754_pow+0xa08>)
 80032b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032b8:	f7fc ff4e 	bl	8000158 <__aeabi_dsub>
 80032bc:	4622      	mov	r2, r4
 80032be:	462b      	mov	r3, r5
 80032c0:	f7fd f902 	bl	80004c8 <__aeabi_dmul>
 80032c4:	a354      	add	r3, pc, #336	; (adr r3, 8003418 <__ieee754_pow+0xa10>)
 80032c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ca:	f7fc ff47 	bl	800015c <__adddf3>
 80032ce:	4622      	mov	r2, r4
 80032d0:	462b      	mov	r3, r5
 80032d2:	f7fd f8f9 	bl	80004c8 <__aeabi_dmul>
 80032d6:	4602      	mov	r2, r0
 80032d8:	460b      	mov	r3, r1
 80032da:	4640      	mov	r0, r8
 80032dc:	4649      	mov	r1, r9
 80032de:	f7fc ff3b 	bl	8000158 <__aeabi_dsub>
 80032e2:	4604      	mov	r4, r0
 80032e4:	460d      	mov	r5, r1
 80032e6:	4602      	mov	r2, r0
 80032e8:	460b      	mov	r3, r1
 80032ea:	4640      	mov	r0, r8
 80032ec:	4649      	mov	r1, r9
 80032ee:	f7fd f8eb 	bl	80004c8 <__aeabi_dmul>
 80032f2:	2200      	movs	r2, #0
 80032f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80032f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80032fc:	4620      	mov	r0, r4
 80032fe:	4629      	mov	r1, r5
 8003300:	f7fc ff2a 	bl	8000158 <__aeabi_dsub>
 8003304:	4602      	mov	r2, r0
 8003306:	460b      	mov	r3, r1
 8003308:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800330c:	f7fd fa06 	bl	800071c <__aeabi_ddiv>
 8003310:	4632      	mov	r2, r6
 8003312:	4604      	mov	r4, r0
 8003314:	460d      	mov	r5, r1
 8003316:	463b      	mov	r3, r7
 8003318:	4640      	mov	r0, r8
 800331a:	4649      	mov	r1, r9
 800331c:	f7fd f8d4 	bl	80004c8 <__aeabi_dmul>
 8003320:	4632      	mov	r2, r6
 8003322:	463b      	mov	r3, r7
 8003324:	f7fc ff1a 	bl	800015c <__adddf3>
 8003328:	4602      	mov	r2, r0
 800332a:	460b      	mov	r3, r1
 800332c:	4620      	mov	r0, r4
 800332e:	4629      	mov	r1, r5
 8003330:	f7fc ff12 	bl	8000158 <__aeabi_dsub>
 8003334:	4642      	mov	r2, r8
 8003336:	464b      	mov	r3, r9
 8003338:	f7fc ff0e 	bl	8000158 <__aeabi_dsub>
 800333c:	4602      	mov	r2, r0
 800333e:	460b      	mov	r3, r1
 8003340:	2000      	movs	r0, #0
 8003342:	4939      	ldr	r1, [pc, #228]	; (8003428 <__ieee754_pow+0xa20>)
 8003344:	f7fc ff08 	bl	8000158 <__aeabi_dsub>
 8003348:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800334c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8003350:	da29      	bge.n	80033a6 <__ieee754_pow+0x99e>
 8003352:	4652      	mov	r2, sl
 8003354:	f000 f874 	bl	8003440 <scalbn>
 8003358:	e9dd 2300 	ldrd	r2, r3, [sp]
 800335c:	f7ff bbfd 	b.w	8002b5a <__ieee754_pow+0x152>
 8003360:	4b32      	ldr	r3, [pc, #200]	; (800342c <__ieee754_pow+0xa24>)
 8003362:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8003366:	429f      	cmp	r7, r3
 8003368:	f77f af14 	ble.w	8003194 <__ieee754_pow+0x78c>
 800336c:	4b30      	ldr	r3, [pc, #192]	; (8003430 <__ieee754_pow+0xa28>)
 800336e:	440b      	add	r3, r1
 8003370:	4303      	orrs	r3, r0
 8003372:	d009      	beq.n	8003388 <__ieee754_pow+0x980>
 8003374:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003378:	2200      	movs	r2, #0
 800337a:	2300      	movs	r3, #0
 800337c:	f7fd fb16 	bl	80009ac <__aeabi_dcmplt>
 8003380:	3800      	subs	r0, #0
 8003382:	bf18      	it	ne
 8003384:	2001      	movne	r0, #1
 8003386:	e452      	b.n	8002c2e <__ieee754_pow+0x226>
 8003388:	4622      	mov	r2, r4
 800338a:	462b      	mov	r3, r5
 800338c:	f7fc fee4 	bl	8000158 <__aeabi_dsub>
 8003390:	4642      	mov	r2, r8
 8003392:	464b      	mov	r3, r9
 8003394:	f7fd fb1e 	bl	80009d4 <__aeabi_dcmpge>
 8003398:	2800      	cmp	r0, #0
 800339a:	f43f aefb 	beq.w	8003194 <__ieee754_pow+0x78c>
 800339e:	e7e9      	b.n	8003374 <__ieee754_pow+0x96c>
 80033a0:	f04f 0a00 	mov.w	sl, #0
 80033a4:	e720      	b.n	80031e8 <__ieee754_pow+0x7e0>
 80033a6:	4621      	mov	r1, r4
 80033a8:	e7d6      	b.n	8003358 <__ieee754_pow+0x950>
 80033aa:	f04f 0b00 	mov.w	fp, #0
 80033ae:	f8df c078 	ldr.w	ip, [pc, #120]	; 8003428 <__ieee754_pow+0xa20>
 80033b2:	f7ff bbb9 	b.w	8002b28 <__ieee754_pow+0x120>
 80033b6:	f04f 0b00 	mov.w	fp, #0
 80033ba:	f04f 0c00 	mov.w	ip, #0
 80033be:	f7ff bbb3 	b.w	8002b28 <__ieee754_pow+0x120>
 80033c2:	4640      	mov	r0, r8
 80033c4:	4649      	mov	r1, r9
 80033c6:	f7ff bb3c 	b.w	8002a42 <__ieee754_pow+0x3a>
 80033ca:	9200      	str	r2, [sp, #0]
 80033cc:	f7ff bb88 	b.w	8002ae0 <__ieee754_pow+0xd8>
 80033d0:	2300      	movs	r3, #0
 80033d2:	f7ff bb72 	b.w	8002aba <__ieee754_pow+0xb2>
 80033d6:	bf00      	nop
 80033d8:	652b82fe 	.word	0x652b82fe
 80033dc:	3c971547 	.word	0x3c971547
 80033e0:	00000000 	.word	0x00000000
 80033e4:	3fe62e43 	.word	0x3fe62e43
 80033e8:	fefa39ef 	.word	0xfefa39ef
 80033ec:	3fe62e42 	.word	0x3fe62e42
 80033f0:	0ca86c39 	.word	0x0ca86c39
 80033f4:	be205c61 	.word	0xbe205c61
 80033f8:	72bea4d0 	.word	0x72bea4d0
 80033fc:	3e663769 	.word	0x3e663769
 8003400:	c5d26bf1 	.word	0xc5d26bf1
 8003404:	3ebbbd41 	.word	0x3ebbbd41
 8003408:	af25de2c 	.word	0xaf25de2c
 800340c:	3f11566a 	.word	0x3f11566a
 8003410:	16bebd93 	.word	0x16bebd93
 8003414:	3f66c16c 	.word	0x3f66c16c
 8003418:	5555553e 	.word	0x5555553e
 800341c:	3fc55555 	.word	0x3fc55555
 8003420:	3fe00000 	.word	0x3fe00000
 8003424:	fff00000 	.word	0xfff00000
 8003428:	3ff00000 	.word	0x3ff00000
 800342c:	4090cbff 	.word	0x4090cbff
 8003430:	3f6f3400 	.word	0x3f6f3400

08003434 <fabs>:
 8003434:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003438:	4619      	mov	r1, r3
 800343a:	4770      	bx	lr
 800343c:	0000      	movs	r0, r0
	...

08003440 <scalbn>:
 8003440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003442:	4616      	mov	r6, r2
 8003444:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8003448:	4604      	mov	r4, r0
 800344a:	460d      	mov	r5, r1
 800344c:	460b      	mov	r3, r1
 800344e:	b992      	cbnz	r2, 8003476 <scalbn+0x36>
 8003450:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003454:	4303      	orrs	r3, r0
 8003456:	d03c      	beq.n	80034d2 <scalbn+0x92>
 8003458:	4b31      	ldr	r3, [pc, #196]	; (8003520 <scalbn+0xe0>)
 800345a:	2200      	movs	r2, #0
 800345c:	f7fd f834 	bl	80004c8 <__aeabi_dmul>
 8003460:	4b30      	ldr	r3, [pc, #192]	; (8003524 <scalbn+0xe4>)
 8003462:	4604      	mov	r4, r0
 8003464:	429e      	cmp	r6, r3
 8003466:	460d      	mov	r5, r1
 8003468:	da0f      	bge.n	800348a <scalbn+0x4a>
 800346a:	a329      	add	r3, pc, #164	; (adr r3, 8003510 <scalbn+0xd0>)
 800346c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003470:	f7fd f82a 	bl	80004c8 <__aeabi_dmul>
 8003474:	e006      	b.n	8003484 <scalbn+0x44>
 8003476:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800347a:	42ba      	cmp	r2, r7
 800347c:	d109      	bne.n	8003492 <scalbn+0x52>
 800347e:	4602      	mov	r2, r0
 8003480:	f7fc fe6c 	bl	800015c <__adddf3>
 8003484:	4604      	mov	r4, r0
 8003486:	460d      	mov	r5, r1
 8003488:	e023      	b.n	80034d2 <scalbn+0x92>
 800348a:	460b      	mov	r3, r1
 800348c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8003490:	3a36      	subs	r2, #54	; 0x36
 8003492:	f24c 3150 	movw	r1, #50000	; 0xc350
 8003496:	428e      	cmp	r6, r1
 8003498:	dd0e      	ble.n	80034b8 <scalbn+0x78>
 800349a:	a31f      	add	r3, pc, #124	; (adr r3, 8003518 <scalbn+0xd8>)
 800349c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034a0:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 80034a4:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 80034a8:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 80034ac:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 80034b0:	481d      	ldr	r0, [pc, #116]	; (8003528 <scalbn+0xe8>)
 80034b2:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 80034b6:	e7db      	b.n	8003470 <scalbn+0x30>
 80034b8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80034bc:	4432      	add	r2, r6
 80034be:	428a      	cmp	r2, r1
 80034c0:	dceb      	bgt.n	800349a <scalbn+0x5a>
 80034c2:	2a00      	cmp	r2, #0
 80034c4:	dd08      	ble.n	80034d8 <scalbn+0x98>
 80034c6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80034ca:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80034ce:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80034d2:	4620      	mov	r0, r4
 80034d4:	4629      	mov	r1, r5
 80034d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80034d8:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80034dc:	da0c      	bge.n	80034f8 <scalbn+0xb8>
 80034de:	a30c      	add	r3, pc, #48	; (adr r3, 8003510 <scalbn+0xd0>)
 80034e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034e4:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 80034e8:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 80034ec:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 80034f0:	480e      	ldr	r0, [pc, #56]	; (800352c <scalbn+0xec>)
 80034f2:	f041 011f 	orr.w	r1, r1, #31
 80034f6:	e7bb      	b.n	8003470 <scalbn+0x30>
 80034f8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80034fc:	3236      	adds	r2, #54	; 0x36
 80034fe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003502:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8003506:	4620      	mov	r0, r4
 8003508:	4629      	mov	r1, r5
 800350a:	2200      	movs	r2, #0
 800350c:	4b08      	ldr	r3, [pc, #32]	; (8003530 <scalbn+0xf0>)
 800350e:	e7af      	b.n	8003470 <scalbn+0x30>
 8003510:	c2f8f359 	.word	0xc2f8f359
 8003514:	01a56e1f 	.word	0x01a56e1f
 8003518:	8800759c 	.word	0x8800759c
 800351c:	7e37e43c 	.word	0x7e37e43c
 8003520:	43500000 	.word	0x43500000
 8003524:	ffff3cb0 	.word	0xffff3cb0
 8003528:	8800759c 	.word	0x8800759c
 800352c:	c2f8f359 	.word	0xc2f8f359
 8003530:	3c900000 	.word	0x3c900000

08003534 <with_errno>:
 8003534:	b570      	push	{r4, r5, r6, lr}
 8003536:	4604      	mov	r4, r0
 8003538:	460d      	mov	r5, r1
 800353a:	4616      	mov	r6, r2
 800353c:	f7ff f9cc 	bl	80028d8 <__errno>
 8003540:	4629      	mov	r1, r5
 8003542:	6006      	str	r6, [r0, #0]
 8003544:	4620      	mov	r0, r4
 8003546:	bd70      	pop	{r4, r5, r6, pc}

08003548 <xflow>:
 8003548:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800354a:	4615      	mov	r5, r2
 800354c:	461c      	mov	r4, r3
 800354e:	b180      	cbz	r0, 8003572 <xflow+0x2a>
 8003550:	4610      	mov	r0, r2
 8003552:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8003556:	e9cd 0100 	strd	r0, r1, [sp]
 800355a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800355e:	4628      	mov	r0, r5
 8003560:	4621      	mov	r1, r4
 8003562:	f7fc ffb1 	bl	80004c8 <__aeabi_dmul>
 8003566:	2222      	movs	r2, #34	; 0x22
 8003568:	b003      	add	sp, #12
 800356a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800356e:	f7ff bfe1 	b.w	8003534 <with_errno>
 8003572:	4610      	mov	r0, r2
 8003574:	4619      	mov	r1, r3
 8003576:	e7ee      	b.n	8003556 <xflow+0xe>

08003578 <__math_uflow>:
 8003578:	2200      	movs	r2, #0
 800357a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800357e:	f7ff bfe3 	b.w	8003548 <xflow>

08003582 <__math_oflow>:
 8003582:	2200      	movs	r2, #0
 8003584:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8003588:	f7ff bfde 	b.w	8003548 <xflow>

0800358c <__ieee754_sqrt>:
 800358c:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 8003730 <__ieee754_sqrt+0x1a4>
 8003590:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003594:	ea3c 0c01 	bics.w	ip, ip, r1
 8003598:	460b      	mov	r3, r1
 800359a:	4606      	mov	r6, r0
 800359c:	460d      	mov	r5, r1
 800359e:	460a      	mov	r2, r1
 80035a0:	4604      	mov	r4, r0
 80035a2:	d10e      	bne.n	80035c2 <__ieee754_sqrt+0x36>
 80035a4:	4602      	mov	r2, r0
 80035a6:	f7fc ff8f 	bl	80004c8 <__aeabi_dmul>
 80035aa:	4602      	mov	r2, r0
 80035ac:	460b      	mov	r3, r1
 80035ae:	4630      	mov	r0, r6
 80035b0:	4629      	mov	r1, r5
 80035b2:	f7fc fdd3 	bl	800015c <__adddf3>
 80035b6:	4606      	mov	r6, r0
 80035b8:	460d      	mov	r5, r1
 80035ba:	4630      	mov	r0, r6
 80035bc:	4629      	mov	r1, r5
 80035be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035c2:	2900      	cmp	r1, #0
 80035c4:	dc0d      	bgt.n	80035e2 <__ieee754_sqrt+0x56>
 80035c6:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80035ca:	ea5c 0c00 	orrs.w	ip, ip, r0
 80035ce:	d0f4      	beq.n	80035ba <__ieee754_sqrt+0x2e>
 80035d0:	b139      	cbz	r1, 80035e2 <__ieee754_sqrt+0x56>
 80035d2:	4602      	mov	r2, r0
 80035d4:	f7fc fdc0 	bl	8000158 <__aeabi_dsub>
 80035d8:	4602      	mov	r2, r0
 80035da:	460b      	mov	r3, r1
 80035dc:	f7fd f89e 	bl	800071c <__aeabi_ddiv>
 80035e0:	e7e9      	b.n	80035b6 <__ieee754_sqrt+0x2a>
 80035e2:	1512      	asrs	r2, r2, #20
 80035e4:	f000 8089 	beq.w	80036fa <__ieee754_sqrt+0x16e>
 80035e8:	2500      	movs	r5, #0
 80035ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80035ee:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80035f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035f6:	07d2      	lsls	r2, r2, #31
 80035f8:	bf5c      	itt	pl
 80035fa:	005b      	lslpl	r3, r3, #1
 80035fc:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8003600:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003604:	bf58      	it	pl
 8003606:	0064      	lslpl	r4, r4, #1
 8003608:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800360c:	0062      	lsls	r2, r4, #1
 800360e:	2016      	movs	r0, #22
 8003610:	4629      	mov	r1, r5
 8003612:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 8003616:	1076      	asrs	r6, r6, #1
 8003618:	190f      	adds	r7, r1, r4
 800361a:	429f      	cmp	r7, r3
 800361c:	bfde      	ittt	le
 800361e:	1bdb      	suble	r3, r3, r7
 8003620:	1939      	addle	r1, r7, r4
 8003622:	192d      	addle	r5, r5, r4
 8003624:	005b      	lsls	r3, r3, #1
 8003626:	3801      	subs	r0, #1
 8003628:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800362c:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8003630:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8003634:	d1f0      	bne.n	8003618 <__ieee754_sqrt+0x8c>
 8003636:	4604      	mov	r4, r0
 8003638:	2720      	movs	r7, #32
 800363a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800363e:	428b      	cmp	r3, r1
 8003640:	eb0c 0e00 	add.w	lr, ip, r0
 8003644:	dc02      	bgt.n	800364c <__ieee754_sqrt+0xc0>
 8003646:	d113      	bne.n	8003670 <__ieee754_sqrt+0xe4>
 8003648:	4596      	cmp	lr, r2
 800364a:	d811      	bhi.n	8003670 <__ieee754_sqrt+0xe4>
 800364c:	f1be 0f00 	cmp.w	lr, #0
 8003650:	eb0e 000c 	add.w	r0, lr, ip
 8003654:	da56      	bge.n	8003704 <__ieee754_sqrt+0x178>
 8003656:	2800      	cmp	r0, #0
 8003658:	db54      	blt.n	8003704 <__ieee754_sqrt+0x178>
 800365a:	f101 0801 	add.w	r8, r1, #1
 800365e:	1a5b      	subs	r3, r3, r1
 8003660:	4641      	mov	r1, r8
 8003662:	4596      	cmp	lr, r2
 8003664:	bf88      	it	hi
 8003666:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800366a:	eba2 020e 	sub.w	r2, r2, lr
 800366e:	4464      	add	r4, ip
 8003670:	005b      	lsls	r3, r3, #1
 8003672:	3f01      	subs	r7, #1
 8003674:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8003678:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800367c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8003680:	d1dd      	bne.n	800363e <__ieee754_sqrt+0xb2>
 8003682:	4313      	orrs	r3, r2
 8003684:	d01b      	beq.n	80036be <__ieee754_sqrt+0x132>
 8003686:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8003734 <__ieee754_sqrt+0x1a8>
 800368a:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8003738 <__ieee754_sqrt+0x1ac>
 800368e:	e9da 0100 	ldrd	r0, r1, [sl]
 8003692:	e9db 2300 	ldrd	r2, r3, [fp]
 8003696:	f7fc fd5f 	bl	8000158 <__aeabi_dsub>
 800369a:	e9da 8900 	ldrd	r8, r9, [sl]
 800369e:	4602      	mov	r2, r0
 80036a0:	460b      	mov	r3, r1
 80036a2:	4640      	mov	r0, r8
 80036a4:	4649      	mov	r1, r9
 80036a6:	f7fd f98b 	bl	80009c0 <__aeabi_dcmple>
 80036aa:	b140      	cbz	r0, 80036be <__ieee754_sqrt+0x132>
 80036ac:	e9da 0100 	ldrd	r0, r1, [sl]
 80036b0:	e9db 2300 	ldrd	r2, r3, [fp]
 80036b4:	f1b4 3fff 	cmp.w	r4, #4294967295
 80036b8:	d126      	bne.n	8003708 <__ieee754_sqrt+0x17c>
 80036ba:	463c      	mov	r4, r7
 80036bc:	3501      	adds	r5, #1
 80036be:	106b      	asrs	r3, r5, #1
 80036c0:	0864      	lsrs	r4, r4, #1
 80036c2:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80036c6:	07ea      	lsls	r2, r5, #31
 80036c8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80036cc:	bf48      	it	mi
 80036ce:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 80036d2:	4620      	mov	r0, r4
 80036d4:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 80036d8:	e76d      	b.n	80035b6 <__ieee754_sqrt+0x2a>
 80036da:	0ae3      	lsrs	r3, r4, #11
 80036dc:	3915      	subs	r1, #21
 80036de:	0564      	lsls	r4, r4, #21
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d0fa      	beq.n	80036da <__ieee754_sqrt+0x14e>
 80036e4:	02d8      	lsls	r0, r3, #11
 80036e6:	d50a      	bpl.n	80036fe <__ieee754_sqrt+0x172>
 80036e8:	f1c2 0020 	rsb	r0, r2, #32
 80036ec:	fa24 f000 	lsr.w	r0, r4, r0
 80036f0:	1e55      	subs	r5, r2, #1
 80036f2:	4094      	lsls	r4, r2
 80036f4:	4303      	orrs	r3, r0
 80036f6:	1b4a      	subs	r2, r1, r5
 80036f8:	e776      	b.n	80035e8 <__ieee754_sqrt+0x5c>
 80036fa:	4611      	mov	r1, r2
 80036fc:	e7f0      	b.n	80036e0 <__ieee754_sqrt+0x154>
 80036fe:	005b      	lsls	r3, r3, #1
 8003700:	3201      	adds	r2, #1
 8003702:	e7ef      	b.n	80036e4 <__ieee754_sqrt+0x158>
 8003704:	4688      	mov	r8, r1
 8003706:	e7aa      	b.n	800365e <__ieee754_sqrt+0xd2>
 8003708:	f7fc fd28 	bl	800015c <__adddf3>
 800370c:	e9da 8900 	ldrd	r8, r9, [sl]
 8003710:	4602      	mov	r2, r0
 8003712:	460b      	mov	r3, r1
 8003714:	4640      	mov	r0, r8
 8003716:	4649      	mov	r1, r9
 8003718:	f7fd f948 	bl	80009ac <__aeabi_dcmplt>
 800371c:	b120      	cbz	r0, 8003728 <__ieee754_sqrt+0x19c>
 800371e:	1ca1      	adds	r1, r4, #2
 8003720:	bf08      	it	eq
 8003722:	3501      	addeq	r5, #1
 8003724:	3402      	adds	r4, #2
 8003726:	e7ca      	b.n	80036be <__ieee754_sqrt+0x132>
 8003728:	3401      	adds	r4, #1
 800372a:	f024 0401 	bic.w	r4, r4, #1
 800372e:	e7c6      	b.n	80036be <__ieee754_sqrt+0x132>
 8003730:	7ff00000 	.word	0x7ff00000
 8003734:	20000068 	.word	0x20000068
 8003738:	20000070 	.word	0x20000070

0800373c <_init>:
 800373c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800373e:	bf00      	nop
 8003740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003742:	bc08      	pop	{r3}
 8003744:	469e      	mov	lr, r3
 8003746:	4770      	bx	lr

08003748 <_fini>:
 8003748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800374a:	bf00      	nop
 800374c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800374e:	bc08      	pop	{r3}
 8003750:	469e      	mov	lr, r3
 8003752:	4770      	bx	lr
>>>>>>> main
