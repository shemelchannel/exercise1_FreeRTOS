
exercise1_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004930  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08004a40  08004a40  00014a40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ac4  08004ac4  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08004ac4  08004ac4  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004ac4  08004ac4  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ac4  08004ac4  00014ac4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ac8  08004ac8  00014ac8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08004acc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c4c  20000060  08004b2c  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001cac  08004b2c  00021cac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001693a  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000031c4  00000000  00000000  00036a06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001378  00000000  00000000  00039bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f2c  00000000  00000000  0003af48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002baf  00000000  00000000  0003be74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000157b6  00000000  00000000  0003ea23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00093e3d  00000000  00000000  000541d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005450  00000000  00000000  000e8018  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000ed468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	08004a28 	.word	0x08004a28

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	08004a28 	.word	0x08004a28

08000150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  app_handle.ToggleBuf[0].Port 	= GPIOA;
 8000154:	4b3a      	ldr	r3, [pc, #232]	; (8000240 <main+0xf0>)
 8000156:	4a3b      	ldr	r2, [pc, #236]	; (8000244 <main+0xf4>)
 8000158:	641a      	str	r2, [r3, #64]	; 0x40
  app_handle.ToggleBuf[0].Pin  	= GPIO_PIN_4;
 800015a:	4b39      	ldr	r3, [pc, #228]	; (8000240 <main+0xf0>)
 800015c:	2210      	movs	r2, #16
 800015e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  app_handle.ToggleBuf[1].Port 	= GPIOB;
 8000162:	4b37      	ldr	r3, [pc, #220]	; (8000240 <main+0xf0>)
 8000164:	4a38      	ldr	r2, [pc, #224]	; (8000248 <main+0xf8>)
 8000166:	649a      	str	r2, [r3, #72]	; 0x48
  app_handle.ToggleBuf[1].Pin  	= GPIO_PIN_0;
 8000168:	4b35      	ldr	r3, [pc, #212]	; (8000240 <main+0xf0>)
 800016a:	2201      	movs	r2, #1
 800016c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  app_handle.ToggleBuf[2].Port 	= GPIOB;
 8000170:	4b33      	ldr	r3, [pc, #204]	; (8000240 <main+0xf0>)
 8000172:	4a35      	ldr	r2, [pc, #212]	; (8000248 <main+0xf8>)
 8000174:	651a      	str	r2, [r3, #80]	; 0x50
  app_handle.ToggleBuf[2].Pin  	= GPIO_PIN_11;
 8000176:	4b32      	ldr	r3, [pc, #200]	; (8000240 <main+0xf0>)
 8000178:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800017c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  app_handle.ToggleBuf[3].Port 	= GPIOC;
 8000180:	4b2f      	ldr	r3, [pc, #188]	; (8000240 <main+0xf0>)
 8000182:	4a32      	ldr	r2, [pc, #200]	; (800024c <main+0xfc>)
 8000184:	659a      	str	r2, [r3, #88]	; 0x58
  app_handle.ToggleBuf[3].Pin  	= GPIO_PIN_7;
 8000186:	4b2e      	ldr	r3, [pc, #184]	; (8000240 <main+0xf0>)
 8000188:	2280      	movs	r2, #128	; 0x80
 800018a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  app_handle.ToggleBuf[4].Port 	= GPIOA;
 800018e:	4b2c      	ldr	r3, [pc, #176]	; (8000240 <main+0xf0>)
 8000190:	4a2c      	ldr	r2, [pc, #176]	; (8000244 <main+0xf4>)
 8000192:	661a      	str	r2, [r3, #96]	; 0x60
  app_handle.ToggleBuf[4].Pin  	= GPIO_PIN_9;
 8000194:	4b2a      	ldr	r3, [pc, #168]	; (8000240 <main+0xf0>)
 8000196:	f44f 7200 	mov.w	r2, #512	; 0x200
 800019a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  app_handle.ToggleBuf[5].Port 	= GPIOB;
 800019e:	4b28      	ldr	r3, [pc, #160]	; (8000240 <main+0xf0>)
 80001a0:	4a29      	ldr	r2, [pc, #164]	; (8000248 <main+0xf8>)
 80001a2:	669a      	str	r2, [r3, #104]	; 0x68
  app_handle.ToggleBuf[5].Pin 	= GPIO_PIN_2;
 80001a4:	4b26      	ldr	r3, [pc, #152]	; (8000240 <main+0xf0>)
 80001a6:	2204      	movs	r2, #4
 80001a8:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c

  app_handle.LEDsForBlink[0].Port = GPIOB;
 80001ac:	4b24      	ldr	r3, [pc, #144]	; (8000240 <main+0xf0>)
 80001ae:	4a26      	ldr	r2, [pc, #152]	; (8000248 <main+0xf8>)
 80001b0:	601a      	str	r2, [r3, #0]
  app_handle.LEDsForBlink[0].Pin  = GPIO_PIN_8;
 80001b2:	4b23      	ldr	r3, [pc, #140]	; (8000240 <main+0xf0>)
 80001b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80001b8:	809a      	strh	r2, [r3, #4]
  app_handle.LEDsForBlink[1].Port = GPIOC;
 80001ba:	4b21      	ldr	r3, [pc, #132]	; (8000240 <main+0xf0>)
 80001bc:	4a23      	ldr	r2, [pc, #140]	; (800024c <main+0xfc>)
 80001be:	609a      	str	r2, [r3, #8]
  app_handle.LEDsForBlink[1].Pin  = GPIO_PIN_6;
 80001c0:	4b1f      	ldr	r3, [pc, #124]	; (8000240 <main+0xf0>)
 80001c2:	2240      	movs	r2, #64	; 0x40
 80001c4:	819a      	strh	r2, [r3, #12]
  app_handle.LEDsForBlink[2].Port = GPIOC;
 80001c6:	4b1e      	ldr	r3, [pc, #120]	; (8000240 <main+0xf0>)
 80001c8:	4a20      	ldr	r2, [pc, #128]	; (800024c <main+0xfc>)
 80001ca:	611a      	str	r2, [r3, #16]
  app_handle.LEDsForBlink[2].Pin  = GPIO_PIN_9;
 80001cc:	4b1c      	ldr	r3, [pc, #112]	; (8000240 <main+0xf0>)
 80001ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80001d2:	829a      	strh	r2, [r3, #20]
  app_handle.LEDsForBlink[3].Port = GPIOC;
 80001d4:	4b1a      	ldr	r3, [pc, #104]	; (8000240 <main+0xf0>)
 80001d6:	4a1d      	ldr	r2, [pc, #116]	; (800024c <main+0xfc>)
 80001d8:	619a      	str	r2, [r3, #24]
  app_handle.LEDsForBlink[3].Pin  = GPIO_PIN_8;
 80001da:	4b19      	ldr	r3, [pc, #100]	; (8000240 <main+0xf0>)
 80001dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80001e0:	839a      	strh	r2, [r3, #28]
  app_handle.LEDsForBlink[4].Port = GPIOC;
 80001e2:	4b17      	ldr	r3, [pc, #92]	; (8000240 <main+0xf0>)
 80001e4:	4a19      	ldr	r2, [pc, #100]	; (800024c <main+0xfc>)
 80001e6:	621a      	str	r2, [r3, #32]
  app_handle.LEDsForBlink[4].Pin  = GPIO_PIN_5;
 80001e8:	4b15      	ldr	r3, [pc, #84]	; (8000240 <main+0xf0>)
 80001ea:	2220      	movs	r2, #32
 80001ec:	849a      	strh	r2, [r3, #36]	; 0x24
  app_handle.LEDsForBlink[5].Port = GPIOB;
 80001ee:	4b14      	ldr	r3, [pc, #80]	; (8000240 <main+0xf0>)
 80001f0:	4a15      	ldr	r2, [pc, #84]	; (8000248 <main+0xf8>)
 80001f2:	629a      	str	r2, [r3, #40]	; 0x28
  app_handle.LEDsForBlink[5].Pin  = GPIO_PIN_9;
 80001f4:	4b12      	ldr	r3, [pc, #72]	; (8000240 <main+0xf0>)
 80001f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80001fa:	859a      	strh	r2, [r3, #44]	; 0x2c
  app_handle.LEDsForBlink[6].Port = GPIOA;
 80001fc:	4b10      	ldr	r3, [pc, #64]	; (8000240 <main+0xf0>)
 80001fe:	4a11      	ldr	r2, [pc, #68]	; (8000244 <main+0xf4>)
 8000200:	631a      	str	r2, [r3, #48]	; 0x30
  app_handle.LEDsForBlink[6].Pin  = GPIO_PIN_12;
 8000202:	4b0f      	ldr	r3, [pc, #60]	; (8000240 <main+0xf0>)
 8000204:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000208:	869a      	strh	r2, [r3, #52]	; 0x34
  app_handle.LEDsForBlink[7].Port = GPIOA;
 800020a:	4b0d      	ldr	r3, [pc, #52]	; (8000240 <main+0xf0>)
 800020c:	4a0d      	ldr	r2, [pc, #52]	; (8000244 <main+0xf4>)
 800020e:	639a      	str	r2, [r3, #56]	; 0x38
  app_handle.LEDsForBlink[7].Pin  = GPIO_PIN_6;
 8000210:	4b0b      	ldr	r3, [pc, #44]	; (8000240 <main+0xf0>)
 8000212:	2240      	movs	r2, #64	; 0x40
 8000214:	879a      	strh	r2, [r3, #60]	; 0x3c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000216:	f000 fae5 	bl	80007e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800021a:	f000 f81f 	bl	800025c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800021e:	f000 f88d 	bl	800033c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000222:	f000 f861 	bl	80002e8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000226:	f001 fe15 	bl	8001e54 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800022a:	4a09      	ldr	r2, [pc, #36]	; (8000250 <main+0x100>)
 800022c:	2100      	movs	r1, #0
 800022e:	4809      	ldr	r0, [pc, #36]	; (8000254 <main+0x104>)
 8000230:	f001 fe76 	bl	8001f20 <osThreadNew>
 8000234:	4603      	mov	r3, r0
 8000236:	4a08      	ldr	r2, [pc, #32]	; (8000258 <main+0x108>)
 8000238:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800023a:	f001 fe3d 	bl	8001eb8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800023e:	e7fe      	b.n	800023e <main+0xee>
 8000240:	200000c8 	.word	0x200000c8
 8000244:	40010800 	.word	0x40010800
 8000248:	40010c00 	.word	0x40010c00
 800024c:	40011000 	.word	0x40011000
 8000250:	08004a74 	.word	0x08004a74
 8000254:	080004f5 	.word	0x080004f5
 8000258:	200000c4 	.word	0x200000c4

0800025c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b090      	sub	sp, #64	; 0x40
 8000260:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000262:	f107 0318 	add.w	r3, r7, #24
 8000266:	2228      	movs	r2, #40	; 0x28
 8000268:	2100      	movs	r1, #0
 800026a:	4618      	mov	r0, r3
 800026c:	f004 faf6 	bl	800485c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000270:	1d3b      	adds	r3, r7, #4
 8000272:	2200      	movs	r2, #0
 8000274:	601a      	str	r2, [r3, #0]
 8000276:	605a      	str	r2, [r3, #4]
 8000278:	609a      	str	r2, [r3, #8]
 800027a:	60da      	str	r2, [r3, #12]
 800027c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800027e:	2301      	movs	r3, #1
 8000280:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000282:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000286:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000288:	2300      	movs	r3, #0
 800028a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800028c:	2301      	movs	r3, #1
 800028e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000290:	2302      	movs	r3, #2
 8000292:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000294:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000298:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800029a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800029e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002a0:	f107 0318 	add.w	r3, r7, #24
 80002a4:	4618      	mov	r0, r3
 80002a6:	f000 fd7b 	bl	8000da0 <HAL_RCC_OscConfig>
 80002aa:	4603      	mov	r3, r0
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d001      	beq.n	80002b4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002b0:	f000 f943 	bl	800053a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002b4:	230f      	movs	r3, #15
 80002b6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002b8:	2302      	movs	r3, #2
 80002ba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002bc:	2300      	movs	r3, #0
 80002be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002c6:	2300      	movs	r3, #0
 80002c8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002ca:	1d3b      	adds	r3, r7, #4
 80002cc:	2102      	movs	r1, #2
 80002ce:	4618      	mov	r0, r3
 80002d0:	f000 ffe8 	bl	80012a4 <HAL_RCC_ClockConfig>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d001      	beq.n	80002de <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002da:	f000 f92e 	bl	800053a <Error_Handler>
  }
}
 80002de:	bf00      	nop
 80002e0:	3740      	adds	r7, #64	; 0x40
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}
	...

080002e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80002ec:	4b11      	ldr	r3, [pc, #68]	; (8000334 <MX_USART2_UART_Init+0x4c>)
 80002ee:	4a12      	ldr	r2, [pc, #72]	; (8000338 <MX_USART2_UART_Init+0x50>)
 80002f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80002f2:	4b10      	ldr	r3, [pc, #64]	; (8000334 <MX_USART2_UART_Init+0x4c>)
 80002f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80002fa:	4b0e      	ldr	r3, [pc, #56]	; (8000334 <MX_USART2_UART_Init+0x4c>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000300:	4b0c      	ldr	r3, [pc, #48]	; (8000334 <MX_USART2_UART_Init+0x4c>)
 8000302:	2200      	movs	r2, #0
 8000304:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000306:	4b0b      	ldr	r3, [pc, #44]	; (8000334 <MX_USART2_UART_Init+0x4c>)
 8000308:	2200      	movs	r2, #0
 800030a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800030c:	4b09      	ldr	r3, [pc, #36]	; (8000334 <MX_USART2_UART_Init+0x4c>)
 800030e:	220c      	movs	r2, #12
 8000310:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000312:	4b08      	ldr	r3, [pc, #32]	; (8000334 <MX_USART2_UART_Init+0x4c>)
 8000314:	2200      	movs	r2, #0
 8000316:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000318:	4b06      	ldr	r3, [pc, #24]	; (8000334 <MX_USART2_UART_Init+0x4c>)
 800031a:	2200      	movs	r2, #0
 800031c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800031e:	4805      	ldr	r0, [pc, #20]	; (8000334 <MX_USART2_UART_Init+0x4c>)
 8000320:	f001 fbc8 	bl	8001ab4 <HAL_UART_Init>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d001      	beq.n	800032e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800032a:	f000 f906 	bl	800053a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800032e:	bf00      	nop
 8000330:	bd80      	pop	{r7, pc}
 8000332:	bf00      	nop
 8000334:	2000007c 	.word	0x2000007c
 8000338:	40004400 	.word	0x40004400

0800033c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b088      	sub	sp, #32
 8000340:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000342:	f107 0310 	add.w	r3, r7, #16
 8000346:	2200      	movs	r2, #0
 8000348:	601a      	str	r2, [r3, #0]
 800034a:	605a      	str	r2, [r3, #4]
 800034c:	609a      	str	r2, [r3, #8]
 800034e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000350:	4b56      	ldr	r3, [pc, #344]	; (80004ac <MX_GPIO_Init+0x170>)
 8000352:	699b      	ldr	r3, [r3, #24]
 8000354:	4a55      	ldr	r2, [pc, #340]	; (80004ac <MX_GPIO_Init+0x170>)
 8000356:	f043 0310 	orr.w	r3, r3, #16
 800035a:	6193      	str	r3, [r2, #24]
 800035c:	4b53      	ldr	r3, [pc, #332]	; (80004ac <MX_GPIO_Init+0x170>)
 800035e:	699b      	ldr	r3, [r3, #24]
 8000360:	f003 0310 	and.w	r3, r3, #16
 8000364:	60fb      	str	r3, [r7, #12]
 8000366:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000368:	4b50      	ldr	r3, [pc, #320]	; (80004ac <MX_GPIO_Init+0x170>)
 800036a:	699b      	ldr	r3, [r3, #24]
 800036c:	4a4f      	ldr	r2, [pc, #316]	; (80004ac <MX_GPIO_Init+0x170>)
 800036e:	f043 0320 	orr.w	r3, r3, #32
 8000372:	6193      	str	r3, [r2, #24]
 8000374:	4b4d      	ldr	r3, [pc, #308]	; (80004ac <MX_GPIO_Init+0x170>)
 8000376:	699b      	ldr	r3, [r3, #24]
 8000378:	f003 0320 	and.w	r3, r3, #32
 800037c:	60bb      	str	r3, [r7, #8]
 800037e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000380:	4b4a      	ldr	r3, [pc, #296]	; (80004ac <MX_GPIO_Init+0x170>)
 8000382:	699b      	ldr	r3, [r3, #24]
 8000384:	4a49      	ldr	r2, [pc, #292]	; (80004ac <MX_GPIO_Init+0x170>)
 8000386:	f043 0304 	orr.w	r3, r3, #4
 800038a:	6193      	str	r3, [r2, #24]
 800038c:	4b47      	ldr	r3, [pc, #284]	; (80004ac <MX_GPIO_Init+0x170>)
 800038e:	699b      	ldr	r3, [r3, #24]
 8000390:	f003 0304 	and.w	r3, r3, #4
 8000394:	607b      	str	r3, [r7, #4]
 8000396:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000398:	4b44      	ldr	r3, [pc, #272]	; (80004ac <MX_GPIO_Init+0x170>)
 800039a:	699b      	ldr	r3, [r3, #24]
 800039c:	4a43      	ldr	r2, [pc, #268]	; (80004ac <MX_GPIO_Init+0x170>)
 800039e:	f043 0308 	orr.w	r3, r3, #8
 80003a2:	6193      	str	r3, [r2, #24]
 80003a4:	4b41      	ldr	r3, [pc, #260]	; (80004ac <MX_GPIO_Init+0x170>)
 80003a6:	699b      	ldr	r3, [r3, #24]
 80003a8:	f003 0308 	and.w	r3, r3, #8
 80003ac:	603b      	str	r3, [r7, #0]
 80003ae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6|GPIO_PIN_12, GPIO_PIN_RESET);
 80003b0:	2200      	movs	r2, #0
 80003b2:	f44f 5183 	mov.w	r1, #4192	; 0x1060
 80003b6:	483e      	ldr	r0, [pc, #248]	; (80004b0 <MX_GPIO_Init+0x174>)
 80003b8:	f000 fcaa 	bl	8000d10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80003bc:	2200      	movs	r2, #0
 80003be:	f44f 7158 	mov.w	r1, #864	; 0x360
 80003c2:	483c      	ldr	r0, [pc, #240]	; (80004b4 <MX_GPIO_Init+0x178>)
 80003c4:	f000 fca4 	bl	8000d10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80003c8:	2200      	movs	r2, #0
 80003ca:	f44f 7140 	mov.w	r1, #768	; 0x300
 80003ce:	483a      	ldr	r0, [pc, #232]	; (80004b8 <MX_GPIO_Init+0x17c>)
 80003d0:	f000 fc9e 	bl	8000d10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 80003d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80003da:	4b38      	ldr	r3, [pc, #224]	; (80004bc <MX_GPIO_Init+0x180>)
 80003dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003de:	2300      	movs	r3, #0
 80003e0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 80003e2:	f107 0310 	add.w	r3, r7, #16
 80003e6:	4619      	mov	r1, r3
 80003e8:	4832      	ldr	r0, [pc, #200]	; (80004b4 <MX_GPIO_Init+0x178>)
 80003ea:	f000 fb0d 	bl	8000a08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_9;
 80003ee:	f44f 7304 	mov.w	r3, #528	; 0x210
 80003f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003f4:	2300      	movs	r3, #0
 80003f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f8:	2300      	movs	r3, #0
 80003fa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003fc:	f107 0310 	add.w	r3, r7, #16
 8000400:	4619      	mov	r1, r3
 8000402:	482b      	ldr	r0, [pc, #172]	; (80004b0 <MX_GPIO_Init+0x174>)
 8000404:	f000 fb00 	bl	8000a08 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA6 PA12 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6|GPIO_PIN_12;
 8000408:	f44f 5383 	mov.w	r3, #4192	; 0x1060
 800040c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800040e:	2301      	movs	r3, #1
 8000410:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000412:	2300      	movs	r3, #0
 8000414:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000416:	2303      	movs	r3, #3
 8000418:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800041a:	f107 0310 	add.w	r3, r7, #16
 800041e:	4619      	mov	r1, r3
 8000420:	4823      	ldr	r0, [pc, #140]	; (80004b0 <MX_GPIO_Init+0x174>)
 8000422:	f000 faf1 	bl	8000a08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC6 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 8000426:	f44f 7358 	mov.w	r3, #864	; 0x360
 800042a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800042c:	2301      	movs	r3, #1
 800042e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000430:	2300      	movs	r3, #0
 8000432:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000434:	2303      	movs	r3, #3
 8000436:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000438:	f107 0310 	add.w	r3, r7, #16
 800043c:	4619      	mov	r1, r3
 800043e:	481d      	ldr	r0, [pc, #116]	; (80004b4 <MX_GPIO_Init+0x178>)
 8000440:	f000 fae2 	bl	8000a08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_11;
 8000444:	f640 0305 	movw	r3, #2053	; 0x805
 8000448:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800044a:	2300      	movs	r3, #0
 800044c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800044e:	2300      	movs	r3, #0
 8000450:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000452:	f107 0310 	add.w	r3, r7, #16
 8000456:	4619      	mov	r1, r3
 8000458:	4817      	ldr	r0, [pc, #92]	; (80004b8 <MX_GPIO_Init+0x17c>)
 800045a:	f000 fad5 	bl	8000a08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800045e:	2380      	movs	r3, #128	; 0x80
 8000460:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000462:	2300      	movs	r3, #0
 8000464:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000466:	2300      	movs	r3, #0
 8000468:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800046a:	f107 0310 	add.w	r3, r7, #16
 800046e:	4619      	mov	r1, r3
 8000470:	4810      	ldr	r0, [pc, #64]	; (80004b4 <MX_GPIO_Init+0x178>)
 8000472:	f000 fac9 	bl	8000a08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000476:	f44f 7340 	mov.w	r3, #768	; 0x300
 800047a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800047c:	2301      	movs	r3, #1
 800047e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000480:	2300      	movs	r3, #0
 8000482:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000484:	2303      	movs	r3, #3
 8000486:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000488:	f107 0310 	add.w	r3, r7, #16
 800048c:	4619      	mov	r1, r3
 800048e:	480a      	ldr	r0, [pc, #40]	; (80004b8 <MX_GPIO_Init+0x17c>)
 8000490:	f000 faba 	bl	8000a08 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000494:	2200      	movs	r2, #0
 8000496:	2105      	movs	r1, #5
 8000498:	2028      	movs	r0, #40	; 0x28
 800049a:	f000 fa8a 	bl	80009b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800049e:	2028      	movs	r0, #40	; 0x28
 80004a0:	f000 faa3 	bl	80009ea <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */

/* USER CODE END MX_GPIO_Init_2 */
}
 80004a4:	bf00      	nop
 80004a6:	3720      	adds	r7, #32
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	40021000 	.word	0x40021000
 80004b0:	40010800 	.word	0x40010800
 80004b4:	40011000 	.word	0x40011000
 80004b8:	40010c00 	.word	0x40010c00
 80004bc:	10210000 	.word	0x10210000

080004c0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b083      	sub	sp, #12
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	4603      	mov	r3, r0
 80004c8:	80fb      	strh	r3, [r7, #6]
  if(app_handle.ButtonState == 0) {
 80004ca:	4b09      	ldr	r3, [pc, #36]	; (80004f0 <HAL_GPIO_EXTI_Callback+0x30>)
 80004cc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d104      	bne.n	80004de <HAL_GPIO_EXTI_Callback+0x1e>
	  app_handle.ButtonState = 1;
 80004d4:	4b06      	ldr	r3, [pc, #24]	; (80004f0 <HAL_GPIO_EXTI_Callback+0x30>)
 80004d6:	2201      	movs	r2, #1
 80004d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  } else {
	  app_handle.ButtonState = 0;
  }
}
 80004dc:	e003      	b.n	80004e6 <HAL_GPIO_EXTI_Callback+0x26>
	  app_handle.ButtonState = 0;
 80004de:	4b04      	ldr	r3, [pc, #16]	; (80004f0 <HAL_GPIO_EXTI_Callback+0x30>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
}
 80004e6:	bf00      	nop
 80004e8:	370c      	adds	r7, #12
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bc80      	pop	{r7}
 80004ee:	4770      	bx	lr
 80004f0:	200000c8 	.word	0x200000c8

080004f4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_UART_Transmit(&huart2, (uint8_t*)"Hello world\n", 13, 1000);
 80004fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000500:	220d      	movs	r2, #13
 8000502:	4904      	ldr	r1, [pc, #16]	; (8000514 <StartDefaultTask+0x20>)
 8000504:	4804      	ldr	r0, [pc, #16]	; (8000518 <StartDefaultTask+0x24>)
 8000506:	f001 fb25 	bl	8001b54 <HAL_UART_Transmit>
    osDelay(1);
 800050a:	2001      	movs	r0, #1
 800050c:	f001 fdb2 	bl	8002074 <osDelay>
	HAL_UART_Transmit(&huart2, (uint8_t*)"Hello world\n", 13, 1000);
 8000510:	e7f4      	b.n	80004fc <StartDefaultTask+0x8>
 8000512:	bf00      	nop
 8000514:	08004a4c 	.word	0x08004a4c
 8000518:	2000007c 	.word	0x2000007c

0800051c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800052c:	d101      	bne.n	8000532 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800052e:	f000 f96f 	bl	8000810 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000532:	bf00      	nop
 8000534:	3708      	adds	r7, #8
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}

0800053a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800053a:	b480      	push	{r7}
 800053c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800053e:	b672      	cpsid	i
}
 8000540:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000542:	e7fe      	b.n	8000542 <Error_Handler+0x8>

08000544 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800054a:	4b15      	ldr	r3, [pc, #84]	; (80005a0 <HAL_MspInit+0x5c>)
 800054c:	699b      	ldr	r3, [r3, #24]
 800054e:	4a14      	ldr	r2, [pc, #80]	; (80005a0 <HAL_MspInit+0x5c>)
 8000550:	f043 0301 	orr.w	r3, r3, #1
 8000554:	6193      	str	r3, [r2, #24]
 8000556:	4b12      	ldr	r3, [pc, #72]	; (80005a0 <HAL_MspInit+0x5c>)
 8000558:	699b      	ldr	r3, [r3, #24]
 800055a:	f003 0301 	and.w	r3, r3, #1
 800055e:	607b      	str	r3, [r7, #4]
 8000560:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000562:	4b0f      	ldr	r3, [pc, #60]	; (80005a0 <HAL_MspInit+0x5c>)
 8000564:	69db      	ldr	r3, [r3, #28]
 8000566:	4a0e      	ldr	r2, [pc, #56]	; (80005a0 <HAL_MspInit+0x5c>)
 8000568:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800056c:	61d3      	str	r3, [r2, #28]
 800056e:	4b0c      	ldr	r3, [pc, #48]	; (80005a0 <HAL_MspInit+0x5c>)
 8000570:	69db      	ldr	r3, [r3, #28]
 8000572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000576:	603b      	str	r3, [r7, #0]
 8000578:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800057a:	2200      	movs	r2, #0
 800057c:	210f      	movs	r1, #15
 800057e:	f06f 0001 	mvn.w	r0, #1
 8000582:	f000 fa16 	bl	80009b2 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 5, 0);
 8000586:	2200      	movs	r2, #0
 8000588:	2105      	movs	r1, #5
 800058a:	2001      	movs	r0, #1
 800058c:	f000 fa11 	bl	80009b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8000590:	2001      	movs	r0, #1
 8000592:	f000 fa2a 	bl	80009ea <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000596:	bf00      	nop
 8000598:	3708      	adds	r7, #8
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	40021000 	.word	0x40021000

080005a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b088      	sub	sp, #32
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ac:	f107 0310 	add.w	r3, r7, #16
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
 80005b6:	609a      	str	r2, [r3, #8]
 80005b8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4a1b      	ldr	r2, [pc, #108]	; (800062c <HAL_UART_MspInit+0x88>)
 80005c0:	4293      	cmp	r3, r2
 80005c2:	d12f      	bne.n	8000624 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80005c4:	4b1a      	ldr	r3, [pc, #104]	; (8000630 <HAL_UART_MspInit+0x8c>)
 80005c6:	69db      	ldr	r3, [r3, #28]
 80005c8:	4a19      	ldr	r2, [pc, #100]	; (8000630 <HAL_UART_MspInit+0x8c>)
 80005ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005ce:	61d3      	str	r3, [r2, #28]
 80005d0:	4b17      	ldr	r3, [pc, #92]	; (8000630 <HAL_UART_MspInit+0x8c>)
 80005d2:	69db      	ldr	r3, [r3, #28]
 80005d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005d8:	60fb      	str	r3, [r7, #12]
 80005da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005dc:	4b14      	ldr	r3, [pc, #80]	; (8000630 <HAL_UART_MspInit+0x8c>)
 80005de:	699b      	ldr	r3, [r3, #24]
 80005e0:	4a13      	ldr	r2, [pc, #76]	; (8000630 <HAL_UART_MspInit+0x8c>)
 80005e2:	f043 0304 	orr.w	r3, r3, #4
 80005e6:	6193      	str	r3, [r2, #24]
 80005e8:	4b11      	ldr	r3, [pc, #68]	; (8000630 <HAL_UART_MspInit+0x8c>)
 80005ea:	699b      	ldr	r3, [r3, #24]
 80005ec:	f003 0304 	and.w	r3, r3, #4
 80005f0:	60bb      	str	r3, [r7, #8]
 80005f2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin;
 80005f4:	2304      	movs	r3, #4
 80005f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005f8:	2302      	movs	r3, #2
 80005fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005fc:	2302      	movs	r3, #2
 80005fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USART_TX_GPIO_Port, &GPIO_InitStruct);
 8000600:	f107 0310 	add.w	r3, r7, #16
 8000604:	4619      	mov	r1, r3
 8000606:	480b      	ldr	r0, [pc, #44]	; (8000634 <HAL_UART_MspInit+0x90>)
 8000608:	f000 f9fe 	bl	8000a08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800060c:	2308      	movs	r3, #8
 800060e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000610:	2300      	movs	r3, #0
 8000612:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000614:	2300      	movs	r3, #0
 8000616:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000618:	f107 0310 	add.w	r3, r7, #16
 800061c:	4619      	mov	r1, r3
 800061e:	4805      	ldr	r0, [pc, #20]	; (8000634 <HAL_UART_MspInit+0x90>)
 8000620:	f000 f9f2 	bl	8000a08 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000624:	bf00      	nop
 8000626:	3720      	adds	r7, #32
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	40004400 	.word	0x40004400
 8000630:	40021000 	.word	0x40021000
 8000634:	40010800 	.word	0x40010800

08000638 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b08e      	sub	sp, #56	; 0x38
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000640:	2300      	movs	r3, #0
 8000642:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000644:	2300      	movs	r3, #0
 8000646:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000648:	2300      	movs	r3, #0
 800064a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800064e:	4b34      	ldr	r3, [pc, #208]	; (8000720 <HAL_InitTick+0xe8>)
 8000650:	69db      	ldr	r3, [r3, #28]
 8000652:	4a33      	ldr	r2, [pc, #204]	; (8000720 <HAL_InitTick+0xe8>)
 8000654:	f043 0301 	orr.w	r3, r3, #1
 8000658:	61d3      	str	r3, [r2, #28]
 800065a:	4b31      	ldr	r3, [pc, #196]	; (8000720 <HAL_InitTick+0xe8>)
 800065c:	69db      	ldr	r3, [r3, #28]
 800065e:	f003 0301 	and.w	r3, r3, #1
 8000662:	60fb      	str	r3, [r7, #12]
 8000664:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000666:	f107 0210 	add.w	r2, r7, #16
 800066a:	f107 0314 	add.w	r3, r7, #20
 800066e:	4611      	mov	r1, r2
 8000670:	4618      	mov	r0, r3
 8000672:	f000 ff87 	bl	8001584 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000676:	6a3b      	ldr	r3, [r7, #32]
 8000678:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800067a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800067c:	2b00      	cmp	r3, #0
 800067e:	d103      	bne.n	8000688 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000680:	f000 ff58 	bl	8001534 <HAL_RCC_GetPCLK1Freq>
 8000684:	6378      	str	r0, [r7, #52]	; 0x34
 8000686:	e004      	b.n	8000692 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000688:	f000 ff54 	bl	8001534 <HAL_RCC_GetPCLK1Freq>
 800068c:	4603      	mov	r3, r0
 800068e:	005b      	lsls	r3, r3, #1
 8000690:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000694:	4a23      	ldr	r2, [pc, #140]	; (8000724 <HAL_InitTick+0xec>)
 8000696:	fba2 2303 	umull	r2, r3, r2, r3
 800069a:	0c9b      	lsrs	r3, r3, #18
 800069c:	3b01      	subs	r3, #1
 800069e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80006a0:	4b21      	ldr	r3, [pc, #132]	; (8000728 <HAL_InitTick+0xf0>)
 80006a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006a6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80006a8:	4b1f      	ldr	r3, [pc, #124]	; (8000728 <HAL_InitTick+0xf0>)
 80006aa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80006ae:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80006b0:	4a1d      	ldr	r2, [pc, #116]	; (8000728 <HAL_InitTick+0xf0>)
 80006b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006b4:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80006b6:	4b1c      	ldr	r3, [pc, #112]	; (8000728 <HAL_InitTick+0xf0>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006bc:	4b1a      	ldr	r3, [pc, #104]	; (8000728 <HAL_InitTick+0xf0>)
 80006be:	2200      	movs	r2, #0
 80006c0:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006c2:	4b19      	ldr	r3, [pc, #100]	; (8000728 <HAL_InitTick+0xf0>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 80006c8:	4817      	ldr	r0, [pc, #92]	; (8000728 <HAL_InitTick+0xf0>)
 80006ca:	f000 ffa9 	bl	8001620 <HAL_TIM_Base_Init>
 80006ce:	4603      	mov	r3, r0
 80006d0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80006d4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d11b      	bne.n	8000714 <HAL_InitTick+0xdc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 80006dc:	4812      	ldr	r0, [pc, #72]	; (8000728 <HAL_InitTick+0xf0>)
 80006de:	f000 fff7 	bl	80016d0 <HAL_TIM_Base_Start_IT>
 80006e2:	4603      	mov	r3, r0
 80006e4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80006e8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d111      	bne.n	8000714 <HAL_InitTick+0xdc>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80006f0:	201c      	movs	r0, #28
 80006f2:	f000 f97a 	bl	80009ea <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	2b0f      	cmp	r3, #15
 80006fa:	d808      	bhi.n	800070e <HAL_InitTick+0xd6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80006fc:	2200      	movs	r2, #0
 80006fe:	6879      	ldr	r1, [r7, #4]
 8000700:	201c      	movs	r0, #28
 8000702:	f000 f956 	bl	80009b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000706:	4a09      	ldr	r2, [pc, #36]	; (800072c <HAL_InitTick+0xf4>)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	6013      	str	r3, [r2, #0]
 800070c:	e002      	b.n	8000714 <HAL_InitTick+0xdc>
      }
      else
      {
        status = HAL_ERROR;
 800070e:	2301      	movs	r3, #1
 8000710:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000714:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000718:	4618      	mov	r0, r3
 800071a:	3738      	adds	r7, #56	; 0x38
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	40021000 	.word	0x40021000
 8000724:	431bde83 	.word	0x431bde83
 8000728:	20000140 	.word	0x20000140
 800072c:	20000004 	.word	0x20000004

08000730 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000734:	e7fe      	b.n	8000734 <NMI_Handler+0x4>

08000736 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000736:	b480      	push	{r7}
 8000738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800073a:	e7fe      	b.n	800073a <HardFault_Handler+0x4>

0800073c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000740:	e7fe      	b.n	8000740 <MemManage_Handler+0x4>

08000742 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000742:	b480      	push	{r7}
 8000744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000746:	e7fe      	b.n	8000746 <BusFault_Handler+0x4>

08000748 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800074c:	e7fe      	b.n	800074c <UsageFault_Handler+0x4>

0800074e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800074e:	b480      	push	{r7}
 8000750:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000752:	bf00      	nop
 8000754:	46bd      	mov	sp, r7
 8000756:	bc80      	pop	{r7}
 8000758:	4770      	bx	lr

0800075a <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 800075a:	b580      	push	{r7, lr}
 800075c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 800075e:	f000 fb07 	bl	8000d70 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
	...

08000768 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800076c:	4802      	ldr	r0, [pc, #8]	; (8000778 <TIM2_IRQHandler+0x10>)
 800076e:	f001 f801 	bl	8001774 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	20000140 	.word	0x20000140

0800077c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_Pin);
 8000780:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000784:	f000 fadc 	bl	8000d40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000788:	bf00      	nop
 800078a:	bd80      	pop	{r7, pc}

0800078c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000790:	bf00      	nop
 8000792:	46bd      	mov	sp, r7
 8000794:	bc80      	pop	{r7}
 8000796:	4770      	bx	lr

08000798 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000798:	f7ff fff8 	bl	800078c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800079c:	480b      	ldr	r0, [pc, #44]	; (80007cc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800079e:	490c      	ldr	r1, [pc, #48]	; (80007d0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80007a0:	4a0c      	ldr	r2, [pc, #48]	; (80007d4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80007a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007a4:	e002      	b.n	80007ac <LoopCopyDataInit>

080007a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007aa:	3304      	adds	r3, #4

080007ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007b0:	d3f9      	bcc.n	80007a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007b2:	4a09      	ldr	r2, [pc, #36]	; (80007d8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80007b4:	4c09      	ldr	r4, [pc, #36]	; (80007dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007b8:	e001      	b.n	80007be <LoopFillZerobss>

080007ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007bc:	3204      	adds	r2, #4

080007be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007c0:	d3fb      	bcc.n	80007ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007c2:	f004 f8a9 	bl	8004918 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007c6:	f7ff fcc3 	bl	8000150 <main>
  bx lr
 80007ca:	4770      	bx	lr
  ldr r0, =_sdata
 80007cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007d0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80007d4:	08004acc 	.word	0x08004acc
  ldr r2, =_sbss
 80007d8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80007dc:	20001cac 	.word	0x20001cac

080007e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007e0:	e7fe      	b.n	80007e0 <ADC1_2_IRQHandler>
	...

080007e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007e8:	4b08      	ldr	r3, [pc, #32]	; (800080c <HAL_Init+0x28>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a07      	ldr	r2, [pc, #28]	; (800080c <HAL_Init+0x28>)
 80007ee:	f043 0310 	orr.w	r3, r3, #16
 80007f2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007f4:	2003      	movs	r0, #3
 80007f6:	f000 f8d1 	bl	800099c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007fa:	200f      	movs	r0, #15
 80007fc:	f7ff ff1c 	bl	8000638 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000800:	f7ff fea0 	bl	8000544 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000804:	2300      	movs	r3, #0
}
 8000806:	4618      	mov	r0, r3
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	40022000 	.word	0x40022000

08000810 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000814:	4b05      	ldr	r3, [pc, #20]	; (800082c <HAL_IncTick+0x1c>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	461a      	mov	r2, r3
 800081a:	4b05      	ldr	r3, [pc, #20]	; (8000830 <HAL_IncTick+0x20>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	4413      	add	r3, r2
 8000820:	4a03      	ldr	r2, [pc, #12]	; (8000830 <HAL_IncTick+0x20>)
 8000822:	6013      	str	r3, [r2, #0]
}
 8000824:	bf00      	nop
 8000826:	46bd      	mov	sp, r7
 8000828:	bc80      	pop	{r7}
 800082a:	4770      	bx	lr
 800082c:	20000008 	.word	0x20000008
 8000830:	20000188 	.word	0x20000188

08000834 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  return uwTick;
 8000838:	4b02      	ldr	r3, [pc, #8]	; (8000844 <HAL_GetTick+0x10>)
 800083a:	681b      	ldr	r3, [r3, #0]
}
 800083c:	4618      	mov	r0, r3
 800083e:	46bd      	mov	sp, r7
 8000840:	bc80      	pop	{r7}
 8000842:	4770      	bx	lr
 8000844:	20000188 	.word	0x20000188

08000848 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000848:	b480      	push	{r7}
 800084a:	b085      	sub	sp, #20
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	f003 0307 	and.w	r3, r3, #7
 8000856:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000858:	4b0c      	ldr	r3, [pc, #48]	; (800088c <__NVIC_SetPriorityGrouping+0x44>)
 800085a:	68db      	ldr	r3, [r3, #12]
 800085c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800085e:	68ba      	ldr	r2, [r7, #8]
 8000860:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000864:	4013      	ands	r3, r2
 8000866:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800086c:	68bb      	ldr	r3, [r7, #8]
 800086e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000870:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000874:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000878:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800087a:	4a04      	ldr	r2, [pc, #16]	; (800088c <__NVIC_SetPriorityGrouping+0x44>)
 800087c:	68bb      	ldr	r3, [r7, #8]
 800087e:	60d3      	str	r3, [r2, #12]
}
 8000880:	bf00      	nop
 8000882:	3714      	adds	r7, #20
 8000884:	46bd      	mov	sp, r7
 8000886:	bc80      	pop	{r7}
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	e000ed00 	.word	0xe000ed00

08000890 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000894:	4b04      	ldr	r3, [pc, #16]	; (80008a8 <__NVIC_GetPriorityGrouping+0x18>)
 8000896:	68db      	ldr	r3, [r3, #12]
 8000898:	0a1b      	lsrs	r3, r3, #8
 800089a:	f003 0307 	and.w	r3, r3, #7
}
 800089e:	4618      	mov	r0, r3
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bc80      	pop	{r7}
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	e000ed00 	.word	0xe000ed00

080008ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b083      	sub	sp, #12
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	4603      	mov	r3, r0
 80008b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	db0b      	blt.n	80008d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008be:	79fb      	ldrb	r3, [r7, #7]
 80008c0:	f003 021f 	and.w	r2, r3, #31
 80008c4:	4906      	ldr	r1, [pc, #24]	; (80008e0 <__NVIC_EnableIRQ+0x34>)
 80008c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ca:	095b      	lsrs	r3, r3, #5
 80008cc:	2001      	movs	r0, #1
 80008ce:	fa00 f202 	lsl.w	r2, r0, r2
 80008d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008d6:	bf00      	nop
 80008d8:	370c      	adds	r7, #12
 80008da:	46bd      	mov	sp, r7
 80008dc:	bc80      	pop	{r7}
 80008de:	4770      	bx	lr
 80008e0:	e000e100 	.word	0xe000e100

080008e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	4603      	mov	r3, r0
 80008ec:	6039      	str	r1, [r7, #0]
 80008ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	db0a      	blt.n	800090e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	b2da      	uxtb	r2, r3
 80008fc:	490c      	ldr	r1, [pc, #48]	; (8000930 <__NVIC_SetPriority+0x4c>)
 80008fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000902:	0112      	lsls	r2, r2, #4
 8000904:	b2d2      	uxtb	r2, r2
 8000906:	440b      	add	r3, r1
 8000908:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800090c:	e00a      	b.n	8000924 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	b2da      	uxtb	r2, r3
 8000912:	4908      	ldr	r1, [pc, #32]	; (8000934 <__NVIC_SetPriority+0x50>)
 8000914:	79fb      	ldrb	r3, [r7, #7]
 8000916:	f003 030f 	and.w	r3, r3, #15
 800091a:	3b04      	subs	r3, #4
 800091c:	0112      	lsls	r2, r2, #4
 800091e:	b2d2      	uxtb	r2, r2
 8000920:	440b      	add	r3, r1
 8000922:	761a      	strb	r2, [r3, #24]
}
 8000924:	bf00      	nop
 8000926:	370c      	adds	r7, #12
 8000928:	46bd      	mov	sp, r7
 800092a:	bc80      	pop	{r7}
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	e000e100 	.word	0xe000e100
 8000934:	e000ed00 	.word	0xe000ed00

08000938 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000938:	b480      	push	{r7}
 800093a:	b089      	sub	sp, #36	; 0x24
 800093c:	af00      	add	r7, sp, #0
 800093e:	60f8      	str	r0, [r7, #12]
 8000940:	60b9      	str	r1, [r7, #8]
 8000942:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	f003 0307 	and.w	r3, r3, #7
 800094a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800094c:	69fb      	ldr	r3, [r7, #28]
 800094e:	f1c3 0307 	rsb	r3, r3, #7
 8000952:	2b04      	cmp	r3, #4
 8000954:	bf28      	it	cs
 8000956:	2304      	movcs	r3, #4
 8000958:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800095a:	69fb      	ldr	r3, [r7, #28]
 800095c:	3304      	adds	r3, #4
 800095e:	2b06      	cmp	r3, #6
 8000960:	d902      	bls.n	8000968 <NVIC_EncodePriority+0x30>
 8000962:	69fb      	ldr	r3, [r7, #28]
 8000964:	3b03      	subs	r3, #3
 8000966:	e000      	b.n	800096a <NVIC_EncodePriority+0x32>
 8000968:	2300      	movs	r3, #0
 800096a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800096c:	f04f 32ff 	mov.w	r2, #4294967295
 8000970:	69bb      	ldr	r3, [r7, #24]
 8000972:	fa02 f303 	lsl.w	r3, r2, r3
 8000976:	43da      	mvns	r2, r3
 8000978:	68bb      	ldr	r3, [r7, #8]
 800097a:	401a      	ands	r2, r3
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000980:	f04f 31ff 	mov.w	r1, #4294967295
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	fa01 f303 	lsl.w	r3, r1, r3
 800098a:	43d9      	mvns	r1, r3
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000990:	4313      	orrs	r3, r2
         );
}
 8000992:	4618      	mov	r0, r3
 8000994:	3724      	adds	r7, #36	; 0x24
 8000996:	46bd      	mov	sp, r7
 8000998:	bc80      	pop	{r7}
 800099a:	4770      	bx	lr

0800099c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009a4:	6878      	ldr	r0, [r7, #4]
 80009a6:	f7ff ff4f 	bl	8000848 <__NVIC_SetPriorityGrouping>
}
 80009aa:	bf00      	nop
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}

080009b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009b2:	b580      	push	{r7, lr}
 80009b4:	b086      	sub	sp, #24
 80009b6:	af00      	add	r7, sp, #0
 80009b8:	4603      	mov	r3, r0
 80009ba:	60b9      	str	r1, [r7, #8]
 80009bc:	607a      	str	r2, [r7, #4]
 80009be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009c0:	2300      	movs	r3, #0
 80009c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009c4:	f7ff ff64 	bl	8000890 <__NVIC_GetPriorityGrouping>
 80009c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009ca:	687a      	ldr	r2, [r7, #4]
 80009cc:	68b9      	ldr	r1, [r7, #8]
 80009ce:	6978      	ldr	r0, [r7, #20]
 80009d0:	f7ff ffb2 	bl	8000938 <NVIC_EncodePriority>
 80009d4:	4602      	mov	r2, r0
 80009d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009da:	4611      	mov	r1, r2
 80009dc:	4618      	mov	r0, r3
 80009de:	f7ff ff81 	bl	80008e4 <__NVIC_SetPriority>
}
 80009e2:	bf00      	nop
 80009e4:	3718      	adds	r7, #24
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}

080009ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009ea:	b580      	push	{r7, lr}
 80009ec:	b082      	sub	sp, #8
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	4603      	mov	r3, r0
 80009f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f8:	4618      	mov	r0, r3
 80009fa:	f7ff ff57 	bl	80008ac <__NVIC_EnableIRQ>
}
 80009fe:	bf00      	nop
 8000a00:	3708      	adds	r7, #8
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
	...

08000a08 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b08b      	sub	sp, #44	; 0x2c
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
 8000a10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a12:	2300      	movs	r3, #0
 8000a14:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a16:	2300      	movs	r3, #0
 8000a18:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a1a:	e169      	b.n	8000cf0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a20:	fa02 f303 	lsl.w	r3, r2, r3
 8000a24:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	69fa      	ldr	r2, [r7, #28]
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a30:	69ba      	ldr	r2, [r7, #24]
 8000a32:	69fb      	ldr	r3, [r7, #28]
 8000a34:	429a      	cmp	r2, r3
 8000a36:	f040 8158 	bne.w	8000cea <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	685b      	ldr	r3, [r3, #4]
 8000a3e:	4a9a      	ldr	r2, [pc, #616]	; (8000ca8 <HAL_GPIO_Init+0x2a0>)
 8000a40:	4293      	cmp	r3, r2
 8000a42:	d05e      	beq.n	8000b02 <HAL_GPIO_Init+0xfa>
 8000a44:	4a98      	ldr	r2, [pc, #608]	; (8000ca8 <HAL_GPIO_Init+0x2a0>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d875      	bhi.n	8000b36 <HAL_GPIO_Init+0x12e>
 8000a4a:	4a98      	ldr	r2, [pc, #608]	; (8000cac <HAL_GPIO_Init+0x2a4>)
 8000a4c:	4293      	cmp	r3, r2
 8000a4e:	d058      	beq.n	8000b02 <HAL_GPIO_Init+0xfa>
 8000a50:	4a96      	ldr	r2, [pc, #600]	; (8000cac <HAL_GPIO_Init+0x2a4>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d86f      	bhi.n	8000b36 <HAL_GPIO_Init+0x12e>
 8000a56:	4a96      	ldr	r2, [pc, #600]	; (8000cb0 <HAL_GPIO_Init+0x2a8>)
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	d052      	beq.n	8000b02 <HAL_GPIO_Init+0xfa>
 8000a5c:	4a94      	ldr	r2, [pc, #592]	; (8000cb0 <HAL_GPIO_Init+0x2a8>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d869      	bhi.n	8000b36 <HAL_GPIO_Init+0x12e>
 8000a62:	4a94      	ldr	r2, [pc, #592]	; (8000cb4 <HAL_GPIO_Init+0x2ac>)
 8000a64:	4293      	cmp	r3, r2
 8000a66:	d04c      	beq.n	8000b02 <HAL_GPIO_Init+0xfa>
 8000a68:	4a92      	ldr	r2, [pc, #584]	; (8000cb4 <HAL_GPIO_Init+0x2ac>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d863      	bhi.n	8000b36 <HAL_GPIO_Init+0x12e>
 8000a6e:	4a92      	ldr	r2, [pc, #584]	; (8000cb8 <HAL_GPIO_Init+0x2b0>)
 8000a70:	4293      	cmp	r3, r2
 8000a72:	d046      	beq.n	8000b02 <HAL_GPIO_Init+0xfa>
 8000a74:	4a90      	ldr	r2, [pc, #576]	; (8000cb8 <HAL_GPIO_Init+0x2b0>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d85d      	bhi.n	8000b36 <HAL_GPIO_Init+0x12e>
 8000a7a:	2b12      	cmp	r3, #18
 8000a7c:	d82a      	bhi.n	8000ad4 <HAL_GPIO_Init+0xcc>
 8000a7e:	2b12      	cmp	r3, #18
 8000a80:	d859      	bhi.n	8000b36 <HAL_GPIO_Init+0x12e>
 8000a82:	a201      	add	r2, pc, #4	; (adr r2, 8000a88 <HAL_GPIO_Init+0x80>)
 8000a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a88:	08000b03 	.word	0x08000b03
 8000a8c:	08000add 	.word	0x08000add
 8000a90:	08000aef 	.word	0x08000aef
 8000a94:	08000b31 	.word	0x08000b31
 8000a98:	08000b37 	.word	0x08000b37
 8000a9c:	08000b37 	.word	0x08000b37
 8000aa0:	08000b37 	.word	0x08000b37
 8000aa4:	08000b37 	.word	0x08000b37
 8000aa8:	08000b37 	.word	0x08000b37
 8000aac:	08000b37 	.word	0x08000b37
 8000ab0:	08000b37 	.word	0x08000b37
 8000ab4:	08000b37 	.word	0x08000b37
 8000ab8:	08000b37 	.word	0x08000b37
 8000abc:	08000b37 	.word	0x08000b37
 8000ac0:	08000b37 	.word	0x08000b37
 8000ac4:	08000b37 	.word	0x08000b37
 8000ac8:	08000b37 	.word	0x08000b37
 8000acc:	08000ae5 	.word	0x08000ae5
 8000ad0:	08000af9 	.word	0x08000af9
 8000ad4:	4a79      	ldr	r2, [pc, #484]	; (8000cbc <HAL_GPIO_Init+0x2b4>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d013      	beq.n	8000b02 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ada:	e02c      	b.n	8000b36 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	68db      	ldr	r3, [r3, #12]
 8000ae0:	623b      	str	r3, [r7, #32]
          break;
 8000ae2:	e029      	b.n	8000b38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	68db      	ldr	r3, [r3, #12]
 8000ae8:	3304      	adds	r3, #4
 8000aea:	623b      	str	r3, [r7, #32]
          break;
 8000aec:	e024      	b.n	8000b38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	68db      	ldr	r3, [r3, #12]
 8000af2:	3308      	adds	r3, #8
 8000af4:	623b      	str	r3, [r7, #32]
          break;
 8000af6:	e01f      	b.n	8000b38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	68db      	ldr	r3, [r3, #12]
 8000afc:	330c      	adds	r3, #12
 8000afe:	623b      	str	r3, [r7, #32]
          break;
 8000b00:	e01a      	b.n	8000b38 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	689b      	ldr	r3, [r3, #8]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d102      	bne.n	8000b10 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b0a:	2304      	movs	r3, #4
 8000b0c:	623b      	str	r3, [r7, #32]
          break;
 8000b0e:	e013      	b.n	8000b38 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	689b      	ldr	r3, [r3, #8]
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	d105      	bne.n	8000b24 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b18:	2308      	movs	r3, #8
 8000b1a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	69fa      	ldr	r2, [r7, #28]
 8000b20:	611a      	str	r2, [r3, #16]
          break;
 8000b22:	e009      	b.n	8000b38 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b24:	2308      	movs	r3, #8
 8000b26:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	69fa      	ldr	r2, [r7, #28]
 8000b2c:	615a      	str	r2, [r3, #20]
          break;
 8000b2e:	e003      	b.n	8000b38 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b30:	2300      	movs	r3, #0
 8000b32:	623b      	str	r3, [r7, #32]
          break;
 8000b34:	e000      	b.n	8000b38 <HAL_GPIO_Init+0x130>
          break;
 8000b36:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b38:	69bb      	ldr	r3, [r7, #24]
 8000b3a:	2bff      	cmp	r3, #255	; 0xff
 8000b3c:	d801      	bhi.n	8000b42 <HAL_GPIO_Init+0x13a>
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	e001      	b.n	8000b46 <HAL_GPIO_Init+0x13e>
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	3304      	adds	r3, #4
 8000b46:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b48:	69bb      	ldr	r3, [r7, #24]
 8000b4a:	2bff      	cmp	r3, #255	; 0xff
 8000b4c:	d802      	bhi.n	8000b54 <HAL_GPIO_Init+0x14c>
 8000b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b50:	009b      	lsls	r3, r3, #2
 8000b52:	e002      	b.n	8000b5a <HAL_GPIO_Init+0x152>
 8000b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b56:	3b08      	subs	r3, #8
 8000b58:	009b      	lsls	r3, r3, #2
 8000b5a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	210f      	movs	r1, #15
 8000b62:	693b      	ldr	r3, [r7, #16]
 8000b64:	fa01 f303 	lsl.w	r3, r1, r3
 8000b68:	43db      	mvns	r3, r3
 8000b6a:	401a      	ands	r2, r3
 8000b6c:	6a39      	ldr	r1, [r7, #32]
 8000b6e:	693b      	ldr	r3, [r7, #16]
 8000b70:	fa01 f303 	lsl.w	r3, r1, r3
 8000b74:	431a      	orrs	r2, r3
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	685b      	ldr	r3, [r3, #4]
 8000b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	f000 80b1 	beq.w	8000cea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b88:	4b4d      	ldr	r3, [pc, #308]	; (8000cc0 <HAL_GPIO_Init+0x2b8>)
 8000b8a:	699b      	ldr	r3, [r3, #24]
 8000b8c:	4a4c      	ldr	r2, [pc, #304]	; (8000cc0 <HAL_GPIO_Init+0x2b8>)
 8000b8e:	f043 0301 	orr.w	r3, r3, #1
 8000b92:	6193      	str	r3, [r2, #24]
 8000b94:	4b4a      	ldr	r3, [pc, #296]	; (8000cc0 <HAL_GPIO_Init+0x2b8>)
 8000b96:	699b      	ldr	r3, [r3, #24]
 8000b98:	f003 0301 	and.w	r3, r3, #1
 8000b9c:	60bb      	str	r3, [r7, #8]
 8000b9e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ba0:	4a48      	ldr	r2, [pc, #288]	; (8000cc4 <HAL_GPIO_Init+0x2bc>)
 8000ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ba4:	089b      	lsrs	r3, r3, #2
 8000ba6:	3302      	adds	r3, #2
 8000ba8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bb0:	f003 0303 	and.w	r3, r3, #3
 8000bb4:	009b      	lsls	r3, r3, #2
 8000bb6:	220f      	movs	r2, #15
 8000bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbc:	43db      	mvns	r3, r3
 8000bbe:	68fa      	ldr	r2, [r7, #12]
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	4a40      	ldr	r2, [pc, #256]	; (8000cc8 <HAL_GPIO_Init+0x2c0>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d013      	beq.n	8000bf4 <HAL_GPIO_Init+0x1ec>
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	4a3f      	ldr	r2, [pc, #252]	; (8000ccc <HAL_GPIO_Init+0x2c4>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d00d      	beq.n	8000bf0 <HAL_GPIO_Init+0x1e8>
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	4a3e      	ldr	r2, [pc, #248]	; (8000cd0 <HAL_GPIO_Init+0x2c8>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d007      	beq.n	8000bec <HAL_GPIO_Init+0x1e4>
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	4a3d      	ldr	r2, [pc, #244]	; (8000cd4 <HAL_GPIO_Init+0x2cc>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d101      	bne.n	8000be8 <HAL_GPIO_Init+0x1e0>
 8000be4:	2303      	movs	r3, #3
 8000be6:	e006      	b.n	8000bf6 <HAL_GPIO_Init+0x1ee>
 8000be8:	2304      	movs	r3, #4
 8000bea:	e004      	b.n	8000bf6 <HAL_GPIO_Init+0x1ee>
 8000bec:	2302      	movs	r3, #2
 8000bee:	e002      	b.n	8000bf6 <HAL_GPIO_Init+0x1ee>
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	e000      	b.n	8000bf6 <HAL_GPIO_Init+0x1ee>
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000bf8:	f002 0203 	and.w	r2, r2, #3
 8000bfc:	0092      	lsls	r2, r2, #2
 8000bfe:	4093      	lsls	r3, r2
 8000c00:	68fa      	ldr	r2, [r7, #12]
 8000c02:	4313      	orrs	r3, r2
 8000c04:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c06:	492f      	ldr	r1, [pc, #188]	; (8000cc4 <HAL_GPIO_Init+0x2bc>)
 8000c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c0a:	089b      	lsrs	r3, r3, #2
 8000c0c:	3302      	adds	r3, #2
 8000c0e:	68fa      	ldr	r2, [r7, #12]
 8000c10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d006      	beq.n	8000c2e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c20:	4b2d      	ldr	r3, [pc, #180]	; (8000cd8 <HAL_GPIO_Init+0x2d0>)
 8000c22:	689a      	ldr	r2, [r3, #8]
 8000c24:	492c      	ldr	r1, [pc, #176]	; (8000cd8 <HAL_GPIO_Init+0x2d0>)
 8000c26:	69bb      	ldr	r3, [r7, #24]
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	608b      	str	r3, [r1, #8]
 8000c2c:	e006      	b.n	8000c3c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c2e:	4b2a      	ldr	r3, [pc, #168]	; (8000cd8 <HAL_GPIO_Init+0x2d0>)
 8000c30:	689a      	ldr	r2, [r3, #8]
 8000c32:	69bb      	ldr	r3, [r7, #24]
 8000c34:	43db      	mvns	r3, r3
 8000c36:	4928      	ldr	r1, [pc, #160]	; (8000cd8 <HAL_GPIO_Init+0x2d0>)
 8000c38:	4013      	ands	r3, r2
 8000c3a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d006      	beq.n	8000c56 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c48:	4b23      	ldr	r3, [pc, #140]	; (8000cd8 <HAL_GPIO_Init+0x2d0>)
 8000c4a:	68da      	ldr	r2, [r3, #12]
 8000c4c:	4922      	ldr	r1, [pc, #136]	; (8000cd8 <HAL_GPIO_Init+0x2d0>)
 8000c4e:	69bb      	ldr	r3, [r7, #24]
 8000c50:	4313      	orrs	r3, r2
 8000c52:	60cb      	str	r3, [r1, #12]
 8000c54:	e006      	b.n	8000c64 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c56:	4b20      	ldr	r3, [pc, #128]	; (8000cd8 <HAL_GPIO_Init+0x2d0>)
 8000c58:	68da      	ldr	r2, [r3, #12]
 8000c5a:	69bb      	ldr	r3, [r7, #24]
 8000c5c:	43db      	mvns	r3, r3
 8000c5e:	491e      	ldr	r1, [pc, #120]	; (8000cd8 <HAL_GPIO_Init+0x2d0>)
 8000c60:	4013      	ands	r3, r2
 8000c62:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d006      	beq.n	8000c7e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c70:	4b19      	ldr	r3, [pc, #100]	; (8000cd8 <HAL_GPIO_Init+0x2d0>)
 8000c72:	685a      	ldr	r2, [r3, #4]
 8000c74:	4918      	ldr	r1, [pc, #96]	; (8000cd8 <HAL_GPIO_Init+0x2d0>)
 8000c76:	69bb      	ldr	r3, [r7, #24]
 8000c78:	4313      	orrs	r3, r2
 8000c7a:	604b      	str	r3, [r1, #4]
 8000c7c:	e006      	b.n	8000c8c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c7e:	4b16      	ldr	r3, [pc, #88]	; (8000cd8 <HAL_GPIO_Init+0x2d0>)
 8000c80:	685a      	ldr	r2, [r3, #4]
 8000c82:	69bb      	ldr	r3, [r7, #24]
 8000c84:	43db      	mvns	r3, r3
 8000c86:	4914      	ldr	r1, [pc, #80]	; (8000cd8 <HAL_GPIO_Init+0x2d0>)
 8000c88:	4013      	ands	r3, r2
 8000c8a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d021      	beq.n	8000cdc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c98:	4b0f      	ldr	r3, [pc, #60]	; (8000cd8 <HAL_GPIO_Init+0x2d0>)
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	490e      	ldr	r1, [pc, #56]	; (8000cd8 <HAL_GPIO_Init+0x2d0>)
 8000c9e:	69bb      	ldr	r3, [r7, #24]
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	600b      	str	r3, [r1, #0]
 8000ca4:	e021      	b.n	8000cea <HAL_GPIO_Init+0x2e2>
 8000ca6:	bf00      	nop
 8000ca8:	10320000 	.word	0x10320000
 8000cac:	10310000 	.word	0x10310000
 8000cb0:	10220000 	.word	0x10220000
 8000cb4:	10210000 	.word	0x10210000
 8000cb8:	10120000 	.word	0x10120000
 8000cbc:	10110000 	.word	0x10110000
 8000cc0:	40021000 	.word	0x40021000
 8000cc4:	40010000 	.word	0x40010000
 8000cc8:	40010800 	.word	0x40010800
 8000ccc:	40010c00 	.word	0x40010c00
 8000cd0:	40011000 	.word	0x40011000
 8000cd4:	40011400 	.word	0x40011400
 8000cd8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000cdc:	4b0b      	ldr	r3, [pc, #44]	; (8000d0c <HAL_GPIO_Init+0x304>)
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	69bb      	ldr	r3, [r7, #24]
 8000ce2:	43db      	mvns	r3, r3
 8000ce4:	4909      	ldr	r1, [pc, #36]	; (8000d0c <HAL_GPIO_Init+0x304>)
 8000ce6:	4013      	ands	r3, r2
 8000ce8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cec:	3301      	adds	r3, #1
 8000cee:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf6:	fa22 f303 	lsr.w	r3, r2, r3
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	f47f ae8e 	bne.w	8000a1c <HAL_GPIO_Init+0x14>
  }
}
 8000d00:	bf00      	nop
 8000d02:	bf00      	nop
 8000d04:	372c      	adds	r7, #44	; 0x2c
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bc80      	pop	{r7}
 8000d0a:	4770      	bx	lr
 8000d0c:	40010400 	.word	0x40010400

08000d10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	460b      	mov	r3, r1
 8000d1a:	807b      	strh	r3, [r7, #2]
 8000d1c:	4613      	mov	r3, r2
 8000d1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d20:	787b      	ldrb	r3, [r7, #1]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d003      	beq.n	8000d2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d26:	887a      	ldrh	r2, [r7, #2]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000d2c:	e003      	b.n	8000d36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d2e:	887b      	ldrh	r3, [r7, #2]
 8000d30:	041a      	lsls	r2, r3, #16
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	611a      	str	r2, [r3, #16]
}
 8000d36:	bf00      	nop
 8000d38:	370c      	adds	r7, #12
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bc80      	pop	{r7}
 8000d3e:	4770      	bx	lr

08000d40 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000d4a:	4b08      	ldr	r3, [pc, #32]	; (8000d6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000d4c:	695a      	ldr	r2, [r3, #20]
 8000d4e:	88fb      	ldrh	r3, [r7, #6]
 8000d50:	4013      	ands	r3, r2
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d006      	beq.n	8000d64 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000d56:	4a05      	ldr	r2, [pc, #20]	; (8000d6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000d58:	88fb      	ldrh	r3, [r7, #6]
 8000d5a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000d5c:	88fb      	ldrh	r3, [r7, #6]
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f7ff fbae 	bl	80004c0 <HAL_GPIO_EXTI_Callback>
  }
}
 8000d64:	bf00      	nop
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	40010400 	.word	0x40010400

08000d70 <HAL_PWR_PVD_IRQHandler>:
  * @brief  This function handles the PWR PVD interrupt request.
  * @note   This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8000d74:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <HAL_PWR_PVD_IRQHandler+0x20>)
 8000d76:	695b      	ldr	r3, [r3, #20]
 8000d78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d005      	beq.n	8000d8c <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8000d80:	f000 f808 	bl	8000d94 <HAL_PWR_PVDCallback>

    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8000d84:	4b02      	ldr	r3, [pc, #8]	; (8000d90 <HAL_PWR_PVD_IRQHandler+0x20>)
 8000d86:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d8a:	615a      	str	r2, [r3, #20]
  }
}
 8000d8c:	bf00      	nop
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	40010400 	.word	0x40010400

08000d94 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8000d98:	bf00      	nop
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bc80      	pop	{r7}
 8000d9e:	4770      	bx	lr

08000da0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b086      	sub	sp, #24
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d101      	bne.n	8000db2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000dae:	2301      	movs	r3, #1
 8000db0:	e272      	b.n	8001298 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f003 0301 	and.w	r3, r3, #1
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	f000 8087 	beq.w	8000ece <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000dc0:	4b92      	ldr	r3, [pc, #584]	; (800100c <HAL_RCC_OscConfig+0x26c>)
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	f003 030c 	and.w	r3, r3, #12
 8000dc8:	2b04      	cmp	r3, #4
 8000dca:	d00c      	beq.n	8000de6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000dcc:	4b8f      	ldr	r3, [pc, #572]	; (800100c <HAL_RCC_OscConfig+0x26c>)
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	f003 030c 	and.w	r3, r3, #12
 8000dd4:	2b08      	cmp	r3, #8
 8000dd6:	d112      	bne.n	8000dfe <HAL_RCC_OscConfig+0x5e>
 8000dd8:	4b8c      	ldr	r3, [pc, #560]	; (800100c <HAL_RCC_OscConfig+0x26c>)
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000de0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000de4:	d10b      	bne.n	8000dfe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000de6:	4b89      	ldr	r3, [pc, #548]	; (800100c <HAL_RCC_OscConfig+0x26c>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d06c      	beq.n	8000ecc <HAL_RCC_OscConfig+0x12c>
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d168      	bne.n	8000ecc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e24c      	b.n	8001298 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e06:	d106      	bne.n	8000e16 <HAL_RCC_OscConfig+0x76>
 8000e08:	4b80      	ldr	r3, [pc, #512]	; (800100c <HAL_RCC_OscConfig+0x26c>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a7f      	ldr	r2, [pc, #508]	; (800100c <HAL_RCC_OscConfig+0x26c>)
 8000e0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e12:	6013      	str	r3, [r2, #0]
 8000e14:	e02e      	b.n	8000e74 <HAL_RCC_OscConfig+0xd4>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d10c      	bne.n	8000e38 <HAL_RCC_OscConfig+0x98>
 8000e1e:	4b7b      	ldr	r3, [pc, #492]	; (800100c <HAL_RCC_OscConfig+0x26c>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4a7a      	ldr	r2, [pc, #488]	; (800100c <HAL_RCC_OscConfig+0x26c>)
 8000e24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e28:	6013      	str	r3, [r2, #0]
 8000e2a:	4b78      	ldr	r3, [pc, #480]	; (800100c <HAL_RCC_OscConfig+0x26c>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4a77      	ldr	r2, [pc, #476]	; (800100c <HAL_RCC_OscConfig+0x26c>)
 8000e30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e34:	6013      	str	r3, [r2, #0]
 8000e36:	e01d      	b.n	8000e74 <HAL_RCC_OscConfig+0xd4>
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e40:	d10c      	bne.n	8000e5c <HAL_RCC_OscConfig+0xbc>
 8000e42:	4b72      	ldr	r3, [pc, #456]	; (800100c <HAL_RCC_OscConfig+0x26c>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a71      	ldr	r2, [pc, #452]	; (800100c <HAL_RCC_OscConfig+0x26c>)
 8000e48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e4c:	6013      	str	r3, [r2, #0]
 8000e4e:	4b6f      	ldr	r3, [pc, #444]	; (800100c <HAL_RCC_OscConfig+0x26c>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4a6e      	ldr	r2, [pc, #440]	; (800100c <HAL_RCC_OscConfig+0x26c>)
 8000e54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e58:	6013      	str	r3, [r2, #0]
 8000e5a:	e00b      	b.n	8000e74 <HAL_RCC_OscConfig+0xd4>
 8000e5c:	4b6b      	ldr	r3, [pc, #428]	; (800100c <HAL_RCC_OscConfig+0x26c>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a6a      	ldr	r2, [pc, #424]	; (800100c <HAL_RCC_OscConfig+0x26c>)
 8000e62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e66:	6013      	str	r3, [r2, #0]
 8000e68:	4b68      	ldr	r3, [pc, #416]	; (800100c <HAL_RCC_OscConfig+0x26c>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a67      	ldr	r2, [pc, #412]	; (800100c <HAL_RCC_OscConfig+0x26c>)
 8000e6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e72:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d013      	beq.n	8000ea4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e7c:	f7ff fcda 	bl	8000834 <HAL_GetTick>
 8000e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e82:	e008      	b.n	8000e96 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e84:	f7ff fcd6 	bl	8000834 <HAL_GetTick>
 8000e88:	4602      	mov	r2, r0
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	2b64      	cmp	r3, #100	; 0x64
 8000e90:	d901      	bls.n	8000e96 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000e92:	2303      	movs	r3, #3
 8000e94:	e200      	b.n	8001298 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e96:	4b5d      	ldr	r3, [pc, #372]	; (800100c <HAL_RCC_OscConfig+0x26c>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d0f0      	beq.n	8000e84 <HAL_RCC_OscConfig+0xe4>
 8000ea2:	e014      	b.n	8000ece <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ea4:	f7ff fcc6 	bl	8000834 <HAL_GetTick>
 8000ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000eaa:	e008      	b.n	8000ebe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000eac:	f7ff fcc2 	bl	8000834 <HAL_GetTick>
 8000eb0:	4602      	mov	r2, r0
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	1ad3      	subs	r3, r2, r3
 8000eb6:	2b64      	cmp	r3, #100	; 0x64
 8000eb8:	d901      	bls.n	8000ebe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000eba:	2303      	movs	r3, #3
 8000ebc:	e1ec      	b.n	8001298 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ebe:	4b53      	ldr	r3, [pc, #332]	; (800100c <HAL_RCC_OscConfig+0x26c>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d1f0      	bne.n	8000eac <HAL_RCC_OscConfig+0x10c>
 8000eca:	e000      	b.n	8000ece <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ecc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f003 0302 	and.w	r3, r3, #2
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d063      	beq.n	8000fa2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000eda:	4b4c      	ldr	r3, [pc, #304]	; (800100c <HAL_RCC_OscConfig+0x26c>)
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	f003 030c 	and.w	r3, r3, #12
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d00b      	beq.n	8000efe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000ee6:	4b49      	ldr	r3, [pc, #292]	; (800100c <HAL_RCC_OscConfig+0x26c>)
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	f003 030c 	and.w	r3, r3, #12
 8000eee:	2b08      	cmp	r3, #8
 8000ef0:	d11c      	bne.n	8000f2c <HAL_RCC_OscConfig+0x18c>
 8000ef2:	4b46      	ldr	r3, [pc, #280]	; (800100c <HAL_RCC_OscConfig+0x26c>)
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d116      	bne.n	8000f2c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000efe:	4b43      	ldr	r3, [pc, #268]	; (800100c <HAL_RCC_OscConfig+0x26c>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f003 0302 	and.w	r3, r3, #2
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d005      	beq.n	8000f16 <HAL_RCC_OscConfig+0x176>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	691b      	ldr	r3, [r3, #16]
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	d001      	beq.n	8000f16 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000f12:	2301      	movs	r3, #1
 8000f14:	e1c0      	b.n	8001298 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f16:	4b3d      	ldr	r3, [pc, #244]	; (800100c <HAL_RCC_OscConfig+0x26c>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	695b      	ldr	r3, [r3, #20]
 8000f22:	00db      	lsls	r3, r3, #3
 8000f24:	4939      	ldr	r1, [pc, #228]	; (800100c <HAL_RCC_OscConfig+0x26c>)
 8000f26:	4313      	orrs	r3, r2
 8000f28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f2a:	e03a      	b.n	8000fa2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	691b      	ldr	r3, [r3, #16]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d020      	beq.n	8000f76 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f34:	4b36      	ldr	r3, [pc, #216]	; (8001010 <HAL_RCC_OscConfig+0x270>)
 8000f36:	2201      	movs	r2, #1
 8000f38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f3a:	f7ff fc7b 	bl	8000834 <HAL_GetTick>
 8000f3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f40:	e008      	b.n	8000f54 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f42:	f7ff fc77 	bl	8000834 <HAL_GetTick>
 8000f46:	4602      	mov	r2, r0
 8000f48:	693b      	ldr	r3, [r7, #16]
 8000f4a:	1ad3      	subs	r3, r2, r3
 8000f4c:	2b02      	cmp	r3, #2
 8000f4e:	d901      	bls.n	8000f54 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000f50:	2303      	movs	r3, #3
 8000f52:	e1a1      	b.n	8001298 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f54:	4b2d      	ldr	r3, [pc, #180]	; (800100c <HAL_RCC_OscConfig+0x26c>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f003 0302 	and.w	r3, r3, #2
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d0f0      	beq.n	8000f42 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f60:	4b2a      	ldr	r3, [pc, #168]	; (800100c <HAL_RCC_OscConfig+0x26c>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	695b      	ldr	r3, [r3, #20]
 8000f6c:	00db      	lsls	r3, r3, #3
 8000f6e:	4927      	ldr	r1, [pc, #156]	; (800100c <HAL_RCC_OscConfig+0x26c>)
 8000f70:	4313      	orrs	r3, r2
 8000f72:	600b      	str	r3, [r1, #0]
 8000f74:	e015      	b.n	8000fa2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f76:	4b26      	ldr	r3, [pc, #152]	; (8001010 <HAL_RCC_OscConfig+0x270>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f7c:	f7ff fc5a 	bl	8000834 <HAL_GetTick>
 8000f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f82:	e008      	b.n	8000f96 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f84:	f7ff fc56 	bl	8000834 <HAL_GetTick>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	2b02      	cmp	r3, #2
 8000f90:	d901      	bls.n	8000f96 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000f92:	2303      	movs	r3, #3
 8000f94:	e180      	b.n	8001298 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f96:	4b1d      	ldr	r3, [pc, #116]	; (800100c <HAL_RCC_OscConfig+0x26c>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f003 0302 	and.w	r3, r3, #2
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d1f0      	bne.n	8000f84 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f003 0308 	and.w	r3, r3, #8
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d03a      	beq.n	8001024 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	699b      	ldr	r3, [r3, #24]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d019      	beq.n	8000fea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000fb6:	4b17      	ldr	r3, [pc, #92]	; (8001014 <HAL_RCC_OscConfig+0x274>)
 8000fb8:	2201      	movs	r2, #1
 8000fba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fbc:	f7ff fc3a 	bl	8000834 <HAL_GetTick>
 8000fc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fc2:	e008      	b.n	8000fd6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fc4:	f7ff fc36 	bl	8000834 <HAL_GetTick>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	2b02      	cmp	r3, #2
 8000fd0:	d901      	bls.n	8000fd6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	e160      	b.n	8001298 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fd6:	4b0d      	ldr	r3, [pc, #52]	; (800100c <HAL_RCC_OscConfig+0x26c>)
 8000fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fda:	f003 0302 	and.w	r3, r3, #2
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d0f0      	beq.n	8000fc4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000fe2:	2001      	movs	r0, #1
 8000fe4:	f000 fafe 	bl	80015e4 <RCC_Delay>
 8000fe8:	e01c      	b.n	8001024 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000fea:	4b0a      	ldr	r3, [pc, #40]	; (8001014 <HAL_RCC_OscConfig+0x274>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ff0:	f7ff fc20 	bl	8000834 <HAL_GetTick>
 8000ff4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ff6:	e00f      	b.n	8001018 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ff8:	f7ff fc1c 	bl	8000834 <HAL_GetTick>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	2b02      	cmp	r3, #2
 8001004:	d908      	bls.n	8001018 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001006:	2303      	movs	r3, #3
 8001008:	e146      	b.n	8001298 <HAL_RCC_OscConfig+0x4f8>
 800100a:	bf00      	nop
 800100c:	40021000 	.word	0x40021000
 8001010:	42420000 	.word	0x42420000
 8001014:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001018:	4b92      	ldr	r3, [pc, #584]	; (8001264 <HAL_RCC_OscConfig+0x4c4>)
 800101a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800101c:	f003 0302 	and.w	r3, r3, #2
 8001020:	2b00      	cmp	r3, #0
 8001022:	d1e9      	bne.n	8000ff8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f003 0304 	and.w	r3, r3, #4
 800102c:	2b00      	cmp	r3, #0
 800102e:	f000 80a6 	beq.w	800117e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001032:	2300      	movs	r3, #0
 8001034:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001036:	4b8b      	ldr	r3, [pc, #556]	; (8001264 <HAL_RCC_OscConfig+0x4c4>)
 8001038:	69db      	ldr	r3, [r3, #28]
 800103a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800103e:	2b00      	cmp	r3, #0
 8001040:	d10d      	bne.n	800105e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001042:	4b88      	ldr	r3, [pc, #544]	; (8001264 <HAL_RCC_OscConfig+0x4c4>)
 8001044:	69db      	ldr	r3, [r3, #28]
 8001046:	4a87      	ldr	r2, [pc, #540]	; (8001264 <HAL_RCC_OscConfig+0x4c4>)
 8001048:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800104c:	61d3      	str	r3, [r2, #28]
 800104e:	4b85      	ldr	r3, [pc, #532]	; (8001264 <HAL_RCC_OscConfig+0x4c4>)
 8001050:	69db      	ldr	r3, [r3, #28]
 8001052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001056:	60bb      	str	r3, [r7, #8]
 8001058:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800105a:	2301      	movs	r3, #1
 800105c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800105e:	4b82      	ldr	r3, [pc, #520]	; (8001268 <HAL_RCC_OscConfig+0x4c8>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001066:	2b00      	cmp	r3, #0
 8001068:	d118      	bne.n	800109c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800106a:	4b7f      	ldr	r3, [pc, #508]	; (8001268 <HAL_RCC_OscConfig+0x4c8>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a7e      	ldr	r2, [pc, #504]	; (8001268 <HAL_RCC_OscConfig+0x4c8>)
 8001070:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001074:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001076:	f7ff fbdd 	bl	8000834 <HAL_GetTick>
 800107a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800107c:	e008      	b.n	8001090 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800107e:	f7ff fbd9 	bl	8000834 <HAL_GetTick>
 8001082:	4602      	mov	r2, r0
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	1ad3      	subs	r3, r2, r3
 8001088:	2b64      	cmp	r3, #100	; 0x64
 800108a:	d901      	bls.n	8001090 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800108c:	2303      	movs	r3, #3
 800108e:	e103      	b.n	8001298 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001090:	4b75      	ldr	r3, [pc, #468]	; (8001268 <HAL_RCC_OscConfig+0x4c8>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001098:	2b00      	cmp	r3, #0
 800109a:	d0f0      	beq.n	800107e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d106      	bne.n	80010b2 <HAL_RCC_OscConfig+0x312>
 80010a4:	4b6f      	ldr	r3, [pc, #444]	; (8001264 <HAL_RCC_OscConfig+0x4c4>)
 80010a6:	6a1b      	ldr	r3, [r3, #32]
 80010a8:	4a6e      	ldr	r2, [pc, #440]	; (8001264 <HAL_RCC_OscConfig+0x4c4>)
 80010aa:	f043 0301 	orr.w	r3, r3, #1
 80010ae:	6213      	str	r3, [r2, #32]
 80010b0:	e02d      	b.n	800110e <HAL_RCC_OscConfig+0x36e>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	68db      	ldr	r3, [r3, #12]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d10c      	bne.n	80010d4 <HAL_RCC_OscConfig+0x334>
 80010ba:	4b6a      	ldr	r3, [pc, #424]	; (8001264 <HAL_RCC_OscConfig+0x4c4>)
 80010bc:	6a1b      	ldr	r3, [r3, #32]
 80010be:	4a69      	ldr	r2, [pc, #420]	; (8001264 <HAL_RCC_OscConfig+0x4c4>)
 80010c0:	f023 0301 	bic.w	r3, r3, #1
 80010c4:	6213      	str	r3, [r2, #32]
 80010c6:	4b67      	ldr	r3, [pc, #412]	; (8001264 <HAL_RCC_OscConfig+0x4c4>)
 80010c8:	6a1b      	ldr	r3, [r3, #32]
 80010ca:	4a66      	ldr	r2, [pc, #408]	; (8001264 <HAL_RCC_OscConfig+0x4c4>)
 80010cc:	f023 0304 	bic.w	r3, r3, #4
 80010d0:	6213      	str	r3, [r2, #32]
 80010d2:	e01c      	b.n	800110e <HAL_RCC_OscConfig+0x36e>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	2b05      	cmp	r3, #5
 80010da:	d10c      	bne.n	80010f6 <HAL_RCC_OscConfig+0x356>
 80010dc:	4b61      	ldr	r3, [pc, #388]	; (8001264 <HAL_RCC_OscConfig+0x4c4>)
 80010de:	6a1b      	ldr	r3, [r3, #32]
 80010e0:	4a60      	ldr	r2, [pc, #384]	; (8001264 <HAL_RCC_OscConfig+0x4c4>)
 80010e2:	f043 0304 	orr.w	r3, r3, #4
 80010e6:	6213      	str	r3, [r2, #32]
 80010e8:	4b5e      	ldr	r3, [pc, #376]	; (8001264 <HAL_RCC_OscConfig+0x4c4>)
 80010ea:	6a1b      	ldr	r3, [r3, #32]
 80010ec:	4a5d      	ldr	r2, [pc, #372]	; (8001264 <HAL_RCC_OscConfig+0x4c4>)
 80010ee:	f043 0301 	orr.w	r3, r3, #1
 80010f2:	6213      	str	r3, [r2, #32]
 80010f4:	e00b      	b.n	800110e <HAL_RCC_OscConfig+0x36e>
 80010f6:	4b5b      	ldr	r3, [pc, #364]	; (8001264 <HAL_RCC_OscConfig+0x4c4>)
 80010f8:	6a1b      	ldr	r3, [r3, #32]
 80010fa:	4a5a      	ldr	r2, [pc, #360]	; (8001264 <HAL_RCC_OscConfig+0x4c4>)
 80010fc:	f023 0301 	bic.w	r3, r3, #1
 8001100:	6213      	str	r3, [r2, #32]
 8001102:	4b58      	ldr	r3, [pc, #352]	; (8001264 <HAL_RCC_OscConfig+0x4c4>)
 8001104:	6a1b      	ldr	r3, [r3, #32]
 8001106:	4a57      	ldr	r2, [pc, #348]	; (8001264 <HAL_RCC_OscConfig+0x4c4>)
 8001108:	f023 0304 	bic.w	r3, r3, #4
 800110c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	68db      	ldr	r3, [r3, #12]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d015      	beq.n	8001142 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001116:	f7ff fb8d 	bl	8000834 <HAL_GetTick>
 800111a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800111c:	e00a      	b.n	8001134 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800111e:	f7ff fb89 	bl	8000834 <HAL_GetTick>
 8001122:	4602      	mov	r2, r0
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	1ad3      	subs	r3, r2, r3
 8001128:	f241 3288 	movw	r2, #5000	; 0x1388
 800112c:	4293      	cmp	r3, r2
 800112e:	d901      	bls.n	8001134 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001130:	2303      	movs	r3, #3
 8001132:	e0b1      	b.n	8001298 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001134:	4b4b      	ldr	r3, [pc, #300]	; (8001264 <HAL_RCC_OscConfig+0x4c4>)
 8001136:	6a1b      	ldr	r3, [r3, #32]
 8001138:	f003 0302 	and.w	r3, r3, #2
 800113c:	2b00      	cmp	r3, #0
 800113e:	d0ee      	beq.n	800111e <HAL_RCC_OscConfig+0x37e>
 8001140:	e014      	b.n	800116c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001142:	f7ff fb77 	bl	8000834 <HAL_GetTick>
 8001146:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001148:	e00a      	b.n	8001160 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800114a:	f7ff fb73 	bl	8000834 <HAL_GetTick>
 800114e:	4602      	mov	r2, r0
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	1ad3      	subs	r3, r2, r3
 8001154:	f241 3288 	movw	r2, #5000	; 0x1388
 8001158:	4293      	cmp	r3, r2
 800115a:	d901      	bls.n	8001160 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800115c:	2303      	movs	r3, #3
 800115e:	e09b      	b.n	8001298 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001160:	4b40      	ldr	r3, [pc, #256]	; (8001264 <HAL_RCC_OscConfig+0x4c4>)
 8001162:	6a1b      	ldr	r3, [r3, #32]
 8001164:	f003 0302 	and.w	r3, r3, #2
 8001168:	2b00      	cmp	r3, #0
 800116a:	d1ee      	bne.n	800114a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800116c:	7dfb      	ldrb	r3, [r7, #23]
 800116e:	2b01      	cmp	r3, #1
 8001170:	d105      	bne.n	800117e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001172:	4b3c      	ldr	r3, [pc, #240]	; (8001264 <HAL_RCC_OscConfig+0x4c4>)
 8001174:	69db      	ldr	r3, [r3, #28]
 8001176:	4a3b      	ldr	r2, [pc, #236]	; (8001264 <HAL_RCC_OscConfig+0x4c4>)
 8001178:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800117c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	69db      	ldr	r3, [r3, #28]
 8001182:	2b00      	cmp	r3, #0
 8001184:	f000 8087 	beq.w	8001296 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001188:	4b36      	ldr	r3, [pc, #216]	; (8001264 <HAL_RCC_OscConfig+0x4c4>)
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f003 030c 	and.w	r3, r3, #12
 8001190:	2b08      	cmp	r3, #8
 8001192:	d061      	beq.n	8001258 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	69db      	ldr	r3, [r3, #28]
 8001198:	2b02      	cmp	r3, #2
 800119a:	d146      	bne.n	800122a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800119c:	4b33      	ldr	r3, [pc, #204]	; (800126c <HAL_RCC_OscConfig+0x4cc>)
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a2:	f7ff fb47 	bl	8000834 <HAL_GetTick>
 80011a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011a8:	e008      	b.n	80011bc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011aa:	f7ff fb43 	bl	8000834 <HAL_GetTick>
 80011ae:	4602      	mov	r2, r0
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	1ad3      	subs	r3, r2, r3
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	d901      	bls.n	80011bc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80011b8:	2303      	movs	r3, #3
 80011ba:	e06d      	b.n	8001298 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011bc:	4b29      	ldr	r3, [pc, #164]	; (8001264 <HAL_RCC_OscConfig+0x4c4>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d1f0      	bne.n	80011aa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6a1b      	ldr	r3, [r3, #32]
 80011cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011d0:	d108      	bne.n	80011e4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80011d2:	4b24      	ldr	r3, [pc, #144]	; (8001264 <HAL_RCC_OscConfig+0x4c4>)
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	4921      	ldr	r1, [pc, #132]	; (8001264 <HAL_RCC_OscConfig+0x4c4>)
 80011e0:	4313      	orrs	r3, r2
 80011e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011e4:	4b1f      	ldr	r3, [pc, #124]	; (8001264 <HAL_RCC_OscConfig+0x4c4>)
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6a19      	ldr	r1, [r3, #32]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011f4:	430b      	orrs	r3, r1
 80011f6:	491b      	ldr	r1, [pc, #108]	; (8001264 <HAL_RCC_OscConfig+0x4c4>)
 80011f8:	4313      	orrs	r3, r2
 80011fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80011fc:	4b1b      	ldr	r3, [pc, #108]	; (800126c <HAL_RCC_OscConfig+0x4cc>)
 80011fe:	2201      	movs	r2, #1
 8001200:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001202:	f7ff fb17 	bl	8000834 <HAL_GetTick>
 8001206:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001208:	e008      	b.n	800121c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800120a:	f7ff fb13 	bl	8000834 <HAL_GetTick>
 800120e:	4602      	mov	r2, r0
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	1ad3      	subs	r3, r2, r3
 8001214:	2b02      	cmp	r3, #2
 8001216:	d901      	bls.n	800121c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001218:	2303      	movs	r3, #3
 800121a:	e03d      	b.n	8001298 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800121c:	4b11      	ldr	r3, [pc, #68]	; (8001264 <HAL_RCC_OscConfig+0x4c4>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001224:	2b00      	cmp	r3, #0
 8001226:	d0f0      	beq.n	800120a <HAL_RCC_OscConfig+0x46a>
 8001228:	e035      	b.n	8001296 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800122a:	4b10      	ldr	r3, [pc, #64]	; (800126c <HAL_RCC_OscConfig+0x4cc>)
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001230:	f7ff fb00 	bl	8000834 <HAL_GetTick>
 8001234:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001236:	e008      	b.n	800124a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001238:	f7ff fafc 	bl	8000834 <HAL_GetTick>
 800123c:	4602      	mov	r2, r0
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	2b02      	cmp	r3, #2
 8001244:	d901      	bls.n	800124a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001246:	2303      	movs	r3, #3
 8001248:	e026      	b.n	8001298 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800124a:	4b06      	ldr	r3, [pc, #24]	; (8001264 <HAL_RCC_OscConfig+0x4c4>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001252:	2b00      	cmp	r3, #0
 8001254:	d1f0      	bne.n	8001238 <HAL_RCC_OscConfig+0x498>
 8001256:	e01e      	b.n	8001296 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	69db      	ldr	r3, [r3, #28]
 800125c:	2b01      	cmp	r3, #1
 800125e:	d107      	bne.n	8001270 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001260:	2301      	movs	r3, #1
 8001262:	e019      	b.n	8001298 <HAL_RCC_OscConfig+0x4f8>
 8001264:	40021000 	.word	0x40021000
 8001268:	40007000 	.word	0x40007000
 800126c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001270:	4b0b      	ldr	r3, [pc, #44]	; (80012a0 <HAL_RCC_OscConfig+0x500>)
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6a1b      	ldr	r3, [r3, #32]
 8001280:	429a      	cmp	r2, r3
 8001282:	d106      	bne.n	8001292 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800128e:	429a      	cmp	r2, r3
 8001290:	d001      	beq.n	8001296 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e000      	b.n	8001298 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001296:	2300      	movs	r3, #0
}
 8001298:	4618      	mov	r0, r3
 800129a:	3718      	adds	r7, #24
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40021000 	.word	0x40021000

080012a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d101      	bne.n	80012b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012b4:	2301      	movs	r3, #1
 80012b6:	e0d0      	b.n	800145a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80012b8:	4b6a      	ldr	r3, [pc, #424]	; (8001464 <HAL_RCC_ClockConfig+0x1c0>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f003 0307 	and.w	r3, r3, #7
 80012c0:	683a      	ldr	r2, [r7, #0]
 80012c2:	429a      	cmp	r2, r3
 80012c4:	d910      	bls.n	80012e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012c6:	4b67      	ldr	r3, [pc, #412]	; (8001464 <HAL_RCC_ClockConfig+0x1c0>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f023 0207 	bic.w	r2, r3, #7
 80012ce:	4965      	ldr	r1, [pc, #404]	; (8001464 <HAL_RCC_ClockConfig+0x1c0>)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012d6:	4b63      	ldr	r3, [pc, #396]	; (8001464 <HAL_RCC_ClockConfig+0x1c0>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f003 0307 	and.w	r3, r3, #7
 80012de:	683a      	ldr	r2, [r7, #0]
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d001      	beq.n	80012e8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80012e4:	2301      	movs	r3, #1
 80012e6:	e0b8      	b.n	800145a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f003 0302 	and.w	r3, r3, #2
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d020      	beq.n	8001336 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f003 0304 	and.w	r3, r3, #4
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d005      	beq.n	800130c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001300:	4b59      	ldr	r3, [pc, #356]	; (8001468 <HAL_RCC_ClockConfig+0x1c4>)
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	4a58      	ldr	r2, [pc, #352]	; (8001468 <HAL_RCC_ClockConfig+0x1c4>)
 8001306:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800130a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f003 0308 	and.w	r3, r3, #8
 8001314:	2b00      	cmp	r3, #0
 8001316:	d005      	beq.n	8001324 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001318:	4b53      	ldr	r3, [pc, #332]	; (8001468 <HAL_RCC_ClockConfig+0x1c4>)
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	4a52      	ldr	r2, [pc, #328]	; (8001468 <HAL_RCC_ClockConfig+0x1c4>)
 800131e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001322:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001324:	4b50      	ldr	r3, [pc, #320]	; (8001468 <HAL_RCC_ClockConfig+0x1c4>)
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	494d      	ldr	r1, [pc, #308]	; (8001468 <HAL_RCC_ClockConfig+0x1c4>)
 8001332:	4313      	orrs	r3, r2
 8001334:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	2b00      	cmp	r3, #0
 8001340:	d040      	beq.n	80013c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	2b01      	cmp	r3, #1
 8001348:	d107      	bne.n	800135a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800134a:	4b47      	ldr	r3, [pc, #284]	; (8001468 <HAL_RCC_ClockConfig+0x1c4>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001352:	2b00      	cmp	r3, #0
 8001354:	d115      	bne.n	8001382 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e07f      	b.n	800145a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	2b02      	cmp	r3, #2
 8001360:	d107      	bne.n	8001372 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001362:	4b41      	ldr	r3, [pc, #260]	; (8001468 <HAL_RCC_ClockConfig+0x1c4>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d109      	bne.n	8001382 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e073      	b.n	800145a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001372:	4b3d      	ldr	r3, [pc, #244]	; (8001468 <HAL_RCC_ClockConfig+0x1c4>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 0302 	and.w	r3, r3, #2
 800137a:	2b00      	cmp	r3, #0
 800137c:	d101      	bne.n	8001382 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e06b      	b.n	800145a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001382:	4b39      	ldr	r3, [pc, #228]	; (8001468 <HAL_RCC_ClockConfig+0x1c4>)
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f023 0203 	bic.w	r2, r3, #3
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	4936      	ldr	r1, [pc, #216]	; (8001468 <HAL_RCC_ClockConfig+0x1c4>)
 8001390:	4313      	orrs	r3, r2
 8001392:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001394:	f7ff fa4e 	bl	8000834 <HAL_GetTick>
 8001398:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800139a:	e00a      	b.n	80013b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800139c:	f7ff fa4a 	bl	8000834 <HAL_GetTick>
 80013a0:	4602      	mov	r2, r0
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d901      	bls.n	80013b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e053      	b.n	800145a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013b2:	4b2d      	ldr	r3, [pc, #180]	; (8001468 <HAL_RCC_ClockConfig+0x1c4>)
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f003 020c 	and.w	r2, r3, #12
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d1eb      	bne.n	800139c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80013c4:	4b27      	ldr	r3, [pc, #156]	; (8001464 <HAL_RCC_ClockConfig+0x1c0>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f003 0307 	and.w	r3, r3, #7
 80013cc:	683a      	ldr	r2, [r7, #0]
 80013ce:	429a      	cmp	r2, r3
 80013d0:	d210      	bcs.n	80013f4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013d2:	4b24      	ldr	r3, [pc, #144]	; (8001464 <HAL_RCC_ClockConfig+0x1c0>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f023 0207 	bic.w	r2, r3, #7
 80013da:	4922      	ldr	r1, [pc, #136]	; (8001464 <HAL_RCC_ClockConfig+0x1c0>)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	4313      	orrs	r3, r2
 80013e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013e2:	4b20      	ldr	r3, [pc, #128]	; (8001464 <HAL_RCC_ClockConfig+0x1c0>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 0307 	and.w	r3, r3, #7
 80013ea:	683a      	ldr	r2, [r7, #0]
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d001      	beq.n	80013f4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
 80013f2:	e032      	b.n	800145a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 0304 	and.w	r3, r3, #4
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d008      	beq.n	8001412 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001400:	4b19      	ldr	r3, [pc, #100]	; (8001468 <HAL_RCC_ClockConfig+0x1c4>)
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	4916      	ldr	r1, [pc, #88]	; (8001468 <HAL_RCC_ClockConfig+0x1c4>)
 800140e:	4313      	orrs	r3, r2
 8001410:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 0308 	and.w	r3, r3, #8
 800141a:	2b00      	cmp	r3, #0
 800141c:	d009      	beq.n	8001432 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800141e:	4b12      	ldr	r3, [pc, #72]	; (8001468 <HAL_RCC_ClockConfig+0x1c4>)
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	691b      	ldr	r3, [r3, #16]
 800142a:	00db      	lsls	r3, r3, #3
 800142c:	490e      	ldr	r1, [pc, #56]	; (8001468 <HAL_RCC_ClockConfig+0x1c4>)
 800142e:	4313      	orrs	r3, r2
 8001430:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001432:	f000 f821 	bl	8001478 <HAL_RCC_GetSysClockFreq>
 8001436:	4602      	mov	r2, r0
 8001438:	4b0b      	ldr	r3, [pc, #44]	; (8001468 <HAL_RCC_ClockConfig+0x1c4>)
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	091b      	lsrs	r3, r3, #4
 800143e:	f003 030f 	and.w	r3, r3, #15
 8001442:	490a      	ldr	r1, [pc, #40]	; (800146c <HAL_RCC_ClockConfig+0x1c8>)
 8001444:	5ccb      	ldrb	r3, [r1, r3]
 8001446:	fa22 f303 	lsr.w	r3, r2, r3
 800144a:	4a09      	ldr	r2, [pc, #36]	; (8001470 <HAL_RCC_ClockConfig+0x1cc>)
 800144c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800144e:	4b09      	ldr	r3, [pc, #36]	; (8001474 <HAL_RCC_ClockConfig+0x1d0>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4618      	mov	r0, r3
 8001454:	f7ff f8f0 	bl	8000638 <HAL_InitTick>

  return HAL_OK;
 8001458:	2300      	movs	r3, #0
}
 800145a:	4618      	mov	r0, r3
 800145c:	3710      	adds	r7, #16
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	40022000 	.word	0x40022000
 8001468:	40021000 	.word	0x40021000
 800146c:	08004a98 	.word	0x08004a98
 8001470:	20000000 	.word	0x20000000
 8001474:	20000004 	.word	0x20000004

08001478 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001478:	b480      	push	{r7}
 800147a:	b087      	sub	sp, #28
 800147c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800147e:	2300      	movs	r3, #0
 8001480:	60fb      	str	r3, [r7, #12]
 8001482:	2300      	movs	r3, #0
 8001484:	60bb      	str	r3, [r7, #8]
 8001486:	2300      	movs	r3, #0
 8001488:	617b      	str	r3, [r7, #20]
 800148a:	2300      	movs	r3, #0
 800148c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800148e:	2300      	movs	r3, #0
 8001490:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001492:	4b1e      	ldr	r3, [pc, #120]	; (800150c <HAL_RCC_GetSysClockFreq+0x94>)
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	f003 030c 	and.w	r3, r3, #12
 800149e:	2b04      	cmp	r3, #4
 80014a0:	d002      	beq.n	80014a8 <HAL_RCC_GetSysClockFreq+0x30>
 80014a2:	2b08      	cmp	r3, #8
 80014a4:	d003      	beq.n	80014ae <HAL_RCC_GetSysClockFreq+0x36>
 80014a6:	e027      	b.n	80014f8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80014a8:	4b19      	ldr	r3, [pc, #100]	; (8001510 <HAL_RCC_GetSysClockFreq+0x98>)
 80014aa:	613b      	str	r3, [r7, #16]
      break;
 80014ac:	e027      	b.n	80014fe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	0c9b      	lsrs	r3, r3, #18
 80014b2:	f003 030f 	and.w	r3, r3, #15
 80014b6:	4a17      	ldr	r2, [pc, #92]	; (8001514 <HAL_RCC_GetSysClockFreq+0x9c>)
 80014b8:	5cd3      	ldrb	r3, [r2, r3]
 80014ba:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d010      	beq.n	80014e8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80014c6:	4b11      	ldr	r3, [pc, #68]	; (800150c <HAL_RCC_GetSysClockFreq+0x94>)
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	0c5b      	lsrs	r3, r3, #17
 80014cc:	f003 0301 	and.w	r3, r3, #1
 80014d0:	4a11      	ldr	r2, [pc, #68]	; (8001518 <HAL_RCC_GetSysClockFreq+0xa0>)
 80014d2:	5cd3      	ldrb	r3, [r2, r3]
 80014d4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4a0d      	ldr	r2, [pc, #52]	; (8001510 <HAL_RCC_GetSysClockFreq+0x98>)
 80014da:	fb03 f202 	mul.w	r2, r3, r2
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80014e4:	617b      	str	r3, [r7, #20]
 80014e6:	e004      	b.n	80014f2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	4a0c      	ldr	r2, [pc, #48]	; (800151c <HAL_RCC_GetSysClockFreq+0xa4>)
 80014ec:	fb02 f303 	mul.w	r3, r2, r3
 80014f0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	613b      	str	r3, [r7, #16]
      break;
 80014f6:	e002      	b.n	80014fe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80014f8:	4b05      	ldr	r3, [pc, #20]	; (8001510 <HAL_RCC_GetSysClockFreq+0x98>)
 80014fa:	613b      	str	r3, [r7, #16]
      break;
 80014fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80014fe:	693b      	ldr	r3, [r7, #16]
}
 8001500:	4618      	mov	r0, r3
 8001502:	371c      	adds	r7, #28
 8001504:	46bd      	mov	sp, r7
 8001506:	bc80      	pop	{r7}
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	40021000 	.word	0x40021000
 8001510:	007a1200 	.word	0x007a1200
 8001514:	08004ab0 	.word	0x08004ab0
 8001518:	08004ac0 	.word	0x08004ac0
 800151c:	003d0900 	.word	0x003d0900

08001520 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001524:	4b02      	ldr	r3, [pc, #8]	; (8001530 <HAL_RCC_GetHCLKFreq+0x10>)
 8001526:	681b      	ldr	r3, [r3, #0]
}
 8001528:	4618      	mov	r0, r3
 800152a:	46bd      	mov	sp, r7
 800152c:	bc80      	pop	{r7}
 800152e:	4770      	bx	lr
 8001530:	20000000 	.word	0x20000000

08001534 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001538:	f7ff fff2 	bl	8001520 <HAL_RCC_GetHCLKFreq>
 800153c:	4602      	mov	r2, r0
 800153e:	4b05      	ldr	r3, [pc, #20]	; (8001554 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	0a1b      	lsrs	r3, r3, #8
 8001544:	f003 0307 	and.w	r3, r3, #7
 8001548:	4903      	ldr	r1, [pc, #12]	; (8001558 <HAL_RCC_GetPCLK1Freq+0x24>)
 800154a:	5ccb      	ldrb	r3, [r1, r3]
 800154c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001550:	4618      	mov	r0, r3
 8001552:	bd80      	pop	{r7, pc}
 8001554:	40021000 	.word	0x40021000
 8001558:	08004aa8 	.word	0x08004aa8

0800155c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001560:	f7ff ffde 	bl	8001520 <HAL_RCC_GetHCLKFreq>
 8001564:	4602      	mov	r2, r0
 8001566:	4b05      	ldr	r3, [pc, #20]	; (800157c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	0adb      	lsrs	r3, r3, #11
 800156c:	f003 0307 	and.w	r3, r3, #7
 8001570:	4903      	ldr	r1, [pc, #12]	; (8001580 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001572:	5ccb      	ldrb	r3, [r1, r3]
 8001574:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001578:	4618      	mov	r0, r3
 800157a:	bd80      	pop	{r7, pc}
 800157c:	40021000 	.word	0x40021000
 8001580:	08004aa8 	.word	0x08004aa8

08001584 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	220f      	movs	r2, #15
 8001592:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001594:	4b11      	ldr	r3, [pc, #68]	; (80015dc <HAL_RCC_GetClockConfig+0x58>)
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f003 0203 	and.w	r2, r3, #3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80015a0:	4b0e      	ldr	r3, [pc, #56]	; (80015dc <HAL_RCC_GetClockConfig+0x58>)
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80015ac:	4b0b      	ldr	r3, [pc, #44]	; (80015dc <HAL_RCC_GetClockConfig+0x58>)
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80015b8:	4b08      	ldr	r3, [pc, #32]	; (80015dc <HAL_RCC_GetClockConfig+0x58>)
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	08db      	lsrs	r3, r3, #3
 80015be:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80015c6:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <HAL_RCC_GetClockConfig+0x5c>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 0207 	and.w	r2, r3, #7
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80015d2:	bf00      	nop
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bc80      	pop	{r7}
 80015da:	4770      	bx	lr
 80015dc:	40021000 	.word	0x40021000
 80015e0:	40022000 	.word	0x40022000

080015e4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80015ec:	4b0a      	ldr	r3, [pc, #40]	; (8001618 <RCC_Delay+0x34>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a0a      	ldr	r2, [pc, #40]	; (800161c <RCC_Delay+0x38>)
 80015f2:	fba2 2303 	umull	r2, r3, r2, r3
 80015f6:	0a5b      	lsrs	r3, r3, #9
 80015f8:	687a      	ldr	r2, [r7, #4]
 80015fa:	fb02 f303 	mul.w	r3, r2, r3
 80015fe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001600:	bf00      	nop
  }
  while (Delay --);
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	1e5a      	subs	r2, r3, #1
 8001606:	60fa      	str	r2, [r7, #12]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d1f9      	bne.n	8001600 <RCC_Delay+0x1c>
}
 800160c:	bf00      	nop
 800160e:	bf00      	nop
 8001610:	3714      	adds	r7, #20
 8001612:	46bd      	mov	sp, r7
 8001614:	bc80      	pop	{r7}
 8001616:	4770      	bx	lr
 8001618:	20000000 	.word	0x20000000
 800161c:	10624dd3 	.word	0x10624dd3

08001620 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d101      	bne.n	8001632 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e041      	b.n	80016b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001638:	b2db      	uxtb	r3, r3
 800163a:	2b00      	cmp	r3, #0
 800163c:	d106      	bne.n	800164c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2200      	movs	r2, #0
 8001642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f000 f839 	bl	80016be <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2202      	movs	r2, #2
 8001650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	3304      	adds	r3, #4
 800165c:	4619      	mov	r1, r3
 800165e:	4610      	mov	r0, r2
 8001660:	f000 f9b4 	bl	80019cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2201      	movs	r2, #1
 8001668:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2201      	movs	r2, #1
 8001670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2201      	movs	r2, #1
 8001678:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2201      	movs	r2, #1
 8001680:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2201      	movs	r2, #1
 8001688:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2201      	movs	r2, #1
 8001690:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2201      	movs	r2, #1
 8001698:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2201      	movs	r2, #1
 80016a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2201      	movs	r2, #1
 80016a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2201      	movs	r2, #1
 80016b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80016b4:	2300      	movs	r3, #0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}

080016be <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80016be:	b480      	push	{r7}
 80016c0:	b083      	sub	sp, #12
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80016c6:	bf00      	nop
 80016c8:	370c      	adds	r7, #12
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bc80      	pop	{r7}
 80016ce:	4770      	bx	lr

080016d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b085      	sub	sp, #20
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d001      	beq.n	80016e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e03a      	b.n	800175e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2202      	movs	r2, #2
 80016ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	68da      	ldr	r2, [r3, #12]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f042 0201 	orr.w	r2, r2, #1
 80016fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a18      	ldr	r2, [pc, #96]	; (8001768 <HAL_TIM_Base_Start_IT+0x98>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d00e      	beq.n	8001728 <HAL_TIM_Base_Start_IT+0x58>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001712:	d009      	beq.n	8001728 <HAL_TIM_Base_Start_IT+0x58>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a14      	ldr	r2, [pc, #80]	; (800176c <HAL_TIM_Base_Start_IT+0x9c>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d004      	beq.n	8001728 <HAL_TIM_Base_Start_IT+0x58>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a13      	ldr	r2, [pc, #76]	; (8001770 <HAL_TIM_Base_Start_IT+0xa0>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d111      	bne.n	800174c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	f003 0307 	and.w	r3, r3, #7
 8001732:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	2b06      	cmp	r3, #6
 8001738:	d010      	beq.n	800175c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f042 0201 	orr.w	r2, r2, #1
 8001748:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800174a:	e007      	b.n	800175c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f042 0201 	orr.w	r2, r2, #1
 800175a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800175c:	2300      	movs	r3, #0
}
 800175e:	4618      	mov	r0, r3
 8001760:	3714      	adds	r7, #20
 8001762:	46bd      	mov	sp, r7
 8001764:	bc80      	pop	{r7}
 8001766:	4770      	bx	lr
 8001768:	40012c00 	.word	0x40012c00
 800176c:	40000400 	.word	0x40000400
 8001770:	40000800 	.word	0x40000800

08001774 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	691b      	ldr	r3, [r3, #16]
 8001782:	f003 0302 	and.w	r3, r3, #2
 8001786:	2b02      	cmp	r3, #2
 8001788:	d122      	bne.n	80017d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	f003 0302 	and.w	r3, r3, #2
 8001794:	2b02      	cmp	r3, #2
 8001796:	d11b      	bne.n	80017d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f06f 0202 	mvn.w	r2, #2
 80017a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2201      	movs	r2, #1
 80017a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	699b      	ldr	r3, [r3, #24]
 80017ae:	f003 0303 	and.w	r3, r3, #3
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d003      	beq.n	80017be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f000 f8ed 	bl	8001996 <HAL_TIM_IC_CaptureCallback>
 80017bc:	e005      	b.n	80017ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f000 f8e0 	bl	8001984 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f000 f8ef 	bl	80019a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2200      	movs	r2, #0
 80017ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	691b      	ldr	r3, [r3, #16]
 80017d6:	f003 0304 	and.w	r3, r3, #4
 80017da:	2b04      	cmp	r3, #4
 80017dc:	d122      	bne.n	8001824 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	f003 0304 	and.w	r3, r3, #4
 80017e8:	2b04      	cmp	r3, #4
 80017ea:	d11b      	bne.n	8001824 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f06f 0204 	mvn.w	r2, #4
 80017f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2202      	movs	r2, #2
 80017fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	699b      	ldr	r3, [r3, #24]
 8001802:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001806:	2b00      	cmp	r3, #0
 8001808:	d003      	beq.n	8001812 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f000 f8c3 	bl	8001996 <HAL_TIM_IC_CaptureCallback>
 8001810:	e005      	b.n	800181e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f000 f8b6 	bl	8001984 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f000 f8c5 	bl	80019a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2200      	movs	r2, #0
 8001822:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	691b      	ldr	r3, [r3, #16]
 800182a:	f003 0308 	and.w	r3, r3, #8
 800182e:	2b08      	cmp	r3, #8
 8001830:	d122      	bne.n	8001878 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	f003 0308 	and.w	r3, r3, #8
 800183c:	2b08      	cmp	r3, #8
 800183e:	d11b      	bne.n	8001878 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f06f 0208 	mvn.w	r2, #8
 8001848:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2204      	movs	r2, #4
 800184e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	69db      	ldr	r3, [r3, #28]
 8001856:	f003 0303 	and.w	r3, r3, #3
 800185a:	2b00      	cmp	r3, #0
 800185c:	d003      	beq.n	8001866 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f000 f899 	bl	8001996 <HAL_TIM_IC_CaptureCallback>
 8001864:	e005      	b.n	8001872 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f000 f88c 	bl	8001984 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f000 f89b 	bl	80019a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2200      	movs	r2, #0
 8001876:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	691b      	ldr	r3, [r3, #16]
 800187e:	f003 0310 	and.w	r3, r3, #16
 8001882:	2b10      	cmp	r3, #16
 8001884:	d122      	bne.n	80018cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	f003 0310 	and.w	r3, r3, #16
 8001890:	2b10      	cmp	r3, #16
 8001892:	d11b      	bne.n	80018cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f06f 0210 	mvn.w	r2, #16
 800189c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2208      	movs	r2, #8
 80018a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	69db      	ldr	r3, [r3, #28]
 80018aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d003      	beq.n	80018ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f000 f86f 	bl	8001996 <HAL_TIM_IC_CaptureCallback>
 80018b8:	e005      	b.n	80018c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f000 f862 	bl	8001984 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f000 f871 	bl	80019a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	691b      	ldr	r3, [r3, #16]
 80018d2:	f003 0301 	and.w	r3, r3, #1
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d10e      	bne.n	80018f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	f003 0301 	and.w	r3, r3, #1
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d107      	bne.n	80018f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f06f 0201 	mvn.w	r2, #1
 80018f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f7fe fe12 	bl	800051c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	691b      	ldr	r3, [r3, #16]
 80018fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001902:	2b80      	cmp	r3, #128	; 0x80
 8001904:	d10e      	bne.n	8001924 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001910:	2b80      	cmp	r3, #128	; 0x80
 8001912:	d107      	bne.n	8001924 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800191c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f000 f8bf 	bl	8001aa2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	691b      	ldr	r3, [r3, #16]
 800192a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800192e:	2b40      	cmp	r3, #64	; 0x40
 8001930:	d10e      	bne.n	8001950 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800193c:	2b40      	cmp	r3, #64	; 0x40
 800193e:	d107      	bne.n	8001950 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001948:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f000 f835 	bl	80019ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	691b      	ldr	r3, [r3, #16]
 8001956:	f003 0320 	and.w	r3, r3, #32
 800195a:	2b20      	cmp	r3, #32
 800195c:	d10e      	bne.n	800197c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	f003 0320 	and.w	r3, r3, #32
 8001968:	2b20      	cmp	r3, #32
 800196a:	d107      	bne.n	800197c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f06f 0220 	mvn.w	r2, #32
 8001974:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f000 f88a 	bl	8001a90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800197c:	bf00      	nop
 800197e:	3708      	adds	r7, #8
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}

08001984 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800198c:	bf00      	nop
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	bc80      	pop	{r7}
 8001994:	4770      	bx	lr

08001996 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001996:	b480      	push	{r7}
 8001998:	b083      	sub	sp, #12
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800199e:	bf00      	nop
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bc80      	pop	{r7}
 80019a6:	4770      	bx	lr

080019a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80019b0:	bf00      	nop
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bc80      	pop	{r7}
 80019b8:	4770      	bx	lr

080019ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80019ba:	b480      	push	{r7}
 80019bc:	b083      	sub	sp, #12
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80019c2:	bf00      	nop
 80019c4:	370c      	adds	r7, #12
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bc80      	pop	{r7}
 80019ca:	4770      	bx	lr

080019cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b085      	sub	sp, #20
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	4a29      	ldr	r2, [pc, #164]	; (8001a84 <TIM_Base_SetConfig+0xb8>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d00b      	beq.n	80019fc <TIM_Base_SetConfig+0x30>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019ea:	d007      	beq.n	80019fc <TIM_Base_SetConfig+0x30>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	4a26      	ldr	r2, [pc, #152]	; (8001a88 <TIM_Base_SetConfig+0xbc>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d003      	beq.n	80019fc <TIM_Base_SetConfig+0x30>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	4a25      	ldr	r2, [pc, #148]	; (8001a8c <TIM_Base_SetConfig+0xc0>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d108      	bne.n	8001a0e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	68fa      	ldr	r2, [r7, #12]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a1c      	ldr	r2, [pc, #112]	; (8001a84 <TIM_Base_SetConfig+0xb8>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d00b      	beq.n	8001a2e <TIM_Base_SetConfig+0x62>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a1c:	d007      	beq.n	8001a2e <TIM_Base_SetConfig+0x62>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a19      	ldr	r2, [pc, #100]	; (8001a88 <TIM_Base_SetConfig+0xbc>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d003      	beq.n	8001a2e <TIM_Base_SetConfig+0x62>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a18      	ldr	r2, [pc, #96]	; (8001a8c <TIM_Base_SetConfig+0xc0>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d108      	bne.n	8001a40 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	68db      	ldr	r3, [r3, #12]
 8001a3a:	68fa      	ldr	r2, [r7, #12]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	695b      	ldr	r3, [r3, #20]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	68fa      	ldr	r2, [r7, #12]
 8001a52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	689a      	ldr	r2, [r3, #8]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	4a07      	ldr	r2, [pc, #28]	; (8001a84 <TIM_Base_SetConfig+0xb8>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d103      	bne.n	8001a74 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	691a      	ldr	r2, [r3, #16]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2201      	movs	r2, #1
 8001a78:	615a      	str	r2, [r3, #20]
}
 8001a7a:	bf00      	nop
 8001a7c:	3714      	adds	r7, #20
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bc80      	pop	{r7}
 8001a82:	4770      	bx	lr
 8001a84:	40012c00 	.word	0x40012c00
 8001a88:	40000400 	.word	0x40000400
 8001a8c:	40000800 	.word	0x40000800

08001a90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001a98:	bf00      	nop
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bc80      	pop	{r7}
 8001aa0:	4770      	bx	lr

08001aa2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	b083      	sub	sp, #12
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001aaa:	bf00      	nop
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bc80      	pop	{r7}
 8001ab2:	4770      	bx	lr

08001ab4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d101      	bne.n	8001ac6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e042      	b.n	8001b4c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d106      	bne.n	8001ae0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f7fe fd62 	bl	80005a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2224      	movs	r2, #36	; 0x24
 8001ae4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	68da      	ldr	r2, [r3, #12]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001af6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f000 f91d 	bl	8001d38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	691a      	ldr	r2, [r3, #16]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001b0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	695a      	ldr	r2, [r3, #20]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001b1c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	68da      	ldr	r2, [r3, #12]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001b2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2220      	movs	r2, #32
 8001b38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2220      	movs	r2, #32
 8001b40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2200      	movs	r2, #0
 8001b48:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001b4a:	2300      	movs	r3, #0
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3708      	adds	r7, #8
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b08a      	sub	sp, #40	; 0x28
 8001b58:	af02      	add	r7, sp, #8
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	60b9      	str	r1, [r7, #8]
 8001b5e:	603b      	str	r3, [r7, #0]
 8001b60:	4613      	mov	r3, r2
 8001b62:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001b64:	2300      	movs	r3, #0
 8001b66:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	2b20      	cmp	r3, #32
 8001b72:	d16d      	bne.n	8001c50 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d002      	beq.n	8001b80 <HAL_UART_Transmit+0x2c>
 8001b7a:	88fb      	ldrh	r3, [r7, #6]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d101      	bne.n	8001b84 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e066      	b.n	8001c52 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2200      	movs	r2, #0
 8001b88:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	2221      	movs	r2, #33	; 0x21
 8001b8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001b92:	f7fe fe4f 	bl	8000834 <HAL_GetTick>
 8001b96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	88fa      	ldrh	r2, [r7, #6]
 8001b9c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	88fa      	ldrh	r2, [r7, #6]
 8001ba2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bac:	d108      	bne.n	8001bc0 <HAL_UART_Transmit+0x6c>
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	691b      	ldr	r3, [r3, #16]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d104      	bne.n	8001bc0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	61bb      	str	r3, [r7, #24]
 8001bbe:	e003      	b.n	8001bc8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001bc8:	e02a      	b.n	8001c20 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	9300      	str	r3, [sp, #0]
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	2180      	movs	r1, #128	; 0x80
 8001bd4:	68f8      	ldr	r0, [r7, #12]
 8001bd6:	f000 f840 	bl	8001c5a <UART_WaitOnFlagUntilTimeout>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001be0:	2303      	movs	r3, #3
 8001be2:	e036      	b.n	8001c52 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d10b      	bne.n	8001c02 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	881b      	ldrh	r3, [r3, #0]
 8001bee:	461a      	mov	r2, r3
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001bf8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	3302      	adds	r3, #2
 8001bfe:	61bb      	str	r3, [r7, #24]
 8001c00:	e007      	b.n	8001c12 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	781a      	ldrb	r2, [r3, #0]
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	3301      	adds	r3, #1
 8001c10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	3b01      	subs	r3, #1
 8001c1a:	b29a      	uxth	r2, r3
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d1cf      	bne.n	8001bca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	9300      	str	r3, [sp, #0]
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	2200      	movs	r2, #0
 8001c32:	2140      	movs	r1, #64	; 0x40
 8001c34:	68f8      	ldr	r0, [r7, #12]
 8001c36:	f000 f810 	bl	8001c5a <UART_WaitOnFlagUntilTimeout>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	e006      	b.n	8001c52 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2220      	movs	r2, #32
 8001c48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	e000      	b.n	8001c52 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001c50:	2302      	movs	r3, #2
  }
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3720      	adds	r7, #32
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b090      	sub	sp, #64	; 0x40
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	60f8      	str	r0, [r7, #12]
 8001c62:	60b9      	str	r1, [r7, #8]
 8001c64:	603b      	str	r3, [r7, #0]
 8001c66:	4613      	mov	r3, r2
 8001c68:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c6a:	e050      	b.n	8001d0e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c72:	d04c      	beq.n	8001d0e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001c74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d007      	beq.n	8001c8a <UART_WaitOnFlagUntilTimeout+0x30>
 8001c7a:	f7fe fddb 	bl	8000834 <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d241      	bcs.n	8001d0e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	330c      	adds	r3, #12
 8001c90:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c94:	e853 3f00 	ldrex	r3, [r3]
 8001c98:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	330c      	adds	r3, #12
 8001ca8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001caa:	637a      	str	r2, [r7, #52]	; 0x34
 8001cac:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001cae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001cb0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001cb2:	e841 2300 	strex	r3, r2, [r1]
 8001cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d1e5      	bne.n	8001c8a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	3314      	adds	r3, #20
 8001cc4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	e853 3f00 	ldrex	r3, [r3]
 8001ccc:	613b      	str	r3, [r7, #16]
   return(result);
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	f023 0301 	bic.w	r3, r3, #1
 8001cd4:	63bb      	str	r3, [r7, #56]	; 0x38
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	3314      	adds	r3, #20
 8001cdc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001cde:	623a      	str	r2, [r7, #32]
 8001ce0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ce2:	69f9      	ldr	r1, [r7, #28]
 8001ce4:	6a3a      	ldr	r2, [r7, #32]
 8001ce6:	e841 2300 	strex	r3, r2, [r1]
 8001cea:	61bb      	str	r3, [r7, #24]
   return(result);
 8001cec:	69bb      	ldr	r3, [r7, #24]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d1e5      	bne.n	8001cbe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2220      	movs	r2, #32
 8001cf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	2220      	movs	r2, #32
 8001cfe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2200      	movs	r2, #0
 8001d06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e00f      	b.n	8001d2e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	4013      	ands	r3, r2
 8001d18:	68ba      	ldr	r2, [r7, #8]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	bf0c      	ite	eq
 8001d1e:	2301      	moveq	r3, #1
 8001d20:	2300      	movne	r3, #0
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	461a      	mov	r2, r3
 8001d26:	79fb      	ldrb	r3, [r7, #7]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d09f      	beq.n	8001c6c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3740      	adds	r7, #64	; 0x40
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
	...

08001d38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	691b      	ldr	r3, [r3, #16]
 8001d46:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	68da      	ldr	r2, [r3, #12]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	430a      	orrs	r2, r1
 8001d54:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	689a      	ldr	r2, [r3, #8]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	691b      	ldr	r3, [r3, #16]
 8001d5e:	431a      	orrs	r2, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	695b      	ldr	r3, [r3, #20]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001d72:	f023 030c 	bic.w	r3, r3, #12
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	6812      	ldr	r2, [r2, #0]
 8001d7a:	68b9      	ldr	r1, [r7, #8]
 8001d7c:	430b      	orrs	r3, r1
 8001d7e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	695b      	ldr	r3, [r3, #20]
 8001d86:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	699a      	ldr	r2, [r3, #24]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	430a      	orrs	r2, r1
 8001d94:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a2c      	ldr	r2, [pc, #176]	; (8001e4c <UART_SetConfig+0x114>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d103      	bne.n	8001da8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001da0:	f7ff fbdc 	bl	800155c <HAL_RCC_GetPCLK2Freq>
 8001da4:	60f8      	str	r0, [r7, #12]
 8001da6:	e002      	b.n	8001dae <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001da8:	f7ff fbc4 	bl	8001534 <HAL_RCC_GetPCLK1Freq>
 8001dac:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001dae:	68fa      	ldr	r2, [r7, #12]
 8001db0:	4613      	mov	r3, r2
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	4413      	add	r3, r2
 8001db6:	009a      	lsls	r2, r3, #2
 8001db8:	441a      	add	r2, r3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc4:	4a22      	ldr	r2, [pc, #136]	; (8001e50 <UART_SetConfig+0x118>)
 8001dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dca:	095b      	lsrs	r3, r3, #5
 8001dcc:	0119      	lsls	r1, r3, #4
 8001dce:	68fa      	ldr	r2, [r7, #12]
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	4413      	add	r3, r2
 8001dd6:	009a      	lsls	r2, r3, #2
 8001dd8:	441a      	add	r2, r3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001de4:	4b1a      	ldr	r3, [pc, #104]	; (8001e50 <UART_SetConfig+0x118>)
 8001de6:	fba3 0302 	umull	r0, r3, r3, r2
 8001dea:	095b      	lsrs	r3, r3, #5
 8001dec:	2064      	movs	r0, #100	; 0x64
 8001dee:	fb00 f303 	mul.w	r3, r0, r3
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	011b      	lsls	r3, r3, #4
 8001df6:	3332      	adds	r3, #50	; 0x32
 8001df8:	4a15      	ldr	r2, [pc, #84]	; (8001e50 <UART_SetConfig+0x118>)
 8001dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8001dfe:	095b      	lsrs	r3, r3, #5
 8001e00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e04:	4419      	add	r1, r3
 8001e06:	68fa      	ldr	r2, [r7, #12]
 8001e08:	4613      	mov	r3, r2
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	4413      	add	r3, r2
 8001e0e:	009a      	lsls	r2, r3, #2
 8001e10:	441a      	add	r2, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e1c:	4b0c      	ldr	r3, [pc, #48]	; (8001e50 <UART_SetConfig+0x118>)
 8001e1e:	fba3 0302 	umull	r0, r3, r3, r2
 8001e22:	095b      	lsrs	r3, r3, #5
 8001e24:	2064      	movs	r0, #100	; 0x64
 8001e26:	fb00 f303 	mul.w	r3, r0, r3
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	011b      	lsls	r3, r3, #4
 8001e2e:	3332      	adds	r3, #50	; 0x32
 8001e30:	4a07      	ldr	r2, [pc, #28]	; (8001e50 <UART_SetConfig+0x118>)
 8001e32:	fba2 2303 	umull	r2, r3, r2, r3
 8001e36:	095b      	lsrs	r3, r3, #5
 8001e38:	f003 020f 	and.w	r2, r3, #15
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	440a      	add	r2, r1
 8001e42:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001e44:	bf00      	nop
 8001e46:	3710      	adds	r7, #16
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40013800 	.word	0x40013800
 8001e50:	51eb851f 	.word	0x51eb851f

08001e54 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001e54:	b480      	push	{r7}
 8001e56:	b085      	sub	sp, #20
 8001e58:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001e5a:	f3ef 8305 	mrs	r3, IPSR
 8001e5e:	60bb      	str	r3, [r7, #8]
  return(result);
 8001e60:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d10f      	bne.n	8001e86 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e66:	f3ef 8310 	mrs	r3, PRIMASK
 8001e6a:	607b      	str	r3, [r7, #4]
  return(result);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d109      	bne.n	8001e86 <osKernelInitialize+0x32>
 8001e72:	4b10      	ldr	r3, [pc, #64]	; (8001eb4 <osKernelInitialize+0x60>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d109      	bne.n	8001e8e <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001e7a:	f3ef 8311 	mrs	r3, BASEPRI
 8001e7e:	603b      	str	r3, [r7, #0]
  return(result);
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d003      	beq.n	8001e8e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8001e86:	f06f 0305 	mvn.w	r3, #5
 8001e8a:	60fb      	str	r3, [r7, #12]
 8001e8c:	e00c      	b.n	8001ea8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001e8e:	4b09      	ldr	r3, [pc, #36]	; (8001eb4 <osKernelInitialize+0x60>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d105      	bne.n	8001ea2 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8001e96:	4b07      	ldr	r3, [pc, #28]	; (8001eb4 <osKernelInitialize+0x60>)
 8001e98:	2201      	movs	r2, #1
 8001e9a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	60fb      	str	r3, [r7, #12]
 8001ea0:	e002      	b.n	8001ea8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8001ea2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ea6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3714      	adds	r7, #20
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bc80      	pop	{r7}
 8001eb2:	4770      	bx	lr
 8001eb4:	2000018c 	.word	0x2000018c

08001eb8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001ebe:	f3ef 8305 	mrs	r3, IPSR
 8001ec2:	60bb      	str	r3, [r7, #8]
  return(result);
 8001ec4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d10f      	bne.n	8001eea <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001eca:	f3ef 8310 	mrs	r3, PRIMASK
 8001ece:	607b      	str	r3, [r7, #4]
  return(result);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d109      	bne.n	8001eea <osKernelStart+0x32>
 8001ed6:	4b11      	ldr	r3, [pc, #68]	; (8001f1c <osKernelStart+0x64>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d109      	bne.n	8001ef2 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001ede:	f3ef 8311 	mrs	r3, BASEPRI
 8001ee2:	603b      	str	r3, [r7, #0]
  return(result);
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d003      	beq.n	8001ef2 <osKernelStart+0x3a>
    stat = osErrorISR;
 8001eea:	f06f 0305 	mvn.w	r3, #5
 8001eee:	60fb      	str	r3, [r7, #12]
 8001ef0:	e00e      	b.n	8001f10 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8001ef2:	4b0a      	ldr	r3, [pc, #40]	; (8001f1c <osKernelStart+0x64>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d107      	bne.n	8001f0a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8001efa:	4b08      	ldr	r3, [pc, #32]	; (8001f1c <osKernelStart+0x64>)
 8001efc:	2202      	movs	r2, #2
 8001efe:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8001f00:	f001 f890 	bl	8003024 <vTaskStartScheduler>
      stat = osOK;
 8001f04:	2300      	movs	r3, #0
 8001f06:	60fb      	str	r3, [r7, #12]
 8001f08:	e002      	b.n	8001f10 <osKernelStart+0x58>
    } else {
      stat = osError;
 8001f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f0e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001f10:	68fb      	ldr	r3, [r7, #12]
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3710      	adds	r7, #16
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	2000018c 	.word	0x2000018c

08001f20 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b092      	sub	sp, #72	; 0x48
 8001f24:	af04      	add	r7, sp, #16
 8001f26:	60f8      	str	r0, [r7, #12]
 8001f28:	60b9      	str	r1, [r7, #8]
 8001f2a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001f30:	f3ef 8305 	mrs	r3, IPSR
 8001f34:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8001f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	f040 8094 	bne.w	8002066 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f3e:	f3ef 8310 	mrs	r3, PRIMASK
 8001f42:	623b      	str	r3, [r7, #32]
  return(result);
 8001f44:	6a3b      	ldr	r3, [r7, #32]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	f040 808d 	bne.w	8002066 <osThreadNew+0x146>
 8001f4c:	4b48      	ldr	r3, [pc, #288]	; (8002070 <osThreadNew+0x150>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d106      	bne.n	8001f62 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001f54:	f3ef 8311 	mrs	r3, BASEPRI
 8001f58:	61fb      	str	r3, [r7, #28]
  return(result);
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	f040 8082 	bne.w	8002066 <osThreadNew+0x146>
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d07e      	beq.n	8002066 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8001f68:	2380      	movs	r3, #128	; 0x80
 8001f6a:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8001f6c:	2318      	movs	r3, #24
 8001f6e:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8001f70:	2300      	movs	r3, #0
 8001f72:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8001f74:	f107 031b 	add.w	r3, r7, #27
 8001f78:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8001f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f7e:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d045      	beq.n	8002012 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d002      	beq.n	8001f94 <osThreadNew+0x74>
        name = attr->name;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	699b      	ldr	r3, [r3, #24]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d002      	beq.n	8001fa2 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	699b      	ldr	r3, [r3, #24]
 8001fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d008      	beq.n	8001fba <osThreadNew+0x9a>
 8001fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001faa:	2b38      	cmp	r3, #56	; 0x38
 8001fac:	d805      	bhi.n	8001fba <osThreadNew+0x9a>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <osThreadNew+0x9e>
        return (NULL);
 8001fba:	2300      	movs	r3, #0
 8001fbc:	e054      	b.n	8002068 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	695b      	ldr	r3, [r3, #20]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d003      	beq.n	8001fce <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	695b      	ldr	r3, [r3, #20]
 8001fca:	089b      	lsrs	r3, r3, #2
 8001fcc:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d00e      	beq.n	8001ff4 <osThreadNew+0xd4>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	2ba7      	cmp	r3, #167	; 0xa7
 8001fdc:	d90a      	bls.n	8001ff4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d006      	beq.n	8001ff4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	695b      	ldr	r3, [r3, #20]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d002      	beq.n	8001ff4 <osThreadNew+0xd4>
        mem = 1;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ff2:	e010      	b.n	8002016 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d10c      	bne.n	8002016 <osThreadNew+0xf6>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d108      	bne.n	8002016 <osThreadNew+0xf6>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	691b      	ldr	r3, [r3, #16]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d104      	bne.n	8002016 <osThreadNew+0xf6>
          mem = 0;
 800200c:	2300      	movs	r3, #0
 800200e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002010:	e001      	b.n	8002016 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8002012:	2300      	movs	r3, #0
 8002014:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8002016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002018:	2b01      	cmp	r3, #1
 800201a:	d110      	bne.n	800203e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002024:	9202      	str	r2, [sp, #8]
 8002026:	9301      	str	r3, [sp, #4]
 8002028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800202a:	9300      	str	r3, [sp, #0]
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002030:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002032:	68f8      	ldr	r0, [r7, #12]
 8002034:	f000 fe12 	bl	8002c5c <xTaskCreateStatic>
 8002038:	4603      	mov	r3, r0
 800203a:	617b      	str	r3, [r7, #20]
 800203c:	e013      	b.n	8002066 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800203e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002040:	2b00      	cmp	r3, #0
 8002042:	d110      	bne.n	8002066 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002046:	b29a      	uxth	r2, r3
 8002048:	f107 0314 	add.w	r3, r7, #20
 800204c:	9301      	str	r3, [sp, #4]
 800204e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002050:	9300      	str	r3, [sp, #0]
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002056:	68f8      	ldr	r0, [r7, #12]
 8002058:	f000 fe5c 	bl	8002d14 <xTaskCreate>
 800205c:	4603      	mov	r3, r0
 800205e:	2b01      	cmp	r3, #1
 8002060:	d001      	beq.n	8002066 <osThreadNew+0x146>
          hTask = NULL;
 8002062:	2300      	movs	r3, #0
 8002064:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002066:	697b      	ldr	r3, [r7, #20]
}
 8002068:	4618      	mov	r0, r3
 800206a:	3738      	adds	r7, #56	; 0x38
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	2000018c 	.word	0x2000018c

08002074 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8002074:	b580      	push	{r7, lr}
 8002076:	b086      	sub	sp, #24
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800207c:	f3ef 8305 	mrs	r3, IPSR
 8002080:	613b      	str	r3, [r7, #16]
  return(result);
 8002082:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002084:	2b00      	cmp	r3, #0
 8002086:	d10f      	bne.n	80020a8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002088:	f3ef 8310 	mrs	r3, PRIMASK
 800208c:	60fb      	str	r3, [r7, #12]
  return(result);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d109      	bne.n	80020a8 <osDelay+0x34>
 8002094:	4b0d      	ldr	r3, [pc, #52]	; (80020cc <osDelay+0x58>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2b02      	cmp	r3, #2
 800209a:	d109      	bne.n	80020b0 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800209c:	f3ef 8311 	mrs	r3, BASEPRI
 80020a0:	60bb      	str	r3, [r7, #8]
  return(result);
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d003      	beq.n	80020b0 <osDelay+0x3c>
    stat = osErrorISR;
 80020a8:	f06f 0305 	mvn.w	r3, #5
 80020ac:	617b      	str	r3, [r7, #20]
 80020ae:	e007      	b.n	80020c0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80020b0:	2300      	movs	r3, #0
 80020b2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d002      	beq.n	80020c0 <osDelay+0x4c>
      vTaskDelay(ticks);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f000 ff7e 	bl	8002fbc <vTaskDelay>
    }
  }

  return (stat);
 80020c0:	697b      	ldr	r3, [r7, #20]
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3718      	adds	r7, #24
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	2000018c 	.word	0x2000018c

080020d0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80020d0:	b480      	push	{r7}
 80020d2:	b085      	sub	sp, #20
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	60b9      	str	r1, [r7, #8]
 80020da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	4a06      	ldr	r2, [pc, #24]	; (80020f8 <vApplicationGetIdleTaskMemory+0x28>)
 80020e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	4a05      	ldr	r2, [pc, #20]	; (80020fc <vApplicationGetIdleTaskMemory+0x2c>)
 80020e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2280      	movs	r2, #128	; 0x80
 80020ec:	601a      	str	r2, [r3, #0]
}
 80020ee:	bf00      	nop
 80020f0:	3714      	adds	r7, #20
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bc80      	pop	{r7}
 80020f6:	4770      	bx	lr
 80020f8:	20000190 	.word	0x20000190
 80020fc:	20000238 	.word	0x20000238

08002100 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002100:	b480      	push	{r7}
 8002102:	b085      	sub	sp, #20
 8002104:	af00      	add	r7, sp, #0
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	60b9      	str	r1, [r7, #8]
 800210a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	4a07      	ldr	r2, [pc, #28]	; (800212c <vApplicationGetTimerTaskMemory+0x2c>)
 8002110:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	4a06      	ldr	r2, [pc, #24]	; (8002130 <vApplicationGetTimerTaskMemory+0x30>)
 8002116:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800211e:	601a      	str	r2, [r3, #0]
}
 8002120:	bf00      	nop
 8002122:	3714      	adds	r7, #20
 8002124:	46bd      	mov	sp, r7
 8002126:	bc80      	pop	{r7}
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	20000438 	.word	0x20000438
 8002130:	200004e0 	.word	0x200004e0

08002134 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f103 0208 	add.w	r2, r3, #8
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f04f 32ff 	mov.w	r2, #4294967295
 800214c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f103 0208 	add.w	r2, r3, #8
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f103 0208 	add.w	r2, r3, #8
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002168:	bf00      	nop
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	bc80      	pop	{r7}
 8002170:	4770      	bx	lr

08002172 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002172:	b480      	push	{r7}
 8002174:	b083      	sub	sp, #12
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002180:	bf00      	nop
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	bc80      	pop	{r7}
 8002188:	4770      	bx	lr

0800218a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800218a:	b480      	push	{r7}
 800218c:	b085      	sub	sp, #20
 800218e:	af00      	add	r7, sp, #0
 8002190:	6078      	str	r0, [r7, #4]
 8002192:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	68fa      	ldr	r2, [r7, #12]
 800219e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	689a      	ldr	r2, [r3, #8]
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	683a      	ldr	r2, [r7, #0]
 80021ae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	683a      	ldr	r2, [r7, #0]
 80021b4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	1c5a      	adds	r2, r3, #1
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	601a      	str	r2, [r3, #0]
}
 80021c6:	bf00      	nop
 80021c8:	3714      	adds	r7, #20
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bc80      	pop	{r7}
 80021ce:	4770      	bx	lr

080021d0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021e6:	d103      	bne.n	80021f0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	691b      	ldr	r3, [r3, #16]
 80021ec:	60fb      	str	r3, [r7, #12]
 80021ee:	e00c      	b.n	800220a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	3308      	adds	r3, #8
 80021f4:	60fb      	str	r3, [r7, #12]
 80021f6:	e002      	b.n	80021fe <vListInsert+0x2e>
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	60fb      	str	r3, [r7, #12]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	68ba      	ldr	r2, [r7, #8]
 8002206:	429a      	cmp	r2, r3
 8002208:	d2f6      	bcs.n	80021f8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	685a      	ldr	r2, [r3, #4]
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	683a      	ldr	r2, [r7, #0]
 8002218:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	68fa      	ldr	r2, [r7, #12]
 800221e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	683a      	ldr	r2, [r7, #0]
 8002224:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	1c5a      	adds	r2, r3, #1
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	601a      	str	r2, [r3, #0]
}
 8002236:	bf00      	nop
 8002238:	3714      	adds	r7, #20
 800223a:	46bd      	mov	sp, r7
 800223c:	bc80      	pop	{r7}
 800223e:	4770      	bx	lr

08002240 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002240:	b480      	push	{r7}
 8002242:	b085      	sub	sp, #20
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	691b      	ldr	r3, [r3, #16]
 800224c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	6892      	ldr	r2, [r2, #8]
 8002256:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	6852      	ldr	r2, [r2, #4]
 8002260:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	429a      	cmp	r2, r3
 800226a:	d103      	bne.n	8002274 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689a      	ldr	r2, [r3, #8]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	1e5a      	subs	r2, r3, #1
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
}
 8002288:	4618      	mov	r0, r3
 800228a:	3714      	adds	r7, #20
 800228c:	46bd      	mov	sp, r7
 800228e:	bc80      	pop	{r7}
 8002290:	4770      	bx	lr
	...

08002294 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d10a      	bne.n	80022be <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80022a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022ac:	f383 8811 	msr	BASEPRI, r3
 80022b0:	f3bf 8f6f 	isb	sy
 80022b4:	f3bf 8f4f 	dsb	sy
 80022b8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80022ba:	bf00      	nop
 80022bc:	e7fe      	b.n	80022bc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80022be:	f001 fff5 	bl	80042ac <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ca:	68f9      	ldr	r1, [r7, #12]
 80022cc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80022ce:	fb01 f303 	mul.w	r3, r1, r3
 80022d2:	441a      	add	r2, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2200      	movs	r2, #0
 80022dc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ee:	3b01      	subs	r3, #1
 80022f0:	68f9      	ldr	r1, [r7, #12]
 80022f2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80022f4:	fb01 f303 	mul.w	r3, r1, r3
 80022f8:	441a      	add	r2, r3
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	22ff      	movs	r2, #255	; 0xff
 8002302:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	22ff      	movs	r2, #255	; 0xff
 800230a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d114      	bne.n	800233e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	691b      	ldr	r3, [r3, #16]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d01a      	beq.n	8002352 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	3310      	adds	r3, #16
 8002320:	4618      	mov	r0, r3
 8002322:	f001 f91b 	bl	800355c <xTaskRemoveFromEventList>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d012      	beq.n	8002352 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800232c:	4b0c      	ldr	r3, [pc, #48]	; (8002360 <xQueueGenericReset+0xcc>)
 800232e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002332:	601a      	str	r2, [r3, #0]
 8002334:	f3bf 8f4f 	dsb	sy
 8002338:	f3bf 8f6f 	isb	sy
 800233c:	e009      	b.n	8002352 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	3310      	adds	r3, #16
 8002342:	4618      	mov	r0, r3
 8002344:	f7ff fef6 	bl	8002134 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	3324      	adds	r3, #36	; 0x24
 800234c:	4618      	mov	r0, r3
 800234e:	f7ff fef1 	bl	8002134 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002352:	f001 ffdb 	bl	800430c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002356:	2301      	movs	r3, #1
}
 8002358:	4618      	mov	r0, r3
 800235a:	3710      	adds	r7, #16
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	e000ed04 	.word	0xe000ed04

08002364 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002364:	b580      	push	{r7, lr}
 8002366:	b08e      	sub	sp, #56	; 0x38
 8002368:	af02      	add	r7, sp, #8
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	607a      	str	r2, [r7, #4]
 8002370:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d10a      	bne.n	800238e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800237c:	f383 8811 	msr	BASEPRI, r3
 8002380:	f3bf 8f6f 	isb	sy
 8002384:	f3bf 8f4f 	dsb	sy
 8002388:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800238a:	bf00      	nop
 800238c:	e7fe      	b.n	800238c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d10a      	bne.n	80023aa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002398:	f383 8811 	msr	BASEPRI, r3
 800239c:	f3bf 8f6f 	isb	sy
 80023a0:	f3bf 8f4f 	dsb	sy
 80023a4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80023a6:	bf00      	nop
 80023a8:	e7fe      	b.n	80023a8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d002      	beq.n	80023b6 <xQueueGenericCreateStatic+0x52>
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <xQueueGenericCreateStatic+0x56>
 80023b6:	2301      	movs	r3, #1
 80023b8:	e000      	b.n	80023bc <xQueueGenericCreateStatic+0x58>
 80023ba:	2300      	movs	r3, #0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d10a      	bne.n	80023d6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80023c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023c4:	f383 8811 	msr	BASEPRI, r3
 80023c8:	f3bf 8f6f 	isb	sy
 80023cc:	f3bf 8f4f 	dsb	sy
 80023d0:	623b      	str	r3, [r7, #32]
}
 80023d2:	bf00      	nop
 80023d4:	e7fe      	b.n	80023d4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d102      	bne.n	80023e2 <xQueueGenericCreateStatic+0x7e>
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d101      	bne.n	80023e6 <xQueueGenericCreateStatic+0x82>
 80023e2:	2301      	movs	r3, #1
 80023e4:	e000      	b.n	80023e8 <xQueueGenericCreateStatic+0x84>
 80023e6:	2300      	movs	r3, #0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d10a      	bne.n	8002402 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80023ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023f0:	f383 8811 	msr	BASEPRI, r3
 80023f4:	f3bf 8f6f 	isb	sy
 80023f8:	f3bf 8f4f 	dsb	sy
 80023fc:	61fb      	str	r3, [r7, #28]
}
 80023fe:	bf00      	nop
 8002400:	e7fe      	b.n	8002400 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002402:	2350      	movs	r3, #80	; 0x50
 8002404:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	2b50      	cmp	r3, #80	; 0x50
 800240a:	d00a      	beq.n	8002422 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800240c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002410:	f383 8811 	msr	BASEPRI, r3
 8002414:	f3bf 8f6f 	isb	sy
 8002418:	f3bf 8f4f 	dsb	sy
 800241c:	61bb      	str	r3, [r7, #24]
}
 800241e:	bf00      	nop
 8002420:	e7fe      	b.n	8002420 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002428:	2b00      	cmp	r3, #0
 800242a:	d00d      	beq.n	8002448 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800242c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800242e:	2201      	movs	r2, #1
 8002430:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002434:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800243a:	9300      	str	r3, [sp, #0]
 800243c:	4613      	mov	r3, r2
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	68b9      	ldr	r1, [r7, #8]
 8002442:	68f8      	ldr	r0, [r7, #12]
 8002444:	f000 f805 	bl	8002452 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800244a:	4618      	mov	r0, r3
 800244c:	3730      	adds	r7, #48	; 0x30
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002452:	b580      	push	{r7, lr}
 8002454:	b084      	sub	sp, #16
 8002456:	af00      	add	r7, sp, #0
 8002458:	60f8      	str	r0, [r7, #12]
 800245a:	60b9      	str	r1, [r7, #8]
 800245c:	607a      	str	r2, [r7, #4]
 800245e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d103      	bne.n	800246e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	601a      	str	r2, [r3, #0]
 800246c:	e002      	b.n	8002474 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800246e:	69bb      	ldr	r3, [r7, #24]
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002474:	69bb      	ldr	r3, [r7, #24]
 8002476:	68fa      	ldr	r2, [r7, #12]
 8002478:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	68ba      	ldr	r2, [r7, #8]
 800247e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002480:	2101      	movs	r1, #1
 8002482:	69b8      	ldr	r0, [r7, #24]
 8002484:	f7ff ff06 	bl	8002294 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002488:	69bb      	ldr	r3, [r7, #24]
 800248a:	78fa      	ldrb	r2, [r7, #3]
 800248c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002490:	bf00      	nop
 8002492:	3710      	adds	r7, #16
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}

08002498 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b08e      	sub	sp, #56	; 0x38
 800249c:	af00      	add	r7, sp, #0
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	607a      	str	r2, [r7, #4]
 80024a4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80024a6:	2300      	movs	r3, #0
 80024a8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80024ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d10a      	bne.n	80024ca <xQueueGenericSend+0x32>
	__asm volatile
 80024b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024b8:	f383 8811 	msr	BASEPRI, r3
 80024bc:	f3bf 8f6f 	isb	sy
 80024c0:	f3bf 8f4f 	dsb	sy
 80024c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80024c6:	bf00      	nop
 80024c8:	e7fe      	b.n	80024c8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d103      	bne.n	80024d8 <xQueueGenericSend+0x40>
 80024d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d101      	bne.n	80024dc <xQueueGenericSend+0x44>
 80024d8:	2301      	movs	r3, #1
 80024da:	e000      	b.n	80024de <xQueueGenericSend+0x46>
 80024dc:	2300      	movs	r3, #0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d10a      	bne.n	80024f8 <xQueueGenericSend+0x60>
	__asm volatile
 80024e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024e6:	f383 8811 	msr	BASEPRI, r3
 80024ea:	f3bf 8f6f 	isb	sy
 80024ee:	f3bf 8f4f 	dsb	sy
 80024f2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80024f4:	bf00      	nop
 80024f6:	e7fe      	b.n	80024f6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d103      	bne.n	8002506 <xQueueGenericSend+0x6e>
 80024fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002502:	2b01      	cmp	r3, #1
 8002504:	d101      	bne.n	800250a <xQueueGenericSend+0x72>
 8002506:	2301      	movs	r3, #1
 8002508:	e000      	b.n	800250c <xQueueGenericSend+0x74>
 800250a:	2300      	movs	r3, #0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d10a      	bne.n	8002526 <xQueueGenericSend+0x8e>
	__asm volatile
 8002510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002514:	f383 8811 	msr	BASEPRI, r3
 8002518:	f3bf 8f6f 	isb	sy
 800251c:	f3bf 8f4f 	dsb	sy
 8002520:	623b      	str	r3, [r7, #32]
}
 8002522:	bf00      	nop
 8002524:	e7fe      	b.n	8002524 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002526:	f001 f9df 	bl	80038e8 <xTaskGetSchedulerState>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d102      	bne.n	8002536 <xQueueGenericSend+0x9e>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d101      	bne.n	800253a <xQueueGenericSend+0xa2>
 8002536:	2301      	movs	r3, #1
 8002538:	e000      	b.n	800253c <xQueueGenericSend+0xa4>
 800253a:	2300      	movs	r3, #0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d10a      	bne.n	8002556 <xQueueGenericSend+0xbe>
	__asm volatile
 8002540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002544:	f383 8811 	msr	BASEPRI, r3
 8002548:	f3bf 8f6f 	isb	sy
 800254c:	f3bf 8f4f 	dsb	sy
 8002550:	61fb      	str	r3, [r7, #28]
}
 8002552:	bf00      	nop
 8002554:	e7fe      	b.n	8002554 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002556:	f001 fea9 	bl	80042ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800255a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800255c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800255e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002562:	429a      	cmp	r2, r3
 8002564:	d302      	bcc.n	800256c <xQueueGenericSend+0xd4>
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	2b02      	cmp	r3, #2
 800256a:	d129      	bne.n	80025c0 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800256c:	683a      	ldr	r2, [r7, #0]
 800256e:	68b9      	ldr	r1, [r7, #8]
 8002570:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002572:	f000 fa07 	bl	8002984 <prvCopyDataToQueue>
 8002576:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800257a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257c:	2b00      	cmp	r3, #0
 800257e:	d010      	beq.n	80025a2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002582:	3324      	adds	r3, #36	; 0x24
 8002584:	4618      	mov	r0, r3
 8002586:	f000 ffe9 	bl	800355c <xTaskRemoveFromEventList>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d013      	beq.n	80025b8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002590:	4b3f      	ldr	r3, [pc, #252]	; (8002690 <xQueueGenericSend+0x1f8>)
 8002592:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002596:	601a      	str	r2, [r3, #0]
 8002598:	f3bf 8f4f 	dsb	sy
 800259c:	f3bf 8f6f 	isb	sy
 80025a0:	e00a      	b.n	80025b8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80025a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d007      	beq.n	80025b8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80025a8:	4b39      	ldr	r3, [pc, #228]	; (8002690 <xQueueGenericSend+0x1f8>)
 80025aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025ae:	601a      	str	r2, [r3, #0]
 80025b0:	f3bf 8f4f 	dsb	sy
 80025b4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80025b8:	f001 fea8 	bl	800430c <vPortExitCritical>
				return pdPASS;
 80025bc:	2301      	movs	r3, #1
 80025be:	e063      	b.n	8002688 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d103      	bne.n	80025ce <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80025c6:	f001 fea1 	bl	800430c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80025ca:	2300      	movs	r3, #0
 80025cc:	e05c      	b.n	8002688 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80025ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d106      	bne.n	80025e2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80025d4:	f107 0314 	add.w	r3, r7, #20
 80025d8:	4618      	mov	r0, r3
 80025da:	f001 f823 	bl	8003624 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80025de:	2301      	movs	r3, #1
 80025e0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80025e2:	f001 fe93 	bl	800430c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80025e6:	f000 fd8d 	bl	8003104 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80025ea:	f001 fe5f 	bl	80042ac <vPortEnterCritical>
 80025ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80025f4:	b25b      	sxtb	r3, r3
 80025f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025fa:	d103      	bne.n	8002604 <xQueueGenericSend+0x16c>
 80025fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025fe:	2200      	movs	r2, #0
 8002600:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002606:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800260a:	b25b      	sxtb	r3, r3
 800260c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002610:	d103      	bne.n	800261a <xQueueGenericSend+0x182>
 8002612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002614:	2200      	movs	r2, #0
 8002616:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800261a:	f001 fe77 	bl	800430c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800261e:	1d3a      	adds	r2, r7, #4
 8002620:	f107 0314 	add.w	r3, r7, #20
 8002624:	4611      	mov	r1, r2
 8002626:	4618      	mov	r0, r3
 8002628:	f001 f812 	bl	8003650 <xTaskCheckForTimeOut>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d124      	bne.n	800267c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002632:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002634:	f000 fa9e 	bl	8002b74 <prvIsQueueFull>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d018      	beq.n	8002670 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800263e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002640:	3310      	adds	r3, #16
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	4611      	mov	r1, r2
 8002646:	4618      	mov	r0, r3
 8002648:	f000 ff38 	bl	80034bc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800264c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800264e:	f000 fa29 	bl	8002aa4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002652:	f000 fd65 	bl	8003120 <xTaskResumeAll>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	f47f af7c 	bne.w	8002556 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800265e:	4b0c      	ldr	r3, [pc, #48]	; (8002690 <xQueueGenericSend+0x1f8>)
 8002660:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002664:	601a      	str	r2, [r3, #0]
 8002666:	f3bf 8f4f 	dsb	sy
 800266a:	f3bf 8f6f 	isb	sy
 800266e:	e772      	b.n	8002556 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002670:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002672:	f000 fa17 	bl	8002aa4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002676:	f000 fd53 	bl	8003120 <xTaskResumeAll>
 800267a:	e76c      	b.n	8002556 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800267c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800267e:	f000 fa11 	bl	8002aa4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002682:	f000 fd4d 	bl	8003120 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002686:	2300      	movs	r3, #0
		}
	}
}
 8002688:	4618      	mov	r0, r3
 800268a:	3738      	adds	r7, #56	; 0x38
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	e000ed04 	.word	0xe000ed04

08002694 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b08e      	sub	sp, #56	; 0x38
 8002698:	af00      	add	r7, sp, #0
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	60b9      	str	r1, [r7, #8]
 800269e:	607a      	str	r2, [r7, #4]
 80026a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80026a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d10a      	bne.n	80026c2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80026ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026b0:	f383 8811 	msr	BASEPRI, r3
 80026b4:	f3bf 8f6f 	isb	sy
 80026b8:	f3bf 8f4f 	dsb	sy
 80026bc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80026be:	bf00      	nop
 80026c0:	e7fe      	b.n	80026c0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d103      	bne.n	80026d0 <xQueueGenericSendFromISR+0x3c>
 80026c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d101      	bne.n	80026d4 <xQueueGenericSendFromISR+0x40>
 80026d0:	2301      	movs	r3, #1
 80026d2:	e000      	b.n	80026d6 <xQueueGenericSendFromISR+0x42>
 80026d4:	2300      	movs	r3, #0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d10a      	bne.n	80026f0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80026da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026de:	f383 8811 	msr	BASEPRI, r3
 80026e2:	f3bf 8f6f 	isb	sy
 80026e6:	f3bf 8f4f 	dsb	sy
 80026ea:	623b      	str	r3, [r7, #32]
}
 80026ec:	bf00      	nop
 80026ee:	e7fe      	b.n	80026ee <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d103      	bne.n	80026fe <xQueueGenericSendFromISR+0x6a>
 80026f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d101      	bne.n	8002702 <xQueueGenericSendFromISR+0x6e>
 80026fe:	2301      	movs	r3, #1
 8002700:	e000      	b.n	8002704 <xQueueGenericSendFromISR+0x70>
 8002702:	2300      	movs	r3, #0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d10a      	bne.n	800271e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800270c:	f383 8811 	msr	BASEPRI, r3
 8002710:	f3bf 8f6f 	isb	sy
 8002714:	f3bf 8f4f 	dsb	sy
 8002718:	61fb      	str	r3, [r7, #28]
}
 800271a:	bf00      	nop
 800271c:	e7fe      	b.n	800271c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800271e:	f001 fe87 	bl	8004430 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002722:	f3ef 8211 	mrs	r2, BASEPRI
 8002726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800272a:	f383 8811 	msr	BASEPRI, r3
 800272e:	f3bf 8f6f 	isb	sy
 8002732:	f3bf 8f4f 	dsb	sy
 8002736:	61ba      	str	r2, [r7, #24]
 8002738:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800273a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800273c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800273e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002740:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002746:	429a      	cmp	r2, r3
 8002748:	d302      	bcc.n	8002750 <xQueueGenericSendFromISR+0xbc>
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	2b02      	cmp	r3, #2
 800274e:	d12c      	bne.n	80027aa <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002752:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002756:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800275a:	683a      	ldr	r2, [r7, #0]
 800275c:	68b9      	ldr	r1, [r7, #8]
 800275e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002760:	f000 f910 	bl	8002984 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002764:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800276c:	d112      	bne.n	8002794 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800276e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002772:	2b00      	cmp	r3, #0
 8002774:	d016      	beq.n	80027a4 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002778:	3324      	adds	r3, #36	; 0x24
 800277a:	4618      	mov	r0, r3
 800277c:	f000 feee 	bl	800355c <xTaskRemoveFromEventList>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d00e      	beq.n	80027a4 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d00b      	beq.n	80027a4 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2201      	movs	r2, #1
 8002790:	601a      	str	r2, [r3, #0]
 8002792:	e007      	b.n	80027a4 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002794:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002798:	3301      	adds	r3, #1
 800279a:	b2db      	uxtb	r3, r3
 800279c:	b25a      	sxtb	r2, r3
 800279e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80027a4:	2301      	movs	r3, #1
 80027a6:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80027a8:	e001      	b.n	80027ae <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80027aa:	2300      	movs	r3, #0
 80027ac:	637b      	str	r3, [r7, #52]	; 0x34
 80027ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027b0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80027b8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80027ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3738      	adds	r7, #56	; 0x38
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b08c      	sub	sp, #48	; 0x30
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80027d0:	2300      	movs	r3, #0
 80027d2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80027d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d10a      	bne.n	80027f4 <xQueueReceive+0x30>
	__asm volatile
 80027de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027e2:	f383 8811 	msr	BASEPRI, r3
 80027e6:	f3bf 8f6f 	isb	sy
 80027ea:	f3bf 8f4f 	dsb	sy
 80027ee:	623b      	str	r3, [r7, #32]
}
 80027f0:	bf00      	nop
 80027f2:	e7fe      	b.n	80027f2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d103      	bne.n	8002802 <xQueueReceive+0x3e>
 80027fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d101      	bne.n	8002806 <xQueueReceive+0x42>
 8002802:	2301      	movs	r3, #1
 8002804:	e000      	b.n	8002808 <xQueueReceive+0x44>
 8002806:	2300      	movs	r3, #0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d10a      	bne.n	8002822 <xQueueReceive+0x5e>
	__asm volatile
 800280c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002810:	f383 8811 	msr	BASEPRI, r3
 8002814:	f3bf 8f6f 	isb	sy
 8002818:	f3bf 8f4f 	dsb	sy
 800281c:	61fb      	str	r3, [r7, #28]
}
 800281e:	bf00      	nop
 8002820:	e7fe      	b.n	8002820 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002822:	f001 f861 	bl	80038e8 <xTaskGetSchedulerState>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d102      	bne.n	8002832 <xQueueReceive+0x6e>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d101      	bne.n	8002836 <xQueueReceive+0x72>
 8002832:	2301      	movs	r3, #1
 8002834:	e000      	b.n	8002838 <xQueueReceive+0x74>
 8002836:	2300      	movs	r3, #0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d10a      	bne.n	8002852 <xQueueReceive+0x8e>
	__asm volatile
 800283c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002840:	f383 8811 	msr	BASEPRI, r3
 8002844:	f3bf 8f6f 	isb	sy
 8002848:	f3bf 8f4f 	dsb	sy
 800284c:	61bb      	str	r3, [r7, #24]
}
 800284e:	bf00      	nop
 8002850:	e7fe      	b.n	8002850 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002852:	f001 fd2b 	bl	80042ac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800285a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800285c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285e:	2b00      	cmp	r3, #0
 8002860:	d01f      	beq.n	80028a2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002862:	68b9      	ldr	r1, [r7, #8]
 8002864:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002866:	f000 f8f7 	bl	8002a58 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800286a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286c:	1e5a      	subs	r2, r3, #1
 800286e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002870:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d00f      	beq.n	800289a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800287a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800287c:	3310      	adds	r3, #16
 800287e:	4618      	mov	r0, r3
 8002880:	f000 fe6c 	bl	800355c <xTaskRemoveFromEventList>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d007      	beq.n	800289a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800288a:	4b3d      	ldr	r3, [pc, #244]	; (8002980 <xQueueReceive+0x1bc>)
 800288c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002890:	601a      	str	r2, [r3, #0]
 8002892:	f3bf 8f4f 	dsb	sy
 8002896:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800289a:	f001 fd37 	bl	800430c <vPortExitCritical>
				return pdPASS;
 800289e:	2301      	movs	r3, #1
 80028a0:	e069      	b.n	8002976 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d103      	bne.n	80028b0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80028a8:	f001 fd30 	bl	800430c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80028ac:	2300      	movs	r3, #0
 80028ae:	e062      	b.n	8002976 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80028b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d106      	bne.n	80028c4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80028b6:	f107 0310 	add.w	r3, r7, #16
 80028ba:	4618      	mov	r0, r3
 80028bc:	f000 feb2 	bl	8003624 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80028c0:	2301      	movs	r3, #1
 80028c2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80028c4:	f001 fd22 	bl	800430c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80028c8:	f000 fc1c 	bl	8003104 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80028cc:	f001 fcee 	bl	80042ac <vPortEnterCritical>
 80028d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80028d6:	b25b      	sxtb	r3, r3
 80028d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028dc:	d103      	bne.n	80028e6 <xQueueReceive+0x122>
 80028de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028ec:	b25b      	sxtb	r3, r3
 80028ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028f2:	d103      	bne.n	80028fc <xQueueReceive+0x138>
 80028f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f6:	2200      	movs	r2, #0
 80028f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80028fc:	f001 fd06 	bl	800430c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002900:	1d3a      	adds	r2, r7, #4
 8002902:	f107 0310 	add.w	r3, r7, #16
 8002906:	4611      	mov	r1, r2
 8002908:	4618      	mov	r0, r3
 800290a:	f000 fea1 	bl	8003650 <xTaskCheckForTimeOut>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d123      	bne.n	800295c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002914:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002916:	f000 f917 	bl	8002b48 <prvIsQueueEmpty>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d017      	beq.n	8002950 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002922:	3324      	adds	r3, #36	; 0x24
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	4611      	mov	r1, r2
 8002928:	4618      	mov	r0, r3
 800292a:	f000 fdc7 	bl	80034bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800292e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002930:	f000 f8b8 	bl	8002aa4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002934:	f000 fbf4 	bl	8003120 <xTaskResumeAll>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d189      	bne.n	8002852 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800293e:	4b10      	ldr	r3, [pc, #64]	; (8002980 <xQueueReceive+0x1bc>)
 8002940:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002944:	601a      	str	r2, [r3, #0]
 8002946:	f3bf 8f4f 	dsb	sy
 800294a:	f3bf 8f6f 	isb	sy
 800294e:	e780      	b.n	8002852 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002950:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002952:	f000 f8a7 	bl	8002aa4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002956:	f000 fbe3 	bl	8003120 <xTaskResumeAll>
 800295a:	e77a      	b.n	8002852 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800295c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800295e:	f000 f8a1 	bl	8002aa4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002962:	f000 fbdd 	bl	8003120 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002966:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002968:	f000 f8ee 	bl	8002b48 <prvIsQueueEmpty>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	f43f af6f 	beq.w	8002852 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002974:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002976:	4618      	mov	r0, r3
 8002978:	3730      	adds	r7, #48	; 0x30
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	e000ed04 	.word	0xe000ed04

08002984 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b086      	sub	sp, #24
 8002988:	af00      	add	r7, sp, #0
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	60b9      	str	r1, [r7, #8]
 800298e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002990:	2300      	movs	r3, #0
 8002992:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002998:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d10d      	bne.n	80029be <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d14d      	bne.n	8002a46 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	4618      	mov	r0, r3
 80029b0:	f000 ffb8 	bl	8003924 <xTaskPriorityDisinherit>
 80029b4:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2200      	movs	r2, #0
 80029ba:	605a      	str	r2, [r3, #4]
 80029bc:	e043      	b.n	8002a46 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d119      	bne.n	80029f8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6898      	ldr	r0, [r3, #8]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029cc:	461a      	mov	r2, r3
 80029ce:	68b9      	ldr	r1, [r7, #8]
 80029d0:	f001 ffc8 	bl	8004964 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	689a      	ldr	r2, [r3, #8]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029dc:	441a      	add	r2, r3
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	689a      	ldr	r2, [r3, #8]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d32b      	bcc.n	8002a46 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	609a      	str	r2, [r3, #8]
 80029f6:	e026      	b.n	8002a46 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	68d8      	ldr	r0, [r3, #12]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a00:	461a      	mov	r2, r3
 8002a02:	68b9      	ldr	r1, [r7, #8]
 8002a04:	f001 ffae 	bl	8004964 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	68da      	ldr	r2, [r3, #12]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a10:	425b      	negs	r3, r3
 8002a12:	441a      	add	r2, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	68da      	ldr	r2, [r3, #12]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d207      	bcs.n	8002a34 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	685a      	ldr	r2, [r3, #4]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2c:	425b      	negs	r3, r3
 8002a2e:	441a      	add	r2, r3
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d105      	bne.n	8002a46 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d002      	beq.n	8002a46 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	3b01      	subs	r3, #1
 8002a44:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	1c5a      	adds	r2, r3, #1
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002a4e:	697b      	ldr	r3, [r7, #20]
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3718      	adds	r7, #24
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d018      	beq.n	8002a9c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	68da      	ldr	r2, [r3, #12]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a72:	441a      	add	r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	68da      	ldr	r2, [r3, #12]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d303      	bcc.n	8002a8c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	68d9      	ldr	r1, [r3, #12]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a94:	461a      	mov	r2, r3
 8002a96:	6838      	ldr	r0, [r7, #0]
 8002a98:	f001 ff64 	bl	8004964 <memcpy>
	}
}
 8002a9c:	bf00      	nop
 8002a9e:	3708      	adds	r7, #8
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002aac:	f001 fbfe 	bl	80042ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ab6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002ab8:	e011      	b.n	8002ade <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d012      	beq.n	8002ae8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	3324      	adds	r3, #36	; 0x24
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f000 fd48 	bl	800355c <xTaskRemoveFromEventList>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d001      	beq.n	8002ad6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002ad2:	f000 fe1f 	bl	8003714 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002ad6:	7bfb      	ldrb	r3, [r7, #15]
 8002ad8:	3b01      	subs	r3, #1
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002ade:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	dce9      	bgt.n	8002aba <prvUnlockQueue+0x16>
 8002ae6:	e000      	b.n	8002aea <prvUnlockQueue+0x46>
					break;
 8002ae8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	22ff      	movs	r2, #255	; 0xff
 8002aee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002af2:	f001 fc0b 	bl	800430c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002af6:	f001 fbd9 	bl	80042ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b00:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002b02:	e011      	b.n	8002b28 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	691b      	ldr	r3, [r3, #16]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d012      	beq.n	8002b32 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	3310      	adds	r3, #16
 8002b10:	4618      	mov	r0, r3
 8002b12:	f000 fd23 	bl	800355c <xTaskRemoveFromEventList>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d001      	beq.n	8002b20 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002b1c:	f000 fdfa 	bl	8003714 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002b20:	7bbb      	ldrb	r3, [r7, #14]
 8002b22:	3b01      	subs	r3, #1
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002b28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	dce9      	bgt.n	8002b04 <prvUnlockQueue+0x60>
 8002b30:	e000      	b.n	8002b34 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002b32:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	22ff      	movs	r2, #255	; 0xff
 8002b38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002b3c:	f001 fbe6 	bl	800430c <vPortExitCritical>
}
 8002b40:	bf00      	nop
 8002b42:	3710      	adds	r7, #16
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002b50:	f001 fbac 	bl	80042ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d102      	bne.n	8002b62 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	60fb      	str	r3, [r7, #12]
 8002b60:	e001      	b.n	8002b66 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002b62:	2300      	movs	r3, #0
 8002b64:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002b66:	f001 fbd1 	bl	800430c <vPortExitCritical>

	return xReturn;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3710      	adds	r7, #16
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002b7c:	f001 fb96 	bl	80042ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d102      	bne.n	8002b92 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	60fb      	str	r3, [r7, #12]
 8002b90:	e001      	b.n	8002b96 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002b92:	2300      	movs	r3, #0
 8002b94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002b96:	f001 fbb9 	bl	800430c <vPortExitCritical>

	return xReturn;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3710      	adds	r7, #16
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b085      	sub	sp, #20
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002bae:	2300      	movs	r3, #0
 8002bb0:	60fb      	str	r3, [r7, #12]
 8002bb2:	e014      	b.n	8002bde <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002bb4:	4a0e      	ldr	r2, [pc, #56]	; (8002bf0 <vQueueAddToRegistry+0x4c>)
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d10b      	bne.n	8002bd8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002bc0:	490b      	ldr	r1, [pc, #44]	; (8002bf0 <vQueueAddToRegistry+0x4c>)
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	683a      	ldr	r2, [r7, #0]
 8002bc6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002bca:	4a09      	ldr	r2, [pc, #36]	; (8002bf0 <vQueueAddToRegistry+0x4c>)
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	00db      	lsls	r3, r3, #3
 8002bd0:	4413      	add	r3, r2
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002bd6:	e006      	b.n	8002be6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	3301      	adds	r3, #1
 8002bdc:	60fb      	str	r3, [r7, #12]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2b07      	cmp	r3, #7
 8002be2:	d9e7      	bls.n	8002bb4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002be4:	bf00      	nop
 8002be6:	bf00      	nop
 8002be8:	3714      	adds	r7, #20
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bc80      	pop	{r7}
 8002bee:	4770      	bx	lr
 8002bf0:	200008e0 	.word	0x200008e0

08002bf4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b086      	sub	sp, #24
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002c04:	f001 fb52 	bl	80042ac <vPortEnterCritical>
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c0e:	b25b      	sxtb	r3, r3
 8002c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c14:	d103      	bne.n	8002c1e <vQueueWaitForMessageRestricted+0x2a>
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c24:	b25b      	sxtb	r3, r3
 8002c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c2a:	d103      	bne.n	8002c34 <vQueueWaitForMessageRestricted+0x40>
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c34:	f001 fb6a 	bl	800430c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d106      	bne.n	8002c4e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	3324      	adds	r3, #36	; 0x24
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	68b9      	ldr	r1, [r7, #8]
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f000 fc5b 	bl	8003504 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002c4e:	6978      	ldr	r0, [r7, #20]
 8002c50:	f7ff ff28 	bl	8002aa4 <prvUnlockQueue>
	}
 8002c54:	bf00      	nop
 8002c56:	3718      	adds	r7, #24
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b08e      	sub	sp, #56	; 0x38
 8002c60:	af04      	add	r7, sp, #16
 8002c62:	60f8      	str	r0, [r7, #12]
 8002c64:	60b9      	str	r1, [r7, #8]
 8002c66:	607a      	str	r2, [r7, #4]
 8002c68:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002c6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d10a      	bne.n	8002c86 <xTaskCreateStatic+0x2a>
	__asm volatile
 8002c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c74:	f383 8811 	msr	BASEPRI, r3
 8002c78:	f3bf 8f6f 	isb	sy
 8002c7c:	f3bf 8f4f 	dsb	sy
 8002c80:	623b      	str	r3, [r7, #32]
}
 8002c82:	bf00      	nop
 8002c84:	e7fe      	b.n	8002c84 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d10a      	bne.n	8002ca2 <xTaskCreateStatic+0x46>
	__asm volatile
 8002c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c90:	f383 8811 	msr	BASEPRI, r3
 8002c94:	f3bf 8f6f 	isb	sy
 8002c98:	f3bf 8f4f 	dsb	sy
 8002c9c:	61fb      	str	r3, [r7, #28]
}
 8002c9e:	bf00      	nop
 8002ca0:	e7fe      	b.n	8002ca0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002ca2:	23a8      	movs	r3, #168	; 0xa8
 8002ca4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	2ba8      	cmp	r3, #168	; 0xa8
 8002caa:	d00a      	beq.n	8002cc2 <xTaskCreateStatic+0x66>
	__asm volatile
 8002cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cb0:	f383 8811 	msr	BASEPRI, r3
 8002cb4:	f3bf 8f6f 	isb	sy
 8002cb8:	f3bf 8f4f 	dsb	sy
 8002cbc:	61bb      	str	r3, [r7, #24]
}
 8002cbe:	bf00      	nop
 8002cc0:	e7fe      	b.n	8002cc0 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d01e      	beq.n	8002d06 <xTaskCreateStatic+0xaa>
 8002cc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d01b      	beq.n	8002d06 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cd0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002cd6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cda:	2202      	movs	r2, #2
 8002cdc:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	9303      	str	r3, [sp, #12]
 8002ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce6:	9302      	str	r3, [sp, #8]
 8002ce8:	f107 0314 	add.w	r3, r7, #20
 8002cec:	9301      	str	r3, [sp, #4]
 8002cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cf0:	9300      	str	r3, [sp, #0]
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	68b9      	ldr	r1, [r7, #8]
 8002cf8:	68f8      	ldr	r0, [r7, #12]
 8002cfa:	f000 f851 	bl	8002da0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002cfe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002d00:	f000 f8ec 	bl	8002edc <prvAddNewTaskToReadyList>
 8002d04:	e001      	b.n	8002d0a <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8002d06:	2300      	movs	r3, #0
 8002d08:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002d0a:	697b      	ldr	r3, [r7, #20]
	}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3728      	adds	r7, #40	; 0x28
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b08c      	sub	sp, #48	; 0x30
 8002d18:	af04      	add	r7, sp, #16
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	60b9      	str	r1, [r7, #8]
 8002d1e:	603b      	str	r3, [r7, #0]
 8002d20:	4613      	mov	r3, r2
 8002d22:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d24:	88fb      	ldrh	r3, [r7, #6]
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f001 fbbf 	bl	80044ac <pvPortMalloc>
 8002d2e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d00e      	beq.n	8002d54 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002d36:	20a8      	movs	r0, #168	; 0xa8
 8002d38:	f001 fbb8 	bl	80044ac <pvPortMalloc>
 8002d3c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d003      	beq.n	8002d4c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	697a      	ldr	r2, [r7, #20]
 8002d48:	631a      	str	r2, [r3, #48]	; 0x30
 8002d4a:	e005      	b.n	8002d58 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002d4c:	6978      	ldr	r0, [r7, #20]
 8002d4e:	f001 fc71 	bl	8004634 <vPortFree>
 8002d52:	e001      	b.n	8002d58 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002d54:	2300      	movs	r3, #0
 8002d56:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d017      	beq.n	8002d8e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002d66:	88fa      	ldrh	r2, [r7, #6]
 8002d68:	2300      	movs	r3, #0
 8002d6a:	9303      	str	r3, [sp, #12]
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	9302      	str	r3, [sp, #8]
 8002d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d72:	9301      	str	r3, [sp, #4]
 8002d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d76:	9300      	str	r3, [sp, #0]
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	68b9      	ldr	r1, [r7, #8]
 8002d7c:	68f8      	ldr	r0, [r7, #12]
 8002d7e:	f000 f80f 	bl	8002da0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002d82:	69f8      	ldr	r0, [r7, #28]
 8002d84:	f000 f8aa 	bl	8002edc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	61bb      	str	r3, [r7, #24]
 8002d8c:	e002      	b.n	8002d94 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8002d92:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002d94:	69bb      	ldr	r3, [r7, #24]
	}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3720      	adds	r7, #32
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
	...

08002da0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b088      	sub	sp, #32
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	60b9      	str	r1, [r7, #8]
 8002daa:	607a      	str	r2, [r7, #4]
 8002dac:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	461a      	mov	r2, r3
 8002db8:	21a5      	movs	r1, #165	; 0xa5
 8002dba:	f001 fd4f 	bl	800485c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002dc8:	3b01      	subs	r3, #1
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	4413      	add	r3, r2
 8002dce:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	f023 0307 	bic.w	r3, r3, #7
 8002dd6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	f003 0307 	and.w	r3, r3, #7
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d00a      	beq.n	8002df8 <prvInitialiseNewTask+0x58>
	__asm volatile
 8002de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002de6:	f383 8811 	msr	BASEPRI, r3
 8002dea:	f3bf 8f6f 	isb	sy
 8002dee:	f3bf 8f4f 	dsb	sy
 8002df2:	617b      	str	r3, [r7, #20]
}
 8002df4:	bf00      	nop
 8002df6:	e7fe      	b.n	8002df6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002df8:	2300      	movs	r3, #0
 8002dfa:	61fb      	str	r3, [r7, #28]
 8002dfc:	e012      	b.n	8002e24 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002dfe:	68ba      	ldr	r2, [r7, #8]
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	4413      	add	r3, r2
 8002e04:	7819      	ldrb	r1, [r3, #0]
 8002e06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	4413      	add	r3, r2
 8002e0c:	3334      	adds	r3, #52	; 0x34
 8002e0e:	460a      	mov	r2, r1
 8002e10:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002e12:	68ba      	ldr	r2, [r7, #8]
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	4413      	add	r3, r2
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d006      	beq.n	8002e2c <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	3301      	adds	r3, #1
 8002e22:	61fb      	str	r3, [r7, #28]
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	2b0f      	cmp	r3, #15
 8002e28:	d9e9      	bls.n	8002dfe <prvInitialiseNewTask+0x5e>
 8002e2a:	e000      	b.n	8002e2e <prvInitialiseNewTask+0x8e>
		{
			break;
 8002e2c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e30:	2200      	movs	r2, #0
 8002e32:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e38:	2b37      	cmp	r3, #55	; 0x37
 8002e3a:	d901      	bls.n	8002e40 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002e3c:	2337      	movs	r3, #55	; 0x37
 8002e3e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e44:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e4a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e4e:	2200      	movs	r2, #0
 8002e50:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e54:	3304      	adds	r3, #4
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7ff f98b 	bl	8002172 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e5e:	3318      	adds	r3, #24
 8002e60:	4618      	mov	r0, r3
 8002e62:	f7ff f986 	bl	8002172 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e6a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e6e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e74:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e7a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e8e:	3354      	adds	r3, #84	; 0x54
 8002e90:	224c      	movs	r2, #76	; 0x4c
 8002e92:	2100      	movs	r1, #0
 8002e94:	4618      	mov	r0, r3
 8002e96:	f001 fce1 	bl	800485c <memset>
 8002e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e9c:	4a0c      	ldr	r2, [pc, #48]	; (8002ed0 <prvInitialiseNewTask+0x130>)
 8002e9e:	659a      	str	r2, [r3, #88]	; 0x58
 8002ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ea2:	4a0c      	ldr	r2, [pc, #48]	; (8002ed4 <prvInitialiseNewTask+0x134>)
 8002ea4:	65da      	str	r2, [r3, #92]	; 0x5c
 8002ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ea8:	4a0b      	ldr	r2, [pc, #44]	; (8002ed8 <prvInitialiseNewTask+0x138>)
 8002eaa:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002eac:	683a      	ldr	r2, [r7, #0]
 8002eae:	68f9      	ldr	r1, [r7, #12]
 8002eb0:	69b8      	ldr	r0, [r7, #24]
 8002eb2:	f001 f90b 	bl	80040cc <pxPortInitialiseStack>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eba:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d002      	beq.n	8002ec8 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ec4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ec6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002ec8:	bf00      	nop
 8002eca:	3720      	adds	r7, #32
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	20001b6c 	.word	0x20001b6c
 8002ed4:	20001bd4 	.word	0x20001bd4
 8002ed8:	20001c3c 	.word	0x20001c3c

08002edc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002ee4:	f001 f9e2 	bl	80042ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002ee8:	4b2d      	ldr	r3, [pc, #180]	; (8002fa0 <prvAddNewTaskToReadyList+0xc4>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	3301      	adds	r3, #1
 8002eee:	4a2c      	ldr	r2, [pc, #176]	; (8002fa0 <prvAddNewTaskToReadyList+0xc4>)
 8002ef0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002ef2:	4b2c      	ldr	r3, [pc, #176]	; (8002fa4 <prvAddNewTaskToReadyList+0xc8>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d109      	bne.n	8002f0e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002efa:	4a2a      	ldr	r2, [pc, #168]	; (8002fa4 <prvAddNewTaskToReadyList+0xc8>)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002f00:	4b27      	ldr	r3, [pc, #156]	; (8002fa0 <prvAddNewTaskToReadyList+0xc4>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d110      	bne.n	8002f2a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002f08:	f000 fc28 	bl	800375c <prvInitialiseTaskLists>
 8002f0c:	e00d      	b.n	8002f2a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002f0e:	4b26      	ldr	r3, [pc, #152]	; (8002fa8 <prvAddNewTaskToReadyList+0xcc>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d109      	bne.n	8002f2a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002f16:	4b23      	ldr	r3, [pc, #140]	; (8002fa4 <prvAddNewTaskToReadyList+0xc8>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d802      	bhi.n	8002f2a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002f24:	4a1f      	ldr	r2, [pc, #124]	; (8002fa4 <prvAddNewTaskToReadyList+0xc8>)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002f2a:	4b20      	ldr	r3, [pc, #128]	; (8002fac <prvAddNewTaskToReadyList+0xd0>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	3301      	adds	r3, #1
 8002f30:	4a1e      	ldr	r2, [pc, #120]	; (8002fac <prvAddNewTaskToReadyList+0xd0>)
 8002f32:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002f34:	4b1d      	ldr	r3, [pc, #116]	; (8002fac <prvAddNewTaskToReadyList+0xd0>)
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f40:	4b1b      	ldr	r3, [pc, #108]	; (8002fb0 <prvAddNewTaskToReadyList+0xd4>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d903      	bls.n	8002f50 <prvAddNewTaskToReadyList+0x74>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f4c:	4a18      	ldr	r2, [pc, #96]	; (8002fb0 <prvAddNewTaskToReadyList+0xd4>)
 8002f4e:	6013      	str	r3, [r2, #0]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f54:	4613      	mov	r3, r2
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	4413      	add	r3, r2
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	4a15      	ldr	r2, [pc, #84]	; (8002fb4 <prvAddNewTaskToReadyList+0xd8>)
 8002f5e:	441a      	add	r2, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	3304      	adds	r3, #4
 8002f64:	4619      	mov	r1, r3
 8002f66:	4610      	mov	r0, r2
 8002f68:	f7ff f90f 	bl	800218a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002f6c:	f001 f9ce 	bl	800430c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002f70:	4b0d      	ldr	r3, [pc, #52]	; (8002fa8 <prvAddNewTaskToReadyList+0xcc>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d00e      	beq.n	8002f96 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002f78:	4b0a      	ldr	r3, [pc, #40]	; (8002fa4 <prvAddNewTaskToReadyList+0xc8>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d207      	bcs.n	8002f96 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002f86:	4b0c      	ldr	r3, [pc, #48]	; (8002fb8 <prvAddNewTaskToReadyList+0xdc>)
 8002f88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f8c:	601a      	str	r2, [r3, #0]
 8002f8e:	f3bf 8f4f 	dsb	sy
 8002f92:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002f96:	bf00      	nop
 8002f98:	3708      	adds	r7, #8
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	20000df4 	.word	0x20000df4
 8002fa4:	20000920 	.word	0x20000920
 8002fa8:	20000e00 	.word	0x20000e00
 8002fac:	20000e10 	.word	0x20000e10
 8002fb0:	20000dfc 	.word	0x20000dfc
 8002fb4:	20000924 	.word	0x20000924
 8002fb8:	e000ed04 	.word	0xe000ed04

08002fbc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d017      	beq.n	8002ffe <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002fce:	4b13      	ldr	r3, [pc, #76]	; (800301c <vTaskDelay+0x60>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d00a      	beq.n	8002fec <vTaskDelay+0x30>
	__asm volatile
 8002fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fda:	f383 8811 	msr	BASEPRI, r3
 8002fde:	f3bf 8f6f 	isb	sy
 8002fe2:	f3bf 8f4f 	dsb	sy
 8002fe6:	60bb      	str	r3, [r7, #8]
}
 8002fe8:	bf00      	nop
 8002fea:	e7fe      	b.n	8002fea <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002fec:	f000 f88a 	bl	8003104 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002ff0:	2100      	movs	r1, #0
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f000 fd04 	bl	8003a00 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002ff8:	f000 f892 	bl	8003120 <xTaskResumeAll>
 8002ffc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d107      	bne.n	8003014 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003004:	4b06      	ldr	r3, [pc, #24]	; (8003020 <vTaskDelay+0x64>)
 8003006:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800300a:	601a      	str	r2, [r3, #0]
 800300c:	f3bf 8f4f 	dsb	sy
 8003010:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003014:	bf00      	nop
 8003016:	3710      	adds	r7, #16
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}
 800301c:	20000e1c 	.word	0x20000e1c
 8003020:	e000ed04 	.word	0xe000ed04

08003024 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b08a      	sub	sp, #40	; 0x28
 8003028:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800302a:	2300      	movs	r3, #0
 800302c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800302e:	2300      	movs	r3, #0
 8003030:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003032:	463a      	mov	r2, r7
 8003034:	1d39      	adds	r1, r7, #4
 8003036:	f107 0308 	add.w	r3, r7, #8
 800303a:	4618      	mov	r0, r3
 800303c:	f7ff f848 	bl	80020d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003040:	6839      	ldr	r1, [r7, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	68ba      	ldr	r2, [r7, #8]
 8003046:	9202      	str	r2, [sp, #8]
 8003048:	9301      	str	r3, [sp, #4]
 800304a:	2300      	movs	r3, #0
 800304c:	9300      	str	r3, [sp, #0]
 800304e:	2300      	movs	r3, #0
 8003050:	460a      	mov	r2, r1
 8003052:	4924      	ldr	r1, [pc, #144]	; (80030e4 <vTaskStartScheduler+0xc0>)
 8003054:	4824      	ldr	r0, [pc, #144]	; (80030e8 <vTaskStartScheduler+0xc4>)
 8003056:	f7ff fe01 	bl	8002c5c <xTaskCreateStatic>
 800305a:	4603      	mov	r3, r0
 800305c:	4a23      	ldr	r2, [pc, #140]	; (80030ec <vTaskStartScheduler+0xc8>)
 800305e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003060:	4b22      	ldr	r3, [pc, #136]	; (80030ec <vTaskStartScheduler+0xc8>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d002      	beq.n	800306e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003068:	2301      	movs	r3, #1
 800306a:	617b      	str	r3, [r7, #20]
 800306c:	e001      	b.n	8003072 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800306e:	2300      	movs	r3, #0
 8003070:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	2b01      	cmp	r3, #1
 8003076:	d102      	bne.n	800307e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003078:	f000 fd16 	bl	8003aa8 <xTimerCreateTimerTask>
 800307c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	2b01      	cmp	r3, #1
 8003082:	d11b      	bne.n	80030bc <vTaskStartScheduler+0x98>
	__asm volatile
 8003084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003088:	f383 8811 	msr	BASEPRI, r3
 800308c:	f3bf 8f6f 	isb	sy
 8003090:	f3bf 8f4f 	dsb	sy
 8003094:	613b      	str	r3, [r7, #16]
}
 8003096:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003098:	4b15      	ldr	r3, [pc, #84]	; (80030f0 <vTaskStartScheduler+0xcc>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	3354      	adds	r3, #84	; 0x54
 800309e:	4a15      	ldr	r2, [pc, #84]	; (80030f4 <vTaskStartScheduler+0xd0>)
 80030a0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80030a2:	4b15      	ldr	r3, [pc, #84]	; (80030f8 <vTaskStartScheduler+0xd4>)
 80030a4:	f04f 32ff 	mov.w	r2, #4294967295
 80030a8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80030aa:	4b14      	ldr	r3, [pc, #80]	; (80030fc <vTaskStartScheduler+0xd8>)
 80030ac:	2201      	movs	r2, #1
 80030ae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80030b0:	4b13      	ldr	r3, [pc, #76]	; (8003100 <vTaskStartScheduler+0xdc>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80030b6:	f001 f887 	bl	80041c8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80030ba:	e00e      	b.n	80030da <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030c2:	d10a      	bne.n	80030da <vTaskStartScheduler+0xb6>
	__asm volatile
 80030c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030c8:	f383 8811 	msr	BASEPRI, r3
 80030cc:	f3bf 8f6f 	isb	sy
 80030d0:	f3bf 8f4f 	dsb	sy
 80030d4:	60fb      	str	r3, [r7, #12]
}
 80030d6:	bf00      	nop
 80030d8:	e7fe      	b.n	80030d8 <vTaskStartScheduler+0xb4>
}
 80030da:	bf00      	nop
 80030dc:	3718      	adds	r7, #24
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	08004a5c 	.word	0x08004a5c
 80030e8:	0800372d 	.word	0x0800372d
 80030ec:	20000e18 	.word	0x20000e18
 80030f0:	20000920 	.word	0x20000920
 80030f4:	2000005c 	.word	0x2000005c
 80030f8:	20000e14 	.word	0x20000e14
 80030fc:	20000e00 	.word	0x20000e00
 8003100:	20000df8 	.word	0x20000df8

08003104 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003104:	b480      	push	{r7}
 8003106:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003108:	4b04      	ldr	r3, [pc, #16]	; (800311c <vTaskSuspendAll+0x18>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	3301      	adds	r3, #1
 800310e:	4a03      	ldr	r2, [pc, #12]	; (800311c <vTaskSuspendAll+0x18>)
 8003110:	6013      	str	r3, [r2, #0]
}
 8003112:	bf00      	nop
 8003114:	46bd      	mov	sp, r7
 8003116:	bc80      	pop	{r7}
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop
 800311c:	20000e1c 	.word	0x20000e1c

08003120 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003126:	2300      	movs	r3, #0
 8003128:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800312a:	2300      	movs	r3, #0
 800312c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800312e:	4b42      	ldr	r3, [pc, #264]	; (8003238 <xTaskResumeAll+0x118>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d10a      	bne.n	800314c <xTaskResumeAll+0x2c>
	__asm volatile
 8003136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800313a:	f383 8811 	msr	BASEPRI, r3
 800313e:	f3bf 8f6f 	isb	sy
 8003142:	f3bf 8f4f 	dsb	sy
 8003146:	603b      	str	r3, [r7, #0]
}
 8003148:	bf00      	nop
 800314a:	e7fe      	b.n	800314a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800314c:	f001 f8ae 	bl	80042ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003150:	4b39      	ldr	r3, [pc, #228]	; (8003238 <xTaskResumeAll+0x118>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	3b01      	subs	r3, #1
 8003156:	4a38      	ldr	r2, [pc, #224]	; (8003238 <xTaskResumeAll+0x118>)
 8003158:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800315a:	4b37      	ldr	r3, [pc, #220]	; (8003238 <xTaskResumeAll+0x118>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d162      	bne.n	8003228 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003162:	4b36      	ldr	r3, [pc, #216]	; (800323c <xTaskResumeAll+0x11c>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d05e      	beq.n	8003228 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800316a:	e02f      	b.n	80031cc <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800316c:	4b34      	ldr	r3, [pc, #208]	; (8003240 <xTaskResumeAll+0x120>)
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	3318      	adds	r3, #24
 8003178:	4618      	mov	r0, r3
 800317a:	f7ff f861 	bl	8002240 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	3304      	adds	r3, #4
 8003182:	4618      	mov	r0, r3
 8003184:	f7ff f85c 	bl	8002240 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800318c:	4b2d      	ldr	r3, [pc, #180]	; (8003244 <xTaskResumeAll+0x124>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	429a      	cmp	r2, r3
 8003192:	d903      	bls.n	800319c <xTaskResumeAll+0x7c>
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003198:	4a2a      	ldr	r2, [pc, #168]	; (8003244 <xTaskResumeAll+0x124>)
 800319a:	6013      	str	r3, [r2, #0]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031a0:	4613      	mov	r3, r2
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	4413      	add	r3, r2
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	4a27      	ldr	r2, [pc, #156]	; (8003248 <xTaskResumeAll+0x128>)
 80031aa:	441a      	add	r2, r3
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	3304      	adds	r3, #4
 80031b0:	4619      	mov	r1, r3
 80031b2:	4610      	mov	r0, r2
 80031b4:	f7fe ffe9 	bl	800218a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031bc:	4b23      	ldr	r3, [pc, #140]	; (800324c <xTaskResumeAll+0x12c>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d302      	bcc.n	80031cc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80031c6:	4b22      	ldr	r3, [pc, #136]	; (8003250 <xTaskResumeAll+0x130>)
 80031c8:	2201      	movs	r2, #1
 80031ca:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80031cc:	4b1c      	ldr	r3, [pc, #112]	; (8003240 <xTaskResumeAll+0x120>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d1cb      	bne.n	800316c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d001      	beq.n	80031de <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80031da:	f000 fb61 	bl	80038a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80031de:	4b1d      	ldr	r3, [pc, #116]	; (8003254 <xTaskResumeAll+0x134>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d010      	beq.n	800320c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80031ea:	f000 f845 	bl	8003278 <xTaskIncrementTick>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d002      	beq.n	80031fa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80031f4:	4b16      	ldr	r3, [pc, #88]	; (8003250 <xTaskResumeAll+0x130>)
 80031f6:	2201      	movs	r2, #1
 80031f8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	3b01      	subs	r3, #1
 80031fe:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d1f1      	bne.n	80031ea <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8003206:	4b13      	ldr	r3, [pc, #76]	; (8003254 <xTaskResumeAll+0x134>)
 8003208:	2200      	movs	r2, #0
 800320a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800320c:	4b10      	ldr	r3, [pc, #64]	; (8003250 <xTaskResumeAll+0x130>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d009      	beq.n	8003228 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003214:	2301      	movs	r3, #1
 8003216:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003218:	4b0f      	ldr	r3, [pc, #60]	; (8003258 <xTaskResumeAll+0x138>)
 800321a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800321e:	601a      	str	r2, [r3, #0]
 8003220:	f3bf 8f4f 	dsb	sy
 8003224:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003228:	f001 f870 	bl	800430c <vPortExitCritical>

	return xAlreadyYielded;
 800322c:	68bb      	ldr	r3, [r7, #8]
}
 800322e:	4618      	mov	r0, r3
 8003230:	3710      	adds	r7, #16
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	20000e1c 	.word	0x20000e1c
 800323c:	20000df4 	.word	0x20000df4
 8003240:	20000db4 	.word	0x20000db4
 8003244:	20000dfc 	.word	0x20000dfc
 8003248:	20000924 	.word	0x20000924
 800324c:	20000920 	.word	0x20000920
 8003250:	20000e08 	.word	0x20000e08
 8003254:	20000e04 	.word	0x20000e04
 8003258:	e000ed04 	.word	0xe000ed04

0800325c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003262:	4b04      	ldr	r3, [pc, #16]	; (8003274 <xTaskGetTickCount+0x18>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003268:	687b      	ldr	r3, [r7, #4]
}
 800326a:	4618      	mov	r0, r3
 800326c:	370c      	adds	r7, #12
 800326e:	46bd      	mov	sp, r7
 8003270:	bc80      	pop	{r7}
 8003272:	4770      	bx	lr
 8003274:	20000df8 	.word	0x20000df8

08003278 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b086      	sub	sp, #24
 800327c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800327e:	2300      	movs	r3, #0
 8003280:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003282:	4b51      	ldr	r3, [pc, #324]	; (80033c8 <xTaskIncrementTick+0x150>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	2b00      	cmp	r3, #0
 8003288:	f040 808e 	bne.w	80033a8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800328c:	4b4f      	ldr	r3, [pc, #316]	; (80033cc <xTaskIncrementTick+0x154>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	3301      	adds	r3, #1
 8003292:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003294:	4a4d      	ldr	r2, [pc, #308]	; (80033cc <xTaskIncrementTick+0x154>)
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d120      	bne.n	80032e2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80032a0:	4b4b      	ldr	r3, [pc, #300]	; (80033d0 <xTaskIncrementTick+0x158>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d00a      	beq.n	80032c0 <xTaskIncrementTick+0x48>
	__asm volatile
 80032aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ae:	f383 8811 	msr	BASEPRI, r3
 80032b2:	f3bf 8f6f 	isb	sy
 80032b6:	f3bf 8f4f 	dsb	sy
 80032ba:	603b      	str	r3, [r7, #0]
}
 80032bc:	bf00      	nop
 80032be:	e7fe      	b.n	80032be <xTaskIncrementTick+0x46>
 80032c0:	4b43      	ldr	r3, [pc, #268]	; (80033d0 <xTaskIncrementTick+0x158>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	60fb      	str	r3, [r7, #12]
 80032c6:	4b43      	ldr	r3, [pc, #268]	; (80033d4 <xTaskIncrementTick+0x15c>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a41      	ldr	r2, [pc, #260]	; (80033d0 <xTaskIncrementTick+0x158>)
 80032cc:	6013      	str	r3, [r2, #0]
 80032ce:	4a41      	ldr	r2, [pc, #260]	; (80033d4 <xTaskIncrementTick+0x15c>)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6013      	str	r3, [r2, #0]
 80032d4:	4b40      	ldr	r3, [pc, #256]	; (80033d8 <xTaskIncrementTick+0x160>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	3301      	adds	r3, #1
 80032da:	4a3f      	ldr	r2, [pc, #252]	; (80033d8 <xTaskIncrementTick+0x160>)
 80032dc:	6013      	str	r3, [r2, #0]
 80032de:	f000 fadf 	bl	80038a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80032e2:	4b3e      	ldr	r3, [pc, #248]	; (80033dc <xTaskIncrementTick+0x164>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	693a      	ldr	r2, [r7, #16]
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d34e      	bcc.n	800338a <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80032ec:	4b38      	ldr	r3, [pc, #224]	; (80033d0 <xTaskIncrementTick+0x158>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d101      	bne.n	80032fa <xTaskIncrementTick+0x82>
 80032f6:	2301      	movs	r3, #1
 80032f8:	e000      	b.n	80032fc <xTaskIncrementTick+0x84>
 80032fa:	2300      	movs	r3, #0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d004      	beq.n	800330a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003300:	4b36      	ldr	r3, [pc, #216]	; (80033dc <xTaskIncrementTick+0x164>)
 8003302:	f04f 32ff 	mov.w	r2, #4294967295
 8003306:	601a      	str	r2, [r3, #0]
					break;
 8003308:	e03f      	b.n	800338a <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800330a:	4b31      	ldr	r3, [pc, #196]	; (80033d0 <xTaskIncrementTick+0x158>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800331a:	693a      	ldr	r2, [r7, #16]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	429a      	cmp	r2, r3
 8003320:	d203      	bcs.n	800332a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003322:	4a2e      	ldr	r2, [pc, #184]	; (80033dc <xTaskIncrementTick+0x164>)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6013      	str	r3, [r2, #0]
						break;
 8003328:	e02f      	b.n	800338a <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	3304      	adds	r3, #4
 800332e:	4618      	mov	r0, r3
 8003330:	f7fe ff86 	bl	8002240 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003338:	2b00      	cmp	r3, #0
 800333a:	d004      	beq.n	8003346 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	3318      	adds	r3, #24
 8003340:	4618      	mov	r0, r3
 8003342:	f7fe ff7d 	bl	8002240 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800334a:	4b25      	ldr	r3, [pc, #148]	; (80033e0 <xTaskIncrementTick+0x168>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	429a      	cmp	r2, r3
 8003350:	d903      	bls.n	800335a <xTaskIncrementTick+0xe2>
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003356:	4a22      	ldr	r2, [pc, #136]	; (80033e0 <xTaskIncrementTick+0x168>)
 8003358:	6013      	str	r3, [r2, #0]
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800335e:	4613      	mov	r3, r2
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	4413      	add	r3, r2
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	4a1f      	ldr	r2, [pc, #124]	; (80033e4 <xTaskIncrementTick+0x16c>)
 8003368:	441a      	add	r2, r3
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	3304      	adds	r3, #4
 800336e:	4619      	mov	r1, r3
 8003370:	4610      	mov	r0, r2
 8003372:	f7fe ff0a 	bl	800218a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800337a:	4b1b      	ldr	r3, [pc, #108]	; (80033e8 <xTaskIncrementTick+0x170>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003380:	429a      	cmp	r2, r3
 8003382:	d3b3      	bcc.n	80032ec <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003384:	2301      	movs	r3, #1
 8003386:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003388:	e7b0      	b.n	80032ec <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800338a:	4b17      	ldr	r3, [pc, #92]	; (80033e8 <xTaskIncrementTick+0x170>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003390:	4914      	ldr	r1, [pc, #80]	; (80033e4 <xTaskIncrementTick+0x16c>)
 8003392:	4613      	mov	r3, r2
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	4413      	add	r3, r2
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	440b      	add	r3, r1
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d907      	bls.n	80033b2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80033a2:	2301      	movs	r3, #1
 80033a4:	617b      	str	r3, [r7, #20]
 80033a6:	e004      	b.n	80033b2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80033a8:	4b10      	ldr	r3, [pc, #64]	; (80033ec <xTaskIncrementTick+0x174>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	3301      	adds	r3, #1
 80033ae:	4a0f      	ldr	r2, [pc, #60]	; (80033ec <xTaskIncrementTick+0x174>)
 80033b0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80033b2:	4b0f      	ldr	r3, [pc, #60]	; (80033f0 <xTaskIncrementTick+0x178>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d001      	beq.n	80033be <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80033ba:	2301      	movs	r3, #1
 80033bc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80033be:	697b      	ldr	r3, [r7, #20]
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3718      	adds	r7, #24
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	20000e1c 	.word	0x20000e1c
 80033cc:	20000df8 	.word	0x20000df8
 80033d0:	20000dac 	.word	0x20000dac
 80033d4:	20000db0 	.word	0x20000db0
 80033d8:	20000e0c 	.word	0x20000e0c
 80033dc:	20000e14 	.word	0x20000e14
 80033e0:	20000dfc 	.word	0x20000dfc
 80033e4:	20000924 	.word	0x20000924
 80033e8:	20000920 	.word	0x20000920
 80033ec:	20000e04 	.word	0x20000e04
 80033f0:	20000e08 	.word	0x20000e08

080033f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80033f4:	b480      	push	{r7}
 80033f6:	b085      	sub	sp, #20
 80033f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80033fa:	4b2a      	ldr	r3, [pc, #168]	; (80034a4 <vTaskSwitchContext+0xb0>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d003      	beq.n	800340a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003402:	4b29      	ldr	r3, [pc, #164]	; (80034a8 <vTaskSwitchContext+0xb4>)
 8003404:	2201      	movs	r2, #1
 8003406:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003408:	e046      	b.n	8003498 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800340a:	4b27      	ldr	r3, [pc, #156]	; (80034a8 <vTaskSwitchContext+0xb4>)
 800340c:	2200      	movs	r2, #0
 800340e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003410:	4b26      	ldr	r3, [pc, #152]	; (80034ac <vTaskSwitchContext+0xb8>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	60fb      	str	r3, [r7, #12]
 8003416:	e010      	b.n	800343a <vTaskSwitchContext+0x46>
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d10a      	bne.n	8003434 <vTaskSwitchContext+0x40>
	__asm volatile
 800341e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003422:	f383 8811 	msr	BASEPRI, r3
 8003426:	f3bf 8f6f 	isb	sy
 800342a:	f3bf 8f4f 	dsb	sy
 800342e:	607b      	str	r3, [r7, #4]
}
 8003430:	bf00      	nop
 8003432:	e7fe      	b.n	8003432 <vTaskSwitchContext+0x3e>
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	3b01      	subs	r3, #1
 8003438:	60fb      	str	r3, [r7, #12]
 800343a:	491d      	ldr	r1, [pc, #116]	; (80034b0 <vTaskSwitchContext+0xbc>)
 800343c:	68fa      	ldr	r2, [r7, #12]
 800343e:	4613      	mov	r3, r2
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	4413      	add	r3, r2
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	440b      	add	r3, r1
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d0e4      	beq.n	8003418 <vTaskSwitchContext+0x24>
 800344e:	68fa      	ldr	r2, [r7, #12]
 8003450:	4613      	mov	r3, r2
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	4413      	add	r3, r2
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	4a15      	ldr	r2, [pc, #84]	; (80034b0 <vTaskSwitchContext+0xbc>)
 800345a:	4413      	add	r3, r2
 800345c:	60bb      	str	r3, [r7, #8]
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	685a      	ldr	r2, [r3, #4]
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	605a      	str	r2, [r3, #4]
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	685a      	ldr	r2, [r3, #4]
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	3308      	adds	r3, #8
 8003470:	429a      	cmp	r2, r3
 8003472:	d104      	bne.n	800347e <vTaskSwitchContext+0x8a>
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	685a      	ldr	r2, [r3, #4]
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	605a      	str	r2, [r3, #4]
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	4a0b      	ldr	r2, [pc, #44]	; (80034b4 <vTaskSwitchContext+0xc0>)
 8003486:	6013      	str	r3, [r2, #0]
 8003488:	4a08      	ldr	r2, [pc, #32]	; (80034ac <vTaskSwitchContext+0xb8>)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800348e:	4b09      	ldr	r3, [pc, #36]	; (80034b4 <vTaskSwitchContext+0xc0>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	3354      	adds	r3, #84	; 0x54
 8003494:	4a08      	ldr	r2, [pc, #32]	; (80034b8 <vTaskSwitchContext+0xc4>)
 8003496:	6013      	str	r3, [r2, #0]
}
 8003498:	bf00      	nop
 800349a:	3714      	adds	r7, #20
 800349c:	46bd      	mov	sp, r7
 800349e:	bc80      	pop	{r7}
 80034a0:	4770      	bx	lr
 80034a2:	bf00      	nop
 80034a4:	20000e1c 	.word	0x20000e1c
 80034a8:	20000e08 	.word	0x20000e08
 80034ac:	20000dfc 	.word	0x20000dfc
 80034b0:	20000924 	.word	0x20000924
 80034b4:	20000920 	.word	0x20000920
 80034b8:	2000005c 	.word	0x2000005c

080034bc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d10a      	bne.n	80034e2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80034cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034d0:	f383 8811 	msr	BASEPRI, r3
 80034d4:	f3bf 8f6f 	isb	sy
 80034d8:	f3bf 8f4f 	dsb	sy
 80034dc:	60fb      	str	r3, [r7, #12]
}
 80034de:	bf00      	nop
 80034e0:	e7fe      	b.n	80034e0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80034e2:	4b07      	ldr	r3, [pc, #28]	; (8003500 <vTaskPlaceOnEventList+0x44>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	3318      	adds	r3, #24
 80034e8:	4619      	mov	r1, r3
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f7fe fe70 	bl	80021d0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80034f0:	2101      	movs	r1, #1
 80034f2:	6838      	ldr	r0, [r7, #0]
 80034f4:	f000 fa84 	bl	8003a00 <prvAddCurrentTaskToDelayedList>
}
 80034f8:	bf00      	nop
 80034fa:	3710      	adds	r7, #16
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	20000920 	.word	0x20000920

08003504 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003504:	b580      	push	{r7, lr}
 8003506:	b086      	sub	sp, #24
 8003508:	af00      	add	r7, sp, #0
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	60b9      	str	r1, [r7, #8]
 800350e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d10a      	bne.n	800352c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800351a:	f383 8811 	msr	BASEPRI, r3
 800351e:	f3bf 8f6f 	isb	sy
 8003522:	f3bf 8f4f 	dsb	sy
 8003526:	617b      	str	r3, [r7, #20]
}
 8003528:	bf00      	nop
 800352a:	e7fe      	b.n	800352a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800352c:	4b0a      	ldr	r3, [pc, #40]	; (8003558 <vTaskPlaceOnEventListRestricted+0x54>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	3318      	adds	r3, #24
 8003532:	4619      	mov	r1, r3
 8003534:	68f8      	ldr	r0, [r7, #12]
 8003536:	f7fe fe28 	bl	800218a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d002      	beq.n	8003546 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003540:	f04f 33ff 	mov.w	r3, #4294967295
 8003544:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003546:	6879      	ldr	r1, [r7, #4]
 8003548:	68b8      	ldr	r0, [r7, #8]
 800354a:	f000 fa59 	bl	8003a00 <prvAddCurrentTaskToDelayedList>
	}
 800354e:	bf00      	nop
 8003550:	3718      	adds	r7, #24
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	20000920 	.word	0x20000920

0800355c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b086      	sub	sp, #24
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d10a      	bne.n	8003588 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003576:	f383 8811 	msr	BASEPRI, r3
 800357a:	f3bf 8f6f 	isb	sy
 800357e:	f3bf 8f4f 	dsb	sy
 8003582:	60fb      	str	r3, [r7, #12]
}
 8003584:	bf00      	nop
 8003586:	e7fe      	b.n	8003586 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	3318      	adds	r3, #24
 800358c:	4618      	mov	r0, r3
 800358e:	f7fe fe57 	bl	8002240 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003592:	4b1e      	ldr	r3, [pc, #120]	; (800360c <xTaskRemoveFromEventList+0xb0>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d11d      	bne.n	80035d6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	3304      	adds	r3, #4
 800359e:	4618      	mov	r0, r3
 80035a0:	f7fe fe4e 	bl	8002240 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035a8:	4b19      	ldr	r3, [pc, #100]	; (8003610 <xTaskRemoveFromEventList+0xb4>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d903      	bls.n	80035b8 <xTaskRemoveFromEventList+0x5c>
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b4:	4a16      	ldr	r2, [pc, #88]	; (8003610 <xTaskRemoveFromEventList+0xb4>)
 80035b6:	6013      	str	r3, [r2, #0]
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035bc:	4613      	mov	r3, r2
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	4413      	add	r3, r2
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	4a13      	ldr	r2, [pc, #76]	; (8003614 <xTaskRemoveFromEventList+0xb8>)
 80035c6:	441a      	add	r2, r3
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	3304      	adds	r3, #4
 80035cc:	4619      	mov	r1, r3
 80035ce:	4610      	mov	r0, r2
 80035d0:	f7fe fddb 	bl	800218a <vListInsertEnd>
 80035d4:	e005      	b.n	80035e2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	3318      	adds	r3, #24
 80035da:	4619      	mov	r1, r3
 80035dc:	480e      	ldr	r0, [pc, #56]	; (8003618 <xTaskRemoveFromEventList+0xbc>)
 80035de:	f7fe fdd4 	bl	800218a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035e6:	4b0d      	ldr	r3, [pc, #52]	; (800361c <xTaskRemoveFromEventList+0xc0>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d905      	bls.n	80035fc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80035f0:	2301      	movs	r3, #1
 80035f2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80035f4:	4b0a      	ldr	r3, [pc, #40]	; (8003620 <xTaskRemoveFromEventList+0xc4>)
 80035f6:	2201      	movs	r2, #1
 80035f8:	601a      	str	r2, [r3, #0]
 80035fa:	e001      	b.n	8003600 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80035fc:	2300      	movs	r3, #0
 80035fe:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003600:	697b      	ldr	r3, [r7, #20]
}
 8003602:	4618      	mov	r0, r3
 8003604:	3718      	adds	r7, #24
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	20000e1c 	.word	0x20000e1c
 8003610:	20000dfc 	.word	0x20000dfc
 8003614:	20000924 	.word	0x20000924
 8003618:	20000db4 	.word	0x20000db4
 800361c:	20000920 	.word	0x20000920
 8003620:	20000e08 	.word	0x20000e08

08003624 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800362c:	4b06      	ldr	r3, [pc, #24]	; (8003648 <vTaskInternalSetTimeOutState+0x24>)
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003634:	4b05      	ldr	r3, [pc, #20]	; (800364c <vTaskInternalSetTimeOutState+0x28>)
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	605a      	str	r2, [r3, #4]
}
 800363c:	bf00      	nop
 800363e:	370c      	adds	r7, #12
 8003640:	46bd      	mov	sp, r7
 8003642:	bc80      	pop	{r7}
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	20000e0c 	.word	0x20000e0c
 800364c:	20000df8 	.word	0x20000df8

08003650 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b088      	sub	sp, #32
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d10a      	bne.n	8003676 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003664:	f383 8811 	msr	BASEPRI, r3
 8003668:	f3bf 8f6f 	isb	sy
 800366c:	f3bf 8f4f 	dsb	sy
 8003670:	613b      	str	r3, [r7, #16]
}
 8003672:	bf00      	nop
 8003674:	e7fe      	b.n	8003674 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d10a      	bne.n	8003692 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800367c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003680:	f383 8811 	msr	BASEPRI, r3
 8003684:	f3bf 8f6f 	isb	sy
 8003688:	f3bf 8f4f 	dsb	sy
 800368c:	60fb      	str	r3, [r7, #12]
}
 800368e:	bf00      	nop
 8003690:	e7fe      	b.n	8003690 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003692:	f000 fe0b 	bl	80042ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003696:	4b1d      	ldr	r3, [pc, #116]	; (800370c <xTaskCheckForTimeOut+0xbc>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	69ba      	ldr	r2, [r7, #24]
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ae:	d102      	bne.n	80036b6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80036b0:	2300      	movs	r3, #0
 80036b2:	61fb      	str	r3, [r7, #28]
 80036b4:	e023      	b.n	80036fe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	4b15      	ldr	r3, [pc, #84]	; (8003710 <xTaskCheckForTimeOut+0xc0>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d007      	beq.n	80036d2 <xTaskCheckForTimeOut+0x82>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	69ba      	ldr	r2, [r7, #24]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d302      	bcc.n	80036d2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80036cc:	2301      	movs	r3, #1
 80036ce:	61fb      	str	r3, [r7, #28]
 80036d0:	e015      	b.n	80036fe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	697a      	ldr	r2, [r7, #20]
 80036d8:	429a      	cmp	r2, r3
 80036da:	d20b      	bcs.n	80036f4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	1ad2      	subs	r2, r2, r3
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f7ff ff9b 	bl	8003624 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80036ee:	2300      	movs	r3, #0
 80036f0:	61fb      	str	r3, [r7, #28]
 80036f2:	e004      	b.n	80036fe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	2200      	movs	r2, #0
 80036f8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80036fa:	2301      	movs	r3, #1
 80036fc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80036fe:	f000 fe05 	bl	800430c <vPortExitCritical>

	return xReturn;
 8003702:	69fb      	ldr	r3, [r7, #28]
}
 8003704:	4618      	mov	r0, r3
 8003706:	3720      	adds	r7, #32
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}
 800370c:	20000df8 	.word	0x20000df8
 8003710:	20000e0c 	.word	0x20000e0c

08003714 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003714:	b480      	push	{r7}
 8003716:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003718:	4b03      	ldr	r3, [pc, #12]	; (8003728 <vTaskMissedYield+0x14>)
 800371a:	2201      	movs	r2, #1
 800371c:	601a      	str	r2, [r3, #0]
}
 800371e:	bf00      	nop
 8003720:	46bd      	mov	sp, r7
 8003722:	bc80      	pop	{r7}
 8003724:	4770      	bx	lr
 8003726:	bf00      	nop
 8003728:	20000e08 	.word	0x20000e08

0800372c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003734:	f000 f852 	bl	80037dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003738:	4b06      	ldr	r3, [pc, #24]	; (8003754 <prvIdleTask+0x28>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2b01      	cmp	r3, #1
 800373e:	d9f9      	bls.n	8003734 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003740:	4b05      	ldr	r3, [pc, #20]	; (8003758 <prvIdleTask+0x2c>)
 8003742:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003746:	601a      	str	r2, [r3, #0]
 8003748:	f3bf 8f4f 	dsb	sy
 800374c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003750:	e7f0      	b.n	8003734 <prvIdleTask+0x8>
 8003752:	bf00      	nop
 8003754:	20000924 	.word	0x20000924
 8003758:	e000ed04 	.word	0xe000ed04

0800375c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003762:	2300      	movs	r3, #0
 8003764:	607b      	str	r3, [r7, #4]
 8003766:	e00c      	b.n	8003782 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	4613      	mov	r3, r2
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	4413      	add	r3, r2
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	4a12      	ldr	r2, [pc, #72]	; (80037bc <prvInitialiseTaskLists+0x60>)
 8003774:	4413      	add	r3, r2
 8003776:	4618      	mov	r0, r3
 8003778:	f7fe fcdc 	bl	8002134 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	3301      	adds	r3, #1
 8003780:	607b      	str	r3, [r7, #4]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2b37      	cmp	r3, #55	; 0x37
 8003786:	d9ef      	bls.n	8003768 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003788:	480d      	ldr	r0, [pc, #52]	; (80037c0 <prvInitialiseTaskLists+0x64>)
 800378a:	f7fe fcd3 	bl	8002134 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800378e:	480d      	ldr	r0, [pc, #52]	; (80037c4 <prvInitialiseTaskLists+0x68>)
 8003790:	f7fe fcd0 	bl	8002134 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003794:	480c      	ldr	r0, [pc, #48]	; (80037c8 <prvInitialiseTaskLists+0x6c>)
 8003796:	f7fe fccd 	bl	8002134 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800379a:	480c      	ldr	r0, [pc, #48]	; (80037cc <prvInitialiseTaskLists+0x70>)
 800379c:	f7fe fcca 	bl	8002134 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80037a0:	480b      	ldr	r0, [pc, #44]	; (80037d0 <prvInitialiseTaskLists+0x74>)
 80037a2:	f7fe fcc7 	bl	8002134 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80037a6:	4b0b      	ldr	r3, [pc, #44]	; (80037d4 <prvInitialiseTaskLists+0x78>)
 80037a8:	4a05      	ldr	r2, [pc, #20]	; (80037c0 <prvInitialiseTaskLists+0x64>)
 80037aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80037ac:	4b0a      	ldr	r3, [pc, #40]	; (80037d8 <prvInitialiseTaskLists+0x7c>)
 80037ae:	4a05      	ldr	r2, [pc, #20]	; (80037c4 <prvInitialiseTaskLists+0x68>)
 80037b0:	601a      	str	r2, [r3, #0]
}
 80037b2:	bf00      	nop
 80037b4:	3708      	adds	r7, #8
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	20000924 	.word	0x20000924
 80037c0:	20000d84 	.word	0x20000d84
 80037c4:	20000d98 	.word	0x20000d98
 80037c8:	20000db4 	.word	0x20000db4
 80037cc:	20000dc8 	.word	0x20000dc8
 80037d0:	20000de0 	.word	0x20000de0
 80037d4:	20000dac 	.word	0x20000dac
 80037d8:	20000db0 	.word	0x20000db0

080037dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80037e2:	e019      	b.n	8003818 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80037e4:	f000 fd62 	bl	80042ac <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80037e8:	4b10      	ldr	r3, [pc, #64]	; (800382c <prvCheckTasksWaitingTermination+0x50>)
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	3304      	adds	r3, #4
 80037f4:	4618      	mov	r0, r3
 80037f6:	f7fe fd23 	bl	8002240 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80037fa:	4b0d      	ldr	r3, [pc, #52]	; (8003830 <prvCheckTasksWaitingTermination+0x54>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	3b01      	subs	r3, #1
 8003800:	4a0b      	ldr	r2, [pc, #44]	; (8003830 <prvCheckTasksWaitingTermination+0x54>)
 8003802:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003804:	4b0b      	ldr	r3, [pc, #44]	; (8003834 <prvCheckTasksWaitingTermination+0x58>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	3b01      	subs	r3, #1
 800380a:	4a0a      	ldr	r2, [pc, #40]	; (8003834 <prvCheckTasksWaitingTermination+0x58>)
 800380c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800380e:	f000 fd7d 	bl	800430c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f000 f810 	bl	8003838 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003818:	4b06      	ldr	r3, [pc, #24]	; (8003834 <prvCheckTasksWaitingTermination+0x58>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d1e1      	bne.n	80037e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003820:	bf00      	nop
 8003822:	bf00      	nop
 8003824:	3708      	adds	r7, #8
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	20000dc8 	.word	0x20000dc8
 8003830:	20000df4 	.word	0x20000df4
 8003834:	20000ddc 	.word	0x20000ddc

08003838 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003838:	b580      	push	{r7, lr}
 800383a:	b084      	sub	sp, #16
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	3354      	adds	r3, #84	; 0x54
 8003844:	4618      	mov	r0, r3
 8003846:	f001 f811 	bl	800486c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8003850:	2b00      	cmp	r3, #0
 8003852:	d108      	bne.n	8003866 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003858:	4618      	mov	r0, r3
 800385a:	f000 feeb 	bl	8004634 <vPortFree>
				vPortFree( pxTCB );
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 fee8 	bl	8004634 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003864:	e018      	b.n	8003898 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800386c:	2b01      	cmp	r3, #1
 800386e:	d103      	bne.n	8003878 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f000 fedf 	bl	8004634 <vPortFree>
	}
 8003876:	e00f      	b.n	8003898 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800387e:	2b02      	cmp	r3, #2
 8003880:	d00a      	beq.n	8003898 <prvDeleteTCB+0x60>
	__asm volatile
 8003882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003886:	f383 8811 	msr	BASEPRI, r3
 800388a:	f3bf 8f6f 	isb	sy
 800388e:	f3bf 8f4f 	dsb	sy
 8003892:	60fb      	str	r3, [r7, #12]
}
 8003894:	bf00      	nop
 8003896:	e7fe      	b.n	8003896 <prvDeleteTCB+0x5e>
	}
 8003898:	bf00      	nop
 800389a:	3710      	adds	r7, #16
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80038a6:	4b0e      	ldr	r3, [pc, #56]	; (80038e0 <prvResetNextTaskUnblockTime+0x40>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d101      	bne.n	80038b4 <prvResetNextTaskUnblockTime+0x14>
 80038b0:	2301      	movs	r3, #1
 80038b2:	e000      	b.n	80038b6 <prvResetNextTaskUnblockTime+0x16>
 80038b4:	2300      	movs	r3, #0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d004      	beq.n	80038c4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80038ba:	4b0a      	ldr	r3, [pc, #40]	; (80038e4 <prvResetNextTaskUnblockTime+0x44>)
 80038bc:	f04f 32ff 	mov.w	r2, #4294967295
 80038c0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80038c2:	e008      	b.n	80038d6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80038c4:	4b06      	ldr	r3, [pc, #24]	; (80038e0 <prvResetNextTaskUnblockTime+0x40>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	4a04      	ldr	r2, [pc, #16]	; (80038e4 <prvResetNextTaskUnblockTime+0x44>)
 80038d4:	6013      	str	r3, [r2, #0]
}
 80038d6:	bf00      	nop
 80038d8:	370c      	adds	r7, #12
 80038da:	46bd      	mov	sp, r7
 80038dc:	bc80      	pop	{r7}
 80038de:	4770      	bx	lr
 80038e0:	20000dac 	.word	0x20000dac
 80038e4:	20000e14 	.word	0x20000e14

080038e8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80038ee:	4b0b      	ldr	r3, [pc, #44]	; (800391c <xTaskGetSchedulerState+0x34>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d102      	bne.n	80038fc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80038f6:	2301      	movs	r3, #1
 80038f8:	607b      	str	r3, [r7, #4]
 80038fa:	e008      	b.n	800390e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80038fc:	4b08      	ldr	r3, [pc, #32]	; (8003920 <xTaskGetSchedulerState+0x38>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d102      	bne.n	800390a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003904:	2302      	movs	r3, #2
 8003906:	607b      	str	r3, [r7, #4]
 8003908:	e001      	b.n	800390e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800390a:	2300      	movs	r3, #0
 800390c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800390e:	687b      	ldr	r3, [r7, #4]
	}
 8003910:	4618      	mov	r0, r3
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	bc80      	pop	{r7}
 8003918:	4770      	bx	lr
 800391a:	bf00      	nop
 800391c:	20000e00 	.word	0x20000e00
 8003920:	20000e1c 	.word	0x20000e1c

08003924 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003924:	b580      	push	{r7, lr}
 8003926:	b086      	sub	sp, #24
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003930:	2300      	movs	r3, #0
 8003932:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d056      	beq.n	80039e8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800393a:	4b2e      	ldr	r3, [pc, #184]	; (80039f4 <xTaskPriorityDisinherit+0xd0>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	693a      	ldr	r2, [r7, #16]
 8003940:	429a      	cmp	r2, r3
 8003942:	d00a      	beq.n	800395a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003948:	f383 8811 	msr	BASEPRI, r3
 800394c:	f3bf 8f6f 	isb	sy
 8003950:	f3bf 8f4f 	dsb	sy
 8003954:	60fb      	str	r3, [r7, #12]
}
 8003956:	bf00      	nop
 8003958:	e7fe      	b.n	8003958 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800395e:	2b00      	cmp	r3, #0
 8003960:	d10a      	bne.n	8003978 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003966:	f383 8811 	msr	BASEPRI, r3
 800396a:	f3bf 8f6f 	isb	sy
 800396e:	f3bf 8f4f 	dsb	sy
 8003972:	60bb      	str	r3, [r7, #8]
}
 8003974:	bf00      	nop
 8003976:	e7fe      	b.n	8003976 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800397c:	1e5a      	subs	r2, r3, #1
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800398a:	429a      	cmp	r2, r3
 800398c:	d02c      	beq.n	80039e8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003992:	2b00      	cmp	r3, #0
 8003994:	d128      	bne.n	80039e8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	3304      	adds	r3, #4
 800399a:	4618      	mov	r0, r3
 800399c:	f7fe fc50 	bl	8002240 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ac:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039b8:	4b0f      	ldr	r3, [pc, #60]	; (80039f8 <xTaskPriorityDisinherit+0xd4>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d903      	bls.n	80039c8 <xTaskPriorityDisinherit+0xa4>
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c4:	4a0c      	ldr	r2, [pc, #48]	; (80039f8 <xTaskPriorityDisinherit+0xd4>)
 80039c6:	6013      	str	r3, [r2, #0]
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039cc:	4613      	mov	r3, r2
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	4413      	add	r3, r2
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	4a09      	ldr	r2, [pc, #36]	; (80039fc <xTaskPriorityDisinherit+0xd8>)
 80039d6:	441a      	add	r2, r3
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	3304      	adds	r3, #4
 80039dc:	4619      	mov	r1, r3
 80039de:	4610      	mov	r0, r2
 80039e0:	f7fe fbd3 	bl	800218a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80039e4:	2301      	movs	r3, #1
 80039e6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80039e8:	697b      	ldr	r3, [r7, #20]
	}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3718      	adds	r7, #24
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	20000920 	.word	0x20000920
 80039f8:	20000dfc 	.word	0x20000dfc
 80039fc:	20000924 	.word	0x20000924

08003a00 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003a0a:	4b21      	ldr	r3, [pc, #132]	; (8003a90 <prvAddCurrentTaskToDelayedList+0x90>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a10:	4b20      	ldr	r3, [pc, #128]	; (8003a94 <prvAddCurrentTaskToDelayedList+0x94>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	3304      	adds	r3, #4
 8003a16:	4618      	mov	r0, r3
 8003a18:	f7fe fc12 	bl	8002240 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a22:	d10a      	bne.n	8003a3a <prvAddCurrentTaskToDelayedList+0x3a>
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d007      	beq.n	8003a3a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a2a:	4b1a      	ldr	r3, [pc, #104]	; (8003a94 <prvAddCurrentTaskToDelayedList+0x94>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	3304      	adds	r3, #4
 8003a30:	4619      	mov	r1, r3
 8003a32:	4819      	ldr	r0, [pc, #100]	; (8003a98 <prvAddCurrentTaskToDelayedList+0x98>)
 8003a34:	f7fe fba9 	bl	800218a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003a38:	e026      	b.n	8003a88 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003a3a:	68fa      	ldr	r2, [r7, #12]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	4413      	add	r3, r2
 8003a40:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003a42:	4b14      	ldr	r3, [pc, #80]	; (8003a94 <prvAddCurrentTaskToDelayedList+0x94>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	68ba      	ldr	r2, [r7, #8]
 8003a48:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003a4a:	68ba      	ldr	r2, [r7, #8]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d209      	bcs.n	8003a66 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a52:	4b12      	ldr	r3, [pc, #72]	; (8003a9c <prvAddCurrentTaskToDelayedList+0x9c>)
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	4b0f      	ldr	r3, [pc, #60]	; (8003a94 <prvAddCurrentTaskToDelayedList+0x94>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	3304      	adds	r3, #4
 8003a5c:	4619      	mov	r1, r3
 8003a5e:	4610      	mov	r0, r2
 8003a60:	f7fe fbb6 	bl	80021d0 <vListInsert>
}
 8003a64:	e010      	b.n	8003a88 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a66:	4b0e      	ldr	r3, [pc, #56]	; (8003aa0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	4b0a      	ldr	r3, [pc, #40]	; (8003a94 <prvAddCurrentTaskToDelayedList+0x94>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	3304      	adds	r3, #4
 8003a70:	4619      	mov	r1, r3
 8003a72:	4610      	mov	r0, r2
 8003a74:	f7fe fbac 	bl	80021d0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003a78:	4b0a      	ldr	r3, [pc, #40]	; (8003aa4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68ba      	ldr	r2, [r7, #8]
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d202      	bcs.n	8003a88 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003a82:	4a08      	ldr	r2, [pc, #32]	; (8003aa4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	6013      	str	r3, [r2, #0]
}
 8003a88:	bf00      	nop
 8003a8a:	3710      	adds	r7, #16
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	20000df8 	.word	0x20000df8
 8003a94:	20000920 	.word	0x20000920
 8003a98:	20000de0 	.word	0x20000de0
 8003a9c:	20000db0 	.word	0x20000db0
 8003aa0:	20000dac 	.word	0x20000dac
 8003aa4:	20000e14 	.word	0x20000e14

08003aa8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b08a      	sub	sp, #40	; 0x28
 8003aac:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003ab2:	f000 facb 	bl	800404c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003ab6:	4b1c      	ldr	r3, [pc, #112]	; (8003b28 <xTimerCreateTimerTask+0x80>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d021      	beq.n	8003b02 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003ac6:	1d3a      	adds	r2, r7, #4
 8003ac8:	f107 0108 	add.w	r1, r7, #8
 8003acc:	f107 030c 	add.w	r3, r7, #12
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f7fe fb15 	bl	8002100 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003ad6:	6879      	ldr	r1, [r7, #4]
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	68fa      	ldr	r2, [r7, #12]
 8003adc:	9202      	str	r2, [sp, #8]
 8003ade:	9301      	str	r3, [sp, #4]
 8003ae0:	2302      	movs	r3, #2
 8003ae2:	9300      	str	r3, [sp, #0]
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	460a      	mov	r2, r1
 8003ae8:	4910      	ldr	r1, [pc, #64]	; (8003b2c <xTimerCreateTimerTask+0x84>)
 8003aea:	4811      	ldr	r0, [pc, #68]	; (8003b30 <xTimerCreateTimerTask+0x88>)
 8003aec:	f7ff f8b6 	bl	8002c5c <xTaskCreateStatic>
 8003af0:	4603      	mov	r3, r0
 8003af2:	4a10      	ldr	r2, [pc, #64]	; (8003b34 <xTimerCreateTimerTask+0x8c>)
 8003af4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003af6:	4b0f      	ldr	r3, [pc, #60]	; (8003b34 <xTimerCreateTimerTask+0x8c>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d001      	beq.n	8003b02 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003afe:	2301      	movs	r3, #1
 8003b00:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d10a      	bne.n	8003b1e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b0c:	f383 8811 	msr	BASEPRI, r3
 8003b10:	f3bf 8f6f 	isb	sy
 8003b14:	f3bf 8f4f 	dsb	sy
 8003b18:	613b      	str	r3, [r7, #16]
}
 8003b1a:	bf00      	nop
 8003b1c:	e7fe      	b.n	8003b1c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003b1e:	697b      	ldr	r3, [r7, #20]
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3718      	adds	r7, #24
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	20000e50 	.word	0x20000e50
 8003b2c:	08004a64 	.word	0x08004a64
 8003b30:	08003c55 	.word	0x08003c55
 8003b34:	20000e54 	.word	0x20000e54

08003b38 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b08a      	sub	sp, #40	; 0x28
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	60b9      	str	r1, [r7, #8]
 8003b42:	607a      	str	r2, [r7, #4]
 8003b44:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003b46:	2300      	movs	r3, #0
 8003b48:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d10a      	bne.n	8003b66 <xTimerGenericCommand+0x2e>
	__asm volatile
 8003b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b54:	f383 8811 	msr	BASEPRI, r3
 8003b58:	f3bf 8f6f 	isb	sy
 8003b5c:	f3bf 8f4f 	dsb	sy
 8003b60:	623b      	str	r3, [r7, #32]
}
 8003b62:	bf00      	nop
 8003b64:	e7fe      	b.n	8003b64 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003b66:	4b1a      	ldr	r3, [pc, #104]	; (8003bd0 <xTimerGenericCommand+0x98>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d02a      	beq.n	8003bc4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	2b05      	cmp	r3, #5
 8003b7e:	dc18      	bgt.n	8003bb2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003b80:	f7ff feb2 	bl	80038e8 <xTaskGetSchedulerState>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d109      	bne.n	8003b9e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003b8a:	4b11      	ldr	r3, [pc, #68]	; (8003bd0 <xTimerGenericCommand+0x98>)
 8003b8c:	6818      	ldr	r0, [r3, #0]
 8003b8e:	f107 0110 	add.w	r1, r7, #16
 8003b92:	2300      	movs	r3, #0
 8003b94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b96:	f7fe fc7f 	bl	8002498 <xQueueGenericSend>
 8003b9a:	6278      	str	r0, [r7, #36]	; 0x24
 8003b9c:	e012      	b.n	8003bc4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003b9e:	4b0c      	ldr	r3, [pc, #48]	; (8003bd0 <xTimerGenericCommand+0x98>)
 8003ba0:	6818      	ldr	r0, [r3, #0]
 8003ba2:	f107 0110 	add.w	r1, r7, #16
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f7fe fc75 	bl	8002498 <xQueueGenericSend>
 8003bae:	6278      	str	r0, [r7, #36]	; 0x24
 8003bb0:	e008      	b.n	8003bc4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003bb2:	4b07      	ldr	r3, [pc, #28]	; (8003bd0 <xTimerGenericCommand+0x98>)
 8003bb4:	6818      	ldr	r0, [r3, #0]
 8003bb6:	f107 0110 	add.w	r1, r7, #16
 8003bba:	2300      	movs	r3, #0
 8003bbc:	683a      	ldr	r2, [r7, #0]
 8003bbe:	f7fe fd69 	bl	8002694 <xQueueGenericSendFromISR>
 8003bc2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3728      	adds	r7, #40	; 0x28
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	20000e50 	.word	0x20000e50

08003bd4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b088      	sub	sp, #32
 8003bd8:	af02      	add	r7, sp, #8
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003bde:	4b1c      	ldr	r3, [pc, #112]	; (8003c50 <prvProcessExpiredTimer+0x7c>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	3304      	adds	r3, #4
 8003bec:	4618      	mov	r0, r3
 8003bee:	f7fe fb27 	bl	8002240 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	69db      	ldr	r3, [r3, #28]
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d122      	bne.n	8003c40 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	699a      	ldr	r2, [r3, #24]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	18d1      	adds	r1, r2, r3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	683a      	ldr	r2, [r7, #0]
 8003c06:	6978      	ldr	r0, [r7, #20]
 8003c08:	f000 f8c8 	bl	8003d9c <prvInsertTimerInActiveList>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d016      	beq.n	8003c40 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003c12:	2300      	movs	r3, #0
 8003c14:	9300      	str	r3, [sp, #0]
 8003c16:	2300      	movs	r3, #0
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	2100      	movs	r1, #0
 8003c1c:	6978      	ldr	r0, [r7, #20]
 8003c1e:	f7ff ff8b 	bl	8003b38 <xTimerGenericCommand>
 8003c22:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d10a      	bne.n	8003c40 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8003c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c2e:	f383 8811 	msr	BASEPRI, r3
 8003c32:	f3bf 8f6f 	isb	sy
 8003c36:	f3bf 8f4f 	dsb	sy
 8003c3a:	60fb      	str	r3, [r7, #12]
}
 8003c3c:	bf00      	nop
 8003c3e:	e7fe      	b.n	8003c3e <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c44:	6978      	ldr	r0, [r7, #20]
 8003c46:	4798      	blx	r3
}
 8003c48:	bf00      	nop
 8003c4a:	3718      	adds	r7, #24
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	20000e48 	.word	0x20000e48

08003c54 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b084      	sub	sp, #16
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003c5c:	f107 0308 	add.w	r3, r7, #8
 8003c60:	4618      	mov	r0, r3
 8003c62:	f000 f857 	bl	8003d14 <prvGetNextExpireTime>
 8003c66:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	4619      	mov	r1, r3
 8003c6c:	68f8      	ldr	r0, [r7, #12]
 8003c6e:	f000 f803 	bl	8003c78 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003c72:	f000 f8d5 	bl	8003e20 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003c76:	e7f1      	b.n	8003c5c <prvTimerTask+0x8>

08003c78 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003c82:	f7ff fa3f 	bl	8003104 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003c86:	f107 0308 	add.w	r3, r7, #8
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f000 f866 	bl	8003d5c <prvSampleTimeNow>
 8003c90:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d130      	bne.n	8003cfa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d10a      	bne.n	8003cb4 <prvProcessTimerOrBlockTask+0x3c>
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d806      	bhi.n	8003cb4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003ca6:	f7ff fa3b 	bl	8003120 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003caa:	68f9      	ldr	r1, [r7, #12]
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f7ff ff91 	bl	8003bd4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003cb2:	e024      	b.n	8003cfe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d008      	beq.n	8003ccc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003cba:	4b13      	ldr	r3, [pc, #76]	; (8003d08 <prvProcessTimerOrBlockTask+0x90>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	bf0c      	ite	eq
 8003cc4:	2301      	moveq	r3, #1
 8003cc6:	2300      	movne	r3, #0
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003ccc:	4b0f      	ldr	r3, [pc, #60]	; (8003d0c <prvProcessTimerOrBlockTask+0x94>)
 8003cce:	6818      	ldr	r0, [r3, #0]
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	683a      	ldr	r2, [r7, #0]
 8003cd8:	4619      	mov	r1, r3
 8003cda:	f7fe ff8b 	bl	8002bf4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003cde:	f7ff fa1f 	bl	8003120 <xTaskResumeAll>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d10a      	bne.n	8003cfe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003ce8:	4b09      	ldr	r3, [pc, #36]	; (8003d10 <prvProcessTimerOrBlockTask+0x98>)
 8003cea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cee:	601a      	str	r2, [r3, #0]
 8003cf0:	f3bf 8f4f 	dsb	sy
 8003cf4:	f3bf 8f6f 	isb	sy
}
 8003cf8:	e001      	b.n	8003cfe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003cfa:	f7ff fa11 	bl	8003120 <xTaskResumeAll>
}
 8003cfe:	bf00      	nop
 8003d00:	3710      	adds	r7, #16
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	bf00      	nop
 8003d08:	20000e4c 	.word	0x20000e4c
 8003d0c:	20000e50 	.word	0x20000e50
 8003d10:	e000ed04 	.word	0xe000ed04

08003d14 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003d14:	b480      	push	{r7}
 8003d16:	b085      	sub	sp, #20
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003d1c:	4b0e      	ldr	r3, [pc, #56]	; (8003d58 <prvGetNextExpireTime+0x44>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	bf0c      	ite	eq
 8003d26:	2301      	moveq	r3, #1
 8003d28:	2300      	movne	r3, #0
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d105      	bne.n	8003d46 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003d3a:	4b07      	ldr	r3, [pc, #28]	; (8003d58 <prvGetNextExpireTime+0x44>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	60fb      	str	r3, [r7, #12]
 8003d44:	e001      	b.n	8003d4a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003d46:	2300      	movs	r3, #0
 8003d48:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3714      	adds	r7, #20
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bc80      	pop	{r7}
 8003d54:	4770      	bx	lr
 8003d56:	bf00      	nop
 8003d58:	20000e48 	.word	0x20000e48

08003d5c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003d64:	f7ff fa7a 	bl	800325c <xTaskGetTickCount>
 8003d68:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003d6a:	4b0b      	ldr	r3, [pc, #44]	; (8003d98 <prvSampleTimeNow+0x3c>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	68fa      	ldr	r2, [r7, #12]
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d205      	bcs.n	8003d80 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003d74:	f000 f908 	bl	8003f88 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	601a      	str	r2, [r3, #0]
 8003d7e:	e002      	b.n	8003d86 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003d86:	4a04      	ldr	r2, [pc, #16]	; (8003d98 <prvSampleTimeNow+0x3c>)
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3710      	adds	r7, #16
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	20000e58 	.word	0x20000e58

08003d9c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b086      	sub	sp, #24
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	60f8      	str	r0, [r7, #12]
 8003da4:	60b9      	str	r1, [r7, #8]
 8003da6:	607a      	str	r2, [r7, #4]
 8003da8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003daa:	2300      	movs	r3, #0
 8003dac:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	68ba      	ldr	r2, [r7, #8]
 8003db2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	68fa      	ldr	r2, [r7, #12]
 8003db8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003dba:	68ba      	ldr	r2, [r7, #8]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d812      	bhi.n	8003de8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	1ad2      	subs	r2, r2, r3
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	699b      	ldr	r3, [r3, #24]
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d302      	bcc.n	8003dd6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	617b      	str	r3, [r7, #20]
 8003dd4:	e01b      	b.n	8003e0e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003dd6:	4b10      	ldr	r3, [pc, #64]	; (8003e18 <prvInsertTimerInActiveList+0x7c>)
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	3304      	adds	r3, #4
 8003dde:	4619      	mov	r1, r3
 8003de0:	4610      	mov	r0, r2
 8003de2:	f7fe f9f5 	bl	80021d0 <vListInsert>
 8003de6:	e012      	b.n	8003e0e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d206      	bcs.n	8003dfe <prvInsertTimerInActiveList+0x62>
 8003df0:	68ba      	ldr	r2, [r7, #8]
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d302      	bcc.n	8003dfe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	617b      	str	r3, [r7, #20]
 8003dfc:	e007      	b.n	8003e0e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003dfe:	4b07      	ldr	r3, [pc, #28]	; (8003e1c <prvInsertTimerInActiveList+0x80>)
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	3304      	adds	r3, #4
 8003e06:	4619      	mov	r1, r3
 8003e08:	4610      	mov	r0, r2
 8003e0a:	f7fe f9e1 	bl	80021d0 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003e0e:	697b      	ldr	r3, [r7, #20]
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3718      	adds	r7, #24
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	20000e4c 	.word	0x20000e4c
 8003e1c:	20000e48 	.word	0x20000e48

08003e20 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b08e      	sub	sp, #56	; 0x38
 8003e24:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003e26:	e09d      	b.n	8003f64 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	da18      	bge.n	8003e60 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003e2e:	1d3b      	adds	r3, r7, #4
 8003e30:	3304      	adds	r3, #4
 8003e32:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d10a      	bne.n	8003e50 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8003e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e3e:	f383 8811 	msr	BASEPRI, r3
 8003e42:	f3bf 8f6f 	isb	sy
 8003e46:	f3bf 8f4f 	dsb	sy
 8003e4a:	61fb      	str	r3, [r7, #28]
}
 8003e4c:	bf00      	nop
 8003e4e:	e7fe      	b.n	8003e4e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e56:	6850      	ldr	r0, [r2, #4]
 8003e58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e5a:	6892      	ldr	r2, [r2, #8]
 8003e5c:	4611      	mov	r1, r2
 8003e5e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	db7e      	blt.n	8003f64 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e6c:	695b      	ldr	r3, [r3, #20]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d004      	beq.n	8003e7c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e74:	3304      	adds	r3, #4
 8003e76:	4618      	mov	r0, r3
 8003e78:	f7fe f9e2 	bl	8002240 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003e7c:	463b      	mov	r3, r7
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f7ff ff6c 	bl	8003d5c <prvSampleTimeNow>
 8003e84:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2b09      	cmp	r3, #9
 8003e8a:	d86a      	bhi.n	8003f62 <prvProcessReceivedCommands+0x142>
 8003e8c:	a201      	add	r2, pc, #4	; (adr r2, 8003e94 <prvProcessReceivedCommands+0x74>)
 8003e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e92:	bf00      	nop
 8003e94:	08003ebd 	.word	0x08003ebd
 8003e98:	08003ebd 	.word	0x08003ebd
 8003e9c:	08003ebd 	.word	0x08003ebd
 8003ea0:	08003f65 	.word	0x08003f65
 8003ea4:	08003f19 	.word	0x08003f19
 8003ea8:	08003f51 	.word	0x08003f51
 8003eac:	08003ebd 	.word	0x08003ebd
 8003eb0:	08003ebd 	.word	0x08003ebd
 8003eb4:	08003f65 	.word	0x08003f65
 8003eb8:	08003f19 	.word	0x08003f19
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003ebc:	68ba      	ldr	r2, [r7, #8]
 8003ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ec0:	699b      	ldr	r3, [r3, #24]
 8003ec2:	18d1      	adds	r1, r2, r3
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ec8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003eca:	f7ff ff67 	bl	8003d9c <prvInsertTimerInActiveList>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d047      	beq.n	8003f64 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003eda:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ede:	69db      	ldr	r3, [r3, #28]
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d13f      	bne.n	8003f64 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003ee4:	68ba      	ldr	r2, [r7, #8]
 8003ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ee8:	699b      	ldr	r3, [r3, #24]
 8003eea:	441a      	add	r2, r3
 8003eec:	2300      	movs	r3, #0
 8003eee:	9300      	str	r3, [sp, #0]
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	2100      	movs	r1, #0
 8003ef4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ef6:	f7ff fe1f 	bl	8003b38 <xTimerGenericCommand>
 8003efa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003efc:	6a3b      	ldr	r3, [r7, #32]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d130      	bne.n	8003f64 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8003f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f06:	f383 8811 	msr	BASEPRI, r3
 8003f0a:	f3bf 8f6f 	isb	sy
 8003f0e:	f3bf 8f4f 	dsb	sy
 8003f12:	61bb      	str	r3, [r7, #24]
}
 8003f14:	bf00      	nop
 8003f16:	e7fe      	b.n	8003f16 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003f18:	68ba      	ldr	r2, [r7, #8]
 8003f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f1c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f20:	699b      	ldr	r3, [r3, #24]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d10a      	bne.n	8003f3c <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8003f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f2a:	f383 8811 	msr	BASEPRI, r3
 8003f2e:	f3bf 8f6f 	isb	sy
 8003f32:	f3bf 8f4f 	dsb	sy
 8003f36:	617b      	str	r3, [r7, #20]
}
 8003f38:	bf00      	nop
 8003f3a:	e7fe      	b.n	8003f3a <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f3e:	699a      	ldr	r2, [r3, #24]
 8003f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f42:	18d1      	adds	r1, r2, r3
 8003f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f4a:	f7ff ff27 	bl	8003d9c <prvInsertTimerInActiveList>
					break;
 8003f4e:	e009      	b.n	8003f64 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8003f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f52:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d104      	bne.n	8003f64 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8003f5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f5c:	f000 fb6a 	bl	8004634 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003f60:	e000      	b.n	8003f64 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 8003f62:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003f64:	4b07      	ldr	r3, [pc, #28]	; (8003f84 <prvProcessReceivedCommands+0x164>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	1d39      	adds	r1, r7, #4
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f7fe fc29 	bl	80027c4 <xQueueReceive>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	f47f af57 	bne.w	8003e28 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8003f7a:	bf00      	nop
 8003f7c:	bf00      	nop
 8003f7e:	3730      	adds	r7, #48	; 0x30
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	20000e50 	.word	0x20000e50

08003f88 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b088      	sub	sp, #32
 8003f8c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003f8e:	e045      	b.n	800401c <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003f90:	4b2c      	ldr	r3, [pc, #176]	; (8004044 <prvSwitchTimerLists+0xbc>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003f9a:	4b2a      	ldr	r3, [pc, #168]	; (8004044 <prvSwitchTimerLists+0xbc>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	3304      	adds	r3, #4
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f7fe f949 	bl	8002240 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb2:	68f8      	ldr	r0, [r7, #12]
 8003fb4:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	69db      	ldr	r3, [r3, #28]
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d12e      	bne.n	800401c <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	699b      	ldr	r3, [r3, #24]
 8003fc2:	693a      	ldr	r2, [r7, #16]
 8003fc4:	4413      	add	r3, r2
 8003fc6:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003fc8:	68ba      	ldr	r2, [r7, #8]
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d90e      	bls.n	8003fee <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	68ba      	ldr	r2, [r7, #8]
 8003fd4:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	68fa      	ldr	r2, [r7, #12]
 8003fda:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003fdc:	4b19      	ldr	r3, [pc, #100]	; (8004044 <prvSwitchTimerLists+0xbc>)
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	3304      	adds	r3, #4
 8003fe4:	4619      	mov	r1, r3
 8003fe6:	4610      	mov	r0, r2
 8003fe8:	f7fe f8f2 	bl	80021d0 <vListInsert>
 8003fec:	e016      	b.n	800401c <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003fee:	2300      	movs	r3, #0
 8003ff0:	9300      	str	r3, [sp, #0]
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	693a      	ldr	r2, [r7, #16]
 8003ff6:	2100      	movs	r1, #0
 8003ff8:	68f8      	ldr	r0, [r7, #12]
 8003ffa:	f7ff fd9d 	bl	8003b38 <xTimerGenericCommand>
 8003ffe:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d10a      	bne.n	800401c <prvSwitchTimerLists+0x94>
	__asm volatile
 8004006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800400a:	f383 8811 	msr	BASEPRI, r3
 800400e:	f3bf 8f6f 	isb	sy
 8004012:	f3bf 8f4f 	dsb	sy
 8004016:	603b      	str	r3, [r7, #0]
}
 8004018:	bf00      	nop
 800401a:	e7fe      	b.n	800401a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800401c:	4b09      	ldr	r3, [pc, #36]	; (8004044 <prvSwitchTimerLists+0xbc>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d1b4      	bne.n	8003f90 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004026:	4b07      	ldr	r3, [pc, #28]	; (8004044 <prvSwitchTimerLists+0xbc>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800402c:	4b06      	ldr	r3, [pc, #24]	; (8004048 <prvSwitchTimerLists+0xc0>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a04      	ldr	r2, [pc, #16]	; (8004044 <prvSwitchTimerLists+0xbc>)
 8004032:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004034:	4a04      	ldr	r2, [pc, #16]	; (8004048 <prvSwitchTimerLists+0xc0>)
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	6013      	str	r3, [r2, #0]
}
 800403a:	bf00      	nop
 800403c:	3718      	adds	r7, #24
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	20000e48 	.word	0x20000e48
 8004048:	20000e4c 	.word	0x20000e4c

0800404c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b082      	sub	sp, #8
 8004050:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004052:	f000 f92b 	bl	80042ac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004056:	4b15      	ldr	r3, [pc, #84]	; (80040ac <prvCheckForValidListAndQueue+0x60>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d120      	bne.n	80040a0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800405e:	4814      	ldr	r0, [pc, #80]	; (80040b0 <prvCheckForValidListAndQueue+0x64>)
 8004060:	f7fe f868 	bl	8002134 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004064:	4813      	ldr	r0, [pc, #76]	; (80040b4 <prvCheckForValidListAndQueue+0x68>)
 8004066:	f7fe f865 	bl	8002134 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800406a:	4b13      	ldr	r3, [pc, #76]	; (80040b8 <prvCheckForValidListAndQueue+0x6c>)
 800406c:	4a10      	ldr	r2, [pc, #64]	; (80040b0 <prvCheckForValidListAndQueue+0x64>)
 800406e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004070:	4b12      	ldr	r3, [pc, #72]	; (80040bc <prvCheckForValidListAndQueue+0x70>)
 8004072:	4a10      	ldr	r2, [pc, #64]	; (80040b4 <prvCheckForValidListAndQueue+0x68>)
 8004074:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004076:	2300      	movs	r3, #0
 8004078:	9300      	str	r3, [sp, #0]
 800407a:	4b11      	ldr	r3, [pc, #68]	; (80040c0 <prvCheckForValidListAndQueue+0x74>)
 800407c:	4a11      	ldr	r2, [pc, #68]	; (80040c4 <prvCheckForValidListAndQueue+0x78>)
 800407e:	2110      	movs	r1, #16
 8004080:	200a      	movs	r0, #10
 8004082:	f7fe f96f 	bl	8002364 <xQueueGenericCreateStatic>
 8004086:	4603      	mov	r3, r0
 8004088:	4a08      	ldr	r2, [pc, #32]	; (80040ac <prvCheckForValidListAndQueue+0x60>)
 800408a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800408c:	4b07      	ldr	r3, [pc, #28]	; (80040ac <prvCheckForValidListAndQueue+0x60>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d005      	beq.n	80040a0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004094:	4b05      	ldr	r3, [pc, #20]	; (80040ac <prvCheckForValidListAndQueue+0x60>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	490b      	ldr	r1, [pc, #44]	; (80040c8 <prvCheckForValidListAndQueue+0x7c>)
 800409a:	4618      	mov	r0, r3
 800409c:	f7fe fd82 	bl	8002ba4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80040a0:	f000 f934 	bl	800430c <vPortExitCritical>
}
 80040a4:	bf00      	nop
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	20000e50 	.word	0x20000e50
 80040b0:	20000e20 	.word	0x20000e20
 80040b4:	20000e34 	.word	0x20000e34
 80040b8:	20000e48 	.word	0x20000e48
 80040bc:	20000e4c 	.word	0x20000e4c
 80040c0:	20000efc 	.word	0x20000efc
 80040c4:	20000e5c 	.word	0x20000e5c
 80040c8:	08004a6c 	.word	0x08004a6c

080040cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80040cc:	b480      	push	{r7}
 80040ce:	b085      	sub	sp, #20
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	60b9      	str	r1, [r7, #8]
 80040d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	3b04      	subs	r3, #4
 80040dc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80040e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	3b04      	subs	r3, #4
 80040ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	f023 0201 	bic.w	r2, r3, #1
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	3b04      	subs	r3, #4
 80040fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80040fc:	4a08      	ldr	r2, [pc, #32]	; (8004120 <pxPortInitialiseStack+0x54>)
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	3b14      	subs	r3, #20
 8004106:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004108:	687a      	ldr	r2, [r7, #4]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	3b20      	subs	r3, #32
 8004112:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004114:	68fb      	ldr	r3, [r7, #12]
}
 8004116:	4618      	mov	r0, r3
 8004118:	3714      	adds	r7, #20
 800411a:	46bd      	mov	sp, r7
 800411c:	bc80      	pop	{r7}
 800411e:	4770      	bx	lr
 8004120:	08004125 	.word	0x08004125

08004124 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004124:	b480      	push	{r7}
 8004126:	b085      	sub	sp, #20
 8004128:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800412a:	2300      	movs	r3, #0
 800412c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800412e:	4b12      	ldr	r3, [pc, #72]	; (8004178 <prvTaskExitError+0x54>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004136:	d00a      	beq.n	800414e <prvTaskExitError+0x2a>
	__asm volatile
 8004138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800413c:	f383 8811 	msr	BASEPRI, r3
 8004140:	f3bf 8f6f 	isb	sy
 8004144:	f3bf 8f4f 	dsb	sy
 8004148:	60fb      	str	r3, [r7, #12]
}
 800414a:	bf00      	nop
 800414c:	e7fe      	b.n	800414c <prvTaskExitError+0x28>
	__asm volatile
 800414e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004152:	f383 8811 	msr	BASEPRI, r3
 8004156:	f3bf 8f6f 	isb	sy
 800415a:	f3bf 8f4f 	dsb	sy
 800415e:	60bb      	str	r3, [r7, #8]
}
 8004160:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004162:	bf00      	nop
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d0fc      	beq.n	8004164 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800416a:	bf00      	nop
 800416c:	bf00      	nop
 800416e:	3714      	adds	r7, #20
 8004170:	46bd      	mov	sp, r7
 8004172:	bc80      	pop	{r7}
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	2000000c 	.word	0x2000000c
 800417c:	00000000 	.word	0x00000000

08004180 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004180:	4b07      	ldr	r3, [pc, #28]	; (80041a0 <pxCurrentTCBConst2>)
 8004182:	6819      	ldr	r1, [r3, #0]
 8004184:	6808      	ldr	r0, [r1, #0]
 8004186:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800418a:	f380 8809 	msr	PSP, r0
 800418e:	f3bf 8f6f 	isb	sy
 8004192:	f04f 0000 	mov.w	r0, #0
 8004196:	f380 8811 	msr	BASEPRI, r0
 800419a:	f04e 0e0d 	orr.w	lr, lr, #13
 800419e:	4770      	bx	lr

080041a0 <pxCurrentTCBConst2>:
 80041a0:	20000920 	.word	0x20000920
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80041a4:	bf00      	nop
 80041a6:	bf00      	nop

080041a8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80041a8:	4806      	ldr	r0, [pc, #24]	; (80041c4 <prvPortStartFirstTask+0x1c>)
 80041aa:	6800      	ldr	r0, [r0, #0]
 80041ac:	6800      	ldr	r0, [r0, #0]
 80041ae:	f380 8808 	msr	MSP, r0
 80041b2:	b662      	cpsie	i
 80041b4:	b661      	cpsie	f
 80041b6:	f3bf 8f4f 	dsb	sy
 80041ba:	f3bf 8f6f 	isb	sy
 80041be:	df00      	svc	0
 80041c0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80041c2:	bf00      	nop
 80041c4:	e000ed08 	.word	0xe000ed08

080041c8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80041ce:	4b32      	ldr	r3, [pc, #200]	; (8004298 <xPortStartScheduler+0xd0>)
 80041d0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	22ff      	movs	r2, #255	; 0xff
 80041de:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80041e8:	78fb      	ldrb	r3, [r7, #3]
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80041f0:	b2da      	uxtb	r2, r3
 80041f2:	4b2a      	ldr	r3, [pc, #168]	; (800429c <xPortStartScheduler+0xd4>)
 80041f4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80041f6:	4b2a      	ldr	r3, [pc, #168]	; (80042a0 <xPortStartScheduler+0xd8>)
 80041f8:	2207      	movs	r2, #7
 80041fa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80041fc:	e009      	b.n	8004212 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80041fe:	4b28      	ldr	r3, [pc, #160]	; (80042a0 <xPortStartScheduler+0xd8>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	3b01      	subs	r3, #1
 8004204:	4a26      	ldr	r2, [pc, #152]	; (80042a0 <xPortStartScheduler+0xd8>)
 8004206:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004208:	78fb      	ldrb	r3, [r7, #3]
 800420a:	b2db      	uxtb	r3, r3
 800420c:	005b      	lsls	r3, r3, #1
 800420e:	b2db      	uxtb	r3, r3
 8004210:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004212:	78fb      	ldrb	r3, [r7, #3]
 8004214:	b2db      	uxtb	r3, r3
 8004216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800421a:	2b80      	cmp	r3, #128	; 0x80
 800421c:	d0ef      	beq.n	80041fe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800421e:	4b20      	ldr	r3, [pc, #128]	; (80042a0 <xPortStartScheduler+0xd8>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f1c3 0307 	rsb	r3, r3, #7
 8004226:	2b04      	cmp	r3, #4
 8004228:	d00a      	beq.n	8004240 <xPortStartScheduler+0x78>
	__asm volatile
 800422a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800422e:	f383 8811 	msr	BASEPRI, r3
 8004232:	f3bf 8f6f 	isb	sy
 8004236:	f3bf 8f4f 	dsb	sy
 800423a:	60bb      	str	r3, [r7, #8]
}
 800423c:	bf00      	nop
 800423e:	e7fe      	b.n	800423e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004240:	4b17      	ldr	r3, [pc, #92]	; (80042a0 <xPortStartScheduler+0xd8>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	021b      	lsls	r3, r3, #8
 8004246:	4a16      	ldr	r2, [pc, #88]	; (80042a0 <xPortStartScheduler+0xd8>)
 8004248:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800424a:	4b15      	ldr	r3, [pc, #84]	; (80042a0 <xPortStartScheduler+0xd8>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004252:	4a13      	ldr	r2, [pc, #76]	; (80042a0 <xPortStartScheduler+0xd8>)
 8004254:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	b2da      	uxtb	r2, r3
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800425e:	4b11      	ldr	r3, [pc, #68]	; (80042a4 <xPortStartScheduler+0xdc>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a10      	ldr	r2, [pc, #64]	; (80042a4 <xPortStartScheduler+0xdc>)
 8004264:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004268:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800426a:	4b0e      	ldr	r3, [pc, #56]	; (80042a4 <xPortStartScheduler+0xdc>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a0d      	ldr	r2, [pc, #52]	; (80042a4 <xPortStartScheduler+0xdc>)
 8004270:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004274:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004276:	f000 f8b9 	bl	80043ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800427a:	4b0b      	ldr	r3, [pc, #44]	; (80042a8 <xPortStartScheduler+0xe0>)
 800427c:	2200      	movs	r2, #0
 800427e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004280:	f7ff ff92 	bl	80041a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004284:	f7ff f8b6 	bl	80033f4 <vTaskSwitchContext>
	prvTaskExitError();
 8004288:	f7ff ff4c 	bl	8004124 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800428c:	2300      	movs	r3, #0
}
 800428e:	4618      	mov	r0, r3
 8004290:	3710      	adds	r7, #16
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	e000e400 	.word	0xe000e400
 800429c:	20000f4c 	.word	0x20000f4c
 80042a0:	20000f50 	.word	0x20000f50
 80042a4:	e000ed20 	.word	0xe000ed20
 80042a8:	2000000c 	.word	0x2000000c

080042ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
	__asm volatile
 80042b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b6:	f383 8811 	msr	BASEPRI, r3
 80042ba:	f3bf 8f6f 	isb	sy
 80042be:	f3bf 8f4f 	dsb	sy
 80042c2:	607b      	str	r3, [r7, #4]
}
 80042c4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80042c6:	4b0f      	ldr	r3, [pc, #60]	; (8004304 <vPortEnterCritical+0x58>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	3301      	adds	r3, #1
 80042cc:	4a0d      	ldr	r2, [pc, #52]	; (8004304 <vPortEnterCritical+0x58>)
 80042ce:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80042d0:	4b0c      	ldr	r3, [pc, #48]	; (8004304 <vPortEnterCritical+0x58>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d10f      	bne.n	80042f8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80042d8:	4b0b      	ldr	r3, [pc, #44]	; (8004308 <vPortEnterCritical+0x5c>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d00a      	beq.n	80042f8 <vPortEnterCritical+0x4c>
	__asm volatile
 80042e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e6:	f383 8811 	msr	BASEPRI, r3
 80042ea:	f3bf 8f6f 	isb	sy
 80042ee:	f3bf 8f4f 	dsb	sy
 80042f2:	603b      	str	r3, [r7, #0]
}
 80042f4:	bf00      	nop
 80042f6:	e7fe      	b.n	80042f6 <vPortEnterCritical+0x4a>
	}
}
 80042f8:	bf00      	nop
 80042fa:	370c      	adds	r7, #12
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bc80      	pop	{r7}
 8004300:	4770      	bx	lr
 8004302:	bf00      	nop
 8004304:	2000000c 	.word	0x2000000c
 8004308:	e000ed04 	.word	0xe000ed04

0800430c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004312:	4b11      	ldr	r3, [pc, #68]	; (8004358 <vPortExitCritical+0x4c>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d10a      	bne.n	8004330 <vPortExitCritical+0x24>
	__asm volatile
 800431a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800431e:	f383 8811 	msr	BASEPRI, r3
 8004322:	f3bf 8f6f 	isb	sy
 8004326:	f3bf 8f4f 	dsb	sy
 800432a:	607b      	str	r3, [r7, #4]
}
 800432c:	bf00      	nop
 800432e:	e7fe      	b.n	800432e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004330:	4b09      	ldr	r3, [pc, #36]	; (8004358 <vPortExitCritical+0x4c>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	3b01      	subs	r3, #1
 8004336:	4a08      	ldr	r2, [pc, #32]	; (8004358 <vPortExitCritical+0x4c>)
 8004338:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800433a:	4b07      	ldr	r3, [pc, #28]	; (8004358 <vPortExitCritical+0x4c>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d105      	bne.n	800434e <vPortExitCritical+0x42>
 8004342:	2300      	movs	r3, #0
 8004344:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	f383 8811 	msr	BASEPRI, r3
}
 800434c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800434e:	bf00      	nop
 8004350:	370c      	adds	r7, #12
 8004352:	46bd      	mov	sp, r7
 8004354:	bc80      	pop	{r7}
 8004356:	4770      	bx	lr
 8004358:	2000000c 	.word	0x2000000c
 800435c:	00000000 	.word	0x00000000

08004360 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004360:	f3ef 8009 	mrs	r0, PSP
 8004364:	f3bf 8f6f 	isb	sy
 8004368:	4b0d      	ldr	r3, [pc, #52]	; (80043a0 <pxCurrentTCBConst>)
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004370:	6010      	str	r0, [r2, #0]
 8004372:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004376:	f04f 0050 	mov.w	r0, #80	; 0x50
 800437a:	f380 8811 	msr	BASEPRI, r0
 800437e:	f7ff f839 	bl	80033f4 <vTaskSwitchContext>
 8004382:	f04f 0000 	mov.w	r0, #0
 8004386:	f380 8811 	msr	BASEPRI, r0
 800438a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800438e:	6819      	ldr	r1, [r3, #0]
 8004390:	6808      	ldr	r0, [r1, #0]
 8004392:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004396:	f380 8809 	msr	PSP, r0
 800439a:	f3bf 8f6f 	isb	sy
 800439e:	4770      	bx	lr

080043a0 <pxCurrentTCBConst>:
 80043a0:	20000920 	.word	0x20000920
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80043a4:	bf00      	nop
 80043a6:	bf00      	nop

080043a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b082      	sub	sp, #8
 80043ac:	af00      	add	r7, sp, #0
	__asm volatile
 80043ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b2:	f383 8811 	msr	BASEPRI, r3
 80043b6:	f3bf 8f6f 	isb	sy
 80043ba:	f3bf 8f4f 	dsb	sy
 80043be:	607b      	str	r3, [r7, #4]
}
 80043c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80043c2:	f7fe ff59 	bl	8003278 <xTaskIncrementTick>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d003      	beq.n	80043d4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80043cc:	4b06      	ldr	r3, [pc, #24]	; (80043e8 <SysTick_Handler+0x40>)
 80043ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043d2:	601a      	str	r2, [r3, #0]
 80043d4:	2300      	movs	r3, #0
 80043d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	f383 8811 	msr	BASEPRI, r3
}
 80043de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80043e0:	bf00      	nop
 80043e2:	3708      	adds	r7, #8
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	e000ed04 	.word	0xe000ed04

080043ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80043ec:	b480      	push	{r7}
 80043ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80043f0:	4b0a      	ldr	r3, [pc, #40]	; (800441c <vPortSetupTimerInterrupt+0x30>)
 80043f2:	2200      	movs	r2, #0
 80043f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80043f6:	4b0a      	ldr	r3, [pc, #40]	; (8004420 <vPortSetupTimerInterrupt+0x34>)
 80043f8:	2200      	movs	r2, #0
 80043fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80043fc:	4b09      	ldr	r3, [pc, #36]	; (8004424 <vPortSetupTimerInterrupt+0x38>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a09      	ldr	r2, [pc, #36]	; (8004428 <vPortSetupTimerInterrupt+0x3c>)
 8004402:	fba2 2303 	umull	r2, r3, r2, r3
 8004406:	099b      	lsrs	r3, r3, #6
 8004408:	4a08      	ldr	r2, [pc, #32]	; (800442c <vPortSetupTimerInterrupt+0x40>)
 800440a:	3b01      	subs	r3, #1
 800440c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800440e:	4b03      	ldr	r3, [pc, #12]	; (800441c <vPortSetupTimerInterrupt+0x30>)
 8004410:	2207      	movs	r2, #7
 8004412:	601a      	str	r2, [r3, #0]
}
 8004414:	bf00      	nop
 8004416:	46bd      	mov	sp, r7
 8004418:	bc80      	pop	{r7}
 800441a:	4770      	bx	lr
 800441c:	e000e010 	.word	0xe000e010
 8004420:	e000e018 	.word	0xe000e018
 8004424:	20000000 	.word	0x20000000
 8004428:	10624dd3 	.word	0x10624dd3
 800442c:	e000e014 	.word	0xe000e014

08004430 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004430:	b480      	push	{r7}
 8004432:	b085      	sub	sp, #20
 8004434:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004436:	f3ef 8305 	mrs	r3, IPSR
 800443a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2b0f      	cmp	r3, #15
 8004440:	d914      	bls.n	800446c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004442:	4a16      	ldr	r2, [pc, #88]	; (800449c <vPortValidateInterruptPriority+0x6c>)
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	4413      	add	r3, r2
 8004448:	781b      	ldrb	r3, [r3, #0]
 800444a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800444c:	4b14      	ldr	r3, [pc, #80]	; (80044a0 <vPortValidateInterruptPriority+0x70>)
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	7afa      	ldrb	r2, [r7, #11]
 8004452:	429a      	cmp	r2, r3
 8004454:	d20a      	bcs.n	800446c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800445a:	f383 8811 	msr	BASEPRI, r3
 800445e:	f3bf 8f6f 	isb	sy
 8004462:	f3bf 8f4f 	dsb	sy
 8004466:	607b      	str	r3, [r7, #4]
}
 8004468:	bf00      	nop
 800446a:	e7fe      	b.n	800446a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800446c:	4b0d      	ldr	r3, [pc, #52]	; (80044a4 <vPortValidateInterruptPriority+0x74>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004474:	4b0c      	ldr	r3, [pc, #48]	; (80044a8 <vPortValidateInterruptPriority+0x78>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	429a      	cmp	r2, r3
 800447a:	d90a      	bls.n	8004492 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800447c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004480:	f383 8811 	msr	BASEPRI, r3
 8004484:	f3bf 8f6f 	isb	sy
 8004488:	f3bf 8f4f 	dsb	sy
 800448c:	603b      	str	r3, [r7, #0]
}
 800448e:	bf00      	nop
 8004490:	e7fe      	b.n	8004490 <vPortValidateInterruptPriority+0x60>
	}
 8004492:	bf00      	nop
 8004494:	3714      	adds	r7, #20
 8004496:	46bd      	mov	sp, r7
 8004498:	bc80      	pop	{r7}
 800449a:	4770      	bx	lr
 800449c:	e000e3f0 	.word	0xe000e3f0
 80044a0:	20000f4c 	.word	0x20000f4c
 80044a4:	e000ed0c 	.word	0xe000ed0c
 80044a8:	20000f50 	.word	0x20000f50

080044ac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b08a      	sub	sp, #40	; 0x28
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80044b4:	2300      	movs	r3, #0
 80044b6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80044b8:	f7fe fe24 	bl	8003104 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80044bc:	4b58      	ldr	r3, [pc, #352]	; (8004620 <pvPortMalloc+0x174>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d101      	bne.n	80044c8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80044c4:	f000 f910 	bl	80046e8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80044c8:	4b56      	ldr	r3, [pc, #344]	; (8004624 <pvPortMalloc+0x178>)
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	4013      	ands	r3, r2
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	f040 808e 	bne.w	80045f2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d01d      	beq.n	8004518 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80044dc:	2208      	movs	r2, #8
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4413      	add	r3, r2
 80044e2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f003 0307 	and.w	r3, r3, #7
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d014      	beq.n	8004518 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f023 0307 	bic.w	r3, r3, #7
 80044f4:	3308      	adds	r3, #8
 80044f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f003 0307 	and.w	r3, r3, #7
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d00a      	beq.n	8004518 <pvPortMalloc+0x6c>
	__asm volatile
 8004502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004506:	f383 8811 	msr	BASEPRI, r3
 800450a:	f3bf 8f6f 	isb	sy
 800450e:	f3bf 8f4f 	dsb	sy
 8004512:	617b      	str	r3, [r7, #20]
}
 8004514:	bf00      	nop
 8004516:	e7fe      	b.n	8004516 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d069      	beq.n	80045f2 <pvPortMalloc+0x146>
 800451e:	4b42      	ldr	r3, [pc, #264]	; (8004628 <pvPortMalloc+0x17c>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	429a      	cmp	r2, r3
 8004526:	d864      	bhi.n	80045f2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004528:	4b40      	ldr	r3, [pc, #256]	; (800462c <pvPortMalloc+0x180>)
 800452a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800452c:	4b3f      	ldr	r3, [pc, #252]	; (800462c <pvPortMalloc+0x180>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004532:	e004      	b.n	800453e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004536:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800453e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	429a      	cmp	r2, r3
 8004546:	d903      	bls.n	8004550 <pvPortMalloc+0xa4>
 8004548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d1f1      	bne.n	8004534 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004550:	4b33      	ldr	r3, [pc, #204]	; (8004620 <pvPortMalloc+0x174>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004556:	429a      	cmp	r2, r3
 8004558:	d04b      	beq.n	80045f2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800455a:	6a3b      	ldr	r3, [r7, #32]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	2208      	movs	r2, #8
 8004560:	4413      	add	r3, r2
 8004562:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	6a3b      	ldr	r3, [r7, #32]
 800456a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800456c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456e:	685a      	ldr	r2, [r3, #4]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	1ad2      	subs	r2, r2, r3
 8004574:	2308      	movs	r3, #8
 8004576:	005b      	lsls	r3, r3, #1
 8004578:	429a      	cmp	r2, r3
 800457a:	d91f      	bls.n	80045bc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800457c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4413      	add	r3, r2
 8004582:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004584:	69bb      	ldr	r3, [r7, #24]
 8004586:	f003 0307 	and.w	r3, r3, #7
 800458a:	2b00      	cmp	r3, #0
 800458c:	d00a      	beq.n	80045a4 <pvPortMalloc+0xf8>
	__asm volatile
 800458e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004592:	f383 8811 	msr	BASEPRI, r3
 8004596:	f3bf 8f6f 	isb	sy
 800459a:	f3bf 8f4f 	dsb	sy
 800459e:	613b      	str	r3, [r7, #16]
}
 80045a0:	bf00      	nop
 80045a2:	e7fe      	b.n	80045a2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80045a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a6:	685a      	ldr	r2, [r3, #4]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	1ad2      	subs	r2, r2, r3
 80045ac:	69bb      	ldr	r3, [r7, #24]
 80045ae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80045b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80045b6:	69b8      	ldr	r0, [r7, #24]
 80045b8:	f000 f8f8 	bl	80047ac <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80045bc:	4b1a      	ldr	r3, [pc, #104]	; (8004628 <pvPortMalloc+0x17c>)
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	4a18      	ldr	r2, [pc, #96]	; (8004628 <pvPortMalloc+0x17c>)
 80045c8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80045ca:	4b17      	ldr	r3, [pc, #92]	; (8004628 <pvPortMalloc+0x17c>)
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	4b18      	ldr	r3, [pc, #96]	; (8004630 <pvPortMalloc+0x184>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d203      	bcs.n	80045de <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80045d6:	4b14      	ldr	r3, [pc, #80]	; (8004628 <pvPortMalloc+0x17c>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a15      	ldr	r2, [pc, #84]	; (8004630 <pvPortMalloc+0x184>)
 80045dc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80045de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e0:	685a      	ldr	r2, [r3, #4]
 80045e2:	4b10      	ldr	r3, [pc, #64]	; (8004624 <pvPortMalloc+0x178>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	431a      	orrs	r2, r3
 80045e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80045ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ee:	2200      	movs	r2, #0
 80045f0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80045f2:	f7fe fd95 	bl	8003120 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	f003 0307 	and.w	r3, r3, #7
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d00a      	beq.n	8004616 <pvPortMalloc+0x16a>
	__asm volatile
 8004600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004604:	f383 8811 	msr	BASEPRI, r3
 8004608:	f3bf 8f6f 	isb	sy
 800460c:	f3bf 8f4f 	dsb	sy
 8004610:	60fb      	str	r3, [r7, #12]
}
 8004612:	bf00      	nop
 8004614:	e7fe      	b.n	8004614 <pvPortMalloc+0x168>
	return pvReturn;
 8004616:	69fb      	ldr	r3, [r7, #28]
}
 8004618:	4618      	mov	r0, r3
 800461a:	3728      	adds	r7, #40	; 0x28
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}
 8004620:	20001b5c 	.word	0x20001b5c
 8004624:	20001b68 	.word	0x20001b68
 8004628:	20001b60 	.word	0x20001b60
 800462c:	20001b54 	.word	0x20001b54
 8004630:	20001b64 	.word	0x20001b64

08004634 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b086      	sub	sp, #24
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d048      	beq.n	80046d8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004646:	2308      	movs	r3, #8
 8004648:	425b      	negs	r3, r3
 800464a:	697a      	ldr	r2, [r7, #20]
 800464c:	4413      	add	r3, r2
 800464e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	685a      	ldr	r2, [r3, #4]
 8004658:	4b21      	ldr	r3, [pc, #132]	; (80046e0 <vPortFree+0xac>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4013      	ands	r3, r2
 800465e:	2b00      	cmp	r3, #0
 8004660:	d10a      	bne.n	8004678 <vPortFree+0x44>
	__asm volatile
 8004662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004666:	f383 8811 	msr	BASEPRI, r3
 800466a:	f3bf 8f6f 	isb	sy
 800466e:	f3bf 8f4f 	dsb	sy
 8004672:	60fb      	str	r3, [r7, #12]
}
 8004674:	bf00      	nop
 8004676:	e7fe      	b.n	8004676 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d00a      	beq.n	8004696 <vPortFree+0x62>
	__asm volatile
 8004680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004684:	f383 8811 	msr	BASEPRI, r3
 8004688:	f3bf 8f6f 	isb	sy
 800468c:	f3bf 8f4f 	dsb	sy
 8004690:	60bb      	str	r3, [r7, #8]
}
 8004692:	bf00      	nop
 8004694:	e7fe      	b.n	8004694 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	685a      	ldr	r2, [r3, #4]
 800469a:	4b11      	ldr	r3, [pc, #68]	; (80046e0 <vPortFree+0xac>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4013      	ands	r3, r2
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d019      	beq.n	80046d8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d115      	bne.n	80046d8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	685a      	ldr	r2, [r3, #4]
 80046b0:	4b0b      	ldr	r3, [pc, #44]	; (80046e0 <vPortFree+0xac>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	43db      	mvns	r3, r3
 80046b6:	401a      	ands	r2, r3
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80046bc:	f7fe fd22 	bl	8003104 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	685a      	ldr	r2, [r3, #4]
 80046c4:	4b07      	ldr	r3, [pc, #28]	; (80046e4 <vPortFree+0xb0>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4413      	add	r3, r2
 80046ca:	4a06      	ldr	r2, [pc, #24]	; (80046e4 <vPortFree+0xb0>)
 80046cc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80046ce:	6938      	ldr	r0, [r7, #16]
 80046d0:	f000 f86c 	bl	80047ac <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80046d4:	f7fe fd24 	bl	8003120 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80046d8:	bf00      	nop
 80046da:	3718      	adds	r7, #24
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	20001b68 	.word	0x20001b68
 80046e4:	20001b60 	.word	0x20001b60

080046e8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80046e8:	b480      	push	{r7}
 80046ea:	b085      	sub	sp, #20
 80046ec:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80046ee:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80046f2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80046f4:	4b27      	ldr	r3, [pc, #156]	; (8004794 <prvHeapInit+0xac>)
 80046f6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f003 0307 	and.w	r3, r3, #7
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d00c      	beq.n	800471c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	3307      	adds	r3, #7
 8004706:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f023 0307 	bic.w	r3, r3, #7
 800470e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004710:	68ba      	ldr	r2, [r7, #8]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	4a1f      	ldr	r2, [pc, #124]	; (8004794 <prvHeapInit+0xac>)
 8004718:	4413      	add	r3, r2
 800471a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004720:	4a1d      	ldr	r2, [pc, #116]	; (8004798 <prvHeapInit+0xb0>)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004726:	4b1c      	ldr	r3, [pc, #112]	; (8004798 <prvHeapInit+0xb0>)
 8004728:	2200      	movs	r2, #0
 800472a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	68ba      	ldr	r2, [r7, #8]
 8004730:	4413      	add	r3, r2
 8004732:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004734:	2208      	movs	r2, #8
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	1a9b      	subs	r3, r3, r2
 800473a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f023 0307 	bic.w	r3, r3, #7
 8004742:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	4a15      	ldr	r2, [pc, #84]	; (800479c <prvHeapInit+0xb4>)
 8004748:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800474a:	4b14      	ldr	r3, [pc, #80]	; (800479c <prvHeapInit+0xb4>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	2200      	movs	r2, #0
 8004750:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004752:	4b12      	ldr	r3, [pc, #72]	; (800479c <prvHeapInit+0xb4>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	2200      	movs	r2, #0
 8004758:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	68fa      	ldr	r2, [r7, #12]
 8004762:	1ad2      	subs	r2, r2, r3
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004768:	4b0c      	ldr	r3, [pc, #48]	; (800479c <prvHeapInit+0xb4>)
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	4a0a      	ldr	r2, [pc, #40]	; (80047a0 <prvHeapInit+0xb8>)
 8004776:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	4a09      	ldr	r2, [pc, #36]	; (80047a4 <prvHeapInit+0xbc>)
 800477e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004780:	4b09      	ldr	r3, [pc, #36]	; (80047a8 <prvHeapInit+0xc0>)
 8004782:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004786:	601a      	str	r2, [r3, #0]
}
 8004788:	bf00      	nop
 800478a:	3714      	adds	r7, #20
 800478c:	46bd      	mov	sp, r7
 800478e:	bc80      	pop	{r7}
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop
 8004794:	20000f54 	.word	0x20000f54
 8004798:	20001b54 	.word	0x20001b54
 800479c:	20001b5c 	.word	0x20001b5c
 80047a0:	20001b64 	.word	0x20001b64
 80047a4:	20001b60 	.word	0x20001b60
 80047a8:	20001b68 	.word	0x20001b68

080047ac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80047ac:	b480      	push	{r7}
 80047ae:	b085      	sub	sp, #20
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80047b4:	4b27      	ldr	r3, [pc, #156]	; (8004854 <prvInsertBlockIntoFreeList+0xa8>)
 80047b6:	60fb      	str	r3, [r7, #12]
 80047b8:	e002      	b.n	80047c0 <prvInsertBlockIntoFreeList+0x14>
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	60fb      	str	r3, [r7, #12]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d8f7      	bhi.n	80047ba <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	68ba      	ldr	r2, [r7, #8]
 80047d4:	4413      	add	r3, r2
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	429a      	cmp	r2, r3
 80047da:	d108      	bne.n	80047ee <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	685a      	ldr	r2, [r3, #4]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	441a      	add	r2, r3
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	68ba      	ldr	r2, [r7, #8]
 80047f8:	441a      	add	r2, r3
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	429a      	cmp	r2, r3
 8004800:	d118      	bne.n	8004834 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	4b14      	ldr	r3, [pc, #80]	; (8004858 <prvInsertBlockIntoFreeList+0xac>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	429a      	cmp	r2, r3
 800480c:	d00d      	beq.n	800482a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	685a      	ldr	r2, [r3, #4]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	441a      	add	r2, r3
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	601a      	str	r2, [r3, #0]
 8004828:	e008      	b.n	800483c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800482a:	4b0b      	ldr	r3, [pc, #44]	; (8004858 <prvInsertBlockIntoFreeList+0xac>)
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	601a      	str	r2, [r3, #0]
 8004832:	e003      	b.n	800483c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800483c:	68fa      	ldr	r2, [r7, #12]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	429a      	cmp	r2, r3
 8004842:	d002      	beq.n	800484a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800484a:	bf00      	nop
 800484c:	3714      	adds	r7, #20
 800484e:	46bd      	mov	sp, r7
 8004850:	bc80      	pop	{r7}
 8004852:	4770      	bx	lr
 8004854:	20001b54 	.word	0x20001b54
 8004858:	20001b5c 	.word	0x20001b5c

0800485c <memset>:
 800485c:	4603      	mov	r3, r0
 800485e:	4402      	add	r2, r0
 8004860:	4293      	cmp	r3, r2
 8004862:	d100      	bne.n	8004866 <memset+0xa>
 8004864:	4770      	bx	lr
 8004866:	f803 1b01 	strb.w	r1, [r3], #1
 800486a:	e7f9      	b.n	8004860 <memset+0x4>

0800486c <_reclaim_reent>:
 800486c:	4b29      	ldr	r3, [pc, #164]	; (8004914 <_reclaim_reent+0xa8>)
 800486e:	b570      	push	{r4, r5, r6, lr}
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4604      	mov	r4, r0
 8004874:	4283      	cmp	r3, r0
 8004876:	d04b      	beq.n	8004910 <_reclaim_reent+0xa4>
 8004878:	69c3      	ldr	r3, [r0, #28]
 800487a:	b143      	cbz	r3, 800488e <_reclaim_reent+0x22>
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d144      	bne.n	800490c <_reclaim_reent+0xa0>
 8004882:	69e3      	ldr	r3, [r4, #28]
 8004884:	6819      	ldr	r1, [r3, #0]
 8004886:	b111      	cbz	r1, 800488e <_reclaim_reent+0x22>
 8004888:	4620      	mov	r0, r4
 800488a:	f000 f879 	bl	8004980 <_free_r>
 800488e:	6961      	ldr	r1, [r4, #20]
 8004890:	b111      	cbz	r1, 8004898 <_reclaim_reent+0x2c>
 8004892:	4620      	mov	r0, r4
 8004894:	f000 f874 	bl	8004980 <_free_r>
 8004898:	69e1      	ldr	r1, [r4, #28]
 800489a:	b111      	cbz	r1, 80048a2 <_reclaim_reent+0x36>
 800489c:	4620      	mov	r0, r4
 800489e:	f000 f86f 	bl	8004980 <_free_r>
 80048a2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80048a4:	b111      	cbz	r1, 80048ac <_reclaim_reent+0x40>
 80048a6:	4620      	mov	r0, r4
 80048a8:	f000 f86a 	bl	8004980 <_free_r>
 80048ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80048ae:	b111      	cbz	r1, 80048b6 <_reclaim_reent+0x4a>
 80048b0:	4620      	mov	r0, r4
 80048b2:	f000 f865 	bl	8004980 <_free_r>
 80048b6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80048b8:	b111      	cbz	r1, 80048c0 <_reclaim_reent+0x54>
 80048ba:	4620      	mov	r0, r4
 80048bc:	f000 f860 	bl	8004980 <_free_r>
 80048c0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80048c2:	b111      	cbz	r1, 80048ca <_reclaim_reent+0x5e>
 80048c4:	4620      	mov	r0, r4
 80048c6:	f000 f85b 	bl	8004980 <_free_r>
 80048ca:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80048cc:	b111      	cbz	r1, 80048d4 <_reclaim_reent+0x68>
 80048ce:	4620      	mov	r0, r4
 80048d0:	f000 f856 	bl	8004980 <_free_r>
 80048d4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80048d6:	b111      	cbz	r1, 80048de <_reclaim_reent+0x72>
 80048d8:	4620      	mov	r0, r4
 80048da:	f000 f851 	bl	8004980 <_free_r>
 80048de:	6a23      	ldr	r3, [r4, #32]
 80048e0:	b1b3      	cbz	r3, 8004910 <_reclaim_reent+0xa4>
 80048e2:	4620      	mov	r0, r4
 80048e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80048e8:	4718      	bx	r3
 80048ea:	5949      	ldr	r1, [r1, r5]
 80048ec:	b941      	cbnz	r1, 8004900 <_reclaim_reent+0x94>
 80048ee:	3504      	adds	r5, #4
 80048f0:	69e3      	ldr	r3, [r4, #28]
 80048f2:	2d80      	cmp	r5, #128	; 0x80
 80048f4:	68d9      	ldr	r1, [r3, #12]
 80048f6:	d1f8      	bne.n	80048ea <_reclaim_reent+0x7e>
 80048f8:	4620      	mov	r0, r4
 80048fa:	f000 f841 	bl	8004980 <_free_r>
 80048fe:	e7c0      	b.n	8004882 <_reclaim_reent+0x16>
 8004900:	680e      	ldr	r6, [r1, #0]
 8004902:	4620      	mov	r0, r4
 8004904:	f000 f83c 	bl	8004980 <_free_r>
 8004908:	4631      	mov	r1, r6
 800490a:	e7ef      	b.n	80048ec <_reclaim_reent+0x80>
 800490c:	2500      	movs	r5, #0
 800490e:	e7ef      	b.n	80048f0 <_reclaim_reent+0x84>
 8004910:	bd70      	pop	{r4, r5, r6, pc}
 8004912:	bf00      	nop
 8004914:	2000005c 	.word	0x2000005c

08004918 <__libc_init_array>:
 8004918:	b570      	push	{r4, r5, r6, lr}
 800491a:	2600      	movs	r6, #0
 800491c:	4d0c      	ldr	r5, [pc, #48]	; (8004950 <__libc_init_array+0x38>)
 800491e:	4c0d      	ldr	r4, [pc, #52]	; (8004954 <__libc_init_array+0x3c>)
 8004920:	1b64      	subs	r4, r4, r5
 8004922:	10a4      	asrs	r4, r4, #2
 8004924:	42a6      	cmp	r6, r4
 8004926:	d109      	bne.n	800493c <__libc_init_array+0x24>
 8004928:	f000 f87e 	bl	8004a28 <_init>
 800492c:	2600      	movs	r6, #0
 800492e:	4d0a      	ldr	r5, [pc, #40]	; (8004958 <__libc_init_array+0x40>)
 8004930:	4c0a      	ldr	r4, [pc, #40]	; (800495c <__libc_init_array+0x44>)
 8004932:	1b64      	subs	r4, r4, r5
 8004934:	10a4      	asrs	r4, r4, #2
 8004936:	42a6      	cmp	r6, r4
 8004938:	d105      	bne.n	8004946 <__libc_init_array+0x2e>
 800493a:	bd70      	pop	{r4, r5, r6, pc}
 800493c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004940:	4798      	blx	r3
 8004942:	3601      	adds	r6, #1
 8004944:	e7ee      	b.n	8004924 <__libc_init_array+0xc>
 8004946:	f855 3b04 	ldr.w	r3, [r5], #4
 800494a:	4798      	blx	r3
 800494c:	3601      	adds	r6, #1
 800494e:	e7f2      	b.n	8004936 <__libc_init_array+0x1e>
 8004950:	08004ac4 	.word	0x08004ac4
 8004954:	08004ac4 	.word	0x08004ac4
 8004958:	08004ac4 	.word	0x08004ac4
 800495c:	08004ac8 	.word	0x08004ac8

08004960 <__retarget_lock_acquire_recursive>:
 8004960:	4770      	bx	lr

08004962 <__retarget_lock_release_recursive>:
 8004962:	4770      	bx	lr

08004964 <memcpy>:
 8004964:	440a      	add	r2, r1
 8004966:	4291      	cmp	r1, r2
 8004968:	f100 33ff 	add.w	r3, r0, #4294967295
 800496c:	d100      	bne.n	8004970 <memcpy+0xc>
 800496e:	4770      	bx	lr
 8004970:	b510      	push	{r4, lr}
 8004972:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004976:	4291      	cmp	r1, r2
 8004978:	f803 4f01 	strb.w	r4, [r3, #1]!
 800497c:	d1f9      	bne.n	8004972 <memcpy+0xe>
 800497e:	bd10      	pop	{r4, pc}

08004980 <_free_r>:
 8004980:	b538      	push	{r3, r4, r5, lr}
 8004982:	4605      	mov	r5, r0
 8004984:	2900      	cmp	r1, #0
 8004986:	d040      	beq.n	8004a0a <_free_r+0x8a>
 8004988:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800498c:	1f0c      	subs	r4, r1, #4
 800498e:	2b00      	cmp	r3, #0
 8004990:	bfb8      	it	lt
 8004992:	18e4      	addlt	r4, r4, r3
 8004994:	f000 f83c 	bl	8004a10 <__malloc_lock>
 8004998:	4a1c      	ldr	r2, [pc, #112]	; (8004a0c <_free_r+0x8c>)
 800499a:	6813      	ldr	r3, [r2, #0]
 800499c:	b933      	cbnz	r3, 80049ac <_free_r+0x2c>
 800499e:	6063      	str	r3, [r4, #4]
 80049a0:	6014      	str	r4, [r2, #0]
 80049a2:	4628      	mov	r0, r5
 80049a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80049a8:	f000 b838 	b.w	8004a1c <__malloc_unlock>
 80049ac:	42a3      	cmp	r3, r4
 80049ae:	d908      	bls.n	80049c2 <_free_r+0x42>
 80049b0:	6820      	ldr	r0, [r4, #0]
 80049b2:	1821      	adds	r1, r4, r0
 80049b4:	428b      	cmp	r3, r1
 80049b6:	bf01      	itttt	eq
 80049b8:	6819      	ldreq	r1, [r3, #0]
 80049ba:	685b      	ldreq	r3, [r3, #4]
 80049bc:	1809      	addeq	r1, r1, r0
 80049be:	6021      	streq	r1, [r4, #0]
 80049c0:	e7ed      	b.n	800499e <_free_r+0x1e>
 80049c2:	461a      	mov	r2, r3
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	b10b      	cbz	r3, 80049cc <_free_r+0x4c>
 80049c8:	42a3      	cmp	r3, r4
 80049ca:	d9fa      	bls.n	80049c2 <_free_r+0x42>
 80049cc:	6811      	ldr	r1, [r2, #0]
 80049ce:	1850      	adds	r0, r2, r1
 80049d0:	42a0      	cmp	r0, r4
 80049d2:	d10b      	bne.n	80049ec <_free_r+0x6c>
 80049d4:	6820      	ldr	r0, [r4, #0]
 80049d6:	4401      	add	r1, r0
 80049d8:	1850      	adds	r0, r2, r1
 80049da:	4283      	cmp	r3, r0
 80049dc:	6011      	str	r1, [r2, #0]
 80049de:	d1e0      	bne.n	80049a2 <_free_r+0x22>
 80049e0:	6818      	ldr	r0, [r3, #0]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	4408      	add	r0, r1
 80049e6:	6010      	str	r0, [r2, #0]
 80049e8:	6053      	str	r3, [r2, #4]
 80049ea:	e7da      	b.n	80049a2 <_free_r+0x22>
 80049ec:	d902      	bls.n	80049f4 <_free_r+0x74>
 80049ee:	230c      	movs	r3, #12
 80049f0:	602b      	str	r3, [r5, #0]
 80049f2:	e7d6      	b.n	80049a2 <_free_r+0x22>
 80049f4:	6820      	ldr	r0, [r4, #0]
 80049f6:	1821      	adds	r1, r4, r0
 80049f8:	428b      	cmp	r3, r1
 80049fa:	bf01      	itttt	eq
 80049fc:	6819      	ldreq	r1, [r3, #0]
 80049fe:	685b      	ldreq	r3, [r3, #4]
 8004a00:	1809      	addeq	r1, r1, r0
 8004a02:	6021      	streq	r1, [r4, #0]
 8004a04:	6063      	str	r3, [r4, #4]
 8004a06:	6054      	str	r4, [r2, #4]
 8004a08:	e7cb      	b.n	80049a2 <_free_r+0x22>
 8004a0a:	bd38      	pop	{r3, r4, r5, pc}
 8004a0c:	20001ca8 	.word	0x20001ca8

08004a10 <__malloc_lock>:
 8004a10:	4801      	ldr	r0, [pc, #4]	; (8004a18 <__malloc_lock+0x8>)
 8004a12:	f7ff bfa5 	b.w	8004960 <__retarget_lock_acquire_recursive>
 8004a16:	bf00      	nop
 8004a18:	20001ca4 	.word	0x20001ca4

08004a1c <__malloc_unlock>:
 8004a1c:	4801      	ldr	r0, [pc, #4]	; (8004a24 <__malloc_unlock+0x8>)
 8004a1e:	f7ff bfa0 	b.w	8004962 <__retarget_lock_release_recursive>
 8004a22:	bf00      	nop
 8004a24:	20001ca4 	.word	0x20001ca4

08004a28 <_init>:
 8004a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a2a:	bf00      	nop
 8004a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a2e:	bc08      	pop	{r3}
 8004a30:	469e      	mov	lr, r3
 8004a32:	4770      	bx	lr

08004a34 <_fini>:
 8004a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a36:	bf00      	nop
 8004a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a3a:	bc08      	pop	{r3}
 8004a3c:	469e      	mov	lr, r3
 8004a3e:	4770      	bx	lr
