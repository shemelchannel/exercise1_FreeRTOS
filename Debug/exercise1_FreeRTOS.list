
exercise1_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000361c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08003730  08003730  00013730  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003788  08003788  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08003788  08003788  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003788  08003788  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003788  08003788  00013788  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800378c  0800378c  0001378c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08003790  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000208  20000078  08003808  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000280  08003808  00020280  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003709  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000011b0  00000000  00000000  000237ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000004e0  00000000  00000000  000249a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000388  00000000  00000000  00024e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000164f3  00000000  00000000  00025208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000057a7  00000000  00000000  0003b6fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007fadc  00000000  00000000  00040ea2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000017e4  00000000  00000000  000c0980  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000c2164  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	08003714 	.word	0x08003714

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	08003714 	.word	0x08003714

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2uiz>:
 8000a28:	004a      	lsls	r2, r1, #1
 8000a2a:	d211      	bcs.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d211      	bcs.n	8000a56 <__aeabi_d2uiz+0x2e>
 8000a32:	d50d      	bpl.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d40e      	bmi.n	8000a5c <__aeabi_d2uiz+0x34>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a4e:	4770      	bx	lr
 8000a50:	f04f 0000 	mov.w	r0, #0
 8000a54:	4770      	bx	lr
 8000a56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_d2uiz+0x3a>
 8000a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0000 	mov.w	r0, #0
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_frsub>:
 8000a68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a6c:	e002      	b.n	8000a74 <__addsf3>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_fsub>:
 8000a70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a74 <__addsf3>:
 8000a74:	0042      	lsls	r2, r0, #1
 8000a76:	bf1f      	itttt	ne
 8000a78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a7c:	ea92 0f03 	teqne	r2, r3
 8000a80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a88:	d06a      	beq.n	8000b60 <__addsf3+0xec>
 8000a8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a92:	bfc1      	itttt	gt
 8000a94:	18d2      	addgt	r2, r2, r3
 8000a96:	4041      	eorgt	r1, r0
 8000a98:	4048      	eorgt	r0, r1
 8000a9a:	4041      	eorgt	r1, r0
 8000a9c:	bfb8      	it	lt
 8000a9e:	425b      	neglt	r3, r3
 8000aa0:	2b19      	cmp	r3, #25
 8000aa2:	bf88      	it	hi
 8000aa4:	4770      	bxhi	lr
 8000aa6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aaa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ab2:	bf18      	it	ne
 8000ab4:	4240      	negne	r0, r0
 8000ab6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000abe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ac2:	bf18      	it	ne
 8000ac4:	4249      	negne	r1, r1
 8000ac6:	ea92 0f03 	teq	r2, r3
 8000aca:	d03f      	beq.n	8000b4c <__addsf3+0xd8>
 8000acc:	f1a2 0201 	sub.w	r2, r2, #1
 8000ad0:	fa41 fc03 	asr.w	ip, r1, r3
 8000ad4:	eb10 000c 	adds.w	r0, r0, ip
 8000ad8:	f1c3 0320 	rsb	r3, r3, #32
 8000adc:	fa01 f103 	lsl.w	r1, r1, r3
 8000ae0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ae4:	d502      	bpl.n	8000aec <__addsf3+0x78>
 8000ae6:	4249      	negs	r1, r1
 8000ae8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000aec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000af0:	d313      	bcc.n	8000b1a <__addsf3+0xa6>
 8000af2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000af6:	d306      	bcc.n	8000b06 <__addsf3+0x92>
 8000af8:	0840      	lsrs	r0, r0, #1
 8000afa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000afe:	f102 0201 	add.w	r2, r2, #1
 8000b02:	2afe      	cmp	r2, #254	; 0xfe
 8000b04:	d251      	bcs.n	8000baa <__addsf3+0x136>
 8000b06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b0e:	bf08      	it	eq
 8000b10:	f020 0001 	biceq.w	r0, r0, #1
 8000b14:	ea40 0003 	orr.w	r0, r0, r3
 8000b18:	4770      	bx	lr
 8000b1a:	0049      	lsls	r1, r1, #1
 8000b1c:	eb40 0000 	adc.w	r0, r0, r0
 8000b20:	3a01      	subs	r2, #1
 8000b22:	bf28      	it	cs
 8000b24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b28:	d2ed      	bcs.n	8000b06 <__addsf3+0x92>
 8000b2a:	fab0 fc80 	clz	ip, r0
 8000b2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b32:	ebb2 020c 	subs.w	r2, r2, ip
 8000b36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b3a:	bfaa      	itet	ge
 8000b3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b40:	4252      	neglt	r2, r2
 8000b42:	4318      	orrge	r0, r3
 8000b44:	bfbc      	itt	lt
 8000b46:	40d0      	lsrlt	r0, r2
 8000b48:	4318      	orrlt	r0, r3
 8000b4a:	4770      	bx	lr
 8000b4c:	f092 0f00 	teq	r2, #0
 8000b50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b54:	bf06      	itte	eq
 8000b56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b5a:	3201      	addeq	r2, #1
 8000b5c:	3b01      	subne	r3, #1
 8000b5e:	e7b5      	b.n	8000acc <__addsf3+0x58>
 8000b60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b68:	bf18      	it	ne
 8000b6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b6e:	d021      	beq.n	8000bb4 <__addsf3+0x140>
 8000b70:	ea92 0f03 	teq	r2, r3
 8000b74:	d004      	beq.n	8000b80 <__addsf3+0x10c>
 8000b76:	f092 0f00 	teq	r2, #0
 8000b7a:	bf08      	it	eq
 8000b7c:	4608      	moveq	r0, r1
 8000b7e:	4770      	bx	lr
 8000b80:	ea90 0f01 	teq	r0, r1
 8000b84:	bf1c      	itt	ne
 8000b86:	2000      	movne	r0, #0
 8000b88:	4770      	bxne	lr
 8000b8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b8e:	d104      	bne.n	8000b9a <__addsf3+0x126>
 8000b90:	0040      	lsls	r0, r0, #1
 8000b92:	bf28      	it	cs
 8000b94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b98:	4770      	bx	lr
 8000b9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b9e:	bf3c      	itt	cc
 8000ba0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ba4:	4770      	bxcc	lr
 8000ba6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000baa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bb2:	4770      	bx	lr
 8000bb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bb8:	bf16      	itet	ne
 8000bba:	4608      	movne	r0, r1
 8000bbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bc0:	4601      	movne	r1, r0
 8000bc2:	0242      	lsls	r2, r0, #9
 8000bc4:	bf06      	itte	eq
 8000bc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bca:	ea90 0f01 	teqeq	r0, r1
 8000bce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bd2:	4770      	bx	lr

08000bd4 <__aeabi_ui2f>:
 8000bd4:	f04f 0300 	mov.w	r3, #0
 8000bd8:	e004      	b.n	8000be4 <__aeabi_i2f+0x8>
 8000bda:	bf00      	nop

08000bdc <__aeabi_i2f>:
 8000bdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000be0:	bf48      	it	mi
 8000be2:	4240      	negmi	r0, r0
 8000be4:	ea5f 0c00 	movs.w	ip, r0
 8000be8:	bf08      	it	eq
 8000bea:	4770      	bxeq	lr
 8000bec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000bf0:	4601      	mov	r1, r0
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	e01c      	b.n	8000c32 <__aeabi_l2f+0x2a>

08000bf8 <__aeabi_ul2f>:
 8000bf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000bfc:	bf08      	it	eq
 8000bfe:	4770      	bxeq	lr
 8000c00:	f04f 0300 	mov.w	r3, #0
 8000c04:	e00a      	b.n	8000c1c <__aeabi_l2f+0x14>
 8000c06:	bf00      	nop

08000c08 <__aeabi_l2f>:
 8000c08:	ea50 0201 	orrs.w	r2, r0, r1
 8000c0c:	bf08      	it	eq
 8000c0e:	4770      	bxeq	lr
 8000c10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c14:	d502      	bpl.n	8000c1c <__aeabi_l2f+0x14>
 8000c16:	4240      	negs	r0, r0
 8000c18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c1c:	ea5f 0c01 	movs.w	ip, r1
 8000c20:	bf02      	ittt	eq
 8000c22:	4684      	moveq	ip, r0
 8000c24:	4601      	moveq	r1, r0
 8000c26:	2000      	moveq	r0, #0
 8000c28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c2c:	bf08      	it	eq
 8000c2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c36:	fabc f28c 	clz	r2, ip
 8000c3a:	3a08      	subs	r2, #8
 8000c3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c40:	db10      	blt.n	8000c64 <__aeabi_l2f+0x5c>
 8000c42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c46:	4463      	add	r3, ip
 8000c48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c4c:	f1c2 0220 	rsb	r2, r2, #32
 8000c50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c54:	fa20 f202 	lsr.w	r2, r0, r2
 8000c58:	eb43 0002 	adc.w	r0, r3, r2
 8000c5c:	bf08      	it	eq
 8000c5e:	f020 0001 	biceq.w	r0, r0, #1
 8000c62:	4770      	bx	lr
 8000c64:	f102 0220 	add.w	r2, r2, #32
 8000c68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c74:	fa21 f202 	lsr.w	r2, r1, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c82:	4770      	bx	lr

08000c84 <__aeabi_fmul>:
 8000c84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c92:	ea92 0f0c 	teqne	r2, ip
 8000c96:	ea93 0f0c 	teqne	r3, ip
 8000c9a:	d06f      	beq.n	8000d7c <__aeabi_fmul+0xf8>
 8000c9c:	441a      	add	r2, r3
 8000c9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000ca2:	0240      	lsls	r0, r0, #9
 8000ca4:	bf18      	it	ne
 8000ca6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000caa:	d01e      	beq.n	8000cea <__aeabi_fmul+0x66>
 8000cac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cb0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cb4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cb8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000cc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000cc4:	bf3e      	ittt	cc
 8000cc6:	0049      	lslcc	r1, r1, #1
 8000cc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ccc:	005b      	lslcc	r3, r3, #1
 8000cce:	ea40 0001 	orr.w	r0, r0, r1
 8000cd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cd6:	2afd      	cmp	r2, #253	; 0xfd
 8000cd8:	d81d      	bhi.n	8000d16 <__aeabi_fmul+0x92>
 8000cda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ce2:	bf08      	it	eq
 8000ce4:	f020 0001 	biceq.w	r0, r0, #1
 8000ce8:	4770      	bx	lr
 8000cea:	f090 0f00 	teq	r0, #0
 8000cee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000cf2:	bf08      	it	eq
 8000cf4:	0249      	lsleq	r1, r1, #9
 8000cf6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000cfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000cfe:	3a7f      	subs	r2, #127	; 0x7f
 8000d00:	bfc2      	ittt	gt
 8000d02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d0a:	4770      	bxgt	lr
 8000d0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d10:	f04f 0300 	mov.w	r3, #0
 8000d14:	3a01      	subs	r2, #1
 8000d16:	dc5d      	bgt.n	8000dd4 <__aeabi_fmul+0x150>
 8000d18:	f112 0f19 	cmn.w	r2, #25
 8000d1c:	bfdc      	itt	le
 8000d1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d22:	4770      	bxle	lr
 8000d24:	f1c2 0200 	rsb	r2, r2, #0
 8000d28:	0041      	lsls	r1, r0, #1
 8000d2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d2e:	f1c2 0220 	rsb	r2, r2, #32
 8000d32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d3a:	f140 0000 	adc.w	r0, r0, #0
 8000d3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d42:	bf08      	it	eq
 8000d44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d48:	4770      	bx	lr
 8000d4a:	f092 0f00 	teq	r2, #0
 8000d4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d52:	bf02      	ittt	eq
 8000d54:	0040      	lsleq	r0, r0, #1
 8000d56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d5a:	3a01      	subeq	r2, #1
 8000d5c:	d0f9      	beq.n	8000d52 <__aeabi_fmul+0xce>
 8000d5e:	ea40 000c 	orr.w	r0, r0, ip
 8000d62:	f093 0f00 	teq	r3, #0
 8000d66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d6a:	bf02      	ittt	eq
 8000d6c:	0049      	lsleq	r1, r1, #1
 8000d6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d72:	3b01      	subeq	r3, #1
 8000d74:	d0f9      	beq.n	8000d6a <__aeabi_fmul+0xe6>
 8000d76:	ea41 010c 	orr.w	r1, r1, ip
 8000d7a:	e78f      	b.n	8000c9c <__aeabi_fmul+0x18>
 8000d7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d80:	ea92 0f0c 	teq	r2, ip
 8000d84:	bf18      	it	ne
 8000d86:	ea93 0f0c 	teqne	r3, ip
 8000d8a:	d00a      	beq.n	8000da2 <__aeabi_fmul+0x11e>
 8000d8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d90:	bf18      	it	ne
 8000d92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d96:	d1d8      	bne.n	8000d4a <__aeabi_fmul+0xc6>
 8000d98:	ea80 0001 	eor.w	r0, r0, r1
 8000d9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000da0:	4770      	bx	lr
 8000da2:	f090 0f00 	teq	r0, #0
 8000da6:	bf17      	itett	ne
 8000da8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dac:	4608      	moveq	r0, r1
 8000dae:	f091 0f00 	teqne	r1, #0
 8000db2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000db6:	d014      	beq.n	8000de2 <__aeabi_fmul+0x15e>
 8000db8:	ea92 0f0c 	teq	r2, ip
 8000dbc:	d101      	bne.n	8000dc2 <__aeabi_fmul+0x13e>
 8000dbe:	0242      	lsls	r2, r0, #9
 8000dc0:	d10f      	bne.n	8000de2 <__aeabi_fmul+0x15e>
 8000dc2:	ea93 0f0c 	teq	r3, ip
 8000dc6:	d103      	bne.n	8000dd0 <__aeabi_fmul+0x14c>
 8000dc8:	024b      	lsls	r3, r1, #9
 8000dca:	bf18      	it	ne
 8000dcc:	4608      	movne	r0, r1
 8000dce:	d108      	bne.n	8000de2 <__aeabi_fmul+0x15e>
 8000dd0:	ea80 0001 	eor.w	r0, r0, r1
 8000dd4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dd8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ddc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000de0:	4770      	bx	lr
 8000de2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000de6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000dea:	4770      	bx	lr

08000dec <__aeabi_fdiv>:
 8000dec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000df0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000df4:	bf1e      	ittt	ne
 8000df6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dfa:	ea92 0f0c 	teqne	r2, ip
 8000dfe:	ea93 0f0c 	teqne	r3, ip
 8000e02:	d069      	beq.n	8000ed8 <__aeabi_fdiv+0xec>
 8000e04:	eba2 0203 	sub.w	r2, r2, r3
 8000e08:	ea80 0c01 	eor.w	ip, r0, r1
 8000e0c:	0249      	lsls	r1, r1, #9
 8000e0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e12:	d037      	beq.n	8000e84 <__aeabi_fdiv+0x98>
 8000e14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e24:	428b      	cmp	r3, r1
 8000e26:	bf38      	it	cc
 8000e28:	005b      	lslcc	r3, r3, #1
 8000e2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e32:	428b      	cmp	r3, r1
 8000e34:	bf24      	itt	cs
 8000e36:	1a5b      	subcs	r3, r3, r1
 8000e38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e40:	bf24      	itt	cs
 8000e42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e4e:	bf24      	itt	cs
 8000e50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e5c:	bf24      	itt	cs
 8000e5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e66:	011b      	lsls	r3, r3, #4
 8000e68:	bf18      	it	ne
 8000e6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e6e:	d1e0      	bne.n	8000e32 <__aeabi_fdiv+0x46>
 8000e70:	2afd      	cmp	r2, #253	; 0xfd
 8000e72:	f63f af50 	bhi.w	8000d16 <__aeabi_fmul+0x92>
 8000e76:	428b      	cmp	r3, r1
 8000e78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e7c:	bf08      	it	eq
 8000e7e:	f020 0001 	biceq.w	r0, r0, #1
 8000e82:	4770      	bx	lr
 8000e84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e8c:	327f      	adds	r2, #127	; 0x7f
 8000e8e:	bfc2      	ittt	gt
 8000e90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e98:	4770      	bxgt	lr
 8000e9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e9e:	f04f 0300 	mov.w	r3, #0
 8000ea2:	3a01      	subs	r2, #1
 8000ea4:	e737      	b.n	8000d16 <__aeabi_fmul+0x92>
 8000ea6:	f092 0f00 	teq	r2, #0
 8000eaa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000eae:	bf02      	ittt	eq
 8000eb0:	0040      	lsleq	r0, r0, #1
 8000eb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000eb6:	3a01      	subeq	r2, #1
 8000eb8:	d0f9      	beq.n	8000eae <__aeabi_fdiv+0xc2>
 8000eba:	ea40 000c 	orr.w	r0, r0, ip
 8000ebe:	f093 0f00 	teq	r3, #0
 8000ec2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ec6:	bf02      	ittt	eq
 8000ec8:	0049      	lsleq	r1, r1, #1
 8000eca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ece:	3b01      	subeq	r3, #1
 8000ed0:	d0f9      	beq.n	8000ec6 <__aeabi_fdiv+0xda>
 8000ed2:	ea41 010c 	orr.w	r1, r1, ip
 8000ed6:	e795      	b.n	8000e04 <__aeabi_fdiv+0x18>
 8000ed8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000edc:	ea92 0f0c 	teq	r2, ip
 8000ee0:	d108      	bne.n	8000ef4 <__aeabi_fdiv+0x108>
 8000ee2:	0242      	lsls	r2, r0, #9
 8000ee4:	f47f af7d 	bne.w	8000de2 <__aeabi_fmul+0x15e>
 8000ee8:	ea93 0f0c 	teq	r3, ip
 8000eec:	f47f af70 	bne.w	8000dd0 <__aeabi_fmul+0x14c>
 8000ef0:	4608      	mov	r0, r1
 8000ef2:	e776      	b.n	8000de2 <__aeabi_fmul+0x15e>
 8000ef4:	ea93 0f0c 	teq	r3, ip
 8000ef8:	d104      	bne.n	8000f04 <__aeabi_fdiv+0x118>
 8000efa:	024b      	lsls	r3, r1, #9
 8000efc:	f43f af4c 	beq.w	8000d98 <__aeabi_fmul+0x114>
 8000f00:	4608      	mov	r0, r1
 8000f02:	e76e      	b.n	8000de2 <__aeabi_fmul+0x15e>
 8000f04:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f08:	bf18      	it	ne
 8000f0a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f0e:	d1ca      	bne.n	8000ea6 <__aeabi_fdiv+0xba>
 8000f10:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f14:	f47f af5c 	bne.w	8000dd0 <__aeabi_fmul+0x14c>
 8000f18:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f1c:	f47f af3c 	bne.w	8000d98 <__aeabi_fmul+0x114>
 8000f20:	e75f      	b.n	8000de2 <__aeabi_fmul+0x15e>
 8000f22:	bf00      	nop

08000f24 <__aeabi_f2uiz>:
 8000f24:	0042      	lsls	r2, r0, #1
 8000f26:	d20e      	bcs.n	8000f46 <__aeabi_f2uiz+0x22>
 8000f28:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f2c:	d30b      	bcc.n	8000f46 <__aeabi_f2uiz+0x22>
 8000f2e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f32:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f36:	d409      	bmi.n	8000f4c <__aeabi_f2uiz+0x28>
 8000f38:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f3c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f40:	fa23 f002 	lsr.w	r0, r3, r2
 8000f44:	4770      	bx	lr
 8000f46:	f04f 0000 	mov.w	r0, #0
 8000f4a:	4770      	bx	lr
 8000f4c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f50:	d101      	bne.n	8000f56 <__aeabi_f2uiz+0x32>
 8000f52:	0242      	lsls	r2, r0, #9
 8000f54:	d102      	bne.n	8000f5c <__aeabi_f2uiz+0x38>
 8000f56:	f04f 30ff 	mov.w	r0, #4294967295
 8000f5a:	4770      	bx	lr
 8000f5c:	f04f 0000 	mov.w	r0, #0
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop

08000f64 <APP_init>:
static state_t set_freq_state;
static state_t run_state;
static state_t stop_run_state;
static state_t reset_state;

void APP_init(APP_handle_t *handle){
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]

	h = handle;
 8000f6c:	4a17      	ldr	r2, [pc, #92]	; (8000fcc <APP_init+0x68>)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6013      	str	r3, [r2, #0]

	set_freq_state.processing = &set_freq_proc;
 8000f72:	4b17      	ldr	r3, [pc, #92]	; (8000fd0 <APP_init+0x6c>)
 8000f74:	4a17      	ldr	r2, [pc, #92]	; (8000fd4 <APP_init+0x70>)
 8000f76:	601a      	str	r2, [r3, #0]
	set_freq_state.next		  = &run_state;
 8000f78:	4b15      	ldr	r3, [pc, #84]	; (8000fd0 <APP_init+0x6c>)
 8000f7a:	4a17      	ldr	r2, [pc, #92]	; (8000fd8 <APP_init+0x74>)
 8000f7c:	605a      	str	r2, [r3, #4]
	set_freq_state.back		  = &stop_run_state;
 8000f7e:	4b14      	ldr	r3, [pc, #80]	; (8000fd0 <APP_init+0x6c>)
 8000f80:	4a16      	ldr	r2, [pc, #88]	; (8000fdc <APP_init+0x78>)
 8000f82:	609a      	str	r2, [r3, #8]

	run_state.processing = &run_proc;
 8000f84:	4b14      	ldr	r3, [pc, #80]	; (8000fd8 <APP_init+0x74>)
 8000f86:	4a16      	ldr	r2, [pc, #88]	; (8000fe0 <APP_init+0x7c>)
 8000f88:	601a      	str	r2, [r3, #0]
	run_state.next		 = &stop_run_state;
 8000f8a:	4b13      	ldr	r3, [pc, #76]	; (8000fd8 <APP_init+0x74>)
 8000f8c:	4a13      	ldr	r2, [pc, #76]	; (8000fdc <APP_init+0x78>)
 8000f8e:	605a      	str	r2, [r3, #4]
	run_state.back		 = &set_freq_state;
 8000f90:	4b11      	ldr	r3, [pc, #68]	; (8000fd8 <APP_init+0x74>)
 8000f92:	4a0f      	ldr	r2, [pc, #60]	; (8000fd0 <APP_init+0x6c>)
 8000f94:	609a      	str	r2, [r3, #8]

	stop_run_state.processing = &stop_run_proc;
 8000f96:	4b11      	ldr	r3, [pc, #68]	; (8000fdc <APP_init+0x78>)
 8000f98:	4a12      	ldr	r2, [pc, #72]	; (8000fe4 <APP_init+0x80>)
 8000f9a:	601a      	str	r2, [r3, #0]
	stop_run_state.next		  = &reset_state;
 8000f9c:	4b0f      	ldr	r3, [pc, #60]	; (8000fdc <APP_init+0x78>)
 8000f9e:	4a12      	ldr	r2, [pc, #72]	; (8000fe8 <APP_init+0x84>)
 8000fa0:	605a      	str	r2, [r3, #4]
	stop_run_state.back		  = &run_state;
 8000fa2:	4b0e      	ldr	r3, [pc, #56]	; (8000fdc <APP_init+0x78>)
 8000fa4:	4a0c      	ldr	r2, [pc, #48]	; (8000fd8 <APP_init+0x74>)
 8000fa6:	609a      	str	r2, [r3, #8]

	reset_state.processing = &reset_proc;
 8000fa8:	4b0f      	ldr	r3, [pc, #60]	; (8000fe8 <APP_init+0x84>)
 8000faa:	4a10      	ldr	r2, [pc, #64]	; (8000fec <APP_init+0x88>)
 8000fac:	601a      	str	r2, [r3, #0]
	reset_state.next	   = &set_freq_state;
 8000fae:	4b0e      	ldr	r3, [pc, #56]	; (8000fe8 <APP_init+0x84>)
 8000fb0:	4a07      	ldr	r2, [pc, #28]	; (8000fd0 <APP_init+0x6c>)
 8000fb2:	605a      	str	r2, [r3, #4]
	reset_state.back	   = &stop_run_state;
 8000fb4:	4b0c      	ldr	r3, [pc, #48]	; (8000fe8 <APP_init+0x84>)
 8000fb6:	4a09      	ldr	r2, [pc, #36]	; (8000fdc <APP_init+0x78>)
 8000fb8:	609a      	str	r2, [r3, #8]

	current_state = &(set_freq_state);
 8000fba:	4b0d      	ldr	r3, [pc, #52]	; (8000ff0 <APP_init+0x8c>)
 8000fbc:	4a04      	ldr	r2, [pc, #16]	; (8000fd0 <APP_init+0x6c>)
 8000fbe:	601a      	str	r2, [r3, #0]
}
 8000fc0:	bf00      	nop
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bc80      	pop	{r7}
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	20000094 	.word	0x20000094
 8000fd0:	2000009c 	.word	0x2000009c
 8000fd4:	0800100d 	.word	0x0800100d
 8000fd8:	200000a8 	.word	0x200000a8
 8000fdc:	200000b4 	.word	0x200000b4
 8000fe0:	08001101 	.word	0x08001101
 8000fe4:	080011b1 	.word	0x080011b1
 8000fe8:	200000c0 	.word	0x200000c0
 8000fec:	080011dd 	.word	0x080011dd
 8000ff0:	20000098 	.word	0x20000098

08000ff4 <APP_start>:

void APP_start(void) {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
	current_state->processing( &current_state);
 8000ff8:	4b03      	ldr	r3, [pc, #12]	; (8001008 <APP_start+0x14>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4802      	ldr	r0, [pc, #8]	; (8001008 <APP_start+0x14>)
 8001000:	4798      	blx	r3
}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	20000098 	.word	0x20000098

0800100c <set_freq_proc>:

static void set_freq_proc(state_t **current_state){
 800100c:	b580      	push	{r7, lr}
 800100e:	b08e      	sub	sp, #56	; 0x38
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
	uint32_t c = 0;
 8001014:	2300      	movs	r3, #0
 8001016:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t k = 0;
 8001018:	2300      	movs	r3, #0
 800101a:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t s = 1;
 800101c:	2301      	movs	r3, #1
 800101e:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t d;
	uint32_t CODE[6];
	float f0 = 0.000001;
 8001020:	4b34      	ldr	r3, [pc, #208]	; (80010f4 <set_freq_proc+0xe8>)
 8001022:	627b      	str	r3, [r7, #36]	; 0x24

	for (uint8_t i = 0; i < 6; i++)
 8001024:	2300      	movs	r3, #0
 8001026:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800102a:	e01f      	b.n	800106c <set_freq_proc+0x60>
		CODE[i] = ~(HAL_GPIO_ReadPin(h->ToggleBuf[i].Port, h->ToggleBuf[i].Pin));
 800102c:	4b32      	ldr	r3, [pc, #200]	; (80010f8 <set_freq_proc+0xec>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001034:	3208      	adds	r2, #8
 8001036:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
 800103a:	4b2f      	ldr	r3, [pc, #188]	; (80010f8 <set_freq_proc+0xec>)
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001042:	3308      	adds	r3, #8
 8001044:	00db      	lsls	r3, r3, #3
 8001046:	4413      	add	r3, r2
 8001048:	889b      	ldrh	r3, [r3, #4]
 800104a:	4619      	mov	r1, r3
 800104c:	f000 ffea 	bl	8002024 <HAL_GPIO_ReadPin>
 8001050:	4603      	mov	r3, r0
 8001052:	43da      	mvns	r2, r3
 8001054:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	3338      	adds	r3, #56	; 0x38
 800105c:	443b      	add	r3, r7
 800105e:	f843 2c30 	str.w	r2, [r3, #-48]
	for (uint8_t i = 0; i < 6; i++)
 8001062:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001066:	3301      	adds	r3, #1
 8001068:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800106c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001070:	2b05      	cmp	r3, #5
 8001072:	d9db      	bls.n	800102c <set_freq_proc+0x20>
	while (k <= 5)
 8001074:	e014      	b.n	80010a0 <set_freq_proc+0x94>
		{
			k++;
 8001076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001078:	3301      	adds	r3, #1
 800107a:	633b      	str	r3, [r7, #48]	; 0x30
			s *= 10;
 800107c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800107e:	4613      	mov	r3, r2
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	4413      	add	r3, r2
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	62fb      	str	r3, [r7, #44]	; 0x2c
			c += CODE[k] * s;
 8001088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	3338      	adds	r3, #56	; 0x38
 800108e:	443b      	add	r3, r7
 8001090:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8001094:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001096:	fb02 f303 	mul.w	r3, r2, r3
 800109a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800109c:	4413      	add	r3, r2
 800109e:	637b      	str	r3, [r7, #52]	; 0x34
	while (k <= 5)
 80010a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010a2:	2b05      	cmp	r3, #5
 80010a4:	d9e7      	bls.n	8001076 <set_freq_proc+0x6a>
		}
	d = convert(c);
 80010a6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80010a8:	f000 f8b8 	bl	800121c <convert>
 80010ac:	6238      	str	r0, [r7, #32]
	f = f0 * (1 + d);
 80010ae:	6a3b      	ldr	r3, [r7, #32]
 80010b0:	3301      	adds	r3, #1
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff fd8e 	bl	8000bd4 <__aeabi_ui2f>
 80010b8:	4603      	mov	r3, r0
 80010ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff fde1 	bl	8000c84 <__aeabi_fmul>
 80010c2:	4603      	mov	r3, r0
 80010c4:	461a      	mov	r2, r3
 80010c6:	4b0d      	ldr	r3, [pc, #52]	; (80010fc <set_freq_proc+0xf0>)
 80010c8:	601a      	str	r2, [r3, #0]
	k = 0;
 80010ca:	2300      	movs	r3, #0
 80010cc:	633b      	str	r3, [r7, #48]	; 0x30
	s = 1;
 80010ce:	2301      	movs	r3, #1
 80010d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	c = 0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	637b      	str	r3, [r7, #52]	; 0x34
	if (h->ButtonState == 1)
 80010d6:	4b08      	ldr	r3, [pc, #32]	; (80010f8 <set_freq_proc+0xec>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d104      	bne.n	80010ec <set_freq_proc+0xe0>
		*current_state = current_state[0]->next;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	685a      	ldr	r2, [r3, #4]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	601a      	str	r2, [r3, #0]
}
 80010ec:	bf00      	nop
 80010ee:	3738      	adds	r7, #56	; 0x38
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	358637bd 	.word	0x358637bd
 80010f8:	20000094 	.word	0x20000094
 80010fc:	20000004 	.word	0x20000004

08001100 <run_proc>:

static void run_proc (state_t **current_state)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
	uint8_t flag = 0;
 8001108:	2300      	movs	r3, #0
 800110a:	73fb      	strb	r3, [r7, #15]

	while (h->ButtonState == 1)
 800110c:	e03e      	b.n	800118c <run_proc+0x8c>
	{
		on_led(led_state);
 800110e:	4b25      	ldr	r3, [pc, #148]	; (80011a4 <run_proc+0xa4>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4618      	mov	r0, r3
 8001114:	f000 f8d4 	bl	80012c0 <on_led>
		HAL_Delay(1 / f);
 8001118:	4b23      	ldr	r3, [pc, #140]	; (80011a8 <run_proc+0xa8>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4619      	mov	r1, r3
 800111e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001122:	f7ff fe63 	bl	8000dec <__aeabi_fdiv>
 8001126:	4603      	mov	r3, r0
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff fefb 	bl	8000f24 <__aeabi_f2uiz>
 800112e:	4603      	mov	r3, r0
 8001130:	4618      	mov	r0, r3
 8001132:	f000 fcc1 	bl	8001ab8 <HAL_Delay>
		//delay(1 / f);
		if (h->ButtonState == 0)
 8001136:	4b1d      	ldr	r3, [pc, #116]	; (80011ac <run_proc+0xac>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800113e:	2b00      	cmp	r3, #0
 8001140:	d105      	bne.n	800114e <run_proc+0x4e>
		{
			*current_state = current_state[0]->next;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	685a      	ldr	r2, [r3, #4]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	e01e      	b.n	800118c <run_proc+0x8c>
		}
		else
		{
			off_led(led_state);
 800114e:	4b15      	ldr	r3, [pc, #84]	; (80011a4 <run_proc+0xa4>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4618      	mov	r0, r3
 8001154:	f000 f92e 	bl	80013b4 <off_led>
			if (flag == 0)
 8001158:	7bfb      	ldrb	r3, [r7, #15]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d10b      	bne.n	8001176 <run_proc+0x76>
			{
				led_state++;
 800115e:	4b11      	ldr	r3, [pc, #68]	; (80011a4 <run_proc+0xa4>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	3301      	adds	r3, #1
 8001164:	4a0f      	ldr	r2, [pc, #60]	; (80011a4 <run_proc+0xa4>)
 8001166:	6013      	str	r3, [r2, #0]
				if (led_state == 8)
 8001168:	4b0e      	ldr	r3, [pc, #56]	; (80011a4 <run_proc+0xa4>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2b08      	cmp	r3, #8
 800116e:	d10d      	bne.n	800118c <run_proc+0x8c>
					flag  = 1;
 8001170:	2301      	movs	r3, #1
 8001172:	73fb      	strb	r3, [r7, #15]
 8001174:	e00a      	b.n	800118c <run_proc+0x8c>
			}
			else
			{
				led_state--;
 8001176:	4b0b      	ldr	r3, [pc, #44]	; (80011a4 <run_proc+0xa4>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	3b01      	subs	r3, #1
 800117c:	4a09      	ldr	r2, [pc, #36]	; (80011a4 <run_proc+0xa4>)
 800117e:	6013      	str	r3, [r2, #0]
				if (led_state == 1)
 8001180:	4b08      	ldr	r3, [pc, #32]	; (80011a4 <run_proc+0xa4>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2b01      	cmp	r3, #1
 8001186:	d101      	bne.n	800118c <run_proc+0x8c>
					flag  = 0;
 8001188:	2300      	movs	r3, #0
 800118a:	73fb      	strb	r3, [r7, #15]
	while (h->ButtonState == 1)
 800118c:	4b07      	ldr	r3, [pc, #28]	; (80011ac <run_proc+0xac>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8001194:	2b01      	cmp	r3, #1
 8001196:	d0ba      	beq.n	800110e <run_proc+0xe>
			}
		}
	}
}
 8001198:	bf00      	nop
 800119a:	bf00      	nop
 800119c:	3710      	adds	r7, #16
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	20000000 	.word	0x20000000
 80011a8:	20000004 	.word	0x20000004
 80011ac:	20000094 	.word	0x20000094

080011b0 <stop_run_proc>:

void stop_run_proc (state_t **current_state)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
	if (h->ButtonState == 1) {
 80011b8:	4b07      	ldr	r3, [pc, #28]	; (80011d8 <stop_run_proc+0x28>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d104      	bne.n	80011ce <stop_run_proc+0x1e>
		*current_state = current_state[0]->next;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	685a      	ldr	r2, [r3, #4]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	601a      	str	r2, [r3, #0]
	}
}
 80011ce:	bf00      	nop
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bc80      	pop	{r7}
 80011d6:	4770      	bx	lr
 80011d8:	20000094 	.word	0x20000094

080011dc <reset_proc>:

void reset_proc (state_t **current_state)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
	led_state = 0;
 80011e4:	4b0b      	ldr	r3, [pc, #44]	; (8001214 <reset_proc+0x38>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
	off_led(led_state);
 80011ea:	4b0a      	ldr	r3, [pc, #40]	; (8001214 <reset_proc+0x38>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4618      	mov	r0, r3
 80011f0:	f000 f8e0 	bl	80013b4 <off_led>
	if (h->ButtonState == 0) {
 80011f4:	4b08      	ldr	r3, [pc, #32]	; (8001218 <reset_proc+0x3c>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d104      	bne.n	800120a <reset_proc+0x2e>
		*current_state = current_state[0]->next;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	685a      	ldr	r2, [r3, #4]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	601a      	str	r2, [r3, #0]
	}
}
 800120a:	bf00      	nop
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20000000 	.word	0x20000000
 8001218:	20000094 	.word	0x20000094

0800121c <convert>:
	{
	}
}

uint32_t convert(uint32_t num)
{
 800121c:	b5b0      	push	{r4, r5, r7, lr}
 800121e:	b086      	sub	sp, #24
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
	uint32_t dec = 0, i = 0, rem;
 8001224:	2300      	movs	r3, #0
 8001226:	617b      	str	r3, [r7, #20]
 8001228:	2300      	movs	r3, #0
 800122a:	613b      	str	r3, [r7, #16]
	while (num != 0)
 800122c:	e03e      	b.n	80012ac <convert+0x90>
  {
		rem = num % 10;
 800122e:	687a      	ldr	r2, [r7, #4]
 8001230:	4b22      	ldr	r3, [pc, #136]	; (80012bc <convert+0xa0>)
 8001232:	fba3 1302 	umull	r1, r3, r3, r2
 8001236:	08d9      	lsrs	r1, r3, #3
 8001238:	460b      	mov	r3, r1
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	440b      	add	r3, r1
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	60fb      	str	r3, [r7, #12]
		num /= 10;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	4a1d      	ldr	r2, [pc, #116]	; (80012bc <convert+0xa0>)
 8001248:	fba2 2303 	umull	r2, r3, r2, r3
 800124c:	08db      	lsrs	r3, r3, #3
 800124e:	607b      	str	r3, [r7, #4]
		dec += rem * pow(2, i);
 8001250:	68f8      	ldr	r0, [r7, #12]
 8001252:	f7ff f8bf 	bl	80003d4 <__aeabi_ui2d>
 8001256:	4604      	mov	r4, r0
 8001258:	460d      	mov	r5, r1
 800125a:	6938      	ldr	r0, [r7, #16]
 800125c:	f7ff f8ba 	bl	80003d4 <__aeabi_ui2d>
 8001260:	4602      	mov	r2, r0
 8001262:	460b      	mov	r3, r1
 8001264:	f04f 0000 	mov.w	r0, #0
 8001268:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800126c:	f001 fb4a 	bl	8002904 <pow>
 8001270:	4602      	mov	r2, r0
 8001272:	460b      	mov	r3, r1
 8001274:	4620      	mov	r0, r4
 8001276:	4629      	mov	r1, r5
 8001278:	f7ff f926 	bl	80004c8 <__aeabi_dmul>
 800127c:	4602      	mov	r2, r0
 800127e:	460b      	mov	r3, r1
 8001280:	4614      	mov	r4, r2
 8001282:	461d      	mov	r5, r3
 8001284:	6978      	ldr	r0, [r7, #20]
 8001286:	f7ff f8a5 	bl	80003d4 <__aeabi_ui2d>
 800128a:	4602      	mov	r2, r0
 800128c:	460b      	mov	r3, r1
 800128e:	4620      	mov	r0, r4
 8001290:	4629      	mov	r1, r5
 8001292:	f7fe ff63 	bl	800015c <__adddf3>
 8001296:	4602      	mov	r2, r0
 8001298:	460b      	mov	r3, r1
 800129a:	4610      	mov	r0, r2
 800129c:	4619      	mov	r1, r3
 800129e:	f7ff fbc3 	bl	8000a28 <__aeabi_d2uiz>
 80012a2:	4603      	mov	r3, r0
 80012a4:	617b      	str	r3, [r7, #20]
		++i;
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	3301      	adds	r3, #1
 80012aa:	613b      	str	r3, [r7, #16]
	while (num != 0)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d1bd      	bne.n	800122e <convert+0x12>
  }
	return dec;
 80012b2:	697b      	ldr	r3, [r7, #20]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3718      	adds	r7, #24
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bdb0      	pop	{r4, r5, r7, pc}
 80012bc:	cccccccd 	.word	0xcccccccd

080012c0 <on_led>:

void on_led (uint32_t led_state)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
	switch(led_state) {
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	3b01      	subs	r3, #1
 80012cc:	2b07      	cmp	r3, #7
 80012ce:	d86b      	bhi.n	80013a8 <on_led+0xe8>
 80012d0:	a201      	add	r2, pc, #4	; (adr r2, 80012d8 <on_led+0x18>)
 80012d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012d6:	bf00      	nop
 80012d8:	080012f9 	.word	0x080012f9
 80012dc:	0800130f 	.word	0x0800130f
 80012e0:	08001325 	.word	0x08001325
 80012e4:	0800133b 	.word	0x0800133b
 80012e8:	08001351 	.word	0x08001351
 80012ec:	08001367 	.word	0x08001367
 80012f0:	0800137d 	.word	0x0800137d
 80012f4:	08001393 	.word	0x08001393
		case 1 :
			HAL_GPIO_WritePin(h->LEDsForBlink[0].Port, h->LEDsForBlink[0].Pin, GPIO_PIN_SET);
 80012f8:	4b2d      	ldr	r3, [pc, #180]	; (80013b0 <on_led+0xf0>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	6818      	ldr	r0, [r3, #0]
 80012fe:	4b2c      	ldr	r3, [pc, #176]	; (80013b0 <on_led+0xf0>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	889b      	ldrh	r3, [r3, #4]
 8001304:	2201      	movs	r2, #1
 8001306:	4619      	mov	r1, r3
 8001308:	f000 fea3 	bl	8002052 <HAL_GPIO_WritePin>
			break;
 800130c:	e04c      	b.n	80013a8 <on_led+0xe8>
		case 2 :
			HAL_GPIO_WritePin(h->LEDsForBlink[1].Port, h->LEDsForBlink[1].Pin, GPIO_PIN_SET);
 800130e:	4b28      	ldr	r3, [pc, #160]	; (80013b0 <on_led+0xf0>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	6898      	ldr	r0, [r3, #8]
 8001314:	4b26      	ldr	r3, [pc, #152]	; (80013b0 <on_led+0xf0>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	899b      	ldrh	r3, [r3, #12]
 800131a:	2201      	movs	r2, #1
 800131c:	4619      	mov	r1, r3
 800131e:	f000 fe98 	bl	8002052 <HAL_GPIO_WritePin>
			break;
 8001322:	e041      	b.n	80013a8 <on_led+0xe8>
		case 3 :
			HAL_GPIO_WritePin(h->LEDsForBlink[2].Port, h->LEDsForBlink[2].Pin, GPIO_PIN_SET);
 8001324:	4b22      	ldr	r3, [pc, #136]	; (80013b0 <on_led+0xf0>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	6918      	ldr	r0, [r3, #16]
 800132a:	4b21      	ldr	r3, [pc, #132]	; (80013b0 <on_led+0xf0>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	8a9b      	ldrh	r3, [r3, #20]
 8001330:	2201      	movs	r2, #1
 8001332:	4619      	mov	r1, r3
 8001334:	f000 fe8d 	bl	8002052 <HAL_GPIO_WritePin>
			break;
 8001338:	e036      	b.n	80013a8 <on_led+0xe8>
		case 4 :
			HAL_GPIO_WritePin(h->LEDsForBlink[3].Port, h->LEDsForBlink[3].Pin, GPIO_PIN_SET);
 800133a:	4b1d      	ldr	r3, [pc, #116]	; (80013b0 <on_led+0xf0>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	6998      	ldr	r0, [r3, #24]
 8001340:	4b1b      	ldr	r3, [pc, #108]	; (80013b0 <on_led+0xf0>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	8b9b      	ldrh	r3, [r3, #28]
 8001346:	2201      	movs	r2, #1
 8001348:	4619      	mov	r1, r3
 800134a:	f000 fe82 	bl	8002052 <HAL_GPIO_WritePin>
			break;
 800134e:	e02b      	b.n	80013a8 <on_led+0xe8>
		case 5 :
			HAL_GPIO_WritePin(h->LEDsForBlink[4].Port, h->LEDsForBlink[4].Pin, GPIO_PIN_RESET);
 8001350:	4b17      	ldr	r3, [pc, #92]	; (80013b0 <on_led+0xf0>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	6a18      	ldr	r0, [r3, #32]
 8001356:	4b16      	ldr	r3, [pc, #88]	; (80013b0 <on_led+0xf0>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800135c:	2200      	movs	r2, #0
 800135e:	4619      	mov	r1, r3
 8001360:	f000 fe77 	bl	8002052 <HAL_GPIO_WritePin>
			break;
 8001364:	e020      	b.n	80013a8 <on_led+0xe8>
		case 6 :
			HAL_GPIO_WritePin(h->LEDsForBlink[5].Port, h->LEDsForBlink[5].Pin, GPIO_PIN_RESET);
 8001366:	4b12      	ldr	r3, [pc, #72]	; (80013b0 <on_led+0xf0>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800136c:	4b10      	ldr	r3, [pc, #64]	; (80013b0 <on_led+0xf0>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001372:	2200      	movs	r2, #0
 8001374:	4619      	mov	r1, r3
 8001376:	f000 fe6c 	bl	8002052 <HAL_GPIO_WritePin>
			break;
 800137a:	e015      	b.n	80013a8 <on_led+0xe8>
		case 7 :
			HAL_GPIO_WritePin(h->LEDsForBlink[6].Port, h->LEDsForBlink[6].Pin, GPIO_PIN_RESET);
 800137c:	4b0c      	ldr	r3, [pc, #48]	; (80013b0 <on_led+0xf0>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001382:	4b0b      	ldr	r3, [pc, #44]	; (80013b0 <on_led+0xf0>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8001388:	2200      	movs	r2, #0
 800138a:	4619      	mov	r1, r3
 800138c:	f000 fe61 	bl	8002052 <HAL_GPIO_WritePin>
			break;
 8001390:	e00a      	b.n	80013a8 <on_led+0xe8>
		case 8 :
			HAL_GPIO_WritePin(h->LEDsForBlink[7].Port, h->LEDsForBlink[7].Pin, GPIO_PIN_RESET);
 8001392:	4b07      	ldr	r3, [pc, #28]	; (80013b0 <on_led+0xf0>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001398:	4b05      	ldr	r3, [pc, #20]	; (80013b0 <on_led+0xf0>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800139e:	2200      	movs	r2, #0
 80013a0:	4619      	mov	r1, r3
 80013a2:	f000 fe56 	bl	8002052 <HAL_GPIO_WritePin>
			break;
 80013a6:	bf00      	nop
	}
}
 80013a8:	bf00      	nop
 80013aa:	3708      	adds	r7, #8
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	20000094 	.word	0x20000094

080013b4 <off_led>:

void off_led (uint32_t led_state)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
	switch(led_state) {
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	3b01      	subs	r3, #1
 80013c0:	2b07      	cmp	r3, #7
 80013c2:	d86b      	bhi.n	800149c <off_led+0xe8>
 80013c4:	a201      	add	r2, pc, #4	; (adr r2, 80013cc <off_led+0x18>)
 80013c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013ca:	bf00      	nop
 80013cc:	080013ed 	.word	0x080013ed
 80013d0:	08001403 	.word	0x08001403
 80013d4:	08001419 	.word	0x08001419
 80013d8:	0800142f 	.word	0x0800142f
 80013dc:	08001445 	.word	0x08001445
 80013e0:	0800145b 	.word	0x0800145b
 80013e4:	08001471 	.word	0x08001471
 80013e8:	08001487 	.word	0x08001487
		case 1 :
			HAL_GPIO_WritePin(h->LEDsForBlink[0].Port, h->LEDsForBlink[0].Pin, GPIO_PIN_RESET);
 80013ec:	4b56      	ldr	r3, [pc, #344]	; (8001548 <off_led+0x194>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	6818      	ldr	r0, [r3, #0]
 80013f2:	4b55      	ldr	r3, [pc, #340]	; (8001548 <off_led+0x194>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	889b      	ldrh	r3, [r3, #4]
 80013f8:	2200      	movs	r2, #0
 80013fa:	4619      	mov	r1, r3
 80013fc:	f000 fe29 	bl	8002052 <HAL_GPIO_WritePin>
			break;
 8001400:	e09d      	b.n	800153e <off_led+0x18a>
		case 2 :
			HAL_GPIO_WritePin(h->LEDsForBlink[1].Port, h->LEDsForBlink[1].Pin, GPIO_PIN_RESET);
 8001402:	4b51      	ldr	r3, [pc, #324]	; (8001548 <off_led+0x194>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	6898      	ldr	r0, [r3, #8]
 8001408:	4b4f      	ldr	r3, [pc, #316]	; (8001548 <off_led+0x194>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	899b      	ldrh	r3, [r3, #12]
 800140e:	2200      	movs	r2, #0
 8001410:	4619      	mov	r1, r3
 8001412:	f000 fe1e 	bl	8002052 <HAL_GPIO_WritePin>
			break;
 8001416:	e092      	b.n	800153e <off_led+0x18a>
		case 3 :
			HAL_GPIO_WritePin(h->LEDsForBlink[2].Port, h->LEDsForBlink[2].Pin, GPIO_PIN_RESET);
 8001418:	4b4b      	ldr	r3, [pc, #300]	; (8001548 <off_led+0x194>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	6918      	ldr	r0, [r3, #16]
 800141e:	4b4a      	ldr	r3, [pc, #296]	; (8001548 <off_led+0x194>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	8a9b      	ldrh	r3, [r3, #20]
 8001424:	2200      	movs	r2, #0
 8001426:	4619      	mov	r1, r3
 8001428:	f000 fe13 	bl	8002052 <HAL_GPIO_WritePin>
			break;
 800142c:	e087      	b.n	800153e <off_led+0x18a>
		case 4 :
			HAL_GPIO_WritePin(h->LEDsForBlink[3].Port, h->LEDsForBlink[3].Pin, GPIO_PIN_RESET);
 800142e:	4b46      	ldr	r3, [pc, #280]	; (8001548 <off_led+0x194>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	6998      	ldr	r0, [r3, #24]
 8001434:	4b44      	ldr	r3, [pc, #272]	; (8001548 <off_led+0x194>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	8b9b      	ldrh	r3, [r3, #28]
 800143a:	2200      	movs	r2, #0
 800143c:	4619      	mov	r1, r3
 800143e:	f000 fe08 	bl	8002052 <HAL_GPIO_WritePin>
			break;
 8001442:	e07c      	b.n	800153e <off_led+0x18a>
		case 5 :
			HAL_GPIO_WritePin(h->LEDsForBlink[4].Port, h->LEDsForBlink[4].Pin, GPIO_PIN_SET);
 8001444:	4b40      	ldr	r3, [pc, #256]	; (8001548 <off_led+0x194>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	6a18      	ldr	r0, [r3, #32]
 800144a:	4b3f      	ldr	r3, [pc, #252]	; (8001548 <off_led+0x194>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001450:	2201      	movs	r2, #1
 8001452:	4619      	mov	r1, r3
 8001454:	f000 fdfd 	bl	8002052 <HAL_GPIO_WritePin>
			break;
 8001458:	e071      	b.n	800153e <off_led+0x18a>
		case 6 :
			HAL_GPIO_WritePin(h->LEDsForBlink[5].Port, h->LEDsForBlink[5].Pin, GPIO_PIN_SET);
 800145a:	4b3b      	ldr	r3, [pc, #236]	; (8001548 <off_led+0x194>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001460:	4b39      	ldr	r3, [pc, #228]	; (8001548 <off_led+0x194>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001466:	2201      	movs	r2, #1
 8001468:	4619      	mov	r1, r3
 800146a:	f000 fdf2 	bl	8002052 <HAL_GPIO_WritePin>
			break;
 800146e:	e066      	b.n	800153e <off_led+0x18a>
		case 7 :
			HAL_GPIO_WritePin(h->LEDsForBlink[6].Port, h->LEDsForBlink[6].Pin, GPIO_PIN_SET);
 8001470:	4b35      	ldr	r3, [pc, #212]	; (8001548 <off_led+0x194>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001476:	4b34      	ldr	r3, [pc, #208]	; (8001548 <off_led+0x194>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800147c:	2201      	movs	r2, #1
 800147e:	4619      	mov	r1, r3
 8001480:	f000 fde7 	bl	8002052 <HAL_GPIO_WritePin>
			break;
 8001484:	e05b      	b.n	800153e <off_led+0x18a>
		case 8 :
			HAL_GPIO_WritePin(h->LEDsForBlink[7].Port, h->LEDsForBlink[7].Pin, GPIO_PIN_SET);
 8001486:	4b30      	ldr	r3, [pc, #192]	; (8001548 <off_led+0x194>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800148c:	4b2e      	ldr	r3, [pc, #184]	; (8001548 <off_led+0x194>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8001492:	2201      	movs	r2, #1
 8001494:	4619      	mov	r1, r3
 8001496:	f000 fddc 	bl	8002052 <HAL_GPIO_WritePin>
			break;
 800149a:	e050      	b.n	800153e <off_led+0x18a>
		default :
			HAL_GPIO_WritePin(h->LEDsForBlink[0].Port, h->LEDsForBlink[0].Pin, GPIO_PIN_RESET);
 800149c:	4b2a      	ldr	r3, [pc, #168]	; (8001548 <off_led+0x194>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	6818      	ldr	r0, [r3, #0]
 80014a2:	4b29      	ldr	r3, [pc, #164]	; (8001548 <off_led+0x194>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	889b      	ldrh	r3, [r3, #4]
 80014a8:	2200      	movs	r2, #0
 80014aa:	4619      	mov	r1, r3
 80014ac:	f000 fdd1 	bl	8002052 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(h->LEDsForBlink[1].Port, h->LEDsForBlink[1].Pin, GPIO_PIN_RESET);
 80014b0:	4b25      	ldr	r3, [pc, #148]	; (8001548 <off_led+0x194>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	6898      	ldr	r0, [r3, #8]
 80014b6:	4b24      	ldr	r3, [pc, #144]	; (8001548 <off_led+0x194>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	899b      	ldrh	r3, [r3, #12]
 80014bc:	2200      	movs	r2, #0
 80014be:	4619      	mov	r1, r3
 80014c0:	f000 fdc7 	bl	8002052 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(h->LEDsForBlink[2].Port, h->LEDsForBlink[2].Pin, GPIO_PIN_RESET);
 80014c4:	4b20      	ldr	r3, [pc, #128]	; (8001548 <off_led+0x194>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	6918      	ldr	r0, [r3, #16]
 80014ca:	4b1f      	ldr	r3, [pc, #124]	; (8001548 <off_led+0x194>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	8a9b      	ldrh	r3, [r3, #20]
 80014d0:	2200      	movs	r2, #0
 80014d2:	4619      	mov	r1, r3
 80014d4:	f000 fdbd 	bl	8002052 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(h->LEDsForBlink[3].Port, h->LEDsForBlink[3].Pin, GPIO_PIN_RESET);
 80014d8:	4b1b      	ldr	r3, [pc, #108]	; (8001548 <off_led+0x194>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	6998      	ldr	r0, [r3, #24]
 80014de:	4b1a      	ldr	r3, [pc, #104]	; (8001548 <off_led+0x194>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	8b9b      	ldrh	r3, [r3, #28]
 80014e4:	2200      	movs	r2, #0
 80014e6:	4619      	mov	r1, r3
 80014e8:	f000 fdb3 	bl	8002052 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(h->LEDsForBlink[4].Port, h->LEDsForBlink[4].Pin, GPIO_PIN_SET);
 80014ec:	4b16      	ldr	r3, [pc, #88]	; (8001548 <off_led+0x194>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	6a18      	ldr	r0, [r3, #32]
 80014f2:	4b15      	ldr	r3, [pc, #84]	; (8001548 <off_led+0x194>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80014f8:	2201      	movs	r2, #1
 80014fa:	4619      	mov	r1, r3
 80014fc:	f000 fda9 	bl	8002052 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(h->LEDsForBlink[5].Port, h->LEDsForBlink[5].Pin, GPIO_PIN_SET);
 8001500:	4b11      	ldr	r3, [pc, #68]	; (8001548 <off_led+0x194>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001506:	4b10      	ldr	r3, [pc, #64]	; (8001548 <off_led+0x194>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800150c:	2201      	movs	r2, #1
 800150e:	4619      	mov	r1, r3
 8001510:	f000 fd9f 	bl	8002052 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(h->LEDsForBlink[6].Port, h->LEDsForBlink[6].Pin, GPIO_PIN_SET);
 8001514:	4b0c      	ldr	r3, [pc, #48]	; (8001548 <off_led+0x194>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800151a:	4b0b      	ldr	r3, [pc, #44]	; (8001548 <off_led+0x194>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8001520:	2201      	movs	r2, #1
 8001522:	4619      	mov	r1, r3
 8001524:	f000 fd95 	bl	8002052 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(h->LEDsForBlink[7].Port, h->LEDsForBlink[7].Pin, GPIO_PIN_SET);
 8001528:	4b07      	ldr	r3, [pc, #28]	; (8001548 <off_led+0x194>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800152e:	4b06      	ldr	r3, [pc, #24]	; (8001548 <off_led+0x194>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8001534:	2201      	movs	r2, #1
 8001536:	4619      	mov	r1, r3
 8001538:	f000 fd8b 	bl	8002052 <HAL_GPIO_WritePin>
			break;
 800153c:	bf00      	nop
	}
}
 800153e:	bf00      	nop
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	20000094 	.word	0x20000094

0800154c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  app_handle.ToggleBuf[0].Port 	= GPIOA;
 8001550:	4b36      	ldr	r3, [pc, #216]	; (800162c <main+0xe0>)
 8001552:	4a37      	ldr	r2, [pc, #220]	; (8001630 <main+0xe4>)
 8001554:	641a      	str	r2, [r3, #64]	; 0x40
  app_handle.ToggleBuf[0].Pin  	= GPIO_PIN_4;
 8001556:	4b35      	ldr	r3, [pc, #212]	; (800162c <main+0xe0>)
 8001558:	2210      	movs	r2, #16
 800155a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  app_handle.ToggleBuf[1].Port 	= GPIOB;
 800155e:	4b33      	ldr	r3, [pc, #204]	; (800162c <main+0xe0>)
 8001560:	4a34      	ldr	r2, [pc, #208]	; (8001634 <main+0xe8>)
 8001562:	649a      	str	r2, [r3, #72]	; 0x48
  app_handle.ToggleBuf[1].Pin  	= GPIO_PIN_0;
 8001564:	4b31      	ldr	r3, [pc, #196]	; (800162c <main+0xe0>)
 8001566:	2201      	movs	r2, #1
 8001568:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  app_handle.ToggleBuf[2].Port 	= GPIOB;
 800156c:	4b2f      	ldr	r3, [pc, #188]	; (800162c <main+0xe0>)
 800156e:	4a31      	ldr	r2, [pc, #196]	; (8001634 <main+0xe8>)
 8001570:	651a      	str	r2, [r3, #80]	; 0x50
  app_handle.ToggleBuf[2].Pin  	= GPIO_PIN_11;
 8001572:	4b2e      	ldr	r3, [pc, #184]	; (800162c <main+0xe0>)
 8001574:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001578:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  app_handle.ToggleBuf[3].Port 	= GPIOC;
 800157c:	4b2b      	ldr	r3, [pc, #172]	; (800162c <main+0xe0>)
 800157e:	4a2e      	ldr	r2, [pc, #184]	; (8001638 <main+0xec>)
 8001580:	659a      	str	r2, [r3, #88]	; 0x58
  app_handle.ToggleBuf[3].Pin  	= GPIO_PIN_7;
 8001582:	4b2a      	ldr	r3, [pc, #168]	; (800162c <main+0xe0>)
 8001584:	2280      	movs	r2, #128	; 0x80
 8001586:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  app_handle.ToggleBuf[4].Port 	= GPIOA;
 800158a:	4b28      	ldr	r3, [pc, #160]	; (800162c <main+0xe0>)
 800158c:	4a28      	ldr	r2, [pc, #160]	; (8001630 <main+0xe4>)
 800158e:	661a      	str	r2, [r3, #96]	; 0x60
  app_handle.ToggleBuf[4].Pin  	= GPIO_PIN_9;
 8001590:	4b26      	ldr	r3, [pc, #152]	; (800162c <main+0xe0>)
 8001592:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001596:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  app_handle.ToggleBuf[5].Port 	= GPIOB;
 800159a:	4b24      	ldr	r3, [pc, #144]	; (800162c <main+0xe0>)
 800159c:	4a25      	ldr	r2, [pc, #148]	; (8001634 <main+0xe8>)
 800159e:	669a      	str	r2, [r3, #104]	; 0x68
  app_handle.ToggleBuf[5].Pin 	= GPIO_PIN_2;
 80015a0:	4b22      	ldr	r3, [pc, #136]	; (800162c <main+0xe0>)
 80015a2:	2204      	movs	r2, #4
 80015a4:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c

  app_handle.LEDsForBlink[0].Port = GPIOB;
 80015a8:	4b20      	ldr	r3, [pc, #128]	; (800162c <main+0xe0>)
 80015aa:	4a22      	ldr	r2, [pc, #136]	; (8001634 <main+0xe8>)
 80015ac:	601a      	str	r2, [r3, #0]
  app_handle.LEDsForBlink[0].Pin  = GPIO_PIN_8;
 80015ae:	4b1f      	ldr	r3, [pc, #124]	; (800162c <main+0xe0>)
 80015b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015b4:	809a      	strh	r2, [r3, #4]
  app_handle.LEDsForBlink[1].Port = GPIOC;
 80015b6:	4b1d      	ldr	r3, [pc, #116]	; (800162c <main+0xe0>)
 80015b8:	4a1f      	ldr	r2, [pc, #124]	; (8001638 <main+0xec>)
 80015ba:	609a      	str	r2, [r3, #8]
  app_handle.LEDsForBlink[1].Pin  = GPIO_PIN_6;
 80015bc:	4b1b      	ldr	r3, [pc, #108]	; (800162c <main+0xe0>)
 80015be:	2240      	movs	r2, #64	; 0x40
 80015c0:	819a      	strh	r2, [r3, #12]
  app_handle.LEDsForBlink[2].Port = GPIOC;
 80015c2:	4b1a      	ldr	r3, [pc, #104]	; (800162c <main+0xe0>)
 80015c4:	4a1c      	ldr	r2, [pc, #112]	; (8001638 <main+0xec>)
 80015c6:	611a      	str	r2, [r3, #16]
  app_handle.LEDsForBlink[2].Pin  = GPIO_PIN_9;
 80015c8:	4b18      	ldr	r3, [pc, #96]	; (800162c <main+0xe0>)
 80015ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015ce:	829a      	strh	r2, [r3, #20]
  app_handle.LEDsForBlink[3].Port = GPIOC;
 80015d0:	4b16      	ldr	r3, [pc, #88]	; (800162c <main+0xe0>)
 80015d2:	4a19      	ldr	r2, [pc, #100]	; (8001638 <main+0xec>)
 80015d4:	619a      	str	r2, [r3, #24]
  app_handle.LEDsForBlink[3].Pin  = GPIO_PIN_8;
 80015d6:	4b15      	ldr	r3, [pc, #84]	; (800162c <main+0xe0>)
 80015d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015dc:	839a      	strh	r2, [r3, #28]
  app_handle.LEDsForBlink[4].Port = GPIOC;
 80015de:	4b13      	ldr	r3, [pc, #76]	; (800162c <main+0xe0>)
 80015e0:	4a15      	ldr	r2, [pc, #84]	; (8001638 <main+0xec>)
 80015e2:	621a      	str	r2, [r3, #32]
  app_handle.LEDsForBlink[4].Pin  = GPIO_PIN_5;
 80015e4:	4b11      	ldr	r3, [pc, #68]	; (800162c <main+0xe0>)
 80015e6:	2220      	movs	r2, #32
 80015e8:	849a      	strh	r2, [r3, #36]	; 0x24
  app_handle.LEDsForBlink[5].Port = GPIOB;
 80015ea:	4b10      	ldr	r3, [pc, #64]	; (800162c <main+0xe0>)
 80015ec:	4a11      	ldr	r2, [pc, #68]	; (8001634 <main+0xe8>)
 80015ee:	629a      	str	r2, [r3, #40]	; 0x28
  app_handle.LEDsForBlink[5].Pin  = GPIO_PIN_9;
 80015f0:	4b0e      	ldr	r3, [pc, #56]	; (800162c <main+0xe0>)
 80015f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015f6:	859a      	strh	r2, [r3, #44]	; 0x2c
  app_handle.LEDsForBlink[6].Port = GPIOA;
 80015f8:	4b0c      	ldr	r3, [pc, #48]	; (800162c <main+0xe0>)
 80015fa:	4a0d      	ldr	r2, [pc, #52]	; (8001630 <main+0xe4>)
 80015fc:	631a      	str	r2, [r3, #48]	; 0x30
  app_handle.LEDsForBlink[6].Pin  = GPIO_PIN_12;
 80015fe:	4b0b      	ldr	r3, [pc, #44]	; (800162c <main+0xe0>)
 8001600:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001604:	869a      	strh	r2, [r3, #52]	; 0x34
  app_handle.LEDsForBlink[7].Port = GPIOA;
 8001606:	4b09      	ldr	r3, [pc, #36]	; (800162c <main+0xe0>)
 8001608:	4a09      	ldr	r2, [pc, #36]	; (8001630 <main+0xe4>)
 800160a:	639a      	str	r2, [r3, #56]	; 0x38
  app_handle.LEDsForBlink[7].Pin  = GPIO_PIN_6;
 800160c:	4b07      	ldr	r3, [pc, #28]	; (800162c <main+0xe0>)
 800160e:	2240      	movs	r2, #64	; 0x40
 8001610:	879a      	strh	r2, [r3, #60]	; 0x3c

  APP_init(&app_handle);
 8001612:	4806      	ldr	r0, [pc, #24]	; (800162c <main+0xe0>)
 8001614:	f7ff fca6 	bl	8000f64 <APP_init>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001618:	f000 f9ec 	bl	80019f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800161c:	f000 f80e 	bl	800163c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001620:	f000 f852 	bl	80016c8 <MX_GPIO_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  APP_start();
 8001624:	f7ff fce6 	bl	8000ff4 <APP_start>
 8001628:	e7fc      	b.n	8001624 <main+0xd8>
 800162a:	bf00      	nop
 800162c:	200000cc 	.word	0x200000cc
 8001630:	40010800 	.word	0x40010800
 8001634:	40010c00 	.word	0x40010c00
 8001638:	40011000 	.word	0x40011000

0800163c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b090      	sub	sp, #64	; 0x40
 8001640:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001642:	f107 0318 	add.w	r3, r7, #24
 8001646:	2228      	movs	r2, #40	; 0x28
 8001648:	2100      	movs	r1, #0
 800164a:	4618      	mov	r0, r3
 800164c:	f001 f928 	bl	80028a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001650:	1d3b      	adds	r3, r7, #4
 8001652:	2200      	movs	r2, #0
 8001654:	601a      	str	r2, [r3, #0]
 8001656:	605a      	str	r2, [r3, #4]
 8001658:	609a      	str	r2, [r3, #8]
 800165a:	60da      	str	r2, [r3, #12]
 800165c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800165e:	2301      	movs	r3, #1
 8001660:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001662:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001666:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001668:	2300      	movs	r3, #0
 800166a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800166c:	2301      	movs	r3, #1
 800166e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001670:	2302      	movs	r3, #2
 8001672:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001674:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001678:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800167a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800167e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001680:	f107 0318 	add.w	r3, r7, #24
 8001684:	4618      	mov	r0, r3
 8001686:	f000 fd2d 	bl	80020e4 <HAL_RCC_OscConfig>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001690:	f000 f90e 	bl	80018b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001694:	230f      	movs	r3, #15
 8001696:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001698:	2302      	movs	r3, #2
 800169a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800169c:	2300      	movs	r3, #0
 800169e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016a6:	2300      	movs	r3, #0
 80016a8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016aa:	1d3b      	adds	r3, r7, #4
 80016ac:	2102      	movs	r1, #2
 80016ae:	4618      	mov	r0, r3
 80016b0:	f000 ff9a 	bl	80025e8 <HAL_RCC_ClockConfig>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <SystemClock_Config+0x82>
  {
    Error_Handler();
 80016ba:	f000 f8f9 	bl	80018b0 <Error_Handler>
  }
}
 80016be:	bf00      	nop
 80016c0:	3740      	adds	r7, #64	; 0x40
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
	...

080016c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b088      	sub	sp, #32
 80016cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ce:	f107 0310 	add.w	r3, r7, #16
 80016d2:	2200      	movs	r2, #0
 80016d4:	601a      	str	r2, [r3, #0]
 80016d6:	605a      	str	r2, [r3, #4]
 80016d8:	609a      	str	r2, [r3, #8]
 80016da:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016dc:	4b62      	ldr	r3, [pc, #392]	; (8001868 <MX_GPIO_Init+0x1a0>)
 80016de:	699b      	ldr	r3, [r3, #24]
 80016e0:	4a61      	ldr	r2, [pc, #388]	; (8001868 <MX_GPIO_Init+0x1a0>)
 80016e2:	f043 0310 	orr.w	r3, r3, #16
 80016e6:	6193      	str	r3, [r2, #24]
 80016e8:	4b5f      	ldr	r3, [pc, #380]	; (8001868 <MX_GPIO_Init+0x1a0>)
 80016ea:	699b      	ldr	r3, [r3, #24]
 80016ec:	f003 0310 	and.w	r3, r3, #16
 80016f0:	60fb      	str	r3, [r7, #12]
 80016f2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016f4:	4b5c      	ldr	r3, [pc, #368]	; (8001868 <MX_GPIO_Init+0x1a0>)
 80016f6:	699b      	ldr	r3, [r3, #24]
 80016f8:	4a5b      	ldr	r2, [pc, #364]	; (8001868 <MX_GPIO_Init+0x1a0>)
 80016fa:	f043 0320 	orr.w	r3, r3, #32
 80016fe:	6193      	str	r3, [r2, #24]
 8001700:	4b59      	ldr	r3, [pc, #356]	; (8001868 <MX_GPIO_Init+0x1a0>)
 8001702:	699b      	ldr	r3, [r3, #24]
 8001704:	f003 0320 	and.w	r3, r3, #32
 8001708:	60bb      	str	r3, [r7, #8]
 800170a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800170c:	4b56      	ldr	r3, [pc, #344]	; (8001868 <MX_GPIO_Init+0x1a0>)
 800170e:	699b      	ldr	r3, [r3, #24]
 8001710:	4a55      	ldr	r2, [pc, #340]	; (8001868 <MX_GPIO_Init+0x1a0>)
 8001712:	f043 0304 	orr.w	r3, r3, #4
 8001716:	6193      	str	r3, [r2, #24]
 8001718:	4b53      	ldr	r3, [pc, #332]	; (8001868 <MX_GPIO_Init+0x1a0>)
 800171a:	699b      	ldr	r3, [r3, #24]
 800171c:	f003 0304 	and.w	r3, r3, #4
 8001720:	607b      	str	r3, [r7, #4]
 8001722:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001724:	4b50      	ldr	r3, [pc, #320]	; (8001868 <MX_GPIO_Init+0x1a0>)
 8001726:	699b      	ldr	r3, [r3, #24]
 8001728:	4a4f      	ldr	r2, [pc, #316]	; (8001868 <MX_GPIO_Init+0x1a0>)
 800172a:	f043 0308 	orr.w	r3, r3, #8
 800172e:	6193      	str	r3, [r2, #24]
 8001730:	4b4d      	ldr	r3, [pc, #308]	; (8001868 <MX_GPIO_Init+0x1a0>)
 8001732:	699b      	ldr	r3, [r3, #24]
 8001734:	f003 0308 	and.w	r3, r3, #8
 8001738:	603b      	str	r3, [r7, #0]
 800173a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6|GPIO_PIN_12, GPIO_PIN_SET);
 800173c:	2201      	movs	r2, #1
 800173e:	f44f 5183 	mov.w	r1, #4192	; 0x1060
 8001742:	484a      	ldr	r0, [pc, #296]	; (800186c <MX_GPIO_Init+0x1a4>)
 8001744:	f000 fc85 	bl	8002052 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001748:	2200      	movs	r2, #0
 800174a:	f44f 7150 	mov.w	r1, #832	; 0x340
 800174e:	4848      	ldr	r0, [pc, #288]	; (8001870 <MX_GPIO_Init+0x1a8>)
 8001750:	f000 fc7f 	bl	8002052 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 8001754:	2201      	movs	r2, #1
 8001756:	2120      	movs	r1, #32
 8001758:	4845      	ldr	r0, [pc, #276]	; (8001870 <MX_GPIO_Init+0x1a8>)
 800175a:	f000 fc7a 	bl	8002052 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 800175e:	2200      	movs	r2, #0
 8001760:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001764:	4843      	ldr	r0, [pc, #268]	; (8001874 <MX_GPIO_Init+0x1ac>)
 8001766:	f000 fc74 	bl	8002052 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800176a:	2201      	movs	r2, #1
 800176c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001770:	4840      	ldr	r0, [pc, #256]	; (8001874 <MX_GPIO_Init+0x1ac>)
 8001772:	f000 fc6e 	bl	8002052 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001776:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800177a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800177c:	4b3e      	ldr	r3, [pc, #248]	; (8001878 <MX_GPIO_Init+0x1b0>)
 800177e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001780:	2300      	movs	r3, #0
 8001782:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001784:	f107 0310 	add.w	r3, r7, #16
 8001788:	4619      	mov	r1, r3
 800178a:	4839      	ldr	r0, [pc, #228]	; (8001870 <MX_GPIO_Init+0x1a8>)
 800178c:	f000 fac6 	bl	8001d1c <HAL_GPIO_Init>

  /*Configure GPIO pin : USART_TX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin;
 8001790:	2304      	movs	r3, #4
 8001792:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001794:	2302      	movs	r3, #2
 8001796:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001798:	2302      	movs	r3, #2
 800179a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USART_TX_GPIO_Port, &GPIO_InitStruct);
 800179c:	f107 0310 	add.w	r3, r7, #16
 80017a0:	4619      	mov	r1, r3
 80017a2:	4832      	ldr	r0, [pc, #200]	; (800186c <MX_GPIO_Init+0x1a4>)
 80017a4:	f000 faba 	bl	8001d1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_9;
 80017a8:	f44f 7304 	mov.w	r3, #528	; 0x210
 80017ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017ae:	2300      	movs	r3, #0
 80017b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80017b2:	2302      	movs	r3, #2
 80017b4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b6:	f107 0310 	add.w	r3, r7, #16
 80017ba:	4619      	mov	r1, r3
 80017bc:	482b      	ldr	r0, [pc, #172]	; (800186c <MX_GPIO_Init+0x1a4>)
 80017be:	f000 faad 	bl	8001d1c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA6 PA12 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6|GPIO_PIN_12;
 80017c2:	f44f 5383 	mov.w	r3, #4192	; 0x1060
 80017c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017c8:	2301      	movs	r3, #1
 80017ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017cc:	2300      	movs	r3, #0
 80017ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d0:	2302      	movs	r3, #2
 80017d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d4:	f107 0310 	add.w	r3, r7, #16
 80017d8:	4619      	mov	r1, r3
 80017da:	4824      	ldr	r0, [pc, #144]	; (800186c <MX_GPIO_Init+0x1a4>)
 80017dc:	f000 fa9e 	bl	8001d1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC6 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 80017e0:	f44f 7358 	mov.w	r3, #864	; 0x360
 80017e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017e6:	2301      	movs	r3, #1
 80017e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ea:	2300      	movs	r3, #0
 80017ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ee:	2302      	movs	r3, #2
 80017f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017f2:	f107 0310 	add.w	r3, r7, #16
 80017f6:	4619      	mov	r1, r3
 80017f8:	481d      	ldr	r0, [pc, #116]	; (8001870 <MX_GPIO_Init+0x1a8>)
 80017fa:	f000 fa8f 	bl	8001d1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_11;
 80017fe:	f640 0305 	movw	r3, #2053	; 0x805
 8001802:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001804:	2300      	movs	r3, #0
 8001806:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001808:	2302      	movs	r3, #2
 800180a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800180c:	f107 0310 	add.w	r3, r7, #16
 8001810:	4619      	mov	r1, r3
 8001812:	4818      	ldr	r0, [pc, #96]	; (8001874 <MX_GPIO_Init+0x1ac>)
 8001814:	f000 fa82 	bl	8001d1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001818:	2380      	movs	r3, #128	; 0x80
 800181a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800181c:	2300      	movs	r3, #0
 800181e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001820:	2302      	movs	r3, #2
 8001822:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001824:	f107 0310 	add.w	r3, r7, #16
 8001828:	4619      	mov	r1, r3
 800182a:	4811      	ldr	r0, [pc, #68]	; (8001870 <MX_GPIO_Init+0x1a8>)
 800182c:	f000 fa76 	bl	8001d1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001830:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001834:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001836:	2301      	movs	r3, #1
 8001838:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183a:	2300      	movs	r3, #0
 800183c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800183e:	2302      	movs	r3, #2
 8001840:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001842:	f107 0310 	add.w	r3, r7, #16
 8001846:	4619      	mov	r1, r3
 8001848:	480a      	ldr	r0, [pc, #40]	; (8001874 <MX_GPIO_Init+0x1ac>)
 800184a:	f000 fa67 	bl	8001d1c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800184e:	2200      	movs	r2, #0
 8001850:	2100      	movs	r1, #0
 8001852:	2028      	movs	r0, #40	; 0x28
 8001854:	f000 fa2b 	bl	8001cae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001858:	2028      	movs	r0, #40	; 0x28
 800185a:	f000 fa44 	bl	8001ce6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */

/* USER CODE END MX_GPIO_Init_2 */
}
 800185e:	bf00      	nop
 8001860:	3720      	adds	r7, #32
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	40021000 	.word	0x40021000
 800186c:	40010800 	.word	0x40010800
 8001870:	40011000 	.word	0x40011000
 8001874:	40010c00 	.word	0x40010c00
 8001878:	10210000 	.word	0x10210000

0800187c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	80fb      	strh	r3, [r7, #6]
  if(app_handle.ButtonState == 0) {
 8001886:	4b09      	ldr	r3, [pc, #36]	; (80018ac <HAL_GPIO_EXTI_Callback+0x30>)
 8001888:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800188c:	2b00      	cmp	r3, #0
 800188e:	d104      	bne.n	800189a <HAL_GPIO_EXTI_Callback+0x1e>
	  app_handle.ButtonState = 1;
 8001890:	4b06      	ldr	r3, [pc, #24]	; (80018ac <HAL_GPIO_EXTI_Callback+0x30>)
 8001892:	2201      	movs	r2, #1
 8001894:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  } else {
	  app_handle.ButtonState = 0;
  }
}
 8001898:	e003      	b.n	80018a2 <HAL_GPIO_EXTI_Callback+0x26>
	  app_handle.ButtonState = 0;
 800189a:	4b04      	ldr	r3, [pc, #16]	; (80018ac <HAL_GPIO_EXTI_Callback+0x30>)
 800189c:	2200      	movs	r2, #0
 800189e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
}
 80018a2:	bf00      	nop
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bc80      	pop	{r7}
 80018aa:	4770      	bx	lr
 80018ac:	200000cc 	.word	0x200000cc

080018b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018b4:	b672      	cpsid	i
}
 80018b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018b8:	e7fe      	b.n	80018b8 <Error_Handler+0x8>
	...

080018bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80018c2:	4b19      	ldr	r3, [pc, #100]	; (8001928 <HAL_MspInit+0x6c>)
 80018c4:	699b      	ldr	r3, [r3, #24]
 80018c6:	4a18      	ldr	r2, [pc, #96]	; (8001928 <HAL_MspInit+0x6c>)
 80018c8:	f043 0301 	orr.w	r3, r3, #1
 80018cc:	6193      	str	r3, [r2, #24]
 80018ce:	4b16      	ldr	r3, [pc, #88]	; (8001928 <HAL_MspInit+0x6c>)
 80018d0:	699b      	ldr	r3, [r3, #24]
 80018d2:	f003 0301 	and.w	r3, r3, #1
 80018d6:	60bb      	str	r3, [r7, #8]
 80018d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018da:	4b13      	ldr	r3, [pc, #76]	; (8001928 <HAL_MspInit+0x6c>)
 80018dc:	69db      	ldr	r3, [r3, #28]
 80018de:	4a12      	ldr	r2, [pc, #72]	; (8001928 <HAL_MspInit+0x6c>)
 80018e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018e4:	61d3      	str	r3, [r2, #28]
 80018e6:	4b10      	ldr	r3, [pc, #64]	; (8001928 <HAL_MspInit+0x6c>)
 80018e8:	69db      	ldr	r3, [r3, #28]
 80018ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ee:	607b      	str	r3, [r7, #4]
 80018f0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 80018f2:	2200      	movs	r2, #0
 80018f4:	2100      	movs	r1, #0
 80018f6:	2001      	movs	r0, #1
 80018f8:	f000 f9d9 	bl	8001cae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 80018fc:	2001      	movs	r0, #1
 80018fe:	f000 f9f2 	bl	8001ce6 <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001902:	4b0a      	ldr	r3, [pc, #40]	; (800192c <HAL_MspInit+0x70>)
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	60fb      	str	r3, [r7, #12]
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001916:	60fb      	str	r3, [r7, #12]
 8001918:	4a04      	ldr	r2, [pc, #16]	; (800192c <HAL_MspInit+0x70>)
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800191e:	bf00      	nop
 8001920:	3710      	adds	r7, #16
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	40021000 	.word	0x40021000
 800192c:	40010000 	.word	0x40010000

08001930 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001934:	e7fe      	b.n	8001934 <NMI_Handler+0x4>

08001936 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001936:	b480      	push	{r7}
 8001938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800193a:	e7fe      	b.n	800193a <HardFault_Handler+0x4>

0800193c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001940:	e7fe      	b.n	8001940 <MemManage_Handler+0x4>

08001942 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001942:	b480      	push	{r7}
 8001944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001946:	e7fe      	b.n	8001946 <BusFault_Handler+0x4>

08001948 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800194c:	e7fe      	b.n	800194c <UsageFault_Handler+0x4>

0800194e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800194e:	b480      	push	{r7}
 8001950:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001952:	bf00      	nop
 8001954:	46bd      	mov	sp, r7
 8001956:	bc80      	pop	{r7}
 8001958:	4770      	bx	lr

0800195a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800195a:	b480      	push	{r7}
 800195c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800195e:	bf00      	nop
 8001960:	46bd      	mov	sp, r7
 8001962:	bc80      	pop	{r7}
 8001964:	4770      	bx	lr

08001966 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001966:	b480      	push	{r7}
 8001968:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800196a:	bf00      	nop
 800196c:	46bd      	mov	sp, r7
 800196e:	bc80      	pop	{r7}
 8001970:	4770      	bx	lr

08001972 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001976:	f000 f883 	bl	8001a80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}

0800197e <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8001982:	f000 fb97 	bl	80020b4 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8001986:	bf00      	nop
 8001988:	bd80      	pop	{r7, pc}

0800198a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800198a:	b580      	push	{r7, lr}
 800198c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800198e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001992:	f000 fb77 	bl	8002084 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001996:	bf00      	nop
 8001998:	bd80      	pop	{r7, pc}

0800199a <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800199a:	b480      	push	{r7}
 800199c:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800199e:	bf00      	nop
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bc80      	pop	{r7}
 80019a4:	4770      	bx	lr
	...

080019a8 <Reset_Handler>:
 80019a8:	f7ff fff7 	bl	800199a <SystemInit>
 80019ac:	480b      	ldr	r0, [pc, #44]	; (80019dc <LoopFillZerobss+0xe>)
 80019ae:	490c      	ldr	r1, [pc, #48]	; (80019e0 <LoopFillZerobss+0x12>)
 80019b0:	4a0c      	ldr	r2, [pc, #48]	; (80019e4 <LoopFillZerobss+0x16>)
 80019b2:	2300      	movs	r3, #0
 80019b4:	e002      	b.n	80019bc <LoopCopyDataInit>

080019b6 <CopyDataInit>:
 80019b6:	58d4      	ldr	r4, [r2, r3]
 80019b8:	50c4      	str	r4, [r0, r3]
 80019ba:	3304      	adds	r3, #4

080019bc <LoopCopyDataInit>:
 80019bc:	18c4      	adds	r4, r0, r3
 80019be:	428c      	cmp	r4, r1
 80019c0:	d3f9      	bcc.n	80019b6 <CopyDataInit>
 80019c2:	4a09      	ldr	r2, [pc, #36]	; (80019e8 <LoopFillZerobss+0x1a>)
 80019c4:	4c09      	ldr	r4, [pc, #36]	; (80019ec <LoopFillZerobss+0x1e>)
 80019c6:	2300      	movs	r3, #0
 80019c8:	e001      	b.n	80019ce <LoopFillZerobss>

080019ca <FillZerobss>:
 80019ca:	6013      	str	r3, [r2, #0]
 80019cc:	3204      	adds	r2, #4

080019ce <LoopFillZerobss>:
 80019ce:	42a2      	cmp	r2, r4
 80019d0:	d3fb      	bcc.n	80019ca <FillZerobss>
 80019d2:	f000 ff73 	bl	80028bc <__libc_init_array>
 80019d6:	f7ff fdb9 	bl	800154c <main>
 80019da:	4770      	bx	lr
 80019dc:	20000000 	.word	0x20000000
 80019e0:	20000078 	.word	0x20000078
 80019e4:	08003790 	.word	0x08003790
 80019e8:	20000078 	.word	0x20000078
 80019ec:	20000280 	.word	0x20000280

080019f0 <ADC1_2_IRQHandler>:
 80019f0:	e7fe      	b.n	80019f0 <ADC1_2_IRQHandler>
	...

080019f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019f8:	4b08      	ldr	r3, [pc, #32]	; (8001a1c <HAL_Init+0x28>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a07      	ldr	r2, [pc, #28]	; (8001a1c <HAL_Init+0x28>)
 80019fe:	f043 0310 	orr.w	r3, r3, #16
 8001a02:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a04:	2003      	movs	r0, #3
 8001a06:	f000 f947 	bl	8001c98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a0a:	2000      	movs	r0, #0
 8001a0c:	f000 f808 	bl	8001a20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a10:	f7ff ff54 	bl	80018bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	40022000 	.word	0x40022000

08001a20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a28:	4b12      	ldr	r3, [pc, #72]	; (8001a74 <HAL_InitTick+0x54>)
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	4b12      	ldr	r3, [pc, #72]	; (8001a78 <HAL_InitTick+0x58>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	4619      	mov	r1, r3
 8001a32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a36:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f000 f95f 	bl	8001d02 <HAL_SYSTICK_Config>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e00e      	b.n	8001a6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2b0f      	cmp	r3, #15
 8001a52:	d80a      	bhi.n	8001a6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a54:	2200      	movs	r2, #0
 8001a56:	6879      	ldr	r1, [r7, #4]
 8001a58:	f04f 30ff 	mov.w	r0, #4294967295
 8001a5c:	f000 f927 	bl	8001cae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a60:	4a06      	ldr	r2, [pc, #24]	; (8001a7c <HAL_InitTick+0x5c>)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a66:	2300      	movs	r3, #0
 8001a68:	e000      	b.n	8001a6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3708      	adds	r7, #8
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	20000008 	.word	0x20000008
 8001a78:	20000010 	.word	0x20000010
 8001a7c:	2000000c 	.word	0x2000000c

08001a80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a84:	4b05      	ldr	r3, [pc, #20]	; (8001a9c <HAL_IncTick+0x1c>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	461a      	mov	r2, r3
 8001a8a:	4b05      	ldr	r3, [pc, #20]	; (8001aa0 <HAL_IncTick+0x20>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4413      	add	r3, r2
 8001a90:	4a03      	ldr	r2, [pc, #12]	; (8001aa0 <HAL_IncTick+0x20>)
 8001a92:	6013      	str	r3, [r2, #0]
}
 8001a94:	bf00      	nop
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bc80      	pop	{r7}
 8001a9a:	4770      	bx	lr
 8001a9c:	20000010 	.word	0x20000010
 8001aa0:	20000144 	.word	0x20000144

08001aa4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  return uwTick;
 8001aa8:	4b02      	ldr	r3, [pc, #8]	; (8001ab4 <HAL_GetTick+0x10>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bc80      	pop	{r7}
 8001ab2:	4770      	bx	lr
 8001ab4:	20000144 	.word	0x20000144

08001ab8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ac0:	f7ff fff0 	bl	8001aa4 <HAL_GetTick>
 8001ac4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ad0:	d005      	beq.n	8001ade <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ad2:	4b0a      	ldr	r3, [pc, #40]	; (8001afc <HAL_Delay+0x44>)
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	4413      	add	r3, r2
 8001adc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ade:	bf00      	nop
 8001ae0:	f7ff ffe0 	bl	8001aa4 <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	68fa      	ldr	r2, [r7, #12]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d8f7      	bhi.n	8001ae0 <HAL_Delay+0x28>
  {
  }
}
 8001af0:	bf00      	nop
 8001af2:	bf00      	nop
 8001af4:	3710      	adds	r7, #16
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	20000010 	.word	0x20000010

08001b00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b085      	sub	sp, #20
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f003 0307 	and.w	r3, r3, #7
 8001b0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b10:	4b0c      	ldr	r3, [pc, #48]	; (8001b44 <__NVIC_SetPriorityGrouping+0x44>)
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b16:	68ba      	ldr	r2, [r7, #8]
 8001b18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b32:	4a04      	ldr	r2, [pc, #16]	; (8001b44 <__NVIC_SetPriorityGrouping+0x44>)
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	60d3      	str	r3, [r2, #12]
}
 8001b38:	bf00      	nop
 8001b3a:	3714      	adds	r7, #20
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bc80      	pop	{r7}
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	e000ed00 	.word	0xe000ed00

08001b48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b4c:	4b04      	ldr	r3, [pc, #16]	; (8001b60 <__NVIC_GetPriorityGrouping+0x18>)
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	0a1b      	lsrs	r3, r3, #8
 8001b52:	f003 0307 	and.w	r3, r3, #7
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bc80      	pop	{r7}
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	e000ed00 	.word	0xe000ed00

08001b64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	db0b      	blt.n	8001b8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b76:	79fb      	ldrb	r3, [r7, #7]
 8001b78:	f003 021f 	and.w	r2, r3, #31
 8001b7c:	4906      	ldr	r1, [pc, #24]	; (8001b98 <__NVIC_EnableIRQ+0x34>)
 8001b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b82:	095b      	lsrs	r3, r3, #5
 8001b84:	2001      	movs	r0, #1
 8001b86:	fa00 f202 	lsl.w	r2, r0, r2
 8001b8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b8e:	bf00      	nop
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bc80      	pop	{r7}
 8001b96:	4770      	bx	lr
 8001b98:	e000e100 	.word	0xe000e100

08001b9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	6039      	str	r1, [r7, #0]
 8001ba6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	db0a      	blt.n	8001bc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	b2da      	uxtb	r2, r3
 8001bb4:	490c      	ldr	r1, [pc, #48]	; (8001be8 <__NVIC_SetPriority+0x4c>)
 8001bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bba:	0112      	lsls	r2, r2, #4
 8001bbc:	b2d2      	uxtb	r2, r2
 8001bbe:	440b      	add	r3, r1
 8001bc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bc4:	e00a      	b.n	8001bdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	b2da      	uxtb	r2, r3
 8001bca:	4908      	ldr	r1, [pc, #32]	; (8001bec <__NVIC_SetPriority+0x50>)
 8001bcc:	79fb      	ldrb	r3, [r7, #7]
 8001bce:	f003 030f 	and.w	r3, r3, #15
 8001bd2:	3b04      	subs	r3, #4
 8001bd4:	0112      	lsls	r2, r2, #4
 8001bd6:	b2d2      	uxtb	r2, r2
 8001bd8:	440b      	add	r3, r1
 8001bda:	761a      	strb	r2, [r3, #24]
}
 8001bdc:	bf00      	nop
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bc80      	pop	{r7}
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	e000e100 	.word	0xe000e100
 8001bec:	e000ed00 	.word	0xe000ed00

08001bf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b089      	sub	sp, #36	; 0x24
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	f003 0307 	and.w	r3, r3, #7
 8001c02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	f1c3 0307 	rsb	r3, r3, #7
 8001c0a:	2b04      	cmp	r3, #4
 8001c0c:	bf28      	it	cs
 8001c0e:	2304      	movcs	r3, #4
 8001c10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	3304      	adds	r3, #4
 8001c16:	2b06      	cmp	r3, #6
 8001c18:	d902      	bls.n	8001c20 <NVIC_EncodePriority+0x30>
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	3b03      	subs	r3, #3
 8001c1e:	e000      	b.n	8001c22 <NVIC_EncodePriority+0x32>
 8001c20:	2300      	movs	r3, #0
 8001c22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c24:	f04f 32ff 	mov.w	r2, #4294967295
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2e:	43da      	mvns	r2, r3
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	401a      	ands	r2, r3
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c38:	f04f 31ff 	mov.w	r1, #4294967295
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c42:	43d9      	mvns	r1, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c48:	4313      	orrs	r3, r2
         );
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3724      	adds	r7, #36	; 0x24
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bc80      	pop	{r7}
 8001c52:	4770      	bx	lr

08001c54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c64:	d301      	bcc.n	8001c6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c66:	2301      	movs	r3, #1
 8001c68:	e00f      	b.n	8001c8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c6a:	4a0a      	ldr	r2, [pc, #40]	; (8001c94 <SysTick_Config+0x40>)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c72:	210f      	movs	r1, #15
 8001c74:	f04f 30ff 	mov.w	r0, #4294967295
 8001c78:	f7ff ff90 	bl	8001b9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c7c:	4b05      	ldr	r3, [pc, #20]	; (8001c94 <SysTick_Config+0x40>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c82:	4b04      	ldr	r3, [pc, #16]	; (8001c94 <SysTick_Config+0x40>)
 8001c84:	2207      	movs	r2, #7
 8001c86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	e000e010 	.word	0xe000e010

08001c98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f7ff ff2d 	bl	8001b00 <__NVIC_SetPriorityGrouping>
}
 8001ca6:	bf00      	nop
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b086      	sub	sp, #24
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	60b9      	str	r1, [r7, #8]
 8001cb8:	607a      	str	r2, [r7, #4]
 8001cba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cc0:	f7ff ff42 	bl	8001b48 <__NVIC_GetPriorityGrouping>
 8001cc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	68b9      	ldr	r1, [r7, #8]
 8001cca:	6978      	ldr	r0, [r7, #20]
 8001ccc:	f7ff ff90 	bl	8001bf0 <NVIC_EncodePriority>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cd6:	4611      	mov	r1, r2
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff ff5f 	bl	8001b9c <__NVIC_SetPriority>
}
 8001cde:	bf00      	nop
 8001ce0:	3718      	adds	r7, #24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b082      	sub	sp, #8
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	4603      	mov	r3, r0
 8001cee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff ff35 	bl	8001b64 <__NVIC_EnableIRQ>
}
 8001cfa:	bf00      	nop
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b082      	sub	sp, #8
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f7ff ffa2 	bl	8001c54 <SysTick_Config>
 8001d10:	4603      	mov	r3, r0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
	...

08001d1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b08b      	sub	sp, #44	; 0x2c
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d26:	2300      	movs	r3, #0
 8001d28:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d2e:	e169      	b.n	8002004 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d30:	2201      	movs	r2, #1
 8001d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	69fa      	ldr	r2, [r7, #28]
 8001d40:	4013      	ands	r3, r2
 8001d42:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	f040 8158 	bne.w	8001ffe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	4a9a      	ldr	r2, [pc, #616]	; (8001fbc <HAL_GPIO_Init+0x2a0>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d05e      	beq.n	8001e16 <HAL_GPIO_Init+0xfa>
 8001d58:	4a98      	ldr	r2, [pc, #608]	; (8001fbc <HAL_GPIO_Init+0x2a0>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d875      	bhi.n	8001e4a <HAL_GPIO_Init+0x12e>
 8001d5e:	4a98      	ldr	r2, [pc, #608]	; (8001fc0 <HAL_GPIO_Init+0x2a4>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d058      	beq.n	8001e16 <HAL_GPIO_Init+0xfa>
 8001d64:	4a96      	ldr	r2, [pc, #600]	; (8001fc0 <HAL_GPIO_Init+0x2a4>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d86f      	bhi.n	8001e4a <HAL_GPIO_Init+0x12e>
 8001d6a:	4a96      	ldr	r2, [pc, #600]	; (8001fc4 <HAL_GPIO_Init+0x2a8>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d052      	beq.n	8001e16 <HAL_GPIO_Init+0xfa>
 8001d70:	4a94      	ldr	r2, [pc, #592]	; (8001fc4 <HAL_GPIO_Init+0x2a8>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d869      	bhi.n	8001e4a <HAL_GPIO_Init+0x12e>
 8001d76:	4a94      	ldr	r2, [pc, #592]	; (8001fc8 <HAL_GPIO_Init+0x2ac>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d04c      	beq.n	8001e16 <HAL_GPIO_Init+0xfa>
 8001d7c:	4a92      	ldr	r2, [pc, #584]	; (8001fc8 <HAL_GPIO_Init+0x2ac>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d863      	bhi.n	8001e4a <HAL_GPIO_Init+0x12e>
 8001d82:	4a92      	ldr	r2, [pc, #584]	; (8001fcc <HAL_GPIO_Init+0x2b0>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d046      	beq.n	8001e16 <HAL_GPIO_Init+0xfa>
 8001d88:	4a90      	ldr	r2, [pc, #576]	; (8001fcc <HAL_GPIO_Init+0x2b0>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d85d      	bhi.n	8001e4a <HAL_GPIO_Init+0x12e>
 8001d8e:	2b12      	cmp	r3, #18
 8001d90:	d82a      	bhi.n	8001de8 <HAL_GPIO_Init+0xcc>
 8001d92:	2b12      	cmp	r3, #18
 8001d94:	d859      	bhi.n	8001e4a <HAL_GPIO_Init+0x12e>
 8001d96:	a201      	add	r2, pc, #4	; (adr r2, 8001d9c <HAL_GPIO_Init+0x80>)
 8001d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d9c:	08001e17 	.word	0x08001e17
 8001da0:	08001df1 	.word	0x08001df1
 8001da4:	08001e03 	.word	0x08001e03
 8001da8:	08001e45 	.word	0x08001e45
 8001dac:	08001e4b 	.word	0x08001e4b
 8001db0:	08001e4b 	.word	0x08001e4b
 8001db4:	08001e4b 	.word	0x08001e4b
 8001db8:	08001e4b 	.word	0x08001e4b
 8001dbc:	08001e4b 	.word	0x08001e4b
 8001dc0:	08001e4b 	.word	0x08001e4b
 8001dc4:	08001e4b 	.word	0x08001e4b
 8001dc8:	08001e4b 	.word	0x08001e4b
 8001dcc:	08001e4b 	.word	0x08001e4b
 8001dd0:	08001e4b 	.word	0x08001e4b
 8001dd4:	08001e4b 	.word	0x08001e4b
 8001dd8:	08001e4b 	.word	0x08001e4b
 8001ddc:	08001e4b 	.word	0x08001e4b
 8001de0:	08001df9 	.word	0x08001df9
 8001de4:	08001e0d 	.word	0x08001e0d
 8001de8:	4a79      	ldr	r2, [pc, #484]	; (8001fd0 <HAL_GPIO_Init+0x2b4>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d013      	beq.n	8001e16 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001dee:	e02c      	b.n	8001e4a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	623b      	str	r3, [r7, #32]
          break;
 8001df6:	e029      	b.n	8001e4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	3304      	adds	r3, #4
 8001dfe:	623b      	str	r3, [r7, #32]
          break;
 8001e00:	e024      	b.n	8001e4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	3308      	adds	r3, #8
 8001e08:	623b      	str	r3, [r7, #32]
          break;
 8001e0a:	e01f      	b.n	8001e4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	330c      	adds	r3, #12
 8001e12:	623b      	str	r3, [r7, #32]
          break;
 8001e14:	e01a      	b.n	8001e4c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d102      	bne.n	8001e24 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e1e:	2304      	movs	r3, #4
 8001e20:	623b      	str	r3, [r7, #32]
          break;
 8001e22:	e013      	b.n	8001e4c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d105      	bne.n	8001e38 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e2c:	2308      	movs	r3, #8
 8001e2e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	69fa      	ldr	r2, [r7, #28]
 8001e34:	611a      	str	r2, [r3, #16]
          break;
 8001e36:	e009      	b.n	8001e4c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e38:	2308      	movs	r3, #8
 8001e3a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	69fa      	ldr	r2, [r7, #28]
 8001e40:	615a      	str	r2, [r3, #20]
          break;
 8001e42:	e003      	b.n	8001e4c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e44:	2300      	movs	r3, #0
 8001e46:	623b      	str	r3, [r7, #32]
          break;
 8001e48:	e000      	b.n	8001e4c <HAL_GPIO_Init+0x130>
          break;
 8001e4a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	2bff      	cmp	r3, #255	; 0xff
 8001e50:	d801      	bhi.n	8001e56 <HAL_GPIO_Init+0x13a>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	e001      	b.n	8001e5a <HAL_GPIO_Init+0x13e>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	3304      	adds	r3, #4
 8001e5a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	2bff      	cmp	r3, #255	; 0xff
 8001e60:	d802      	bhi.n	8001e68 <HAL_GPIO_Init+0x14c>
 8001e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	e002      	b.n	8001e6e <HAL_GPIO_Init+0x152>
 8001e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6a:	3b08      	subs	r3, #8
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	210f      	movs	r1, #15
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	fa01 f303 	lsl.w	r3, r1, r3
 8001e7c:	43db      	mvns	r3, r3
 8001e7e:	401a      	ands	r2, r3
 8001e80:	6a39      	ldr	r1, [r7, #32]
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	fa01 f303 	lsl.w	r3, r1, r3
 8001e88:	431a      	orrs	r2, r3
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	f000 80b1 	beq.w	8001ffe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e9c:	4b4d      	ldr	r3, [pc, #308]	; (8001fd4 <HAL_GPIO_Init+0x2b8>)
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	4a4c      	ldr	r2, [pc, #304]	; (8001fd4 <HAL_GPIO_Init+0x2b8>)
 8001ea2:	f043 0301 	orr.w	r3, r3, #1
 8001ea6:	6193      	str	r3, [r2, #24]
 8001ea8:	4b4a      	ldr	r3, [pc, #296]	; (8001fd4 <HAL_GPIO_Init+0x2b8>)
 8001eaa:	699b      	ldr	r3, [r3, #24]
 8001eac:	f003 0301 	and.w	r3, r3, #1
 8001eb0:	60bb      	str	r3, [r7, #8]
 8001eb2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001eb4:	4a48      	ldr	r2, [pc, #288]	; (8001fd8 <HAL_GPIO_Init+0x2bc>)
 8001eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb8:	089b      	lsrs	r3, r3, #2
 8001eba:	3302      	adds	r3, #2
 8001ebc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ec0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec4:	f003 0303 	and.w	r3, r3, #3
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	220f      	movs	r2, #15
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	68fa      	ldr	r2, [r7, #12]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4a40      	ldr	r2, [pc, #256]	; (8001fdc <HAL_GPIO_Init+0x2c0>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d013      	beq.n	8001f08 <HAL_GPIO_Init+0x1ec>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	4a3f      	ldr	r2, [pc, #252]	; (8001fe0 <HAL_GPIO_Init+0x2c4>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d00d      	beq.n	8001f04 <HAL_GPIO_Init+0x1e8>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4a3e      	ldr	r2, [pc, #248]	; (8001fe4 <HAL_GPIO_Init+0x2c8>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d007      	beq.n	8001f00 <HAL_GPIO_Init+0x1e4>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	4a3d      	ldr	r2, [pc, #244]	; (8001fe8 <HAL_GPIO_Init+0x2cc>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d101      	bne.n	8001efc <HAL_GPIO_Init+0x1e0>
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e006      	b.n	8001f0a <HAL_GPIO_Init+0x1ee>
 8001efc:	2304      	movs	r3, #4
 8001efe:	e004      	b.n	8001f0a <HAL_GPIO_Init+0x1ee>
 8001f00:	2302      	movs	r3, #2
 8001f02:	e002      	b.n	8001f0a <HAL_GPIO_Init+0x1ee>
 8001f04:	2301      	movs	r3, #1
 8001f06:	e000      	b.n	8001f0a <HAL_GPIO_Init+0x1ee>
 8001f08:	2300      	movs	r3, #0
 8001f0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f0c:	f002 0203 	and.w	r2, r2, #3
 8001f10:	0092      	lsls	r2, r2, #2
 8001f12:	4093      	lsls	r3, r2
 8001f14:	68fa      	ldr	r2, [r7, #12]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f1a:	492f      	ldr	r1, [pc, #188]	; (8001fd8 <HAL_GPIO_Init+0x2bc>)
 8001f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1e:	089b      	lsrs	r3, r3, #2
 8001f20:	3302      	adds	r3, #2
 8001f22:	68fa      	ldr	r2, [r7, #12]
 8001f24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d006      	beq.n	8001f42 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f34:	4b2d      	ldr	r3, [pc, #180]	; (8001fec <HAL_GPIO_Init+0x2d0>)
 8001f36:	689a      	ldr	r2, [r3, #8]
 8001f38:	492c      	ldr	r1, [pc, #176]	; (8001fec <HAL_GPIO_Init+0x2d0>)
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	608b      	str	r3, [r1, #8]
 8001f40:	e006      	b.n	8001f50 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f42:	4b2a      	ldr	r3, [pc, #168]	; (8001fec <HAL_GPIO_Init+0x2d0>)
 8001f44:	689a      	ldr	r2, [r3, #8]
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	43db      	mvns	r3, r3
 8001f4a:	4928      	ldr	r1, [pc, #160]	; (8001fec <HAL_GPIO_Init+0x2d0>)
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d006      	beq.n	8001f6a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f5c:	4b23      	ldr	r3, [pc, #140]	; (8001fec <HAL_GPIO_Init+0x2d0>)
 8001f5e:	68da      	ldr	r2, [r3, #12]
 8001f60:	4922      	ldr	r1, [pc, #136]	; (8001fec <HAL_GPIO_Init+0x2d0>)
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	60cb      	str	r3, [r1, #12]
 8001f68:	e006      	b.n	8001f78 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f6a:	4b20      	ldr	r3, [pc, #128]	; (8001fec <HAL_GPIO_Init+0x2d0>)
 8001f6c:	68da      	ldr	r2, [r3, #12]
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	43db      	mvns	r3, r3
 8001f72:	491e      	ldr	r1, [pc, #120]	; (8001fec <HAL_GPIO_Init+0x2d0>)
 8001f74:	4013      	ands	r3, r2
 8001f76:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d006      	beq.n	8001f92 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f84:	4b19      	ldr	r3, [pc, #100]	; (8001fec <HAL_GPIO_Init+0x2d0>)
 8001f86:	685a      	ldr	r2, [r3, #4]
 8001f88:	4918      	ldr	r1, [pc, #96]	; (8001fec <HAL_GPIO_Init+0x2d0>)
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	604b      	str	r3, [r1, #4]
 8001f90:	e006      	b.n	8001fa0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f92:	4b16      	ldr	r3, [pc, #88]	; (8001fec <HAL_GPIO_Init+0x2d0>)
 8001f94:	685a      	ldr	r2, [r3, #4]
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	4914      	ldr	r1, [pc, #80]	; (8001fec <HAL_GPIO_Init+0x2d0>)
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d021      	beq.n	8001ff0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001fac:	4b0f      	ldr	r3, [pc, #60]	; (8001fec <HAL_GPIO_Init+0x2d0>)
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	490e      	ldr	r1, [pc, #56]	; (8001fec <HAL_GPIO_Init+0x2d0>)
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	600b      	str	r3, [r1, #0]
 8001fb8:	e021      	b.n	8001ffe <HAL_GPIO_Init+0x2e2>
 8001fba:	bf00      	nop
 8001fbc:	10320000 	.word	0x10320000
 8001fc0:	10310000 	.word	0x10310000
 8001fc4:	10220000 	.word	0x10220000
 8001fc8:	10210000 	.word	0x10210000
 8001fcc:	10120000 	.word	0x10120000
 8001fd0:	10110000 	.word	0x10110000
 8001fd4:	40021000 	.word	0x40021000
 8001fd8:	40010000 	.word	0x40010000
 8001fdc:	40010800 	.word	0x40010800
 8001fe0:	40010c00 	.word	0x40010c00
 8001fe4:	40011000 	.word	0x40011000
 8001fe8:	40011400 	.word	0x40011400
 8001fec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ff0:	4b0b      	ldr	r3, [pc, #44]	; (8002020 <HAL_GPIO_Init+0x304>)
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	43db      	mvns	r3, r3
 8001ff8:	4909      	ldr	r1, [pc, #36]	; (8002020 <HAL_GPIO_Init+0x304>)
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002000:	3301      	adds	r3, #1
 8002002:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200a:	fa22 f303 	lsr.w	r3, r2, r3
 800200e:	2b00      	cmp	r3, #0
 8002010:	f47f ae8e 	bne.w	8001d30 <HAL_GPIO_Init+0x14>
  }
}
 8002014:	bf00      	nop
 8002016:	bf00      	nop
 8002018:	372c      	adds	r7, #44	; 0x2c
 800201a:	46bd      	mov	sp, r7
 800201c:	bc80      	pop	{r7}
 800201e:	4770      	bx	lr
 8002020:	40010400 	.word	0x40010400

08002024 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002024:	b480      	push	{r7}
 8002026:	b085      	sub	sp, #20
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	460b      	mov	r3, r1
 800202e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	689a      	ldr	r2, [r3, #8]
 8002034:	887b      	ldrh	r3, [r7, #2]
 8002036:	4013      	ands	r3, r2
 8002038:	2b00      	cmp	r3, #0
 800203a:	d002      	beq.n	8002042 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800203c:	2301      	movs	r3, #1
 800203e:	73fb      	strb	r3, [r7, #15]
 8002040:	e001      	b.n	8002046 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002042:	2300      	movs	r3, #0
 8002044:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002046:	7bfb      	ldrb	r3, [r7, #15]
}
 8002048:	4618      	mov	r0, r3
 800204a:	3714      	adds	r7, #20
 800204c:	46bd      	mov	sp, r7
 800204e:	bc80      	pop	{r7}
 8002050:	4770      	bx	lr

08002052 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002052:	b480      	push	{r7}
 8002054:	b083      	sub	sp, #12
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
 800205a:	460b      	mov	r3, r1
 800205c:	807b      	strh	r3, [r7, #2]
 800205e:	4613      	mov	r3, r2
 8002060:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002062:	787b      	ldrb	r3, [r7, #1]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d003      	beq.n	8002070 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002068:	887a      	ldrh	r2, [r7, #2]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800206e:	e003      	b.n	8002078 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002070:	887b      	ldrh	r3, [r7, #2]
 8002072:	041a      	lsls	r2, r3, #16
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	611a      	str	r2, [r3, #16]
}
 8002078:	bf00      	nop
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	bc80      	pop	{r7}
 8002080:	4770      	bx	lr
	...

08002084 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	4603      	mov	r3, r0
 800208c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800208e:	4b08      	ldr	r3, [pc, #32]	; (80020b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002090:	695a      	ldr	r2, [r3, #20]
 8002092:	88fb      	ldrh	r3, [r7, #6]
 8002094:	4013      	ands	r3, r2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d006      	beq.n	80020a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800209a:	4a05      	ldr	r2, [pc, #20]	; (80020b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800209c:	88fb      	ldrh	r3, [r7, #6]
 800209e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80020a0:	88fb      	ldrh	r3, [r7, #6]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7ff fbea 	bl	800187c <HAL_GPIO_EXTI_Callback>
  }
}
 80020a8:	bf00      	nop
 80020aa:	3708      	adds	r7, #8
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	40010400 	.word	0x40010400

080020b4 <HAL_PWR_PVD_IRQHandler>:
  * @brief  This function handles the PWR PVD interrupt request.
  * @note   This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 80020b8:	4b06      	ldr	r3, [pc, #24]	; (80020d4 <HAL_PWR_PVD_IRQHandler+0x20>)
 80020ba:	695b      	ldr	r3, [r3, #20]
 80020bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d005      	beq.n	80020d0 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 80020c4:	f000 f808 	bl	80020d8 <HAL_PWR_PVDCallback>

    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 80020c8:	4b02      	ldr	r3, [pc, #8]	; (80020d4 <HAL_PWR_PVD_IRQHandler+0x20>)
 80020ca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80020ce:	615a      	str	r2, [r3, #20]
  }
}
 80020d0:	bf00      	nop
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	40010400 	.word	0x40010400

080020d8 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 80020dc:	bf00      	nop
 80020de:	46bd      	mov	sp, r7
 80020e0:	bc80      	pop	{r7}
 80020e2:	4770      	bx	lr

080020e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b086      	sub	sp, #24
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d101      	bne.n	80020f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e272      	b.n	80025dc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0301 	and.w	r3, r3, #1
 80020fe:	2b00      	cmp	r3, #0
 8002100:	f000 8087 	beq.w	8002212 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002104:	4b92      	ldr	r3, [pc, #584]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f003 030c 	and.w	r3, r3, #12
 800210c:	2b04      	cmp	r3, #4
 800210e:	d00c      	beq.n	800212a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002110:	4b8f      	ldr	r3, [pc, #572]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f003 030c 	and.w	r3, r3, #12
 8002118:	2b08      	cmp	r3, #8
 800211a:	d112      	bne.n	8002142 <HAL_RCC_OscConfig+0x5e>
 800211c:	4b8c      	ldr	r3, [pc, #560]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002124:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002128:	d10b      	bne.n	8002142 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800212a:	4b89      	ldr	r3, [pc, #548]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d06c      	beq.n	8002210 <HAL_RCC_OscConfig+0x12c>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d168      	bne.n	8002210 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e24c      	b.n	80025dc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800214a:	d106      	bne.n	800215a <HAL_RCC_OscConfig+0x76>
 800214c:	4b80      	ldr	r3, [pc, #512]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a7f      	ldr	r2, [pc, #508]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 8002152:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002156:	6013      	str	r3, [r2, #0]
 8002158:	e02e      	b.n	80021b8 <HAL_RCC_OscConfig+0xd4>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d10c      	bne.n	800217c <HAL_RCC_OscConfig+0x98>
 8002162:	4b7b      	ldr	r3, [pc, #492]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a7a      	ldr	r2, [pc, #488]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 8002168:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800216c:	6013      	str	r3, [r2, #0]
 800216e:	4b78      	ldr	r3, [pc, #480]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a77      	ldr	r2, [pc, #476]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 8002174:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002178:	6013      	str	r3, [r2, #0]
 800217a:	e01d      	b.n	80021b8 <HAL_RCC_OscConfig+0xd4>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002184:	d10c      	bne.n	80021a0 <HAL_RCC_OscConfig+0xbc>
 8002186:	4b72      	ldr	r3, [pc, #456]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a71      	ldr	r2, [pc, #452]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 800218c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002190:	6013      	str	r3, [r2, #0]
 8002192:	4b6f      	ldr	r3, [pc, #444]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a6e      	ldr	r2, [pc, #440]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 8002198:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800219c:	6013      	str	r3, [r2, #0]
 800219e:	e00b      	b.n	80021b8 <HAL_RCC_OscConfig+0xd4>
 80021a0:	4b6b      	ldr	r3, [pc, #428]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a6a      	ldr	r2, [pc, #424]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 80021a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021aa:	6013      	str	r3, [r2, #0]
 80021ac:	4b68      	ldr	r3, [pc, #416]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a67      	ldr	r2, [pc, #412]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 80021b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021b6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d013      	beq.n	80021e8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c0:	f7ff fc70 	bl	8001aa4 <HAL_GetTick>
 80021c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021c6:	e008      	b.n	80021da <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021c8:	f7ff fc6c 	bl	8001aa4 <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	2b64      	cmp	r3, #100	; 0x64
 80021d4:	d901      	bls.n	80021da <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e200      	b.n	80025dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021da:	4b5d      	ldr	r3, [pc, #372]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d0f0      	beq.n	80021c8 <HAL_RCC_OscConfig+0xe4>
 80021e6:	e014      	b.n	8002212 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e8:	f7ff fc5c 	bl	8001aa4 <HAL_GetTick>
 80021ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ee:	e008      	b.n	8002202 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021f0:	f7ff fc58 	bl	8001aa4 <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	2b64      	cmp	r3, #100	; 0x64
 80021fc:	d901      	bls.n	8002202 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e1ec      	b.n	80025dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002202:	4b53      	ldr	r3, [pc, #332]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d1f0      	bne.n	80021f0 <HAL_RCC_OscConfig+0x10c>
 800220e:	e000      	b.n	8002212 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002210:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0302 	and.w	r3, r3, #2
 800221a:	2b00      	cmp	r3, #0
 800221c:	d063      	beq.n	80022e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800221e:	4b4c      	ldr	r3, [pc, #304]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f003 030c 	and.w	r3, r3, #12
 8002226:	2b00      	cmp	r3, #0
 8002228:	d00b      	beq.n	8002242 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800222a:	4b49      	ldr	r3, [pc, #292]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f003 030c 	and.w	r3, r3, #12
 8002232:	2b08      	cmp	r3, #8
 8002234:	d11c      	bne.n	8002270 <HAL_RCC_OscConfig+0x18c>
 8002236:	4b46      	ldr	r3, [pc, #280]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d116      	bne.n	8002270 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002242:	4b43      	ldr	r3, [pc, #268]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d005      	beq.n	800225a <HAL_RCC_OscConfig+0x176>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	691b      	ldr	r3, [r3, #16]
 8002252:	2b01      	cmp	r3, #1
 8002254:	d001      	beq.n	800225a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e1c0      	b.n	80025dc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800225a:	4b3d      	ldr	r3, [pc, #244]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	695b      	ldr	r3, [r3, #20]
 8002266:	00db      	lsls	r3, r3, #3
 8002268:	4939      	ldr	r1, [pc, #228]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 800226a:	4313      	orrs	r3, r2
 800226c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800226e:	e03a      	b.n	80022e6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	691b      	ldr	r3, [r3, #16]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d020      	beq.n	80022ba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002278:	4b36      	ldr	r3, [pc, #216]	; (8002354 <HAL_RCC_OscConfig+0x270>)
 800227a:	2201      	movs	r2, #1
 800227c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800227e:	f7ff fc11 	bl	8001aa4 <HAL_GetTick>
 8002282:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002284:	e008      	b.n	8002298 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002286:	f7ff fc0d 	bl	8001aa4 <HAL_GetTick>
 800228a:	4602      	mov	r2, r0
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	2b02      	cmp	r3, #2
 8002292:	d901      	bls.n	8002298 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002294:	2303      	movs	r3, #3
 8002296:	e1a1      	b.n	80025dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002298:	4b2d      	ldr	r3, [pc, #180]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0302 	and.w	r3, r3, #2
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d0f0      	beq.n	8002286 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022a4:	4b2a      	ldr	r3, [pc, #168]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	695b      	ldr	r3, [r3, #20]
 80022b0:	00db      	lsls	r3, r3, #3
 80022b2:	4927      	ldr	r1, [pc, #156]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 80022b4:	4313      	orrs	r3, r2
 80022b6:	600b      	str	r3, [r1, #0]
 80022b8:	e015      	b.n	80022e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022ba:	4b26      	ldr	r3, [pc, #152]	; (8002354 <HAL_RCC_OscConfig+0x270>)
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c0:	f7ff fbf0 	bl	8001aa4 <HAL_GetTick>
 80022c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022c6:	e008      	b.n	80022da <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022c8:	f7ff fbec 	bl	8001aa4 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d901      	bls.n	80022da <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e180      	b.n	80025dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022da:	4b1d      	ldr	r3, [pc, #116]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0302 	and.w	r3, r3, #2
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d1f0      	bne.n	80022c8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0308 	and.w	r3, r3, #8
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d03a      	beq.n	8002368 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	699b      	ldr	r3, [r3, #24]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d019      	beq.n	800232e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022fa:	4b17      	ldr	r3, [pc, #92]	; (8002358 <HAL_RCC_OscConfig+0x274>)
 80022fc:	2201      	movs	r2, #1
 80022fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002300:	f7ff fbd0 	bl	8001aa4 <HAL_GetTick>
 8002304:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002306:	e008      	b.n	800231a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002308:	f7ff fbcc 	bl	8001aa4 <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	2b02      	cmp	r3, #2
 8002314:	d901      	bls.n	800231a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e160      	b.n	80025dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800231a:	4b0d      	ldr	r3, [pc, #52]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 800231c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d0f0      	beq.n	8002308 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002326:	2001      	movs	r0, #1
 8002328:	f000 fa9c 	bl	8002864 <RCC_Delay>
 800232c:	e01c      	b.n	8002368 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800232e:	4b0a      	ldr	r3, [pc, #40]	; (8002358 <HAL_RCC_OscConfig+0x274>)
 8002330:	2200      	movs	r2, #0
 8002332:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002334:	f7ff fbb6 	bl	8001aa4 <HAL_GetTick>
 8002338:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800233a:	e00f      	b.n	800235c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800233c:	f7ff fbb2 	bl	8001aa4 <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	2b02      	cmp	r3, #2
 8002348:	d908      	bls.n	800235c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e146      	b.n	80025dc <HAL_RCC_OscConfig+0x4f8>
 800234e:	bf00      	nop
 8002350:	40021000 	.word	0x40021000
 8002354:	42420000 	.word	0x42420000
 8002358:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800235c:	4b92      	ldr	r3, [pc, #584]	; (80025a8 <HAL_RCC_OscConfig+0x4c4>)
 800235e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002360:	f003 0302 	and.w	r3, r3, #2
 8002364:	2b00      	cmp	r3, #0
 8002366:	d1e9      	bne.n	800233c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0304 	and.w	r3, r3, #4
 8002370:	2b00      	cmp	r3, #0
 8002372:	f000 80a6 	beq.w	80024c2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002376:	2300      	movs	r3, #0
 8002378:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800237a:	4b8b      	ldr	r3, [pc, #556]	; (80025a8 <HAL_RCC_OscConfig+0x4c4>)
 800237c:	69db      	ldr	r3, [r3, #28]
 800237e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d10d      	bne.n	80023a2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002386:	4b88      	ldr	r3, [pc, #544]	; (80025a8 <HAL_RCC_OscConfig+0x4c4>)
 8002388:	69db      	ldr	r3, [r3, #28]
 800238a:	4a87      	ldr	r2, [pc, #540]	; (80025a8 <HAL_RCC_OscConfig+0x4c4>)
 800238c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002390:	61d3      	str	r3, [r2, #28]
 8002392:	4b85      	ldr	r3, [pc, #532]	; (80025a8 <HAL_RCC_OscConfig+0x4c4>)
 8002394:	69db      	ldr	r3, [r3, #28]
 8002396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800239a:	60bb      	str	r3, [r7, #8]
 800239c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800239e:	2301      	movs	r3, #1
 80023a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023a2:	4b82      	ldr	r3, [pc, #520]	; (80025ac <HAL_RCC_OscConfig+0x4c8>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d118      	bne.n	80023e0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023ae:	4b7f      	ldr	r3, [pc, #508]	; (80025ac <HAL_RCC_OscConfig+0x4c8>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a7e      	ldr	r2, [pc, #504]	; (80025ac <HAL_RCC_OscConfig+0x4c8>)
 80023b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023ba:	f7ff fb73 	bl	8001aa4 <HAL_GetTick>
 80023be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023c0:	e008      	b.n	80023d4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023c2:	f7ff fb6f 	bl	8001aa4 <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	2b64      	cmp	r3, #100	; 0x64
 80023ce:	d901      	bls.n	80023d4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	e103      	b.n	80025dc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023d4:	4b75      	ldr	r3, [pc, #468]	; (80025ac <HAL_RCC_OscConfig+0x4c8>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d0f0      	beq.n	80023c2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d106      	bne.n	80023f6 <HAL_RCC_OscConfig+0x312>
 80023e8:	4b6f      	ldr	r3, [pc, #444]	; (80025a8 <HAL_RCC_OscConfig+0x4c4>)
 80023ea:	6a1b      	ldr	r3, [r3, #32]
 80023ec:	4a6e      	ldr	r2, [pc, #440]	; (80025a8 <HAL_RCC_OscConfig+0x4c4>)
 80023ee:	f043 0301 	orr.w	r3, r3, #1
 80023f2:	6213      	str	r3, [r2, #32]
 80023f4:	e02d      	b.n	8002452 <HAL_RCC_OscConfig+0x36e>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d10c      	bne.n	8002418 <HAL_RCC_OscConfig+0x334>
 80023fe:	4b6a      	ldr	r3, [pc, #424]	; (80025a8 <HAL_RCC_OscConfig+0x4c4>)
 8002400:	6a1b      	ldr	r3, [r3, #32]
 8002402:	4a69      	ldr	r2, [pc, #420]	; (80025a8 <HAL_RCC_OscConfig+0x4c4>)
 8002404:	f023 0301 	bic.w	r3, r3, #1
 8002408:	6213      	str	r3, [r2, #32]
 800240a:	4b67      	ldr	r3, [pc, #412]	; (80025a8 <HAL_RCC_OscConfig+0x4c4>)
 800240c:	6a1b      	ldr	r3, [r3, #32]
 800240e:	4a66      	ldr	r2, [pc, #408]	; (80025a8 <HAL_RCC_OscConfig+0x4c4>)
 8002410:	f023 0304 	bic.w	r3, r3, #4
 8002414:	6213      	str	r3, [r2, #32]
 8002416:	e01c      	b.n	8002452 <HAL_RCC_OscConfig+0x36e>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	2b05      	cmp	r3, #5
 800241e:	d10c      	bne.n	800243a <HAL_RCC_OscConfig+0x356>
 8002420:	4b61      	ldr	r3, [pc, #388]	; (80025a8 <HAL_RCC_OscConfig+0x4c4>)
 8002422:	6a1b      	ldr	r3, [r3, #32]
 8002424:	4a60      	ldr	r2, [pc, #384]	; (80025a8 <HAL_RCC_OscConfig+0x4c4>)
 8002426:	f043 0304 	orr.w	r3, r3, #4
 800242a:	6213      	str	r3, [r2, #32]
 800242c:	4b5e      	ldr	r3, [pc, #376]	; (80025a8 <HAL_RCC_OscConfig+0x4c4>)
 800242e:	6a1b      	ldr	r3, [r3, #32]
 8002430:	4a5d      	ldr	r2, [pc, #372]	; (80025a8 <HAL_RCC_OscConfig+0x4c4>)
 8002432:	f043 0301 	orr.w	r3, r3, #1
 8002436:	6213      	str	r3, [r2, #32]
 8002438:	e00b      	b.n	8002452 <HAL_RCC_OscConfig+0x36e>
 800243a:	4b5b      	ldr	r3, [pc, #364]	; (80025a8 <HAL_RCC_OscConfig+0x4c4>)
 800243c:	6a1b      	ldr	r3, [r3, #32]
 800243e:	4a5a      	ldr	r2, [pc, #360]	; (80025a8 <HAL_RCC_OscConfig+0x4c4>)
 8002440:	f023 0301 	bic.w	r3, r3, #1
 8002444:	6213      	str	r3, [r2, #32]
 8002446:	4b58      	ldr	r3, [pc, #352]	; (80025a8 <HAL_RCC_OscConfig+0x4c4>)
 8002448:	6a1b      	ldr	r3, [r3, #32]
 800244a:	4a57      	ldr	r2, [pc, #348]	; (80025a8 <HAL_RCC_OscConfig+0x4c4>)
 800244c:	f023 0304 	bic.w	r3, r3, #4
 8002450:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d015      	beq.n	8002486 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800245a:	f7ff fb23 	bl	8001aa4 <HAL_GetTick>
 800245e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002460:	e00a      	b.n	8002478 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002462:	f7ff fb1f 	bl	8001aa4 <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002470:	4293      	cmp	r3, r2
 8002472:	d901      	bls.n	8002478 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e0b1      	b.n	80025dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002478:	4b4b      	ldr	r3, [pc, #300]	; (80025a8 <HAL_RCC_OscConfig+0x4c4>)
 800247a:	6a1b      	ldr	r3, [r3, #32]
 800247c:	f003 0302 	and.w	r3, r3, #2
 8002480:	2b00      	cmp	r3, #0
 8002482:	d0ee      	beq.n	8002462 <HAL_RCC_OscConfig+0x37e>
 8002484:	e014      	b.n	80024b0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002486:	f7ff fb0d 	bl	8001aa4 <HAL_GetTick>
 800248a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800248c:	e00a      	b.n	80024a4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800248e:	f7ff fb09 	bl	8001aa4 <HAL_GetTick>
 8002492:	4602      	mov	r2, r0
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	f241 3288 	movw	r2, #5000	; 0x1388
 800249c:	4293      	cmp	r3, r2
 800249e:	d901      	bls.n	80024a4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80024a0:	2303      	movs	r3, #3
 80024a2:	e09b      	b.n	80025dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024a4:	4b40      	ldr	r3, [pc, #256]	; (80025a8 <HAL_RCC_OscConfig+0x4c4>)
 80024a6:	6a1b      	ldr	r3, [r3, #32]
 80024a8:	f003 0302 	and.w	r3, r3, #2
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d1ee      	bne.n	800248e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80024b0:	7dfb      	ldrb	r3, [r7, #23]
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d105      	bne.n	80024c2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024b6:	4b3c      	ldr	r3, [pc, #240]	; (80025a8 <HAL_RCC_OscConfig+0x4c4>)
 80024b8:	69db      	ldr	r3, [r3, #28]
 80024ba:	4a3b      	ldr	r2, [pc, #236]	; (80025a8 <HAL_RCC_OscConfig+0x4c4>)
 80024bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024c0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	69db      	ldr	r3, [r3, #28]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	f000 8087 	beq.w	80025da <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024cc:	4b36      	ldr	r3, [pc, #216]	; (80025a8 <HAL_RCC_OscConfig+0x4c4>)
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f003 030c 	and.w	r3, r3, #12
 80024d4:	2b08      	cmp	r3, #8
 80024d6:	d061      	beq.n	800259c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	69db      	ldr	r3, [r3, #28]
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d146      	bne.n	800256e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024e0:	4b33      	ldr	r3, [pc, #204]	; (80025b0 <HAL_RCC_OscConfig+0x4cc>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e6:	f7ff fadd 	bl	8001aa4 <HAL_GetTick>
 80024ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024ec:	e008      	b.n	8002500 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024ee:	f7ff fad9 	bl	8001aa4 <HAL_GetTick>
 80024f2:	4602      	mov	r2, r0
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d901      	bls.n	8002500 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80024fc:	2303      	movs	r3, #3
 80024fe:	e06d      	b.n	80025dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002500:	4b29      	ldr	r3, [pc, #164]	; (80025a8 <HAL_RCC_OscConfig+0x4c4>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d1f0      	bne.n	80024ee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6a1b      	ldr	r3, [r3, #32]
 8002510:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002514:	d108      	bne.n	8002528 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002516:	4b24      	ldr	r3, [pc, #144]	; (80025a8 <HAL_RCC_OscConfig+0x4c4>)
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	4921      	ldr	r1, [pc, #132]	; (80025a8 <HAL_RCC_OscConfig+0x4c4>)
 8002524:	4313      	orrs	r3, r2
 8002526:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002528:	4b1f      	ldr	r3, [pc, #124]	; (80025a8 <HAL_RCC_OscConfig+0x4c4>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6a19      	ldr	r1, [r3, #32]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002538:	430b      	orrs	r3, r1
 800253a:	491b      	ldr	r1, [pc, #108]	; (80025a8 <HAL_RCC_OscConfig+0x4c4>)
 800253c:	4313      	orrs	r3, r2
 800253e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002540:	4b1b      	ldr	r3, [pc, #108]	; (80025b0 <HAL_RCC_OscConfig+0x4cc>)
 8002542:	2201      	movs	r2, #1
 8002544:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002546:	f7ff faad 	bl	8001aa4 <HAL_GetTick>
 800254a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800254c:	e008      	b.n	8002560 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800254e:	f7ff faa9 	bl	8001aa4 <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	2b02      	cmp	r3, #2
 800255a:	d901      	bls.n	8002560 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	e03d      	b.n	80025dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002560:	4b11      	ldr	r3, [pc, #68]	; (80025a8 <HAL_RCC_OscConfig+0x4c4>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d0f0      	beq.n	800254e <HAL_RCC_OscConfig+0x46a>
 800256c:	e035      	b.n	80025da <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800256e:	4b10      	ldr	r3, [pc, #64]	; (80025b0 <HAL_RCC_OscConfig+0x4cc>)
 8002570:	2200      	movs	r2, #0
 8002572:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002574:	f7ff fa96 	bl	8001aa4 <HAL_GetTick>
 8002578:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800257a:	e008      	b.n	800258e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800257c:	f7ff fa92 	bl	8001aa4 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b02      	cmp	r3, #2
 8002588:	d901      	bls.n	800258e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e026      	b.n	80025dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800258e:	4b06      	ldr	r3, [pc, #24]	; (80025a8 <HAL_RCC_OscConfig+0x4c4>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d1f0      	bne.n	800257c <HAL_RCC_OscConfig+0x498>
 800259a:	e01e      	b.n	80025da <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	69db      	ldr	r3, [r3, #28]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d107      	bne.n	80025b4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e019      	b.n	80025dc <HAL_RCC_OscConfig+0x4f8>
 80025a8:	40021000 	.word	0x40021000
 80025ac:	40007000 	.word	0x40007000
 80025b0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025b4:	4b0b      	ldr	r3, [pc, #44]	; (80025e4 <HAL_RCC_OscConfig+0x500>)
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6a1b      	ldr	r3, [r3, #32]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d106      	bne.n	80025d6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d001      	beq.n	80025da <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e000      	b.n	80025dc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80025da:	2300      	movs	r3, #0
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3718      	adds	r7, #24
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	40021000 	.word	0x40021000

080025e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d101      	bne.n	80025fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e0d0      	b.n	800279e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025fc:	4b6a      	ldr	r3, [pc, #424]	; (80027a8 <HAL_RCC_ClockConfig+0x1c0>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0307 	and.w	r3, r3, #7
 8002604:	683a      	ldr	r2, [r7, #0]
 8002606:	429a      	cmp	r2, r3
 8002608:	d910      	bls.n	800262c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800260a:	4b67      	ldr	r3, [pc, #412]	; (80027a8 <HAL_RCC_ClockConfig+0x1c0>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f023 0207 	bic.w	r2, r3, #7
 8002612:	4965      	ldr	r1, [pc, #404]	; (80027a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	4313      	orrs	r3, r2
 8002618:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800261a:	4b63      	ldr	r3, [pc, #396]	; (80027a8 <HAL_RCC_ClockConfig+0x1c0>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0307 	and.w	r3, r3, #7
 8002622:	683a      	ldr	r2, [r7, #0]
 8002624:	429a      	cmp	r2, r3
 8002626:	d001      	beq.n	800262c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e0b8      	b.n	800279e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0302 	and.w	r3, r3, #2
 8002634:	2b00      	cmp	r3, #0
 8002636:	d020      	beq.n	800267a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0304 	and.w	r3, r3, #4
 8002640:	2b00      	cmp	r3, #0
 8002642:	d005      	beq.n	8002650 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002644:	4b59      	ldr	r3, [pc, #356]	; (80027ac <HAL_RCC_ClockConfig+0x1c4>)
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	4a58      	ldr	r2, [pc, #352]	; (80027ac <HAL_RCC_ClockConfig+0x1c4>)
 800264a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800264e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0308 	and.w	r3, r3, #8
 8002658:	2b00      	cmp	r3, #0
 800265a:	d005      	beq.n	8002668 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800265c:	4b53      	ldr	r3, [pc, #332]	; (80027ac <HAL_RCC_ClockConfig+0x1c4>)
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	4a52      	ldr	r2, [pc, #328]	; (80027ac <HAL_RCC_ClockConfig+0x1c4>)
 8002662:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002666:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002668:	4b50      	ldr	r3, [pc, #320]	; (80027ac <HAL_RCC_ClockConfig+0x1c4>)
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	494d      	ldr	r1, [pc, #308]	; (80027ac <HAL_RCC_ClockConfig+0x1c4>)
 8002676:	4313      	orrs	r3, r2
 8002678:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	2b00      	cmp	r3, #0
 8002684:	d040      	beq.n	8002708 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	2b01      	cmp	r3, #1
 800268c:	d107      	bne.n	800269e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800268e:	4b47      	ldr	r3, [pc, #284]	; (80027ac <HAL_RCC_ClockConfig+0x1c4>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d115      	bne.n	80026c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e07f      	b.n	800279e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d107      	bne.n	80026b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026a6:	4b41      	ldr	r3, [pc, #260]	; (80027ac <HAL_RCC_ClockConfig+0x1c4>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d109      	bne.n	80026c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e073      	b.n	800279e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026b6:	4b3d      	ldr	r3, [pc, #244]	; (80027ac <HAL_RCC_ClockConfig+0x1c4>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0302 	and.w	r3, r3, #2
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d101      	bne.n	80026c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e06b      	b.n	800279e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026c6:	4b39      	ldr	r3, [pc, #228]	; (80027ac <HAL_RCC_ClockConfig+0x1c4>)
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f023 0203 	bic.w	r2, r3, #3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	4936      	ldr	r1, [pc, #216]	; (80027ac <HAL_RCC_ClockConfig+0x1c4>)
 80026d4:	4313      	orrs	r3, r2
 80026d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026d8:	f7ff f9e4 	bl	8001aa4 <HAL_GetTick>
 80026dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026de:	e00a      	b.n	80026f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026e0:	f7ff f9e0 	bl	8001aa4 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d901      	bls.n	80026f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e053      	b.n	800279e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026f6:	4b2d      	ldr	r3, [pc, #180]	; (80027ac <HAL_RCC_ClockConfig+0x1c4>)
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f003 020c 	and.w	r2, r3, #12
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	429a      	cmp	r2, r3
 8002706:	d1eb      	bne.n	80026e0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002708:	4b27      	ldr	r3, [pc, #156]	; (80027a8 <HAL_RCC_ClockConfig+0x1c0>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0307 	and.w	r3, r3, #7
 8002710:	683a      	ldr	r2, [r7, #0]
 8002712:	429a      	cmp	r2, r3
 8002714:	d210      	bcs.n	8002738 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002716:	4b24      	ldr	r3, [pc, #144]	; (80027a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f023 0207 	bic.w	r2, r3, #7
 800271e:	4922      	ldr	r1, [pc, #136]	; (80027a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	4313      	orrs	r3, r2
 8002724:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002726:	4b20      	ldr	r3, [pc, #128]	; (80027a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0307 	and.w	r3, r3, #7
 800272e:	683a      	ldr	r2, [r7, #0]
 8002730:	429a      	cmp	r2, r3
 8002732:	d001      	beq.n	8002738 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e032      	b.n	800279e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0304 	and.w	r3, r3, #4
 8002740:	2b00      	cmp	r3, #0
 8002742:	d008      	beq.n	8002756 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002744:	4b19      	ldr	r3, [pc, #100]	; (80027ac <HAL_RCC_ClockConfig+0x1c4>)
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	4916      	ldr	r1, [pc, #88]	; (80027ac <HAL_RCC_ClockConfig+0x1c4>)
 8002752:	4313      	orrs	r3, r2
 8002754:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0308 	and.w	r3, r3, #8
 800275e:	2b00      	cmp	r3, #0
 8002760:	d009      	beq.n	8002776 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002762:	4b12      	ldr	r3, [pc, #72]	; (80027ac <HAL_RCC_ClockConfig+0x1c4>)
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	00db      	lsls	r3, r3, #3
 8002770:	490e      	ldr	r1, [pc, #56]	; (80027ac <HAL_RCC_ClockConfig+0x1c4>)
 8002772:	4313      	orrs	r3, r2
 8002774:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002776:	f000 f821 	bl	80027bc <HAL_RCC_GetSysClockFreq>
 800277a:	4602      	mov	r2, r0
 800277c:	4b0b      	ldr	r3, [pc, #44]	; (80027ac <HAL_RCC_ClockConfig+0x1c4>)
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	091b      	lsrs	r3, r3, #4
 8002782:	f003 030f 	and.w	r3, r3, #15
 8002786:	490a      	ldr	r1, [pc, #40]	; (80027b0 <HAL_RCC_ClockConfig+0x1c8>)
 8002788:	5ccb      	ldrb	r3, [r1, r3]
 800278a:	fa22 f303 	lsr.w	r3, r2, r3
 800278e:	4a09      	ldr	r2, [pc, #36]	; (80027b4 <HAL_RCC_ClockConfig+0x1cc>)
 8002790:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002792:	4b09      	ldr	r3, [pc, #36]	; (80027b8 <HAL_RCC_ClockConfig+0x1d0>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4618      	mov	r0, r3
 8002798:	f7ff f942 	bl	8001a20 <HAL_InitTick>

  return HAL_OK;
 800279c:	2300      	movs	r3, #0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3710      	adds	r7, #16
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	40022000 	.word	0x40022000
 80027ac:	40021000 	.word	0x40021000
 80027b0:	08003730 	.word	0x08003730
 80027b4:	20000008 	.word	0x20000008
 80027b8:	2000000c 	.word	0x2000000c

080027bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	b087      	sub	sp, #28
 80027c0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027c2:	2300      	movs	r3, #0
 80027c4:	60fb      	str	r3, [r7, #12]
 80027c6:	2300      	movs	r3, #0
 80027c8:	60bb      	str	r3, [r7, #8]
 80027ca:	2300      	movs	r3, #0
 80027cc:	617b      	str	r3, [r7, #20]
 80027ce:	2300      	movs	r3, #0
 80027d0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80027d2:	2300      	movs	r3, #0
 80027d4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80027d6:	4b1e      	ldr	r3, [pc, #120]	; (8002850 <HAL_RCC_GetSysClockFreq+0x94>)
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f003 030c 	and.w	r3, r3, #12
 80027e2:	2b04      	cmp	r3, #4
 80027e4:	d002      	beq.n	80027ec <HAL_RCC_GetSysClockFreq+0x30>
 80027e6:	2b08      	cmp	r3, #8
 80027e8:	d003      	beq.n	80027f2 <HAL_RCC_GetSysClockFreq+0x36>
 80027ea:	e027      	b.n	800283c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027ec:	4b19      	ldr	r3, [pc, #100]	; (8002854 <HAL_RCC_GetSysClockFreq+0x98>)
 80027ee:	613b      	str	r3, [r7, #16]
      break;
 80027f0:	e027      	b.n	8002842 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	0c9b      	lsrs	r3, r3, #18
 80027f6:	f003 030f 	and.w	r3, r3, #15
 80027fa:	4a17      	ldr	r2, [pc, #92]	; (8002858 <HAL_RCC_GetSysClockFreq+0x9c>)
 80027fc:	5cd3      	ldrb	r3, [r2, r3]
 80027fe:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d010      	beq.n	800282c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800280a:	4b11      	ldr	r3, [pc, #68]	; (8002850 <HAL_RCC_GetSysClockFreq+0x94>)
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	0c5b      	lsrs	r3, r3, #17
 8002810:	f003 0301 	and.w	r3, r3, #1
 8002814:	4a11      	ldr	r2, [pc, #68]	; (800285c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002816:	5cd3      	ldrb	r3, [r2, r3]
 8002818:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a0d      	ldr	r2, [pc, #52]	; (8002854 <HAL_RCC_GetSysClockFreq+0x98>)
 800281e:	fb03 f202 	mul.w	r2, r3, r2
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	fbb2 f3f3 	udiv	r3, r2, r3
 8002828:	617b      	str	r3, [r7, #20]
 800282a:	e004      	b.n	8002836 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	4a0c      	ldr	r2, [pc, #48]	; (8002860 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002830:	fb02 f303 	mul.w	r3, r2, r3
 8002834:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	613b      	str	r3, [r7, #16]
      break;
 800283a:	e002      	b.n	8002842 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800283c:	4b05      	ldr	r3, [pc, #20]	; (8002854 <HAL_RCC_GetSysClockFreq+0x98>)
 800283e:	613b      	str	r3, [r7, #16]
      break;
 8002840:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002842:	693b      	ldr	r3, [r7, #16]
}
 8002844:	4618      	mov	r0, r3
 8002846:	371c      	adds	r7, #28
 8002848:	46bd      	mov	sp, r7
 800284a:	bc80      	pop	{r7}
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	40021000 	.word	0x40021000
 8002854:	007a1200 	.word	0x007a1200
 8002858:	08003740 	.word	0x08003740
 800285c:	08003750 	.word	0x08003750
 8002860:	003d0900 	.word	0x003d0900

08002864 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002864:	b480      	push	{r7}
 8002866:	b085      	sub	sp, #20
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800286c:	4b0a      	ldr	r3, [pc, #40]	; (8002898 <RCC_Delay+0x34>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a0a      	ldr	r2, [pc, #40]	; (800289c <RCC_Delay+0x38>)
 8002872:	fba2 2303 	umull	r2, r3, r2, r3
 8002876:	0a5b      	lsrs	r3, r3, #9
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	fb02 f303 	mul.w	r3, r2, r3
 800287e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002880:	bf00      	nop
  }
  while (Delay --);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	1e5a      	subs	r2, r3, #1
 8002886:	60fa      	str	r2, [r7, #12]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d1f9      	bne.n	8002880 <RCC_Delay+0x1c>
}
 800288c:	bf00      	nop
 800288e:	bf00      	nop
 8002890:	3714      	adds	r7, #20
 8002892:	46bd      	mov	sp, r7
 8002894:	bc80      	pop	{r7}
 8002896:	4770      	bx	lr
 8002898:	20000008 	.word	0x20000008
 800289c:	10624dd3 	.word	0x10624dd3

080028a0 <memset>:
 80028a0:	4603      	mov	r3, r0
 80028a2:	4402      	add	r2, r0
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d100      	bne.n	80028aa <memset+0xa>
 80028a8:	4770      	bx	lr
 80028aa:	f803 1b01 	strb.w	r1, [r3], #1
 80028ae:	e7f9      	b.n	80028a4 <memset+0x4>

080028b0 <__errno>:
 80028b0:	4b01      	ldr	r3, [pc, #4]	; (80028b8 <__errno+0x8>)
 80028b2:	6818      	ldr	r0, [r3, #0]
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	20000060 	.word	0x20000060

080028bc <__libc_init_array>:
 80028bc:	b570      	push	{r4, r5, r6, lr}
 80028be:	2600      	movs	r6, #0
 80028c0:	4d0c      	ldr	r5, [pc, #48]	; (80028f4 <__libc_init_array+0x38>)
 80028c2:	4c0d      	ldr	r4, [pc, #52]	; (80028f8 <__libc_init_array+0x3c>)
 80028c4:	1b64      	subs	r4, r4, r5
 80028c6:	10a4      	asrs	r4, r4, #2
 80028c8:	42a6      	cmp	r6, r4
 80028ca:	d109      	bne.n	80028e0 <__libc_init_array+0x24>
 80028cc:	f000 ff22 	bl	8003714 <_init>
 80028d0:	2600      	movs	r6, #0
 80028d2:	4d0a      	ldr	r5, [pc, #40]	; (80028fc <__libc_init_array+0x40>)
 80028d4:	4c0a      	ldr	r4, [pc, #40]	; (8002900 <__libc_init_array+0x44>)
 80028d6:	1b64      	subs	r4, r4, r5
 80028d8:	10a4      	asrs	r4, r4, #2
 80028da:	42a6      	cmp	r6, r4
 80028dc:	d105      	bne.n	80028ea <__libc_init_array+0x2e>
 80028de:	bd70      	pop	{r4, r5, r6, pc}
 80028e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80028e4:	4798      	blx	r3
 80028e6:	3601      	adds	r6, #1
 80028e8:	e7ee      	b.n	80028c8 <__libc_init_array+0xc>
 80028ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80028ee:	4798      	blx	r3
 80028f0:	3601      	adds	r6, #1
 80028f2:	e7f2      	b.n	80028da <__libc_init_array+0x1e>
 80028f4:	08003788 	.word	0x08003788
 80028f8:	08003788 	.word	0x08003788
 80028fc:	08003788 	.word	0x08003788
 8002900:	0800378c 	.word	0x0800378c

08002904 <pow>:
 8002904:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002908:	4614      	mov	r4, r2
 800290a:	461d      	mov	r5, r3
 800290c:	4680      	mov	r8, r0
 800290e:	4689      	mov	r9, r1
 8002910:	f000 f866 	bl	80029e0 <__ieee754_pow>
 8002914:	4622      	mov	r2, r4
 8002916:	4606      	mov	r6, r0
 8002918:	460f      	mov	r7, r1
 800291a:	462b      	mov	r3, r5
 800291c:	4620      	mov	r0, r4
 800291e:	4629      	mov	r1, r5
 8002920:	f7fe f86c 	bl	80009fc <__aeabi_dcmpun>
 8002924:	bbc8      	cbnz	r0, 800299a <pow+0x96>
 8002926:	2200      	movs	r2, #0
 8002928:	2300      	movs	r3, #0
 800292a:	4640      	mov	r0, r8
 800292c:	4649      	mov	r1, r9
 800292e:	f7fe f833 	bl	8000998 <__aeabi_dcmpeq>
 8002932:	b1b8      	cbz	r0, 8002964 <pow+0x60>
 8002934:	2200      	movs	r2, #0
 8002936:	2300      	movs	r3, #0
 8002938:	4620      	mov	r0, r4
 800293a:	4629      	mov	r1, r5
 800293c:	f7fe f82c 	bl	8000998 <__aeabi_dcmpeq>
 8002940:	2800      	cmp	r0, #0
 8002942:	d141      	bne.n	80029c8 <pow+0xc4>
 8002944:	4620      	mov	r0, r4
 8002946:	4629      	mov	r1, r5
 8002948:	f000 f844 	bl	80029d4 <finite>
 800294c:	b328      	cbz	r0, 800299a <pow+0x96>
 800294e:	2200      	movs	r2, #0
 8002950:	2300      	movs	r3, #0
 8002952:	4620      	mov	r0, r4
 8002954:	4629      	mov	r1, r5
 8002956:	f7fe f829 	bl	80009ac <__aeabi_dcmplt>
 800295a:	b1f0      	cbz	r0, 800299a <pow+0x96>
 800295c:	f7ff ffa8 	bl	80028b0 <__errno>
 8002960:	2322      	movs	r3, #34	; 0x22
 8002962:	e019      	b.n	8002998 <pow+0x94>
 8002964:	4630      	mov	r0, r6
 8002966:	4639      	mov	r1, r7
 8002968:	f000 f834 	bl	80029d4 <finite>
 800296c:	b9c8      	cbnz	r0, 80029a2 <pow+0x9e>
 800296e:	4640      	mov	r0, r8
 8002970:	4649      	mov	r1, r9
 8002972:	f000 f82f 	bl	80029d4 <finite>
 8002976:	b1a0      	cbz	r0, 80029a2 <pow+0x9e>
 8002978:	4620      	mov	r0, r4
 800297a:	4629      	mov	r1, r5
 800297c:	f000 f82a 	bl	80029d4 <finite>
 8002980:	b178      	cbz	r0, 80029a2 <pow+0x9e>
 8002982:	4632      	mov	r2, r6
 8002984:	463b      	mov	r3, r7
 8002986:	4630      	mov	r0, r6
 8002988:	4639      	mov	r1, r7
 800298a:	f7fe f837 	bl	80009fc <__aeabi_dcmpun>
 800298e:	2800      	cmp	r0, #0
 8002990:	d0e4      	beq.n	800295c <pow+0x58>
 8002992:	f7ff ff8d 	bl	80028b0 <__errno>
 8002996:	2321      	movs	r3, #33	; 0x21
 8002998:	6003      	str	r3, [r0, #0]
 800299a:	4630      	mov	r0, r6
 800299c:	4639      	mov	r1, r7
 800299e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80029a2:	2200      	movs	r2, #0
 80029a4:	2300      	movs	r3, #0
 80029a6:	4630      	mov	r0, r6
 80029a8:	4639      	mov	r1, r7
 80029aa:	f7fd fff5 	bl	8000998 <__aeabi_dcmpeq>
 80029ae:	2800      	cmp	r0, #0
 80029b0:	d0f3      	beq.n	800299a <pow+0x96>
 80029b2:	4640      	mov	r0, r8
 80029b4:	4649      	mov	r1, r9
 80029b6:	f000 f80d 	bl	80029d4 <finite>
 80029ba:	2800      	cmp	r0, #0
 80029bc:	d0ed      	beq.n	800299a <pow+0x96>
 80029be:	4620      	mov	r0, r4
 80029c0:	4629      	mov	r1, r5
 80029c2:	f000 f807 	bl	80029d4 <finite>
 80029c6:	e7c8      	b.n	800295a <pow+0x56>
 80029c8:	2600      	movs	r6, #0
 80029ca:	4f01      	ldr	r7, [pc, #4]	; (80029d0 <pow+0xcc>)
 80029cc:	e7e5      	b.n	800299a <pow+0x96>
 80029ce:	bf00      	nop
 80029d0:	3ff00000 	.word	0x3ff00000

080029d4 <finite>:
 80029d4:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 80029d8:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80029dc:	0fc0      	lsrs	r0, r0, #31
 80029de:	4770      	bx	lr

080029e0 <__ieee754_pow>:
 80029e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029e4:	b093      	sub	sp, #76	; 0x4c
 80029e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80029ea:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 80029ee:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 80029f2:	4689      	mov	r9, r1
 80029f4:	ea56 0102 	orrs.w	r1, r6, r2
 80029f8:	4680      	mov	r8, r0
 80029fa:	d111      	bne.n	8002a20 <__ieee754_pow+0x40>
 80029fc:	1803      	adds	r3, r0, r0
 80029fe:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 8002a02:	4152      	adcs	r2, r2
 8002a04:	4299      	cmp	r1, r3
 8002a06:	4b82      	ldr	r3, [pc, #520]	; (8002c10 <__ieee754_pow+0x230>)
 8002a08:	4193      	sbcs	r3, r2
 8002a0a:	f080 84ba 	bcs.w	8003382 <__ieee754_pow+0x9a2>
 8002a0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002a12:	4640      	mov	r0, r8
 8002a14:	4649      	mov	r1, r9
 8002a16:	f7fd fba1 	bl	800015c <__adddf3>
 8002a1a:	4683      	mov	fp, r0
 8002a1c:	468c      	mov	ip, r1
 8002a1e:	e06f      	b.n	8002b00 <__ieee754_pow+0x120>
 8002a20:	4b7c      	ldr	r3, [pc, #496]	; (8002c14 <__ieee754_pow+0x234>)
 8002a22:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 8002a26:	429c      	cmp	r4, r3
 8002a28:	464d      	mov	r5, r9
 8002a2a:	4682      	mov	sl, r0
 8002a2c:	dc06      	bgt.n	8002a3c <__ieee754_pow+0x5c>
 8002a2e:	d101      	bne.n	8002a34 <__ieee754_pow+0x54>
 8002a30:	2800      	cmp	r0, #0
 8002a32:	d1ec      	bne.n	8002a0e <__ieee754_pow+0x2e>
 8002a34:	429e      	cmp	r6, r3
 8002a36:	dc01      	bgt.n	8002a3c <__ieee754_pow+0x5c>
 8002a38:	d10f      	bne.n	8002a5a <__ieee754_pow+0x7a>
 8002a3a:	b172      	cbz	r2, 8002a5a <__ieee754_pow+0x7a>
 8002a3c:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8002a40:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8002a44:	ea55 050a 	orrs.w	r5, r5, sl
 8002a48:	d1e1      	bne.n	8002a0e <__ieee754_pow+0x2e>
 8002a4a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8002a4e:	18db      	adds	r3, r3, r3
 8002a50:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8002a54:	4152      	adcs	r2, r2
 8002a56:	429d      	cmp	r5, r3
 8002a58:	e7d5      	b.n	8002a06 <__ieee754_pow+0x26>
 8002a5a:	2d00      	cmp	r5, #0
 8002a5c:	da39      	bge.n	8002ad2 <__ieee754_pow+0xf2>
 8002a5e:	4b6e      	ldr	r3, [pc, #440]	; (8002c18 <__ieee754_pow+0x238>)
 8002a60:	429e      	cmp	r6, r3
 8002a62:	dc52      	bgt.n	8002b0a <__ieee754_pow+0x12a>
 8002a64:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8002a68:	429e      	cmp	r6, r3
 8002a6a:	f340 849d 	ble.w	80033a8 <__ieee754_pow+0x9c8>
 8002a6e:	1533      	asrs	r3, r6, #20
 8002a70:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8002a74:	2b14      	cmp	r3, #20
 8002a76:	dd0f      	ble.n	8002a98 <__ieee754_pow+0xb8>
 8002a78:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8002a7c:	fa22 f103 	lsr.w	r1, r2, r3
 8002a80:	fa01 f303 	lsl.w	r3, r1, r3
 8002a84:	4293      	cmp	r3, r2
 8002a86:	f040 848f 	bne.w	80033a8 <__ieee754_pow+0x9c8>
 8002a8a:	f001 0101 	and.w	r1, r1, #1
 8002a8e:	f1c1 0302 	rsb	r3, r1, #2
 8002a92:	9300      	str	r3, [sp, #0]
 8002a94:	b182      	cbz	r2, 8002ab8 <__ieee754_pow+0xd8>
 8002a96:	e05d      	b.n	8002b54 <__ieee754_pow+0x174>
 8002a98:	2a00      	cmp	r2, #0
 8002a9a:	d159      	bne.n	8002b50 <__ieee754_pow+0x170>
 8002a9c:	f1c3 0314 	rsb	r3, r3, #20
 8002aa0:	fa46 f103 	asr.w	r1, r6, r3
 8002aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8002aa8:	42b3      	cmp	r3, r6
 8002aaa:	f040 847a 	bne.w	80033a2 <__ieee754_pow+0x9c2>
 8002aae:	f001 0101 	and.w	r1, r1, #1
 8002ab2:	f1c1 0302 	rsb	r3, r1, #2
 8002ab6:	9300      	str	r3, [sp, #0]
 8002ab8:	4b58      	ldr	r3, [pc, #352]	; (8002c1c <__ieee754_pow+0x23c>)
 8002aba:	429e      	cmp	r6, r3
 8002abc:	d132      	bne.n	8002b24 <__ieee754_pow+0x144>
 8002abe:	2f00      	cmp	r7, #0
 8002ac0:	f280 846b 	bge.w	800339a <__ieee754_pow+0x9ba>
 8002ac4:	4642      	mov	r2, r8
 8002ac6:	464b      	mov	r3, r9
 8002ac8:	2000      	movs	r0, #0
 8002aca:	4954      	ldr	r1, [pc, #336]	; (8002c1c <__ieee754_pow+0x23c>)
 8002acc:	f7fd fe26 	bl	800071c <__aeabi_ddiv>
 8002ad0:	e7a3      	b.n	8002a1a <__ieee754_pow+0x3a>
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	9300      	str	r3, [sp, #0]
 8002ad6:	2a00      	cmp	r2, #0
 8002ad8:	d13c      	bne.n	8002b54 <__ieee754_pow+0x174>
 8002ada:	4b4e      	ldr	r3, [pc, #312]	; (8002c14 <__ieee754_pow+0x234>)
 8002adc:	429e      	cmp	r6, r3
 8002ade:	d1eb      	bne.n	8002ab8 <__ieee754_pow+0xd8>
 8002ae0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8002ae4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8002ae8:	ea53 030a 	orrs.w	r3, r3, sl
 8002aec:	f000 8449 	beq.w	8003382 <__ieee754_pow+0x9a2>
 8002af0:	4b4b      	ldr	r3, [pc, #300]	; (8002c20 <__ieee754_pow+0x240>)
 8002af2:	429c      	cmp	r4, r3
 8002af4:	dd0b      	ble.n	8002b0e <__ieee754_pow+0x12e>
 8002af6:	2f00      	cmp	r7, #0
 8002af8:	f2c0 8449 	blt.w	800338e <__ieee754_pow+0x9ae>
 8002afc:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8002b00:	4658      	mov	r0, fp
 8002b02:	4661      	mov	r1, ip
 8002b04:	b013      	add	sp, #76	; 0x4c
 8002b06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b0a:	2302      	movs	r3, #2
 8002b0c:	e7e2      	b.n	8002ad4 <__ieee754_pow+0xf4>
 8002b0e:	2f00      	cmp	r7, #0
 8002b10:	f04f 0b00 	mov.w	fp, #0
 8002b14:	f04f 0c00 	mov.w	ip, #0
 8002b18:	daf2      	bge.n	8002b00 <__ieee754_pow+0x120>
 8002b1a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8002b1e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8002b22:	e7ed      	b.n	8002b00 <__ieee754_pow+0x120>
 8002b24:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8002b28:	d106      	bne.n	8002b38 <__ieee754_pow+0x158>
 8002b2a:	4642      	mov	r2, r8
 8002b2c:	464b      	mov	r3, r9
 8002b2e:	4640      	mov	r0, r8
 8002b30:	4649      	mov	r1, r9
 8002b32:	f7fd fcc9 	bl	80004c8 <__aeabi_dmul>
 8002b36:	e770      	b.n	8002a1a <__ieee754_pow+0x3a>
 8002b38:	4b3a      	ldr	r3, [pc, #232]	; (8002c24 <__ieee754_pow+0x244>)
 8002b3a:	429f      	cmp	r7, r3
 8002b3c:	d10a      	bne.n	8002b54 <__ieee754_pow+0x174>
 8002b3e:	2d00      	cmp	r5, #0
 8002b40:	db08      	blt.n	8002b54 <__ieee754_pow+0x174>
 8002b42:	4640      	mov	r0, r8
 8002b44:	4649      	mov	r1, r9
 8002b46:	b013      	add	sp, #76	; 0x4c
 8002b48:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b4c:	f000 bd0a 	b.w	8003564 <__ieee754_sqrt>
 8002b50:	2300      	movs	r3, #0
 8002b52:	9300      	str	r3, [sp, #0]
 8002b54:	4640      	mov	r0, r8
 8002b56:	4649      	mov	r1, r9
 8002b58:	f000 fc58 	bl	800340c <fabs>
 8002b5c:	4683      	mov	fp, r0
 8002b5e:	468c      	mov	ip, r1
 8002b60:	f1ba 0f00 	cmp.w	sl, #0
 8002b64:	d128      	bne.n	8002bb8 <__ieee754_pow+0x1d8>
 8002b66:	b124      	cbz	r4, 8002b72 <__ieee754_pow+0x192>
 8002b68:	4b2c      	ldr	r3, [pc, #176]	; (8002c1c <__ieee754_pow+0x23c>)
 8002b6a:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d122      	bne.n	8002bb8 <__ieee754_pow+0x1d8>
 8002b72:	2f00      	cmp	r7, #0
 8002b74:	da07      	bge.n	8002b86 <__ieee754_pow+0x1a6>
 8002b76:	465a      	mov	r2, fp
 8002b78:	4663      	mov	r3, ip
 8002b7a:	2000      	movs	r0, #0
 8002b7c:	4927      	ldr	r1, [pc, #156]	; (8002c1c <__ieee754_pow+0x23c>)
 8002b7e:	f7fd fdcd 	bl	800071c <__aeabi_ddiv>
 8002b82:	4683      	mov	fp, r0
 8002b84:	468c      	mov	ip, r1
 8002b86:	2d00      	cmp	r5, #0
 8002b88:	daba      	bge.n	8002b00 <__ieee754_pow+0x120>
 8002b8a:	9b00      	ldr	r3, [sp, #0]
 8002b8c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8002b90:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8002b94:	431c      	orrs	r4, r3
 8002b96:	d108      	bne.n	8002baa <__ieee754_pow+0x1ca>
 8002b98:	465a      	mov	r2, fp
 8002b9a:	4663      	mov	r3, ip
 8002b9c:	4658      	mov	r0, fp
 8002b9e:	4661      	mov	r1, ip
 8002ba0:	f7fd fada 	bl	8000158 <__aeabi_dsub>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	460b      	mov	r3, r1
 8002ba8:	e790      	b.n	8002acc <__ieee754_pow+0xec>
 8002baa:	9b00      	ldr	r3, [sp, #0]
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d1a7      	bne.n	8002b00 <__ieee754_pow+0x120>
 8002bb0:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8002bb4:	469c      	mov	ip, r3
 8002bb6:	e7a3      	b.n	8002b00 <__ieee754_pow+0x120>
 8002bb8:	0feb      	lsrs	r3, r5, #31
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	930c      	str	r3, [sp, #48]	; 0x30
 8002bbe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002bc0:	9b00      	ldr	r3, [sp, #0]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	d104      	bne.n	8002bd0 <__ieee754_pow+0x1f0>
 8002bc6:	4642      	mov	r2, r8
 8002bc8:	464b      	mov	r3, r9
 8002bca:	4640      	mov	r0, r8
 8002bcc:	4649      	mov	r1, r9
 8002bce:	e7e7      	b.n	8002ba0 <__ieee754_pow+0x1c0>
 8002bd0:	4b15      	ldr	r3, [pc, #84]	; (8002c28 <__ieee754_pow+0x248>)
 8002bd2:	429e      	cmp	r6, r3
 8002bd4:	f340 80f6 	ble.w	8002dc4 <__ieee754_pow+0x3e4>
 8002bd8:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8002bdc:	429e      	cmp	r6, r3
 8002bde:	4b10      	ldr	r3, [pc, #64]	; (8002c20 <__ieee754_pow+0x240>)
 8002be0:	dd09      	ble.n	8002bf6 <__ieee754_pow+0x216>
 8002be2:	429c      	cmp	r4, r3
 8002be4:	dc0c      	bgt.n	8002c00 <__ieee754_pow+0x220>
 8002be6:	2f00      	cmp	r7, #0
 8002be8:	da0c      	bge.n	8002c04 <__ieee754_pow+0x224>
 8002bea:	2000      	movs	r0, #0
 8002bec:	b013      	add	sp, #76	; 0x4c
 8002bee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bf2:	f000 bcb2 	b.w	800355a <__math_oflow>
 8002bf6:	429c      	cmp	r4, r3
 8002bf8:	dbf5      	blt.n	8002be6 <__ieee754_pow+0x206>
 8002bfa:	4b08      	ldr	r3, [pc, #32]	; (8002c1c <__ieee754_pow+0x23c>)
 8002bfc:	429c      	cmp	r4, r3
 8002bfe:	dd15      	ble.n	8002c2c <__ieee754_pow+0x24c>
 8002c00:	2f00      	cmp	r7, #0
 8002c02:	dcf2      	bgt.n	8002bea <__ieee754_pow+0x20a>
 8002c04:	2000      	movs	r0, #0
 8002c06:	b013      	add	sp, #76	; 0x4c
 8002c08:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c0c:	f000 bca0 	b.w	8003550 <__math_uflow>
 8002c10:	fff00000 	.word	0xfff00000
 8002c14:	7ff00000 	.word	0x7ff00000
 8002c18:	433fffff 	.word	0x433fffff
 8002c1c:	3ff00000 	.word	0x3ff00000
 8002c20:	3fefffff 	.word	0x3fefffff
 8002c24:	3fe00000 	.word	0x3fe00000
 8002c28:	41e00000 	.word	0x41e00000
 8002c2c:	4661      	mov	r1, ip
 8002c2e:	2200      	movs	r2, #0
 8002c30:	4658      	mov	r0, fp
 8002c32:	4b5f      	ldr	r3, [pc, #380]	; (8002db0 <__ieee754_pow+0x3d0>)
 8002c34:	f7fd fa90 	bl	8000158 <__aeabi_dsub>
 8002c38:	a355      	add	r3, pc, #340	; (adr r3, 8002d90 <__ieee754_pow+0x3b0>)
 8002c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c3e:	4604      	mov	r4, r0
 8002c40:	460d      	mov	r5, r1
 8002c42:	f7fd fc41 	bl	80004c8 <__aeabi_dmul>
 8002c46:	a354      	add	r3, pc, #336	; (adr r3, 8002d98 <__ieee754_pow+0x3b8>)
 8002c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c4c:	4606      	mov	r6, r0
 8002c4e:	460f      	mov	r7, r1
 8002c50:	4620      	mov	r0, r4
 8002c52:	4629      	mov	r1, r5
 8002c54:	f7fd fc38 	bl	80004c8 <__aeabi_dmul>
 8002c58:	2200      	movs	r2, #0
 8002c5a:	4682      	mov	sl, r0
 8002c5c:	468b      	mov	fp, r1
 8002c5e:	4620      	mov	r0, r4
 8002c60:	4629      	mov	r1, r5
 8002c62:	4b54      	ldr	r3, [pc, #336]	; (8002db4 <__ieee754_pow+0x3d4>)
 8002c64:	f7fd fc30 	bl	80004c8 <__aeabi_dmul>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	460b      	mov	r3, r1
 8002c6c:	a14c      	add	r1, pc, #304	; (adr r1, 8002da0 <__ieee754_pow+0x3c0>)
 8002c6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002c72:	f7fd fa71 	bl	8000158 <__aeabi_dsub>
 8002c76:	4622      	mov	r2, r4
 8002c78:	462b      	mov	r3, r5
 8002c7a:	f7fd fc25 	bl	80004c8 <__aeabi_dmul>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	460b      	mov	r3, r1
 8002c82:	2000      	movs	r0, #0
 8002c84:	494c      	ldr	r1, [pc, #304]	; (8002db8 <__ieee754_pow+0x3d8>)
 8002c86:	f7fd fa67 	bl	8000158 <__aeabi_dsub>
 8002c8a:	4622      	mov	r2, r4
 8002c8c:	462b      	mov	r3, r5
 8002c8e:	4680      	mov	r8, r0
 8002c90:	4689      	mov	r9, r1
 8002c92:	4620      	mov	r0, r4
 8002c94:	4629      	mov	r1, r5
 8002c96:	f7fd fc17 	bl	80004c8 <__aeabi_dmul>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	4640      	mov	r0, r8
 8002ca0:	4649      	mov	r1, r9
 8002ca2:	f7fd fc11 	bl	80004c8 <__aeabi_dmul>
 8002ca6:	a340      	add	r3, pc, #256	; (adr r3, 8002da8 <__ieee754_pow+0x3c8>)
 8002ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cac:	f7fd fc0c 	bl	80004c8 <__aeabi_dmul>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	460b      	mov	r3, r1
 8002cb4:	4650      	mov	r0, sl
 8002cb6:	4659      	mov	r1, fp
 8002cb8:	f7fd fa4e 	bl	8000158 <__aeabi_dsub>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	460b      	mov	r3, r1
 8002cc0:	4604      	mov	r4, r0
 8002cc2:	460d      	mov	r5, r1
 8002cc4:	4630      	mov	r0, r6
 8002cc6:	4639      	mov	r1, r7
 8002cc8:	f7fd fa48 	bl	800015c <__adddf3>
 8002ccc:	2000      	movs	r0, #0
 8002cce:	4632      	mov	r2, r6
 8002cd0:	463b      	mov	r3, r7
 8002cd2:	4682      	mov	sl, r0
 8002cd4:	468b      	mov	fp, r1
 8002cd6:	f7fd fa3f 	bl	8000158 <__aeabi_dsub>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	460b      	mov	r3, r1
 8002cde:	4620      	mov	r0, r4
 8002ce0:	4629      	mov	r1, r5
 8002ce2:	f7fd fa39 	bl	8000158 <__aeabi_dsub>
 8002ce6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8002cea:	9b00      	ldr	r3, [sp, #0]
 8002cec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	f04f 0600 	mov.w	r6, #0
 8002cf6:	f04f 0200 	mov.w	r2, #0
 8002cfa:	bf0c      	ite	eq
 8002cfc:	4b2f      	ldreq	r3, [pc, #188]	; (8002dbc <__ieee754_pow+0x3dc>)
 8002cfe:	4b2c      	ldrne	r3, [pc, #176]	; (8002db0 <__ieee754_pow+0x3d0>)
 8002d00:	4604      	mov	r4, r0
 8002d02:	460d      	mov	r5, r1
 8002d04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002d08:	e9cd 2300 	strd	r2, r3, [sp]
 8002d0c:	4632      	mov	r2, r6
 8002d0e:	463b      	mov	r3, r7
 8002d10:	f7fd fa22 	bl	8000158 <__aeabi_dsub>
 8002d14:	4652      	mov	r2, sl
 8002d16:	465b      	mov	r3, fp
 8002d18:	f7fd fbd6 	bl	80004c8 <__aeabi_dmul>
 8002d1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002d20:	4680      	mov	r8, r0
 8002d22:	4689      	mov	r9, r1
 8002d24:	4620      	mov	r0, r4
 8002d26:	4629      	mov	r1, r5
 8002d28:	f7fd fbce 	bl	80004c8 <__aeabi_dmul>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	460b      	mov	r3, r1
 8002d30:	4640      	mov	r0, r8
 8002d32:	4649      	mov	r1, r9
 8002d34:	f7fd fa12 	bl	800015c <__adddf3>
 8002d38:	4632      	mov	r2, r6
 8002d3a:	463b      	mov	r3, r7
 8002d3c:	4680      	mov	r8, r0
 8002d3e:	4689      	mov	r9, r1
 8002d40:	4650      	mov	r0, sl
 8002d42:	4659      	mov	r1, fp
 8002d44:	f7fd fbc0 	bl	80004c8 <__aeabi_dmul>
 8002d48:	4604      	mov	r4, r0
 8002d4a:	460d      	mov	r5, r1
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	4602      	mov	r2, r0
 8002d50:	4649      	mov	r1, r9
 8002d52:	4640      	mov	r0, r8
 8002d54:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8002d58:	f7fd fa00 	bl	800015c <__adddf3>
 8002d5c:	4b18      	ldr	r3, [pc, #96]	; (8002dc0 <__ieee754_pow+0x3e0>)
 8002d5e:	4682      	mov	sl, r0
 8002d60:	4299      	cmp	r1, r3
 8002d62:	460f      	mov	r7, r1
 8002d64:	460e      	mov	r6, r1
 8002d66:	f340 82e7 	ble.w	8003338 <__ieee754_pow+0x958>
 8002d6a:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8002d6e:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8002d72:	4303      	orrs	r3, r0
 8002d74:	f000 81e2 	beq.w	800313c <__ieee754_pow+0x75c>
 8002d78:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	2300      	movs	r3, #0
 8002d80:	f7fd fe14 	bl	80009ac <__aeabi_dcmplt>
 8002d84:	3800      	subs	r0, #0
 8002d86:	bf18      	it	ne
 8002d88:	2001      	movne	r0, #1
 8002d8a:	e72f      	b.n	8002bec <__ieee754_pow+0x20c>
 8002d8c:	f3af 8000 	nop.w
 8002d90:	60000000 	.word	0x60000000
 8002d94:	3ff71547 	.word	0x3ff71547
 8002d98:	f85ddf44 	.word	0xf85ddf44
 8002d9c:	3e54ae0b 	.word	0x3e54ae0b
 8002da0:	55555555 	.word	0x55555555
 8002da4:	3fd55555 	.word	0x3fd55555
 8002da8:	652b82fe 	.word	0x652b82fe
 8002dac:	3ff71547 	.word	0x3ff71547
 8002db0:	3ff00000 	.word	0x3ff00000
 8002db4:	3fd00000 	.word	0x3fd00000
 8002db8:	3fe00000 	.word	0x3fe00000
 8002dbc:	bff00000 	.word	0xbff00000
 8002dc0:	408fffff 	.word	0x408fffff
 8002dc4:	4bd4      	ldr	r3, [pc, #848]	; (8003118 <__ieee754_pow+0x738>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	402b      	ands	r3, r5
 8002dca:	b943      	cbnz	r3, 8002dde <__ieee754_pow+0x3fe>
 8002dcc:	4658      	mov	r0, fp
 8002dce:	4661      	mov	r1, ip
 8002dd0:	4bd2      	ldr	r3, [pc, #840]	; (800311c <__ieee754_pow+0x73c>)
 8002dd2:	f7fd fb79 	bl	80004c8 <__aeabi_dmul>
 8002dd6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8002dda:	4683      	mov	fp, r0
 8002ddc:	460c      	mov	r4, r1
 8002dde:	1523      	asrs	r3, r4, #20
 8002de0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8002de4:	4413      	add	r3, r2
 8002de6:	930b      	str	r3, [sp, #44]	; 0x2c
 8002de8:	4bcd      	ldr	r3, [pc, #820]	; (8003120 <__ieee754_pow+0x740>)
 8002dea:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8002dee:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8002df2:	429c      	cmp	r4, r3
 8002df4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8002df8:	dd08      	ble.n	8002e0c <__ieee754_pow+0x42c>
 8002dfa:	4bca      	ldr	r3, [pc, #808]	; (8003124 <__ieee754_pow+0x744>)
 8002dfc:	429c      	cmp	r4, r3
 8002dfe:	f340 8164 	ble.w	80030ca <__ieee754_pow+0x6ea>
 8002e02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002e04:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8002e08:	3301      	adds	r3, #1
 8002e0a:	930b      	str	r3, [sp, #44]	; 0x2c
 8002e0c:	2600      	movs	r6, #0
 8002e0e:	00f3      	lsls	r3, r6, #3
 8002e10:	930d      	str	r3, [sp, #52]	; 0x34
 8002e12:	4bc5      	ldr	r3, [pc, #788]	; (8003128 <__ieee754_pow+0x748>)
 8002e14:	4658      	mov	r0, fp
 8002e16:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8002e1a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002e1e:	4629      	mov	r1, r5
 8002e20:	461a      	mov	r2, r3
 8002e22:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8002e26:	4623      	mov	r3, r4
 8002e28:	f7fd f996 	bl	8000158 <__aeabi_dsub>
 8002e2c:	46da      	mov	sl, fp
 8002e2e:	462b      	mov	r3, r5
 8002e30:	4652      	mov	r2, sl
 8002e32:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8002e36:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8002e3a:	f7fd f98f 	bl	800015c <__adddf3>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	460b      	mov	r3, r1
 8002e42:	2000      	movs	r0, #0
 8002e44:	49b9      	ldr	r1, [pc, #740]	; (800312c <__ieee754_pow+0x74c>)
 8002e46:	f7fd fc69 	bl	800071c <__aeabi_ddiv>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8002e52:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8002e56:	f7fd fb37 	bl	80004c8 <__aeabi_dmul>
 8002e5a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8002e5e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8002e62:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8002e66:	2300      	movs	r3, #0
 8002e68:	2200      	movs	r2, #0
 8002e6a:	46ab      	mov	fp, r5
 8002e6c:	106d      	asrs	r5, r5, #1
 8002e6e:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8002e72:	9304      	str	r3, [sp, #16]
 8002e74:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8002e78:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8002e7c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8002e80:	4640      	mov	r0, r8
 8002e82:	4649      	mov	r1, r9
 8002e84:	4614      	mov	r4, r2
 8002e86:	461d      	mov	r5, r3
 8002e88:	f7fd fb1e 	bl	80004c8 <__aeabi_dmul>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	460b      	mov	r3, r1
 8002e90:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8002e94:	f7fd f960 	bl	8000158 <__aeabi_dsub>
 8002e98:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8002e9c:	4606      	mov	r6, r0
 8002e9e:	460f      	mov	r7, r1
 8002ea0:	4620      	mov	r0, r4
 8002ea2:	4629      	mov	r1, r5
 8002ea4:	f7fd f958 	bl	8000158 <__aeabi_dsub>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	460b      	mov	r3, r1
 8002eac:	4650      	mov	r0, sl
 8002eae:	4659      	mov	r1, fp
 8002eb0:	f7fd f952 	bl	8000158 <__aeabi_dsub>
 8002eb4:	4642      	mov	r2, r8
 8002eb6:	464b      	mov	r3, r9
 8002eb8:	f7fd fb06 	bl	80004c8 <__aeabi_dmul>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	460b      	mov	r3, r1
 8002ec0:	4630      	mov	r0, r6
 8002ec2:	4639      	mov	r1, r7
 8002ec4:	f7fd f948 	bl	8000158 <__aeabi_dsub>
 8002ec8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8002ecc:	f7fd fafc 	bl	80004c8 <__aeabi_dmul>
 8002ed0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8002ed4:	4682      	mov	sl, r0
 8002ed6:	468b      	mov	fp, r1
 8002ed8:	4610      	mov	r0, r2
 8002eda:	4619      	mov	r1, r3
 8002edc:	f7fd faf4 	bl	80004c8 <__aeabi_dmul>
 8002ee0:	a37b      	add	r3, pc, #492	; (adr r3, 80030d0 <__ieee754_pow+0x6f0>)
 8002ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ee6:	4604      	mov	r4, r0
 8002ee8:	460d      	mov	r5, r1
 8002eea:	f7fd faed 	bl	80004c8 <__aeabi_dmul>
 8002eee:	a37a      	add	r3, pc, #488	; (adr r3, 80030d8 <__ieee754_pow+0x6f8>)
 8002ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ef4:	f7fd f932 	bl	800015c <__adddf3>
 8002ef8:	4622      	mov	r2, r4
 8002efa:	462b      	mov	r3, r5
 8002efc:	f7fd fae4 	bl	80004c8 <__aeabi_dmul>
 8002f00:	a377      	add	r3, pc, #476	; (adr r3, 80030e0 <__ieee754_pow+0x700>)
 8002f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f06:	f7fd f929 	bl	800015c <__adddf3>
 8002f0a:	4622      	mov	r2, r4
 8002f0c:	462b      	mov	r3, r5
 8002f0e:	f7fd fadb 	bl	80004c8 <__aeabi_dmul>
 8002f12:	a375      	add	r3, pc, #468	; (adr r3, 80030e8 <__ieee754_pow+0x708>)
 8002f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f18:	f7fd f920 	bl	800015c <__adddf3>
 8002f1c:	4622      	mov	r2, r4
 8002f1e:	462b      	mov	r3, r5
 8002f20:	f7fd fad2 	bl	80004c8 <__aeabi_dmul>
 8002f24:	a372      	add	r3, pc, #456	; (adr r3, 80030f0 <__ieee754_pow+0x710>)
 8002f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f2a:	f7fd f917 	bl	800015c <__adddf3>
 8002f2e:	4622      	mov	r2, r4
 8002f30:	462b      	mov	r3, r5
 8002f32:	f7fd fac9 	bl	80004c8 <__aeabi_dmul>
 8002f36:	a370      	add	r3, pc, #448	; (adr r3, 80030f8 <__ieee754_pow+0x718>)
 8002f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f3c:	f7fd f90e 	bl	800015c <__adddf3>
 8002f40:	4622      	mov	r2, r4
 8002f42:	4606      	mov	r6, r0
 8002f44:	460f      	mov	r7, r1
 8002f46:	462b      	mov	r3, r5
 8002f48:	4620      	mov	r0, r4
 8002f4a:	4629      	mov	r1, r5
 8002f4c:	f7fd fabc 	bl	80004c8 <__aeabi_dmul>
 8002f50:	4602      	mov	r2, r0
 8002f52:	460b      	mov	r3, r1
 8002f54:	4630      	mov	r0, r6
 8002f56:	4639      	mov	r1, r7
 8002f58:	f7fd fab6 	bl	80004c8 <__aeabi_dmul>
 8002f5c:	4604      	mov	r4, r0
 8002f5e:	460d      	mov	r5, r1
 8002f60:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002f64:	4642      	mov	r2, r8
 8002f66:	464b      	mov	r3, r9
 8002f68:	f7fd f8f8 	bl	800015c <__adddf3>
 8002f6c:	4652      	mov	r2, sl
 8002f6e:	465b      	mov	r3, fp
 8002f70:	f7fd faaa 	bl	80004c8 <__aeabi_dmul>
 8002f74:	4622      	mov	r2, r4
 8002f76:	462b      	mov	r3, r5
 8002f78:	f7fd f8f0 	bl	800015c <__adddf3>
 8002f7c:	4642      	mov	r2, r8
 8002f7e:	4606      	mov	r6, r0
 8002f80:	460f      	mov	r7, r1
 8002f82:	464b      	mov	r3, r9
 8002f84:	4640      	mov	r0, r8
 8002f86:	4649      	mov	r1, r9
 8002f88:	f7fd fa9e 	bl	80004c8 <__aeabi_dmul>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	460b      	mov	r3, r1
 8002f90:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8002f94:	2200      	movs	r2, #0
 8002f96:	4b66      	ldr	r3, [pc, #408]	; (8003130 <__ieee754_pow+0x750>)
 8002f98:	f7fd f8e0 	bl	800015c <__adddf3>
 8002f9c:	4632      	mov	r2, r6
 8002f9e:	463b      	mov	r3, r7
 8002fa0:	f7fd f8dc 	bl	800015c <__adddf3>
 8002fa4:	2400      	movs	r4, #0
 8002fa6:	460d      	mov	r5, r1
 8002fa8:	4622      	mov	r2, r4
 8002faa:	460b      	mov	r3, r1
 8002fac:	4640      	mov	r0, r8
 8002fae:	4649      	mov	r1, r9
 8002fb0:	f7fd fa8a 	bl	80004c8 <__aeabi_dmul>
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	4680      	mov	r8, r0
 8002fb8:	4689      	mov	r9, r1
 8002fba:	4620      	mov	r0, r4
 8002fbc:	4629      	mov	r1, r5
 8002fbe:	4b5c      	ldr	r3, [pc, #368]	; (8003130 <__ieee754_pow+0x750>)
 8002fc0:	f7fd f8ca 	bl	8000158 <__aeabi_dsub>
 8002fc4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8002fc8:	f7fd f8c6 	bl	8000158 <__aeabi_dsub>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	460b      	mov	r3, r1
 8002fd0:	4630      	mov	r0, r6
 8002fd2:	4639      	mov	r1, r7
 8002fd4:	f7fd f8c0 	bl	8000158 <__aeabi_dsub>
 8002fd8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8002fdc:	f7fd fa74 	bl	80004c8 <__aeabi_dmul>
 8002fe0:	4622      	mov	r2, r4
 8002fe2:	4606      	mov	r6, r0
 8002fe4:	460f      	mov	r7, r1
 8002fe6:	462b      	mov	r3, r5
 8002fe8:	4650      	mov	r0, sl
 8002fea:	4659      	mov	r1, fp
 8002fec:	f7fd fa6c 	bl	80004c8 <__aeabi_dmul>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	460b      	mov	r3, r1
 8002ff4:	4630      	mov	r0, r6
 8002ff6:	4639      	mov	r1, r7
 8002ff8:	f7fd f8b0 	bl	800015c <__adddf3>
 8002ffc:	2400      	movs	r4, #0
 8002ffe:	4606      	mov	r6, r0
 8003000:	460f      	mov	r7, r1
 8003002:	4602      	mov	r2, r0
 8003004:	460b      	mov	r3, r1
 8003006:	4640      	mov	r0, r8
 8003008:	4649      	mov	r1, r9
 800300a:	f7fd f8a7 	bl	800015c <__adddf3>
 800300e:	a33c      	add	r3, pc, #240	; (adr r3, 8003100 <__ieee754_pow+0x720>)
 8003010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003014:	4620      	mov	r0, r4
 8003016:	460d      	mov	r5, r1
 8003018:	f7fd fa56 	bl	80004c8 <__aeabi_dmul>
 800301c:	4642      	mov	r2, r8
 800301e:	464b      	mov	r3, r9
 8003020:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003024:	4620      	mov	r0, r4
 8003026:	4629      	mov	r1, r5
 8003028:	f7fd f896 	bl	8000158 <__aeabi_dsub>
 800302c:	4602      	mov	r2, r0
 800302e:	460b      	mov	r3, r1
 8003030:	4630      	mov	r0, r6
 8003032:	4639      	mov	r1, r7
 8003034:	f7fd f890 	bl	8000158 <__aeabi_dsub>
 8003038:	a333      	add	r3, pc, #204	; (adr r3, 8003108 <__ieee754_pow+0x728>)
 800303a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800303e:	f7fd fa43 	bl	80004c8 <__aeabi_dmul>
 8003042:	a333      	add	r3, pc, #204	; (adr r3, 8003110 <__ieee754_pow+0x730>)
 8003044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003048:	4606      	mov	r6, r0
 800304a:	460f      	mov	r7, r1
 800304c:	4620      	mov	r0, r4
 800304e:	4629      	mov	r1, r5
 8003050:	f7fd fa3a 	bl	80004c8 <__aeabi_dmul>
 8003054:	4602      	mov	r2, r0
 8003056:	460b      	mov	r3, r1
 8003058:	4630      	mov	r0, r6
 800305a:	4639      	mov	r1, r7
 800305c:	f7fd f87e 	bl	800015c <__adddf3>
 8003060:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003062:	4b34      	ldr	r3, [pc, #208]	; (8003134 <__ieee754_pow+0x754>)
 8003064:	4413      	add	r3, r2
 8003066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800306a:	f7fd f877 	bl	800015c <__adddf3>
 800306e:	4680      	mov	r8, r0
 8003070:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003072:	4689      	mov	r9, r1
 8003074:	f7fd f9be 	bl	80003f4 <__aeabi_i2d>
 8003078:	4604      	mov	r4, r0
 800307a:	460d      	mov	r5, r1
 800307c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003080:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003082:	4b2d      	ldr	r3, [pc, #180]	; (8003138 <__ieee754_pow+0x758>)
 8003084:	4413      	add	r3, r2
 8003086:	e9d3 6700 	ldrd	r6, r7, [r3]
 800308a:	4642      	mov	r2, r8
 800308c:	464b      	mov	r3, r9
 800308e:	f7fd f865 	bl	800015c <__adddf3>
 8003092:	4632      	mov	r2, r6
 8003094:	463b      	mov	r3, r7
 8003096:	f7fd f861 	bl	800015c <__adddf3>
 800309a:	4622      	mov	r2, r4
 800309c:	462b      	mov	r3, r5
 800309e:	f7fd f85d 	bl	800015c <__adddf3>
 80030a2:	2000      	movs	r0, #0
 80030a4:	4622      	mov	r2, r4
 80030a6:	462b      	mov	r3, r5
 80030a8:	4682      	mov	sl, r0
 80030aa:	468b      	mov	fp, r1
 80030ac:	f7fd f854 	bl	8000158 <__aeabi_dsub>
 80030b0:	4632      	mov	r2, r6
 80030b2:	463b      	mov	r3, r7
 80030b4:	f7fd f850 	bl	8000158 <__aeabi_dsub>
 80030b8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80030bc:	f7fd f84c 	bl	8000158 <__aeabi_dsub>
 80030c0:	4602      	mov	r2, r0
 80030c2:	460b      	mov	r3, r1
 80030c4:	4640      	mov	r0, r8
 80030c6:	4649      	mov	r1, r9
 80030c8:	e60b      	b.n	8002ce2 <__ieee754_pow+0x302>
 80030ca:	2601      	movs	r6, #1
 80030cc:	e69f      	b.n	8002e0e <__ieee754_pow+0x42e>
 80030ce:	bf00      	nop
 80030d0:	4a454eef 	.word	0x4a454eef
 80030d4:	3fca7e28 	.word	0x3fca7e28
 80030d8:	93c9db65 	.word	0x93c9db65
 80030dc:	3fcd864a 	.word	0x3fcd864a
 80030e0:	a91d4101 	.word	0xa91d4101
 80030e4:	3fd17460 	.word	0x3fd17460
 80030e8:	518f264d 	.word	0x518f264d
 80030ec:	3fd55555 	.word	0x3fd55555
 80030f0:	db6fabff 	.word	0xdb6fabff
 80030f4:	3fdb6db6 	.word	0x3fdb6db6
 80030f8:	33333303 	.word	0x33333303
 80030fc:	3fe33333 	.word	0x3fe33333
 8003100:	e0000000 	.word	0xe0000000
 8003104:	3feec709 	.word	0x3feec709
 8003108:	dc3a03fd 	.word	0xdc3a03fd
 800310c:	3feec709 	.word	0x3feec709
 8003110:	145b01f5 	.word	0x145b01f5
 8003114:	be3e2fe0 	.word	0xbe3e2fe0
 8003118:	7ff00000 	.word	0x7ff00000
 800311c:	43400000 	.word	0x43400000
 8003120:	0003988e 	.word	0x0003988e
 8003124:	000bb679 	.word	0x000bb679
 8003128:	08003758 	.word	0x08003758
 800312c:	3ff00000 	.word	0x3ff00000
 8003130:	40080000 	.word	0x40080000
 8003134:	08003778 	.word	0x08003778
 8003138:	08003768 	.word	0x08003768
 800313c:	a39c      	add	r3, pc, #624	; (adr r3, 80033b0 <__ieee754_pow+0x9d0>)
 800313e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003142:	4640      	mov	r0, r8
 8003144:	4649      	mov	r1, r9
 8003146:	f7fd f809 	bl	800015c <__adddf3>
 800314a:	4622      	mov	r2, r4
 800314c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003150:	462b      	mov	r3, r5
 8003152:	4650      	mov	r0, sl
 8003154:	4639      	mov	r1, r7
 8003156:	f7fc ffff 	bl	8000158 <__aeabi_dsub>
 800315a:	4602      	mov	r2, r0
 800315c:	460b      	mov	r3, r1
 800315e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003162:	f7fd fc41 	bl	80009e8 <__aeabi_dcmpgt>
 8003166:	2800      	cmp	r0, #0
 8003168:	f47f ae06 	bne.w	8002d78 <__ieee754_pow+0x398>
 800316c:	4aa2      	ldr	r2, [pc, #648]	; (80033f8 <__ieee754_pow+0xa18>)
 800316e:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8003172:	4293      	cmp	r3, r2
 8003174:	f340 8100 	ble.w	8003378 <__ieee754_pow+0x998>
 8003178:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800317c:	151b      	asrs	r3, r3, #20
 800317e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8003182:	fa4a fa03 	asr.w	sl, sl, r3
 8003186:	44b2      	add	sl, r6
 8003188:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800318c:	489b      	ldr	r0, [pc, #620]	; (80033fc <__ieee754_pow+0xa1c>)
 800318e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8003192:	4108      	asrs	r0, r1
 8003194:	ea00 030a 	and.w	r3, r0, sl
 8003198:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800319c:	f1c1 0114 	rsb	r1, r1, #20
 80031a0:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80031a4:	fa4a fa01 	asr.w	sl, sl, r1
 80031a8:	2e00      	cmp	r6, #0
 80031aa:	f04f 0200 	mov.w	r2, #0
 80031ae:	4620      	mov	r0, r4
 80031b0:	4629      	mov	r1, r5
 80031b2:	bfb8      	it	lt
 80031b4:	f1ca 0a00 	rsblt	sl, sl, #0
 80031b8:	f7fc ffce 	bl	8000158 <__aeabi_dsub>
 80031bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80031c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80031c4:	2400      	movs	r4, #0
 80031c6:	4642      	mov	r2, r8
 80031c8:	464b      	mov	r3, r9
 80031ca:	f7fc ffc7 	bl	800015c <__adddf3>
 80031ce:	a37a      	add	r3, pc, #488	; (adr r3, 80033b8 <__ieee754_pow+0x9d8>)
 80031d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031d4:	4620      	mov	r0, r4
 80031d6:	460d      	mov	r5, r1
 80031d8:	f7fd f976 	bl	80004c8 <__aeabi_dmul>
 80031dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80031e0:	4606      	mov	r6, r0
 80031e2:	460f      	mov	r7, r1
 80031e4:	4620      	mov	r0, r4
 80031e6:	4629      	mov	r1, r5
 80031e8:	f7fc ffb6 	bl	8000158 <__aeabi_dsub>
 80031ec:	4602      	mov	r2, r0
 80031ee:	460b      	mov	r3, r1
 80031f0:	4640      	mov	r0, r8
 80031f2:	4649      	mov	r1, r9
 80031f4:	f7fc ffb0 	bl	8000158 <__aeabi_dsub>
 80031f8:	a371      	add	r3, pc, #452	; (adr r3, 80033c0 <__ieee754_pow+0x9e0>)
 80031fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031fe:	f7fd f963 	bl	80004c8 <__aeabi_dmul>
 8003202:	a371      	add	r3, pc, #452	; (adr r3, 80033c8 <__ieee754_pow+0x9e8>)
 8003204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003208:	4680      	mov	r8, r0
 800320a:	4689      	mov	r9, r1
 800320c:	4620      	mov	r0, r4
 800320e:	4629      	mov	r1, r5
 8003210:	f7fd f95a 	bl	80004c8 <__aeabi_dmul>
 8003214:	4602      	mov	r2, r0
 8003216:	460b      	mov	r3, r1
 8003218:	4640      	mov	r0, r8
 800321a:	4649      	mov	r1, r9
 800321c:	f7fc ff9e 	bl	800015c <__adddf3>
 8003220:	4604      	mov	r4, r0
 8003222:	460d      	mov	r5, r1
 8003224:	4602      	mov	r2, r0
 8003226:	460b      	mov	r3, r1
 8003228:	4630      	mov	r0, r6
 800322a:	4639      	mov	r1, r7
 800322c:	f7fc ff96 	bl	800015c <__adddf3>
 8003230:	4632      	mov	r2, r6
 8003232:	463b      	mov	r3, r7
 8003234:	4680      	mov	r8, r0
 8003236:	4689      	mov	r9, r1
 8003238:	f7fc ff8e 	bl	8000158 <__aeabi_dsub>
 800323c:	4602      	mov	r2, r0
 800323e:	460b      	mov	r3, r1
 8003240:	4620      	mov	r0, r4
 8003242:	4629      	mov	r1, r5
 8003244:	f7fc ff88 	bl	8000158 <__aeabi_dsub>
 8003248:	4642      	mov	r2, r8
 800324a:	4606      	mov	r6, r0
 800324c:	460f      	mov	r7, r1
 800324e:	464b      	mov	r3, r9
 8003250:	4640      	mov	r0, r8
 8003252:	4649      	mov	r1, r9
 8003254:	f7fd f938 	bl	80004c8 <__aeabi_dmul>
 8003258:	a35d      	add	r3, pc, #372	; (adr r3, 80033d0 <__ieee754_pow+0x9f0>)
 800325a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800325e:	4604      	mov	r4, r0
 8003260:	460d      	mov	r5, r1
 8003262:	f7fd f931 	bl	80004c8 <__aeabi_dmul>
 8003266:	a35c      	add	r3, pc, #368	; (adr r3, 80033d8 <__ieee754_pow+0x9f8>)
 8003268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800326c:	f7fc ff74 	bl	8000158 <__aeabi_dsub>
 8003270:	4622      	mov	r2, r4
 8003272:	462b      	mov	r3, r5
 8003274:	f7fd f928 	bl	80004c8 <__aeabi_dmul>
 8003278:	a359      	add	r3, pc, #356	; (adr r3, 80033e0 <__ieee754_pow+0xa00>)
 800327a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800327e:	f7fc ff6d 	bl	800015c <__adddf3>
 8003282:	4622      	mov	r2, r4
 8003284:	462b      	mov	r3, r5
 8003286:	f7fd f91f 	bl	80004c8 <__aeabi_dmul>
 800328a:	a357      	add	r3, pc, #348	; (adr r3, 80033e8 <__ieee754_pow+0xa08>)
 800328c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003290:	f7fc ff62 	bl	8000158 <__aeabi_dsub>
 8003294:	4622      	mov	r2, r4
 8003296:	462b      	mov	r3, r5
 8003298:	f7fd f916 	bl	80004c8 <__aeabi_dmul>
 800329c:	a354      	add	r3, pc, #336	; (adr r3, 80033f0 <__ieee754_pow+0xa10>)
 800329e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032a2:	f7fc ff5b 	bl	800015c <__adddf3>
 80032a6:	4622      	mov	r2, r4
 80032a8:	462b      	mov	r3, r5
 80032aa:	f7fd f90d 	bl	80004c8 <__aeabi_dmul>
 80032ae:	4602      	mov	r2, r0
 80032b0:	460b      	mov	r3, r1
 80032b2:	4640      	mov	r0, r8
 80032b4:	4649      	mov	r1, r9
 80032b6:	f7fc ff4f 	bl	8000158 <__aeabi_dsub>
 80032ba:	4604      	mov	r4, r0
 80032bc:	460d      	mov	r5, r1
 80032be:	4602      	mov	r2, r0
 80032c0:	460b      	mov	r3, r1
 80032c2:	4640      	mov	r0, r8
 80032c4:	4649      	mov	r1, r9
 80032c6:	f7fd f8ff 	bl	80004c8 <__aeabi_dmul>
 80032ca:	2200      	movs	r2, #0
 80032cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80032d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80032d4:	4620      	mov	r0, r4
 80032d6:	4629      	mov	r1, r5
 80032d8:	f7fc ff3e 	bl	8000158 <__aeabi_dsub>
 80032dc:	4602      	mov	r2, r0
 80032de:	460b      	mov	r3, r1
 80032e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80032e4:	f7fd fa1a 	bl	800071c <__aeabi_ddiv>
 80032e8:	4632      	mov	r2, r6
 80032ea:	4604      	mov	r4, r0
 80032ec:	460d      	mov	r5, r1
 80032ee:	463b      	mov	r3, r7
 80032f0:	4640      	mov	r0, r8
 80032f2:	4649      	mov	r1, r9
 80032f4:	f7fd f8e8 	bl	80004c8 <__aeabi_dmul>
 80032f8:	4632      	mov	r2, r6
 80032fa:	463b      	mov	r3, r7
 80032fc:	f7fc ff2e 	bl	800015c <__adddf3>
 8003300:	4602      	mov	r2, r0
 8003302:	460b      	mov	r3, r1
 8003304:	4620      	mov	r0, r4
 8003306:	4629      	mov	r1, r5
 8003308:	f7fc ff26 	bl	8000158 <__aeabi_dsub>
 800330c:	4642      	mov	r2, r8
 800330e:	464b      	mov	r3, r9
 8003310:	f7fc ff22 	bl	8000158 <__aeabi_dsub>
 8003314:	4602      	mov	r2, r0
 8003316:	460b      	mov	r3, r1
 8003318:	2000      	movs	r0, #0
 800331a:	4939      	ldr	r1, [pc, #228]	; (8003400 <__ieee754_pow+0xa20>)
 800331c:	f7fc ff1c 	bl	8000158 <__aeabi_dsub>
 8003320:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8003324:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8003328:	da29      	bge.n	800337e <__ieee754_pow+0x99e>
 800332a:	4652      	mov	r2, sl
 800332c:	f000 f874 	bl	8003418 <scalbn>
 8003330:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003334:	f7ff bbfd 	b.w	8002b32 <__ieee754_pow+0x152>
 8003338:	4b32      	ldr	r3, [pc, #200]	; (8003404 <__ieee754_pow+0xa24>)
 800333a:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800333e:	429f      	cmp	r7, r3
 8003340:	f77f af14 	ble.w	800316c <__ieee754_pow+0x78c>
 8003344:	4b30      	ldr	r3, [pc, #192]	; (8003408 <__ieee754_pow+0xa28>)
 8003346:	440b      	add	r3, r1
 8003348:	4303      	orrs	r3, r0
 800334a:	d009      	beq.n	8003360 <__ieee754_pow+0x980>
 800334c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003350:	2200      	movs	r2, #0
 8003352:	2300      	movs	r3, #0
 8003354:	f7fd fb2a 	bl	80009ac <__aeabi_dcmplt>
 8003358:	3800      	subs	r0, #0
 800335a:	bf18      	it	ne
 800335c:	2001      	movne	r0, #1
 800335e:	e452      	b.n	8002c06 <__ieee754_pow+0x226>
 8003360:	4622      	mov	r2, r4
 8003362:	462b      	mov	r3, r5
 8003364:	f7fc fef8 	bl	8000158 <__aeabi_dsub>
 8003368:	4642      	mov	r2, r8
 800336a:	464b      	mov	r3, r9
 800336c:	f7fd fb32 	bl	80009d4 <__aeabi_dcmpge>
 8003370:	2800      	cmp	r0, #0
 8003372:	f43f aefb 	beq.w	800316c <__ieee754_pow+0x78c>
 8003376:	e7e9      	b.n	800334c <__ieee754_pow+0x96c>
 8003378:	f04f 0a00 	mov.w	sl, #0
 800337c:	e720      	b.n	80031c0 <__ieee754_pow+0x7e0>
 800337e:	4621      	mov	r1, r4
 8003380:	e7d6      	b.n	8003330 <__ieee754_pow+0x950>
 8003382:	f04f 0b00 	mov.w	fp, #0
 8003386:	f8df c078 	ldr.w	ip, [pc, #120]	; 8003400 <__ieee754_pow+0xa20>
 800338a:	f7ff bbb9 	b.w	8002b00 <__ieee754_pow+0x120>
 800338e:	f04f 0b00 	mov.w	fp, #0
 8003392:	f04f 0c00 	mov.w	ip, #0
 8003396:	f7ff bbb3 	b.w	8002b00 <__ieee754_pow+0x120>
 800339a:	4640      	mov	r0, r8
 800339c:	4649      	mov	r1, r9
 800339e:	f7ff bb3c 	b.w	8002a1a <__ieee754_pow+0x3a>
 80033a2:	9200      	str	r2, [sp, #0]
 80033a4:	f7ff bb88 	b.w	8002ab8 <__ieee754_pow+0xd8>
 80033a8:	2300      	movs	r3, #0
 80033aa:	f7ff bb72 	b.w	8002a92 <__ieee754_pow+0xb2>
 80033ae:	bf00      	nop
 80033b0:	652b82fe 	.word	0x652b82fe
 80033b4:	3c971547 	.word	0x3c971547
 80033b8:	00000000 	.word	0x00000000
 80033bc:	3fe62e43 	.word	0x3fe62e43
 80033c0:	fefa39ef 	.word	0xfefa39ef
 80033c4:	3fe62e42 	.word	0x3fe62e42
 80033c8:	0ca86c39 	.word	0x0ca86c39
 80033cc:	be205c61 	.word	0xbe205c61
 80033d0:	72bea4d0 	.word	0x72bea4d0
 80033d4:	3e663769 	.word	0x3e663769
 80033d8:	c5d26bf1 	.word	0xc5d26bf1
 80033dc:	3ebbbd41 	.word	0x3ebbbd41
 80033e0:	af25de2c 	.word	0xaf25de2c
 80033e4:	3f11566a 	.word	0x3f11566a
 80033e8:	16bebd93 	.word	0x16bebd93
 80033ec:	3f66c16c 	.word	0x3f66c16c
 80033f0:	5555553e 	.word	0x5555553e
 80033f4:	3fc55555 	.word	0x3fc55555
 80033f8:	3fe00000 	.word	0x3fe00000
 80033fc:	fff00000 	.word	0xfff00000
 8003400:	3ff00000 	.word	0x3ff00000
 8003404:	4090cbff 	.word	0x4090cbff
 8003408:	3f6f3400 	.word	0x3f6f3400

0800340c <fabs>:
 800340c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003410:	4619      	mov	r1, r3
 8003412:	4770      	bx	lr
 8003414:	0000      	movs	r0, r0
	...

08003418 <scalbn>:
 8003418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800341a:	4616      	mov	r6, r2
 800341c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8003420:	4604      	mov	r4, r0
 8003422:	460d      	mov	r5, r1
 8003424:	460b      	mov	r3, r1
 8003426:	b992      	cbnz	r2, 800344e <scalbn+0x36>
 8003428:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800342c:	4303      	orrs	r3, r0
 800342e:	d03c      	beq.n	80034aa <scalbn+0x92>
 8003430:	4b31      	ldr	r3, [pc, #196]	; (80034f8 <scalbn+0xe0>)
 8003432:	2200      	movs	r2, #0
 8003434:	f7fd f848 	bl	80004c8 <__aeabi_dmul>
 8003438:	4b30      	ldr	r3, [pc, #192]	; (80034fc <scalbn+0xe4>)
 800343a:	4604      	mov	r4, r0
 800343c:	429e      	cmp	r6, r3
 800343e:	460d      	mov	r5, r1
 8003440:	da0f      	bge.n	8003462 <scalbn+0x4a>
 8003442:	a329      	add	r3, pc, #164	; (adr r3, 80034e8 <scalbn+0xd0>)
 8003444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003448:	f7fd f83e 	bl	80004c8 <__aeabi_dmul>
 800344c:	e006      	b.n	800345c <scalbn+0x44>
 800344e:	f240 77ff 	movw	r7, #2047	; 0x7ff
 8003452:	42ba      	cmp	r2, r7
 8003454:	d109      	bne.n	800346a <scalbn+0x52>
 8003456:	4602      	mov	r2, r0
 8003458:	f7fc fe80 	bl	800015c <__adddf3>
 800345c:	4604      	mov	r4, r0
 800345e:	460d      	mov	r5, r1
 8003460:	e023      	b.n	80034aa <scalbn+0x92>
 8003462:	460b      	mov	r3, r1
 8003464:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8003468:	3a36      	subs	r2, #54	; 0x36
 800346a:	f24c 3150 	movw	r1, #50000	; 0xc350
 800346e:	428e      	cmp	r6, r1
 8003470:	dd0e      	ble.n	8003490 <scalbn+0x78>
 8003472:	a31f      	add	r3, pc, #124	; (adr r3, 80034f0 <scalbn+0xd8>)
 8003474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003478:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800347c:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8003480:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8003484:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8003488:	481d      	ldr	r0, [pc, #116]	; (8003500 <scalbn+0xe8>)
 800348a:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800348e:	e7db      	b.n	8003448 <scalbn+0x30>
 8003490:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8003494:	4432      	add	r2, r6
 8003496:	428a      	cmp	r2, r1
 8003498:	dceb      	bgt.n	8003472 <scalbn+0x5a>
 800349a:	2a00      	cmp	r2, #0
 800349c:	dd08      	ble.n	80034b0 <scalbn+0x98>
 800349e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80034a2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80034a6:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80034aa:	4620      	mov	r0, r4
 80034ac:	4629      	mov	r1, r5
 80034ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80034b0:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80034b4:	da0c      	bge.n	80034d0 <scalbn+0xb8>
 80034b6:	a30c      	add	r3, pc, #48	; (adr r3, 80034e8 <scalbn+0xd0>)
 80034b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034bc:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 80034c0:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 80034c4:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 80034c8:	480e      	ldr	r0, [pc, #56]	; (8003504 <scalbn+0xec>)
 80034ca:	f041 011f 	orr.w	r1, r1, #31
 80034ce:	e7bb      	b.n	8003448 <scalbn+0x30>
 80034d0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80034d4:	3236      	adds	r2, #54	; 0x36
 80034d6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80034da:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80034de:	4620      	mov	r0, r4
 80034e0:	4629      	mov	r1, r5
 80034e2:	2200      	movs	r2, #0
 80034e4:	4b08      	ldr	r3, [pc, #32]	; (8003508 <scalbn+0xf0>)
 80034e6:	e7af      	b.n	8003448 <scalbn+0x30>
 80034e8:	c2f8f359 	.word	0xc2f8f359
 80034ec:	01a56e1f 	.word	0x01a56e1f
 80034f0:	8800759c 	.word	0x8800759c
 80034f4:	7e37e43c 	.word	0x7e37e43c
 80034f8:	43500000 	.word	0x43500000
 80034fc:	ffff3cb0 	.word	0xffff3cb0
 8003500:	8800759c 	.word	0x8800759c
 8003504:	c2f8f359 	.word	0xc2f8f359
 8003508:	3c900000 	.word	0x3c900000

0800350c <with_errno>:
 800350c:	b570      	push	{r4, r5, r6, lr}
 800350e:	4604      	mov	r4, r0
 8003510:	460d      	mov	r5, r1
 8003512:	4616      	mov	r6, r2
 8003514:	f7ff f9cc 	bl	80028b0 <__errno>
 8003518:	4629      	mov	r1, r5
 800351a:	6006      	str	r6, [r0, #0]
 800351c:	4620      	mov	r0, r4
 800351e:	bd70      	pop	{r4, r5, r6, pc}

08003520 <xflow>:
 8003520:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003522:	4615      	mov	r5, r2
 8003524:	461c      	mov	r4, r3
 8003526:	b180      	cbz	r0, 800354a <xflow+0x2a>
 8003528:	4610      	mov	r0, r2
 800352a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800352e:	e9cd 0100 	strd	r0, r1, [sp]
 8003532:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003536:	4628      	mov	r0, r5
 8003538:	4621      	mov	r1, r4
 800353a:	f7fc ffc5 	bl	80004c8 <__aeabi_dmul>
 800353e:	2222      	movs	r2, #34	; 0x22
 8003540:	b003      	add	sp, #12
 8003542:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003546:	f7ff bfe1 	b.w	800350c <with_errno>
 800354a:	4610      	mov	r0, r2
 800354c:	4619      	mov	r1, r3
 800354e:	e7ee      	b.n	800352e <xflow+0xe>

08003550 <__math_uflow>:
 8003550:	2200      	movs	r2, #0
 8003552:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003556:	f7ff bfe3 	b.w	8003520 <xflow>

0800355a <__math_oflow>:
 800355a:	2200      	movs	r2, #0
 800355c:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8003560:	f7ff bfde 	b.w	8003520 <xflow>

08003564 <__ieee754_sqrt>:
 8003564:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 8003708 <__ieee754_sqrt+0x1a4>
 8003568:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800356c:	ea3c 0c01 	bics.w	ip, ip, r1
 8003570:	460b      	mov	r3, r1
 8003572:	4606      	mov	r6, r0
 8003574:	460d      	mov	r5, r1
 8003576:	460a      	mov	r2, r1
 8003578:	4604      	mov	r4, r0
 800357a:	d10e      	bne.n	800359a <__ieee754_sqrt+0x36>
 800357c:	4602      	mov	r2, r0
 800357e:	f7fc ffa3 	bl	80004c8 <__aeabi_dmul>
 8003582:	4602      	mov	r2, r0
 8003584:	460b      	mov	r3, r1
 8003586:	4630      	mov	r0, r6
 8003588:	4629      	mov	r1, r5
 800358a:	f7fc fde7 	bl	800015c <__adddf3>
 800358e:	4606      	mov	r6, r0
 8003590:	460d      	mov	r5, r1
 8003592:	4630      	mov	r0, r6
 8003594:	4629      	mov	r1, r5
 8003596:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800359a:	2900      	cmp	r1, #0
 800359c:	dc0d      	bgt.n	80035ba <__ieee754_sqrt+0x56>
 800359e:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80035a2:	ea5c 0c00 	orrs.w	ip, ip, r0
 80035a6:	d0f4      	beq.n	8003592 <__ieee754_sqrt+0x2e>
 80035a8:	b139      	cbz	r1, 80035ba <__ieee754_sqrt+0x56>
 80035aa:	4602      	mov	r2, r0
 80035ac:	f7fc fdd4 	bl	8000158 <__aeabi_dsub>
 80035b0:	4602      	mov	r2, r0
 80035b2:	460b      	mov	r3, r1
 80035b4:	f7fd f8b2 	bl	800071c <__aeabi_ddiv>
 80035b8:	e7e9      	b.n	800358e <__ieee754_sqrt+0x2a>
 80035ba:	1512      	asrs	r2, r2, #20
 80035bc:	f000 8089 	beq.w	80036d2 <__ieee754_sqrt+0x16e>
 80035c0:	2500      	movs	r5, #0
 80035c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80035c6:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80035ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035ce:	07d2      	lsls	r2, r2, #31
 80035d0:	bf5c      	itt	pl
 80035d2:	005b      	lslpl	r3, r3, #1
 80035d4:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 80035d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80035dc:	bf58      	it	pl
 80035de:	0064      	lslpl	r4, r4, #1
 80035e0:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 80035e4:	0062      	lsls	r2, r4, #1
 80035e6:	2016      	movs	r0, #22
 80035e8:	4629      	mov	r1, r5
 80035ea:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 80035ee:	1076      	asrs	r6, r6, #1
 80035f0:	190f      	adds	r7, r1, r4
 80035f2:	429f      	cmp	r7, r3
 80035f4:	bfde      	ittt	le
 80035f6:	1bdb      	suble	r3, r3, r7
 80035f8:	1939      	addle	r1, r7, r4
 80035fa:	192d      	addle	r5, r5, r4
 80035fc:	005b      	lsls	r3, r3, #1
 80035fe:	3801      	subs	r0, #1
 8003600:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8003604:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8003608:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800360c:	d1f0      	bne.n	80035f0 <__ieee754_sqrt+0x8c>
 800360e:	4604      	mov	r4, r0
 8003610:	2720      	movs	r7, #32
 8003612:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8003616:	428b      	cmp	r3, r1
 8003618:	eb0c 0e00 	add.w	lr, ip, r0
 800361c:	dc02      	bgt.n	8003624 <__ieee754_sqrt+0xc0>
 800361e:	d113      	bne.n	8003648 <__ieee754_sqrt+0xe4>
 8003620:	4596      	cmp	lr, r2
 8003622:	d811      	bhi.n	8003648 <__ieee754_sqrt+0xe4>
 8003624:	f1be 0f00 	cmp.w	lr, #0
 8003628:	eb0e 000c 	add.w	r0, lr, ip
 800362c:	da56      	bge.n	80036dc <__ieee754_sqrt+0x178>
 800362e:	2800      	cmp	r0, #0
 8003630:	db54      	blt.n	80036dc <__ieee754_sqrt+0x178>
 8003632:	f101 0801 	add.w	r8, r1, #1
 8003636:	1a5b      	subs	r3, r3, r1
 8003638:	4641      	mov	r1, r8
 800363a:	4596      	cmp	lr, r2
 800363c:	bf88      	it	hi
 800363e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8003642:	eba2 020e 	sub.w	r2, r2, lr
 8003646:	4464      	add	r4, ip
 8003648:	005b      	lsls	r3, r3, #1
 800364a:	3f01      	subs	r7, #1
 800364c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8003650:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8003654:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8003658:	d1dd      	bne.n	8003616 <__ieee754_sqrt+0xb2>
 800365a:	4313      	orrs	r3, r2
 800365c:	d01b      	beq.n	8003696 <__ieee754_sqrt+0x132>
 800365e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800370c <__ieee754_sqrt+0x1a8>
 8003662:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8003710 <__ieee754_sqrt+0x1ac>
 8003666:	e9da 0100 	ldrd	r0, r1, [sl]
 800366a:	e9db 2300 	ldrd	r2, r3, [fp]
 800366e:	f7fc fd73 	bl	8000158 <__aeabi_dsub>
 8003672:	e9da 8900 	ldrd	r8, r9, [sl]
 8003676:	4602      	mov	r2, r0
 8003678:	460b      	mov	r3, r1
 800367a:	4640      	mov	r0, r8
 800367c:	4649      	mov	r1, r9
 800367e:	f7fd f99f 	bl	80009c0 <__aeabi_dcmple>
 8003682:	b140      	cbz	r0, 8003696 <__ieee754_sqrt+0x132>
 8003684:	e9da 0100 	ldrd	r0, r1, [sl]
 8003688:	e9db 2300 	ldrd	r2, r3, [fp]
 800368c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8003690:	d126      	bne.n	80036e0 <__ieee754_sqrt+0x17c>
 8003692:	463c      	mov	r4, r7
 8003694:	3501      	adds	r5, #1
 8003696:	106b      	asrs	r3, r5, #1
 8003698:	0864      	lsrs	r4, r4, #1
 800369a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800369e:	07ea      	lsls	r2, r5, #31
 80036a0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80036a4:	bf48      	it	mi
 80036a6:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 80036aa:	4620      	mov	r0, r4
 80036ac:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 80036b0:	e76d      	b.n	800358e <__ieee754_sqrt+0x2a>
 80036b2:	0ae3      	lsrs	r3, r4, #11
 80036b4:	3915      	subs	r1, #21
 80036b6:	0564      	lsls	r4, r4, #21
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d0fa      	beq.n	80036b2 <__ieee754_sqrt+0x14e>
 80036bc:	02d8      	lsls	r0, r3, #11
 80036be:	d50a      	bpl.n	80036d6 <__ieee754_sqrt+0x172>
 80036c0:	f1c2 0020 	rsb	r0, r2, #32
 80036c4:	fa24 f000 	lsr.w	r0, r4, r0
 80036c8:	1e55      	subs	r5, r2, #1
 80036ca:	4094      	lsls	r4, r2
 80036cc:	4303      	orrs	r3, r0
 80036ce:	1b4a      	subs	r2, r1, r5
 80036d0:	e776      	b.n	80035c0 <__ieee754_sqrt+0x5c>
 80036d2:	4611      	mov	r1, r2
 80036d4:	e7f0      	b.n	80036b8 <__ieee754_sqrt+0x154>
 80036d6:	005b      	lsls	r3, r3, #1
 80036d8:	3201      	adds	r2, #1
 80036da:	e7ef      	b.n	80036bc <__ieee754_sqrt+0x158>
 80036dc:	4688      	mov	r8, r1
 80036de:	e7aa      	b.n	8003636 <__ieee754_sqrt+0xd2>
 80036e0:	f7fc fd3c 	bl	800015c <__adddf3>
 80036e4:	e9da 8900 	ldrd	r8, r9, [sl]
 80036e8:	4602      	mov	r2, r0
 80036ea:	460b      	mov	r3, r1
 80036ec:	4640      	mov	r0, r8
 80036ee:	4649      	mov	r1, r9
 80036f0:	f7fd f95c 	bl	80009ac <__aeabi_dcmplt>
 80036f4:	b120      	cbz	r0, 8003700 <__ieee754_sqrt+0x19c>
 80036f6:	1ca1      	adds	r1, r4, #2
 80036f8:	bf08      	it	eq
 80036fa:	3501      	addeq	r5, #1
 80036fc:	3402      	adds	r4, #2
 80036fe:	e7ca      	b.n	8003696 <__ieee754_sqrt+0x132>
 8003700:	3401      	adds	r4, #1
 8003702:	f024 0401 	bic.w	r4, r4, #1
 8003706:	e7c6      	b.n	8003696 <__ieee754_sqrt+0x132>
 8003708:	7ff00000 	.word	0x7ff00000
 800370c:	20000068 	.word	0x20000068
 8003710:	20000070 	.word	0x20000070

08003714 <_init>:
 8003714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003716:	bf00      	nop
 8003718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800371a:	bc08      	pop	{r3}
 800371c:	469e      	mov	lr, r3
 800371e:	4770      	bx	lr

08003720 <_fini>:
 8003720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003722:	bf00      	nop
 8003724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003726:	bc08      	pop	{r3}
 8003728:	469e      	mov	lr, r3
 800372a:	4770      	bx	lr
