
exercise1_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046b0  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  080047c0  080047c0  000147c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800481c  0800481c  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  0800481c  0800481c  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800481c  0800481c  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800481c  0800481c  0001481c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004820  08004820  00014820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08004824  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c54  20000060  08004884  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001cb4  08004884  00021cb4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016d8a  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003350  00000000  00000000  00036e56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001398  00000000  00000000  0003a1a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f3e  00000000  00000000  0003b540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002ebb  00000000  00000000  0003c47e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016181  00000000  00000000  0003f339  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00093e7e  00000000  00000000  000554ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005488  00000000  00000000  000e9338  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000ee7c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	080047a8 	.word	0x080047a8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	080047a8 	.word	0x080047a8

08000150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
//  app_handle.LEDsForBlink[6].Pin  = GPIO_PIN_12;
//  app_handle.LEDsForBlink[7].Port = GPIOA;
//  app_handle.LEDsForBlink[7].Pin  = GPIO_PIN_6;

  //APP_init(&app_handle);
  task_create_uart_tx(&handle_uart);
 8000154:	4806      	ldr	r0, [pc, #24]	; (8000170 <main+0x20>)
 8000156:	f000 faad 	bl	80006b4 <task_create_uart_tx>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800015a:	f000 fb03 	bl	8000764 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800015e:	f000 f809 	bl	8000174 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000162:	f000 f877 	bl	8000254 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000166:	f000 f84b 	bl	8000200 <MX_USART2_UART_Init>
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  //osKernelStart();
  vTaskStartScheduler();
 800016a:	f002 fe1b 	bl	8002da4 <vTaskStartScheduler>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800016e:	e7fe      	b.n	800016e <main+0x1e>
 8000170:	2000013c 	.word	0x2000013c

08000174 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000174:	b580      	push	{r7, lr}
 8000176:	b090      	sub	sp, #64	; 0x40
 8000178:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800017a:	f107 0318 	add.w	r3, r7, #24
 800017e:	2228      	movs	r2, #40	; 0x28
 8000180:	2100      	movs	r1, #0
 8000182:	4618      	mov	r0, r3
 8000184:	f004 fa2a 	bl	80045dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000188:	1d3b      	adds	r3, r7, #4
 800018a:	2200      	movs	r2, #0
 800018c:	601a      	str	r2, [r3, #0]
 800018e:	605a      	str	r2, [r3, #4]
 8000190:	609a      	str	r2, [r3, #8]
 8000192:	60da      	str	r2, [r3, #12]
 8000194:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000196:	2301      	movs	r3, #1
 8000198:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800019a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800019e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001a0:	2300      	movs	r3, #0
 80001a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001a4:	2301      	movs	r3, #1
 80001a6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001a8:	2302      	movs	r3, #2
 80001aa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001b2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001b8:	f107 0318 	add.w	r3, r7, #24
 80001bc:	4618      	mov	r0, r3
 80001be:	f000 fdaf 	bl	8000d20 <HAL_RCC_OscConfig>
 80001c2:	4603      	mov	r3, r0
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d001      	beq.n	80001cc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80001c8:	f000 f92f 	bl	800042a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001cc:	230f      	movs	r3, #15
 80001ce:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001d0:	2302      	movs	r3, #2
 80001d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001d4:	2300      	movs	r3, #0
 80001d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001de:	2300      	movs	r3, #0
 80001e0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001e2:	1d3b      	adds	r3, r7, #4
 80001e4:	2102      	movs	r1, #2
 80001e6:	4618      	mov	r0, r3
 80001e8:	f001 f81c 	bl	8001224 <HAL_RCC_ClockConfig>
 80001ec:	4603      	mov	r3, r0
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d001      	beq.n	80001f6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80001f2:	f000 f91a 	bl	800042a <Error_Handler>
  }
}
 80001f6:	bf00      	nop
 80001f8:	3740      	adds	r7, #64	; 0x40
 80001fa:	46bd      	mov	sp, r7
 80001fc:	bd80      	pop	{r7, pc}
	...

08000200 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000204:	4b11      	ldr	r3, [pc, #68]	; (800024c <MX_USART2_UART_Init+0x4c>)
 8000206:	4a12      	ldr	r2, [pc, #72]	; (8000250 <MX_USART2_UART_Init+0x50>)
 8000208:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800020a:	4b10      	ldr	r3, [pc, #64]	; (800024c <MX_USART2_UART_Init+0x4c>)
 800020c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000210:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000212:	4b0e      	ldr	r3, [pc, #56]	; (800024c <MX_USART2_UART_Init+0x4c>)
 8000214:	2200      	movs	r2, #0
 8000216:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000218:	4b0c      	ldr	r3, [pc, #48]	; (800024c <MX_USART2_UART_Init+0x4c>)
 800021a:	2200      	movs	r2, #0
 800021c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800021e:	4b0b      	ldr	r3, [pc, #44]	; (800024c <MX_USART2_UART_Init+0x4c>)
 8000220:	2200      	movs	r2, #0
 8000222:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000224:	4b09      	ldr	r3, [pc, #36]	; (800024c <MX_USART2_UART_Init+0x4c>)
 8000226:	220c      	movs	r2, #12
 8000228:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800022a:	4b08      	ldr	r3, [pc, #32]	; (800024c <MX_USART2_UART_Init+0x4c>)
 800022c:	2200      	movs	r2, #0
 800022e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000230:	4b06      	ldr	r3, [pc, #24]	; (800024c <MX_USART2_UART_Init+0x4c>)
 8000232:	2200      	movs	r2, #0
 8000234:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000236:	4805      	ldr	r0, [pc, #20]	; (800024c <MX_USART2_UART_Init+0x4c>)
 8000238:	f001 fbfc 	bl	8001a34 <HAL_UART_Init>
 800023c:	4603      	mov	r3, r0
 800023e:	2b00      	cmp	r3, #0
 8000240:	d001      	beq.n	8000246 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000242:	f000 f8f2 	bl	800042a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000246:	bf00      	nop
 8000248:	bd80      	pop	{r7, pc}
 800024a:	bf00      	nop
 800024c:	2000007c 	.word	0x2000007c
 8000250:	40004400 	.word	0x40004400

08000254 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b088      	sub	sp, #32
 8000258:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800025a:	f107 0310 	add.w	r3, r7, #16
 800025e:	2200      	movs	r2, #0
 8000260:	601a      	str	r2, [r3, #0]
 8000262:	605a      	str	r2, [r3, #4]
 8000264:	609a      	str	r2, [r3, #8]
 8000266:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000268:	4b56      	ldr	r3, [pc, #344]	; (80003c4 <MX_GPIO_Init+0x170>)
 800026a:	699b      	ldr	r3, [r3, #24]
 800026c:	4a55      	ldr	r2, [pc, #340]	; (80003c4 <MX_GPIO_Init+0x170>)
 800026e:	f043 0310 	orr.w	r3, r3, #16
 8000272:	6193      	str	r3, [r2, #24]
 8000274:	4b53      	ldr	r3, [pc, #332]	; (80003c4 <MX_GPIO_Init+0x170>)
 8000276:	699b      	ldr	r3, [r3, #24]
 8000278:	f003 0310 	and.w	r3, r3, #16
 800027c:	60fb      	str	r3, [r7, #12]
 800027e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000280:	4b50      	ldr	r3, [pc, #320]	; (80003c4 <MX_GPIO_Init+0x170>)
 8000282:	699b      	ldr	r3, [r3, #24]
 8000284:	4a4f      	ldr	r2, [pc, #316]	; (80003c4 <MX_GPIO_Init+0x170>)
 8000286:	f043 0320 	orr.w	r3, r3, #32
 800028a:	6193      	str	r3, [r2, #24]
 800028c:	4b4d      	ldr	r3, [pc, #308]	; (80003c4 <MX_GPIO_Init+0x170>)
 800028e:	699b      	ldr	r3, [r3, #24]
 8000290:	f003 0320 	and.w	r3, r3, #32
 8000294:	60bb      	str	r3, [r7, #8]
 8000296:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000298:	4b4a      	ldr	r3, [pc, #296]	; (80003c4 <MX_GPIO_Init+0x170>)
 800029a:	699b      	ldr	r3, [r3, #24]
 800029c:	4a49      	ldr	r2, [pc, #292]	; (80003c4 <MX_GPIO_Init+0x170>)
 800029e:	f043 0304 	orr.w	r3, r3, #4
 80002a2:	6193      	str	r3, [r2, #24]
 80002a4:	4b47      	ldr	r3, [pc, #284]	; (80003c4 <MX_GPIO_Init+0x170>)
 80002a6:	699b      	ldr	r3, [r3, #24]
 80002a8:	f003 0304 	and.w	r3, r3, #4
 80002ac:	607b      	str	r3, [r7, #4]
 80002ae:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002b0:	4b44      	ldr	r3, [pc, #272]	; (80003c4 <MX_GPIO_Init+0x170>)
 80002b2:	699b      	ldr	r3, [r3, #24]
 80002b4:	4a43      	ldr	r2, [pc, #268]	; (80003c4 <MX_GPIO_Init+0x170>)
 80002b6:	f043 0308 	orr.w	r3, r3, #8
 80002ba:	6193      	str	r3, [r2, #24]
 80002bc:	4b41      	ldr	r3, [pc, #260]	; (80003c4 <MX_GPIO_Init+0x170>)
 80002be:	699b      	ldr	r3, [r3, #24]
 80002c0:	f003 0308 	and.w	r3, r3, #8
 80002c4:	603b      	str	r3, [r7, #0]
 80002c6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6|GPIO_PIN_12, GPIO_PIN_RESET);
 80002c8:	2200      	movs	r2, #0
 80002ca:	f44f 5183 	mov.w	r1, #4192	; 0x1060
 80002ce:	483e      	ldr	r0, [pc, #248]	; (80003c8 <MX_GPIO_Init+0x174>)
 80002d0:	f000 fcde 	bl	8000c90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80002d4:	2200      	movs	r2, #0
 80002d6:	f44f 7158 	mov.w	r1, #864	; 0x360
 80002da:	483c      	ldr	r0, [pc, #240]	; (80003cc <MX_GPIO_Init+0x178>)
 80002dc:	f000 fcd8 	bl	8000c90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80002e0:	2200      	movs	r2, #0
 80002e2:	f44f 7140 	mov.w	r1, #768	; 0x300
 80002e6:	483a      	ldr	r0, [pc, #232]	; (80003d0 <MX_GPIO_Init+0x17c>)
 80002e8:	f000 fcd2 	bl	8000c90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 80002ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80002f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80002f2:	4b38      	ldr	r3, [pc, #224]	; (80003d4 <MX_GPIO_Init+0x180>)
 80002f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002f6:	2300      	movs	r3, #0
 80002f8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 80002fa:	f107 0310 	add.w	r3, r7, #16
 80002fe:	4619      	mov	r1, r3
 8000300:	4832      	ldr	r0, [pc, #200]	; (80003cc <MX_GPIO_Init+0x178>)
 8000302:	f000 fb41 	bl	8000988 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_9;
 8000306:	f44f 7304 	mov.w	r3, #528	; 0x210
 800030a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800030c:	2300      	movs	r3, #0
 800030e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000310:	2300      	movs	r3, #0
 8000312:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000314:	f107 0310 	add.w	r3, r7, #16
 8000318:	4619      	mov	r1, r3
 800031a:	482b      	ldr	r0, [pc, #172]	; (80003c8 <MX_GPIO_Init+0x174>)
 800031c:	f000 fb34 	bl	8000988 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA6 PA12 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6|GPIO_PIN_12;
 8000320:	f44f 5383 	mov.w	r3, #4192	; 0x1060
 8000324:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000326:	2301      	movs	r3, #1
 8000328:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800032a:	2300      	movs	r3, #0
 800032c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800032e:	2303      	movs	r3, #3
 8000330:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000332:	f107 0310 	add.w	r3, r7, #16
 8000336:	4619      	mov	r1, r3
 8000338:	4823      	ldr	r0, [pc, #140]	; (80003c8 <MX_GPIO_Init+0x174>)
 800033a:	f000 fb25 	bl	8000988 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC6 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 800033e:	f44f 7358 	mov.w	r3, #864	; 0x360
 8000342:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000344:	2301      	movs	r3, #1
 8000346:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000348:	2300      	movs	r3, #0
 800034a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800034c:	2303      	movs	r3, #3
 800034e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000350:	f107 0310 	add.w	r3, r7, #16
 8000354:	4619      	mov	r1, r3
 8000356:	481d      	ldr	r0, [pc, #116]	; (80003cc <MX_GPIO_Init+0x178>)
 8000358:	f000 fb16 	bl	8000988 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_11;
 800035c:	f640 0305 	movw	r3, #2053	; 0x805
 8000360:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000362:	2300      	movs	r3, #0
 8000364:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000366:	2300      	movs	r3, #0
 8000368:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800036a:	f107 0310 	add.w	r3, r7, #16
 800036e:	4619      	mov	r1, r3
 8000370:	4817      	ldr	r0, [pc, #92]	; (80003d0 <MX_GPIO_Init+0x17c>)
 8000372:	f000 fb09 	bl	8000988 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000376:	2380      	movs	r3, #128	; 0x80
 8000378:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800037a:	2300      	movs	r3, #0
 800037c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800037e:	2300      	movs	r3, #0
 8000380:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000382:	f107 0310 	add.w	r3, r7, #16
 8000386:	4619      	mov	r1, r3
 8000388:	4810      	ldr	r0, [pc, #64]	; (80003cc <MX_GPIO_Init+0x178>)
 800038a:	f000 fafd 	bl	8000988 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800038e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000392:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000394:	2301      	movs	r3, #1
 8000396:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000398:	2300      	movs	r3, #0
 800039a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800039c:	2303      	movs	r3, #3
 800039e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003a0:	f107 0310 	add.w	r3, r7, #16
 80003a4:	4619      	mov	r1, r3
 80003a6:	480a      	ldr	r0, [pc, #40]	; (80003d0 <MX_GPIO_Init+0x17c>)
 80003a8:	f000 faee 	bl	8000988 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80003ac:	2200      	movs	r2, #0
 80003ae:	2105      	movs	r1, #5
 80003b0:	2028      	movs	r0, #40	; 0x28
 80003b2:	f000 fabe 	bl	8000932 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80003b6:	2028      	movs	r0, #40	; 0x28
 80003b8:	f000 fad7 	bl	800096a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */

/* USER CODE END MX_GPIO_Init_2 */
}
 80003bc:	bf00      	nop
 80003be:	3720      	adds	r7, #32
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bd80      	pop	{r7, pc}
 80003c4:	40021000 	.word	0x40021000
 80003c8:	40010800 	.word	0x40010800
 80003cc:	40011000 	.word	0x40011000
 80003d0:	40010c00 	.word	0x40010c00
 80003d4:	10210000 	.word	0x10210000

080003d8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80003d8:	b480      	push	{r7}
 80003da:	b083      	sub	sp, #12
 80003dc:	af00      	add	r7, sp, #0
 80003de:	4603      	mov	r3, r0
 80003e0:	80fb      	strh	r3, [r7, #6]
  if(app_handle.ButtonState == 0) {
 80003e2:	4b09      	ldr	r3, [pc, #36]	; (8000408 <HAL_GPIO_EXTI_Callback+0x30>)
 80003e4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d104      	bne.n	80003f6 <HAL_GPIO_EXTI_Callback+0x1e>
	  app_handle.ButtonState = 1;
 80003ec:	4b06      	ldr	r3, [pc, #24]	; (8000408 <HAL_GPIO_EXTI_Callback+0x30>)
 80003ee:	2201      	movs	r2, #1
 80003f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  } else {
	  app_handle.ButtonState = 0;
  }
}
 80003f4:	e003      	b.n	80003fe <HAL_GPIO_EXTI_Callback+0x26>
	  app_handle.ButtonState = 0;
 80003f6:	4b04      	ldr	r3, [pc, #16]	; (8000408 <HAL_GPIO_EXTI_Callback+0x30>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
}
 80003fe:	bf00      	nop
 8000400:	370c      	adds	r7, #12
 8000402:	46bd      	mov	sp, r7
 8000404:	bc80      	pop	{r7}
 8000406:	4770      	bx	lr
 8000408:	200000c4 	.word	0x200000c4

0800040c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800041c:	d101      	bne.n	8000422 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800041e:	f000 f9b7 	bl	8000790 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000422:	bf00      	nop
 8000424:	3708      	adds	r7, #8
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}

0800042a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800042a:	b480      	push	{r7}
 800042c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800042e:	b672      	cpsid	i
}
 8000430:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000432:	e7fe      	b.n	8000432 <Error_Handler+0x8>

08000434 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b082      	sub	sp, #8
 8000438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800043a:	4b15      	ldr	r3, [pc, #84]	; (8000490 <HAL_MspInit+0x5c>)
 800043c:	699b      	ldr	r3, [r3, #24]
 800043e:	4a14      	ldr	r2, [pc, #80]	; (8000490 <HAL_MspInit+0x5c>)
 8000440:	f043 0301 	orr.w	r3, r3, #1
 8000444:	6193      	str	r3, [r2, #24]
 8000446:	4b12      	ldr	r3, [pc, #72]	; (8000490 <HAL_MspInit+0x5c>)
 8000448:	699b      	ldr	r3, [r3, #24]
 800044a:	f003 0301 	and.w	r3, r3, #1
 800044e:	607b      	str	r3, [r7, #4]
 8000450:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000452:	4b0f      	ldr	r3, [pc, #60]	; (8000490 <HAL_MspInit+0x5c>)
 8000454:	69db      	ldr	r3, [r3, #28]
 8000456:	4a0e      	ldr	r2, [pc, #56]	; (8000490 <HAL_MspInit+0x5c>)
 8000458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800045c:	61d3      	str	r3, [r2, #28]
 800045e:	4b0c      	ldr	r3, [pc, #48]	; (8000490 <HAL_MspInit+0x5c>)
 8000460:	69db      	ldr	r3, [r3, #28]
 8000462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000466:	603b      	str	r3, [r7, #0]
 8000468:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800046a:	2200      	movs	r2, #0
 800046c:	210f      	movs	r1, #15
 800046e:	f06f 0001 	mvn.w	r0, #1
 8000472:	f000 fa5e 	bl	8000932 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 5, 0);
 8000476:	2200      	movs	r2, #0
 8000478:	2105      	movs	r1, #5
 800047a:	2001      	movs	r0, #1
 800047c:	f000 fa59 	bl	8000932 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8000480:	2001      	movs	r0, #1
 8000482:	f000 fa72 	bl	800096a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000486:	bf00      	nop
 8000488:	3708      	adds	r7, #8
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}
 800048e:	bf00      	nop
 8000490:	40021000 	.word	0x40021000

08000494 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b088      	sub	sp, #32
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800049c:	f107 0310 	add.w	r3, r7, #16
 80004a0:	2200      	movs	r2, #0
 80004a2:	601a      	str	r2, [r3, #0]
 80004a4:	605a      	str	r2, [r3, #4]
 80004a6:	609a      	str	r2, [r3, #8]
 80004a8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	4a1b      	ldr	r2, [pc, #108]	; (800051c <HAL_UART_MspInit+0x88>)
 80004b0:	4293      	cmp	r3, r2
 80004b2:	d12f      	bne.n	8000514 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80004b4:	4b1a      	ldr	r3, [pc, #104]	; (8000520 <HAL_UART_MspInit+0x8c>)
 80004b6:	69db      	ldr	r3, [r3, #28]
 80004b8:	4a19      	ldr	r2, [pc, #100]	; (8000520 <HAL_UART_MspInit+0x8c>)
 80004ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004be:	61d3      	str	r3, [r2, #28]
 80004c0:	4b17      	ldr	r3, [pc, #92]	; (8000520 <HAL_UART_MspInit+0x8c>)
 80004c2:	69db      	ldr	r3, [r3, #28]
 80004c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004c8:	60fb      	str	r3, [r7, #12]
 80004ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004cc:	4b14      	ldr	r3, [pc, #80]	; (8000520 <HAL_UART_MspInit+0x8c>)
 80004ce:	699b      	ldr	r3, [r3, #24]
 80004d0:	4a13      	ldr	r2, [pc, #76]	; (8000520 <HAL_UART_MspInit+0x8c>)
 80004d2:	f043 0304 	orr.w	r3, r3, #4
 80004d6:	6193      	str	r3, [r2, #24]
 80004d8:	4b11      	ldr	r3, [pc, #68]	; (8000520 <HAL_UART_MspInit+0x8c>)
 80004da:	699b      	ldr	r3, [r3, #24]
 80004dc:	f003 0304 	and.w	r3, r3, #4
 80004e0:	60bb      	str	r3, [r7, #8]
 80004e2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin;
 80004e4:	2304      	movs	r3, #4
 80004e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004e8:	2302      	movs	r3, #2
 80004ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ec:	2302      	movs	r3, #2
 80004ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USART_TX_GPIO_Port, &GPIO_InitStruct);
 80004f0:	f107 0310 	add.w	r3, r7, #16
 80004f4:	4619      	mov	r1, r3
 80004f6:	480b      	ldr	r0, [pc, #44]	; (8000524 <HAL_UART_MspInit+0x90>)
 80004f8:	f000 fa46 	bl	8000988 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80004fc:	2308      	movs	r3, #8
 80004fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000500:	2300      	movs	r3, #0
 8000502:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000504:	2300      	movs	r3, #0
 8000506:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000508:	f107 0310 	add.w	r3, r7, #16
 800050c:	4619      	mov	r1, r3
 800050e:	4805      	ldr	r0, [pc, #20]	; (8000524 <HAL_UART_MspInit+0x90>)
 8000510:	f000 fa3a 	bl	8000988 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000514:	bf00      	nop
 8000516:	3720      	adds	r7, #32
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}
 800051c:	40004400 	.word	0x40004400
 8000520:	40021000 	.word	0x40021000
 8000524:	40010800 	.word	0x40010800

08000528 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b08e      	sub	sp, #56	; 0x38
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000530:	2300      	movs	r3, #0
 8000532:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000534:	2300      	movs	r3, #0
 8000536:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000538:	2300      	movs	r3, #0
 800053a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800053e:	4b34      	ldr	r3, [pc, #208]	; (8000610 <HAL_InitTick+0xe8>)
 8000540:	69db      	ldr	r3, [r3, #28]
 8000542:	4a33      	ldr	r2, [pc, #204]	; (8000610 <HAL_InitTick+0xe8>)
 8000544:	f043 0301 	orr.w	r3, r3, #1
 8000548:	61d3      	str	r3, [r2, #28]
 800054a:	4b31      	ldr	r3, [pc, #196]	; (8000610 <HAL_InitTick+0xe8>)
 800054c:	69db      	ldr	r3, [r3, #28]
 800054e:	f003 0301 	and.w	r3, r3, #1
 8000552:	60fb      	str	r3, [r7, #12]
 8000554:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000556:	f107 0210 	add.w	r2, r7, #16
 800055a:	f107 0314 	add.w	r3, r7, #20
 800055e:	4611      	mov	r1, r2
 8000560:	4618      	mov	r0, r3
 8000562:	f000 ffcf 	bl	8001504 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000566:	6a3b      	ldr	r3, [r7, #32]
 8000568:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800056a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800056c:	2b00      	cmp	r3, #0
 800056e:	d103      	bne.n	8000578 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000570:	f000 ffa0 	bl	80014b4 <HAL_RCC_GetPCLK1Freq>
 8000574:	6378      	str	r0, [r7, #52]	; 0x34
 8000576:	e004      	b.n	8000582 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000578:	f000 ff9c 	bl	80014b4 <HAL_RCC_GetPCLK1Freq>
 800057c:	4603      	mov	r3, r0
 800057e:	005b      	lsls	r3, r3, #1
 8000580:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000584:	4a23      	ldr	r2, [pc, #140]	; (8000614 <HAL_InitTick+0xec>)
 8000586:	fba2 2303 	umull	r2, r3, r2, r3
 800058a:	0c9b      	lsrs	r3, r3, #18
 800058c:	3b01      	subs	r3, #1
 800058e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000590:	4b21      	ldr	r3, [pc, #132]	; (8000618 <HAL_InitTick+0xf0>)
 8000592:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000596:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000598:	4b1f      	ldr	r3, [pc, #124]	; (8000618 <HAL_InitTick+0xf0>)
 800059a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800059e:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80005a0:	4a1d      	ldr	r2, [pc, #116]	; (8000618 <HAL_InitTick+0xf0>)
 80005a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005a4:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80005a6:	4b1c      	ldr	r3, [pc, #112]	; (8000618 <HAL_InitTick+0xf0>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005ac:	4b1a      	ldr	r3, [pc, #104]	; (8000618 <HAL_InitTick+0xf0>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005b2:	4b19      	ldr	r3, [pc, #100]	; (8000618 <HAL_InitTick+0xf0>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 80005b8:	4817      	ldr	r0, [pc, #92]	; (8000618 <HAL_InitTick+0xf0>)
 80005ba:	f000 fff1 	bl	80015a0 <HAL_TIM_Base_Init>
 80005be:	4603      	mov	r3, r0
 80005c0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80005c4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d11b      	bne.n	8000604 <HAL_InitTick+0xdc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 80005cc:	4812      	ldr	r0, [pc, #72]	; (8000618 <HAL_InitTick+0xf0>)
 80005ce:	f001 f83f 	bl	8001650 <HAL_TIM_Base_Start_IT>
 80005d2:	4603      	mov	r3, r0
 80005d4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80005d8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d111      	bne.n	8000604 <HAL_InitTick+0xdc>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80005e0:	201c      	movs	r0, #28
 80005e2:	f000 f9c2 	bl	800096a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	2b0f      	cmp	r3, #15
 80005ea:	d808      	bhi.n	80005fe <HAL_InitTick+0xd6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80005ec:	2200      	movs	r2, #0
 80005ee:	6879      	ldr	r1, [r7, #4]
 80005f0:	201c      	movs	r0, #28
 80005f2:	f000 f99e 	bl	8000932 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80005f6:	4a09      	ldr	r2, [pc, #36]	; (800061c <HAL_InitTick+0xf4>)
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	6013      	str	r3, [r2, #0]
 80005fc:	e002      	b.n	8000604 <HAL_InitTick+0xdc>
      }
      else
      {
        status = HAL_ERROR;
 80005fe:	2301      	movs	r3, #1
 8000600:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000604:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000608:	4618      	mov	r0, r3
 800060a:	3738      	adds	r7, #56	; 0x38
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	40021000 	.word	0x40021000
 8000614:	431bde83 	.word	0x431bde83
 8000618:	20000148 	.word	0x20000148
 800061c:	20000004 	.word	0x20000004

08000620 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000624:	e7fe      	b.n	8000624 <NMI_Handler+0x4>

08000626 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000626:	b480      	push	{r7}
 8000628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800062a:	e7fe      	b.n	800062a <HardFault_Handler+0x4>

0800062c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000630:	e7fe      	b.n	8000630 <MemManage_Handler+0x4>

08000632 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000632:	b480      	push	{r7}
 8000634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000636:	e7fe      	b.n	8000636 <BusFault_Handler+0x4>

08000638 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800063c:	e7fe      	b.n	800063c <UsageFault_Handler+0x4>

0800063e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800063e:	b480      	push	{r7}
 8000640:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000642:	bf00      	nop
 8000644:	46bd      	mov	sp, r7
 8000646:	bc80      	pop	{r7}
 8000648:	4770      	bx	lr

0800064a <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 800064a:	b580      	push	{r7, lr}
 800064c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 800064e:	f000 fb4f 	bl	8000cf0 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8000652:	bf00      	nop
 8000654:	bd80      	pop	{r7, pc}
	...

08000658 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800065c:	4802      	ldr	r0, [pc, #8]	; (8000668 <TIM2_IRQHandler+0x10>)
 800065e:	f001 f849 	bl	80016f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000662:	bf00      	nop
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	20000148 	.word	0x20000148

0800066c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_Pin);
 8000670:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000674:	f000 fb24 	bl	8000cc0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000678:	bf00      	nop
 800067a:	bd80      	pop	{r7, pc}

0800067c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000680:	bf00      	nop
 8000682:	46bd      	mov	sp, r7
 8000684:	bc80      	pop	{r7}
 8000686:	4770      	bx	lr

08000688 <uart_tx_task>:
#include "queue.h"
#include "task.h"

static handler_uart_t *h;

void uart_tx_task( void * handle ) {
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]


	while(1) {
		//xQueueReceive(h->tx, buf,  portMAX_DELAY);
		//HAL_UART_Transmit(h->tx, buf,  sizeof(uint8_t), 10);
		HAL_UART_Transmit(h->huart, (uint8_t*)"Hello world!\n", 13, 1000);
 8000690:	4b06      	ldr	r3, [pc, #24]	; (80006ac <uart_tx_task+0x24>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	6898      	ldr	r0, [r3, #8]
 8000696:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800069a:	220d      	movs	r2, #13
 800069c:	4904      	ldr	r1, [pc, #16]	; (80006b0 <uart_tx_task+0x28>)
 800069e:	f001 fa19 	bl	8001ad4 <HAL_UART_Transmit>
		vTaskDelay(1000);
 80006a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006a6:	f002 fb49 	bl	8002d3c <vTaskDelay>
		HAL_UART_Transmit(h->huart, (uint8_t*)"Hello world!\n", 13, 1000);
 80006aa:	e7f1      	b.n	8000690 <uart_tx_task+0x8>
 80006ac:	20000190 	.word	0x20000190
 80006b0:	080047c0 	.word	0x080047c0

080006b4 <task_create_uart_tx>:
	}
}

void task_create_uart_tx(handler_uart_t *handle) {
 80006b4:	b590      	push	{r4, r7, lr}
 80006b6:	b087      	sub	sp, #28
 80006b8:	af02      	add	r7, sp, #8
 80006ba:	6078      	str	r0, [r7, #4]

	h = handle;
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	4a13      	ldr	r2, [pc, #76]	; (800070c <task_create_uart_tx+0x58>)
 80006c0:	6013      	str	r3, [r2, #0]
	TaskHandle_t xHandle = NULL;
 80006c2:	2300      	movs	r3, #0
 80006c4:	60fb      	str	r3, [r7, #12]

	h->xQueue_tx = xQueueCreate( 10, sizeof( uint8_t ) );
 80006c6:	4b11      	ldr	r3, [pc, #68]	; (800070c <task_create_uart_tx+0x58>)
 80006c8:	681c      	ldr	r4, [r3, #0]
 80006ca:	2200      	movs	r2, #0
 80006cc:	2101      	movs	r1, #1
 80006ce:	200a      	movs	r0, #10
 80006d0:	f001 fd41 	bl	8002156 <xQueueGenericCreate>
 80006d4:	4603      	mov	r3, r0
 80006d6:	6023      	str	r3, [r4, #0]
	h->xQueue_rx = xQueueCreate( 10, sizeof( uint8_t ) );
 80006d8:	4b0c      	ldr	r3, [pc, #48]	; (800070c <task_create_uart_tx+0x58>)
 80006da:	681c      	ldr	r4, [r3, #0]
 80006dc:	2200      	movs	r2, #0
 80006de:	2101      	movs	r1, #1
 80006e0:	200a      	movs	r0, #10
 80006e2:	f001 fd38 	bl	8002156 <xQueueGenericCreate>
 80006e6:	4603      	mov	r3, r0
 80006e8:	6063      	str	r3, [r4, #4]
	xTaskCreate( uart_tx_task, "NAME", 256, &handle, 1, &xHandle);
 80006ea:	1d3a      	adds	r2, r7, #4
 80006ec:	f107 030c 	add.w	r3, r7, #12
 80006f0:	9301      	str	r3, [sp, #4]
 80006f2:	2301      	movs	r3, #1
 80006f4:	9300      	str	r3, [sp, #0]
 80006f6:	4613      	mov	r3, r2
 80006f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006fc:	4904      	ldr	r1, [pc, #16]	; (8000710 <task_create_uart_tx+0x5c>)
 80006fe:	4805      	ldr	r0, [pc, #20]	; (8000714 <task_create_uart_tx+0x60>)
 8000700:	f002 f9c8 	bl	8002a94 <xTaskCreate>
}
 8000704:	bf00      	nop
 8000706:	3714      	adds	r7, #20
 8000708:	46bd      	mov	sp, r7
 800070a:	bd90      	pop	{r4, r7, pc}
 800070c:	20000190 	.word	0x20000190
 8000710:	080047d0 	.word	0x080047d0
 8000714:	08000689 	.word	0x08000689

08000718 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000718:	f7ff ffb0 	bl	800067c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800071c:	480b      	ldr	r0, [pc, #44]	; (800074c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800071e:	490c      	ldr	r1, [pc, #48]	; (8000750 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000720:	4a0c      	ldr	r2, [pc, #48]	; (8000754 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000722:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000724:	e002      	b.n	800072c <LoopCopyDataInit>

08000726 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000726:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000728:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800072a:	3304      	adds	r3, #4

0800072c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800072c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800072e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000730:	d3f9      	bcc.n	8000726 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000732:	4a09      	ldr	r2, [pc, #36]	; (8000758 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000734:	4c09      	ldr	r4, [pc, #36]	; (800075c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000736:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000738:	e001      	b.n	800073e <LoopFillZerobss>

0800073a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800073a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800073c:	3204      	adds	r2, #4

0800073e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800073e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000740:	d3fb      	bcc.n	800073a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000742:	f003 ffa9 	bl	8004698 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000746:	f7ff fd03 	bl	8000150 <main>
  bx lr
 800074a:	4770      	bx	lr
  ldr r0, =_sdata
 800074c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000750:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000754:	08004824 	.word	0x08004824
  ldr r2, =_sbss
 8000758:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 800075c:	20001cb4 	.word	0x20001cb4

08000760 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000760:	e7fe      	b.n	8000760 <ADC1_2_IRQHandler>
	...

08000764 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000768:	4b08      	ldr	r3, [pc, #32]	; (800078c <HAL_Init+0x28>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a07      	ldr	r2, [pc, #28]	; (800078c <HAL_Init+0x28>)
 800076e:	f043 0310 	orr.w	r3, r3, #16
 8000772:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000774:	2003      	movs	r0, #3
 8000776:	f000 f8d1 	bl	800091c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800077a:	200f      	movs	r0, #15
 800077c:	f7ff fed4 	bl	8000528 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000780:	f7ff fe58 	bl	8000434 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000784:	2300      	movs	r3, #0
}
 8000786:	4618      	mov	r0, r3
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40022000 	.word	0x40022000

08000790 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000794:	4b05      	ldr	r3, [pc, #20]	; (80007ac <HAL_IncTick+0x1c>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	461a      	mov	r2, r3
 800079a:	4b05      	ldr	r3, [pc, #20]	; (80007b0 <HAL_IncTick+0x20>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	4413      	add	r3, r2
 80007a0:	4a03      	ldr	r2, [pc, #12]	; (80007b0 <HAL_IncTick+0x20>)
 80007a2:	6013      	str	r3, [r2, #0]
}
 80007a4:	bf00      	nop
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bc80      	pop	{r7}
 80007aa:	4770      	bx	lr
 80007ac:	20000008 	.word	0x20000008
 80007b0:	20000194 	.word	0x20000194

080007b4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  return uwTick;
 80007b8:	4b02      	ldr	r3, [pc, #8]	; (80007c4 <HAL_GetTick+0x10>)
 80007ba:	681b      	ldr	r3, [r3, #0]
}
 80007bc:	4618      	mov	r0, r3
 80007be:	46bd      	mov	sp, r7
 80007c0:	bc80      	pop	{r7}
 80007c2:	4770      	bx	lr
 80007c4:	20000194 	.word	0x20000194

080007c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b085      	sub	sp, #20
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	f003 0307 	and.w	r3, r3, #7
 80007d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007d8:	4b0c      	ldr	r3, [pc, #48]	; (800080c <__NVIC_SetPriorityGrouping+0x44>)
 80007da:	68db      	ldr	r3, [r3, #12]
 80007dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007de:	68ba      	ldr	r2, [r7, #8]
 80007e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007e4:	4013      	ands	r3, r2
 80007e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007ec:	68bb      	ldr	r3, [r7, #8]
 80007ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007fa:	4a04      	ldr	r2, [pc, #16]	; (800080c <__NVIC_SetPriorityGrouping+0x44>)
 80007fc:	68bb      	ldr	r3, [r7, #8]
 80007fe:	60d3      	str	r3, [r2, #12]
}
 8000800:	bf00      	nop
 8000802:	3714      	adds	r7, #20
 8000804:	46bd      	mov	sp, r7
 8000806:	bc80      	pop	{r7}
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	e000ed00 	.word	0xe000ed00

08000810 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000814:	4b04      	ldr	r3, [pc, #16]	; (8000828 <__NVIC_GetPriorityGrouping+0x18>)
 8000816:	68db      	ldr	r3, [r3, #12]
 8000818:	0a1b      	lsrs	r3, r3, #8
 800081a:	f003 0307 	and.w	r3, r3, #7
}
 800081e:	4618      	mov	r0, r3
 8000820:	46bd      	mov	sp, r7
 8000822:	bc80      	pop	{r7}
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop
 8000828:	e000ed00 	.word	0xe000ed00

0800082c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	4603      	mov	r3, r0
 8000834:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800083a:	2b00      	cmp	r3, #0
 800083c:	db0b      	blt.n	8000856 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800083e:	79fb      	ldrb	r3, [r7, #7]
 8000840:	f003 021f 	and.w	r2, r3, #31
 8000844:	4906      	ldr	r1, [pc, #24]	; (8000860 <__NVIC_EnableIRQ+0x34>)
 8000846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800084a:	095b      	lsrs	r3, r3, #5
 800084c:	2001      	movs	r0, #1
 800084e:	fa00 f202 	lsl.w	r2, r0, r2
 8000852:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000856:	bf00      	nop
 8000858:	370c      	adds	r7, #12
 800085a:	46bd      	mov	sp, r7
 800085c:	bc80      	pop	{r7}
 800085e:	4770      	bx	lr
 8000860:	e000e100 	.word	0xe000e100

08000864 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000864:	b480      	push	{r7}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0
 800086a:	4603      	mov	r3, r0
 800086c:	6039      	str	r1, [r7, #0]
 800086e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000870:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000874:	2b00      	cmp	r3, #0
 8000876:	db0a      	blt.n	800088e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	b2da      	uxtb	r2, r3
 800087c:	490c      	ldr	r1, [pc, #48]	; (80008b0 <__NVIC_SetPriority+0x4c>)
 800087e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000882:	0112      	lsls	r2, r2, #4
 8000884:	b2d2      	uxtb	r2, r2
 8000886:	440b      	add	r3, r1
 8000888:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800088c:	e00a      	b.n	80008a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	b2da      	uxtb	r2, r3
 8000892:	4908      	ldr	r1, [pc, #32]	; (80008b4 <__NVIC_SetPriority+0x50>)
 8000894:	79fb      	ldrb	r3, [r7, #7]
 8000896:	f003 030f 	and.w	r3, r3, #15
 800089a:	3b04      	subs	r3, #4
 800089c:	0112      	lsls	r2, r2, #4
 800089e:	b2d2      	uxtb	r2, r2
 80008a0:	440b      	add	r3, r1
 80008a2:	761a      	strb	r2, [r3, #24]
}
 80008a4:	bf00      	nop
 80008a6:	370c      	adds	r7, #12
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bc80      	pop	{r7}
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	e000e100 	.word	0xe000e100
 80008b4:	e000ed00 	.word	0xe000ed00

080008b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b089      	sub	sp, #36	; 0x24
 80008bc:	af00      	add	r7, sp, #0
 80008be:	60f8      	str	r0, [r7, #12]
 80008c0:	60b9      	str	r1, [r7, #8]
 80008c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	f003 0307 	and.w	r3, r3, #7
 80008ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008cc:	69fb      	ldr	r3, [r7, #28]
 80008ce:	f1c3 0307 	rsb	r3, r3, #7
 80008d2:	2b04      	cmp	r3, #4
 80008d4:	bf28      	it	cs
 80008d6:	2304      	movcs	r3, #4
 80008d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008da:	69fb      	ldr	r3, [r7, #28]
 80008dc:	3304      	adds	r3, #4
 80008de:	2b06      	cmp	r3, #6
 80008e0:	d902      	bls.n	80008e8 <NVIC_EncodePriority+0x30>
 80008e2:	69fb      	ldr	r3, [r7, #28]
 80008e4:	3b03      	subs	r3, #3
 80008e6:	e000      	b.n	80008ea <NVIC_EncodePriority+0x32>
 80008e8:	2300      	movs	r3, #0
 80008ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008ec:	f04f 32ff 	mov.w	r2, #4294967295
 80008f0:	69bb      	ldr	r3, [r7, #24]
 80008f2:	fa02 f303 	lsl.w	r3, r2, r3
 80008f6:	43da      	mvns	r2, r3
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	401a      	ands	r2, r3
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000900:	f04f 31ff 	mov.w	r1, #4294967295
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	fa01 f303 	lsl.w	r3, r1, r3
 800090a:	43d9      	mvns	r1, r3
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000910:	4313      	orrs	r3, r2
         );
}
 8000912:	4618      	mov	r0, r3
 8000914:	3724      	adds	r7, #36	; 0x24
 8000916:	46bd      	mov	sp, r7
 8000918:	bc80      	pop	{r7}
 800091a:	4770      	bx	lr

0800091c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000924:	6878      	ldr	r0, [r7, #4]
 8000926:	f7ff ff4f 	bl	80007c8 <__NVIC_SetPriorityGrouping>
}
 800092a:	bf00      	nop
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}

08000932 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000932:	b580      	push	{r7, lr}
 8000934:	b086      	sub	sp, #24
 8000936:	af00      	add	r7, sp, #0
 8000938:	4603      	mov	r3, r0
 800093a:	60b9      	str	r1, [r7, #8]
 800093c:	607a      	str	r2, [r7, #4]
 800093e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000940:	2300      	movs	r3, #0
 8000942:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000944:	f7ff ff64 	bl	8000810 <__NVIC_GetPriorityGrouping>
 8000948:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800094a:	687a      	ldr	r2, [r7, #4]
 800094c:	68b9      	ldr	r1, [r7, #8]
 800094e:	6978      	ldr	r0, [r7, #20]
 8000950:	f7ff ffb2 	bl	80008b8 <NVIC_EncodePriority>
 8000954:	4602      	mov	r2, r0
 8000956:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800095a:	4611      	mov	r1, r2
 800095c:	4618      	mov	r0, r3
 800095e:	f7ff ff81 	bl	8000864 <__NVIC_SetPriority>
}
 8000962:	bf00      	nop
 8000964:	3718      	adds	r7, #24
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}

0800096a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800096a:	b580      	push	{r7, lr}
 800096c:	b082      	sub	sp, #8
 800096e:	af00      	add	r7, sp, #0
 8000970:	4603      	mov	r3, r0
 8000972:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000978:	4618      	mov	r0, r3
 800097a:	f7ff ff57 	bl	800082c <__NVIC_EnableIRQ>
}
 800097e:	bf00      	nop
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
	...

08000988 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000988:	b480      	push	{r7}
 800098a:	b08b      	sub	sp, #44	; 0x2c
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
 8000990:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000992:	2300      	movs	r3, #0
 8000994:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000996:	2300      	movs	r3, #0
 8000998:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800099a:	e169      	b.n	8000c70 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800099c:	2201      	movs	r2, #1
 800099e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a0:	fa02 f303 	lsl.w	r3, r2, r3
 80009a4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	69fa      	ldr	r2, [r7, #28]
 80009ac:	4013      	ands	r3, r2
 80009ae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80009b0:	69ba      	ldr	r2, [r7, #24]
 80009b2:	69fb      	ldr	r3, [r7, #28]
 80009b4:	429a      	cmp	r2, r3
 80009b6:	f040 8158 	bne.w	8000c6a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	685b      	ldr	r3, [r3, #4]
 80009be:	4a9a      	ldr	r2, [pc, #616]	; (8000c28 <HAL_GPIO_Init+0x2a0>)
 80009c0:	4293      	cmp	r3, r2
 80009c2:	d05e      	beq.n	8000a82 <HAL_GPIO_Init+0xfa>
 80009c4:	4a98      	ldr	r2, [pc, #608]	; (8000c28 <HAL_GPIO_Init+0x2a0>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d875      	bhi.n	8000ab6 <HAL_GPIO_Init+0x12e>
 80009ca:	4a98      	ldr	r2, [pc, #608]	; (8000c2c <HAL_GPIO_Init+0x2a4>)
 80009cc:	4293      	cmp	r3, r2
 80009ce:	d058      	beq.n	8000a82 <HAL_GPIO_Init+0xfa>
 80009d0:	4a96      	ldr	r2, [pc, #600]	; (8000c2c <HAL_GPIO_Init+0x2a4>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d86f      	bhi.n	8000ab6 <HAL_GPIO_Init+0x12e>
 80009d6:	4a96      	ldr	r2, [pc, #600]	; (8000c30 <HAL_GPIO_Init+0x2a8>)
 80009d8:	4293      	cmp	r3, r2
 80009da:	d052      	beq.n	8000a82 <HAL_GPIO_Init+0xfa>
 80009dc:	4a94      	ldr	r2, [pc, #592]	; (8000c30 <HAL_GPIO_Init+0x2a8>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d869      	bhi.n	8000ab6 <HAL_GPIO_Init+0x12e>
 80009e2:	4a94      	ldr	r2, [pc, #592]	; (8000c34 <HAL_GPIO_Init+0x2ac>)
 80009e4:	4293      	cmp	r3, r2
 80009e6:	d04c      	beq.n	8000a82 <HAL_GPIO_Init+0xfa>
 80009e8:	4a92      	ldr	r2, [pc, #584]	; (8000c34 <HAL_GPIO_Init+0x2ac>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d863      	bhi.n	8000ab6 <HAL_GPIO_Init+0x12e>
 80009ee:	4a92      	ldr	r2, [pc, #584]	; (8000c38 <HAL_GPIO_Init+0x2b0>)
 80009f0:	4293      	cmp	r3, r2
 80009f2:	d046      	beq.n	8000a82 <HAL_GPIO_Init+0xfa>
 80009f4:	4a90      	ldr	r2, [pc, #576]	; (8000c38 <HAL_GPIO_Init+0x2b0>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d85d      	bhi.n	8000ab6 <HAL_GPIO_Init+0x12e>
 80009fa:	2b12      	cmp	r3, #18
 80009fc:	d82a      	bhi.n	8000a54 <HAL_GPIO_Init+0xcc>
 80009fe:	2b12      	cmp	r3, #18
 8000a00:	d859      	bhi.n	8000ab6 <HAL_GPIO_Init+0x12e>
 8000a02:	a201      	add	r2, pc, #4	; (adr r2, 8000a08 <HAL_GPIO_Init+0x80>)
 8000a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a08:	08000a83 	.word	0x08000a83
 8000a0c:	08000a5d 	.word	0x08000a5d
 8000a10:	08000a6f 	.word	0x08000a6f
 8000a14:	08000ab1 	.word	0x08000ab1
 8000a18:	08000ab7 	.word	0x08000ab7
 8000a1c:	08000ab7 	.word	0x08000ab7
 8000a20:	08000ab7 	.word	0x08000ab7
 8000a24:	08000ab7 	.word	0x08000ab7
 8000a28:	08000ab7 	.word	0x08000ab7
 8000a2c:	08000ab7 	.word	0x08000ab7
 8000a30:	08000ab7 	.word	0x08000ab7
 8000a34:	08000ab7 	.word	0x08000ab7
 8000a38:	08000ab7 	.word	0x08000ab7
 8000a3c:	08000ab7 	.word	0x08000ab7
 8000a40:	08000ab7 	.word	0x08000ab7
 8000a44:	08000ab7 	.word	0x08000ab7
 8000a48:	08000ab7 	.word	0x08000ab7
 8000a4c:	08000a65 	.word	0x08000a65
 8000a50:	08000a79 	.word	0x08000a79
 8000a54:	4a79      	ldr	r2, [pc, #484]	; (8000c3c <HAL_GPIO_Init+0x2b4>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d013      	beq.n	8000a82 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a5a:	e02c      	b.n	8000ab6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	68db      	ldr	r3, [r3, #12]
 8000a60:	623b      	str	r3, [r7, #32]
          break;
 8000a62:	e029      	b.n	8000ab8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	68db      	ldr	r3, [r3, #12]
 8000a68:	3304      	adds	r3, #4
 8000a6a:	623b      	str	r3, [r7, #32]
          break;
 8000a6c:	e024      	b.n	8000ab8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	68db      	ldr	r3, [r3, #12]
 8000a72:	3308      	adds	r3, #8
 8000a74:	623b      	str	r3, [r7, #32]
          break;
 8000a76:	e01f      	b.n	8000ab8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	68db      	ldr	r3, [r3, #12]
 8000a7c:	330c      	adds	r3, #12
 8000a7e:	623b      	str	r3, [r7, #32]
          break;
 8000a80:	e01a      	b.n	8000ab8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	689b      	ldr	r3, [r3, #8]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d102      	bne.n	8000a90 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a8a:	2304      	movs	r3, #4
 8000a8c:	623b      	str	r3, [r7, #32]
          break;
 8000a8e:	e013      	b.n	8000ab8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	689b      	ldr	r3, [r3, #8]
 8000a94:	2b01      	cmp	r3, #1
 8000a96:	d105      	bne.n	8000aa4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a98:	2308      	movs	r3, #8
 8000a9a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	69fa      	ldr	r2, [r7, #28]
 8000aa0:	611a      	str	r2, [r3, #16]
          break;
 8000aa2:	e009      	b.n	8000ab8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000aa4:	2308      	movs	r3, #8
 8000aa6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	69fa      	ldr	r2, [r7, #28]
 8000aac:	615a      	str	r2, [r3, #20]
          break;
 8000aae:	e003      	b.n	8000ab8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	623b      	str	r3, [r7, #32]
          break;
 8000ab4:	e000      	b.n	8000ab8 <HAL_GPIO_Init+0x130>
          break;
 8000ab6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ab8:	69bb      	ldr	r3, [r7, #24]
 8000aba:	2bff      	cmp	r3, #255	; 0xff
 8000abc:	d801      	bhi.n	8000ac2 <HAL_GPIO_Init+0x13a>
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	e001      	b.n	8000ac6 <HAL_GPIO_Init+0x13e>
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	3304      	adds	r3, #4
 8000ac6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ac8:	69bb      	ldr	r3, [r7, #24]
 8000aca:	2bff      	cmp	r3, #255	; 0xff
 8000acc:	d802      	bhi.n	8000ad4 <HAL_GPIO_Init+0x14c>
 8000ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ad0:	009b      	lsls	r3, r3, #2
 8000ad2:	e002      	b.n	8000ada <HAL_GPIO_Init+0x152>
 8000ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ad6:	3b08      	subs	r3, #8
 8000ad8:	009b      	lsls	r3, r3, #2
 8000ada:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	210f      	movs	r1, #15
 8000ae2:	693b      	ldr	r3, [r7, #16]
 8000ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae8:	43db      	mvns	r3, r3
 8000aea:	401a      	ands	r2, r3
 8000aec:	6a39      	ldr	r1, [r7, #32]
 8000aee:	693b      	ldr	r3, [r7, #16]
 8000af0:	fa01 f303 	lsl.w	r3, r1, r3
 8000af4:	431a      	orrs	r2, r3
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	f000 80b1 	beq.w	8000c6a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b08:	4b4d      	ldr	r3, [pc, #308]	; (8000c40 <HAL_GPIO_Init+0x2b8>)
 8000b0a:	699b      	ldr	r3, [r3, #24]
 8000b0c:	4a4c      	ldr	r2, [pc, #304]	; (8000c40 <HAL_GPIO_Init+0x2b8>)
 8000b0e:	f043 0301 	orr.w	r3, r3, #1
 8000b12:	6193      	str	r3, [r2, #24]
 8000b14:	4b4a      	ldr	r3, [pc, #296]	; (8000c40 <HAL_GPIO_Init+0x2b8>)
 8000b16:	699b      	ldr	r3, [r3, #24]
 8000b18:	f003 0301 	and.w	r3, r3, #1
 8000b1c:	60bb      	str	r3, [r7, #8]
 8000b1e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b20:	4a48      	ldr	r2, [pc, #288]	; (8000c44 <HAL_GPIO_Init+0x2bc>)
 8000b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b24:	089b      	lsrs	r3, r3, #2
 8000b26:	3302      	adds	r3, #2
 8000b28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b2c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b30:	f003 0303 	and.w	r3, r3, #3
 8000b34:	009b      	lsls	r3, r3, #2
 8000b36:	220f      	movs	r2, #15
 8000b38:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3c:	43db      	mvns	r3, r3
 8000b3e:	68fa      	ldr	r2, [r7, #12]
 8000b40:	4013      	ands	r3, r2
 8000b42:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a40      	ldr	r2, [pc, #256]	; (8000c48 <HAL_GPIO_Init+0x2c0>)
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d013      	beq.n	8000b74 <HAL_GPIO_Init+0x1ec>
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	4a3f      	ldr	r2, [pc, #252]	; (8000c4c <HAL_GPIO_Init+0x2c4>)
 8000b50:	4293      	cmp	r3, r2
 8000b52:	d00d      	beq.n	8000b70 <HAL_GPIO_Init+0x1e8>
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	4a3e      	ldr	r2, [pc, #248]	; (8000c50 <HAL_GPIO_Init+0x2c8>)
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d007      	beq.n	8000b6c <HAL_GPIO_Init+0x1e4>
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	4a3d      	ldr	r2, [pc, #244]	; (8000c54 <HAL_GPIO_Init+0x2cc>)
 8000b60:	4293      	cmp	r3, r2
 8000b62:	d101      	bne.n	8000b68 <HAL_GPIO_Init+0x1e0>
 8000b64:	2303      	movs	r3, #3
 8000b66:	e006      	b.n	8000b76 <HAL_GPIO_Init+0x1ee>
 8000b68:	2304      	movs	r3, #4
 8000b6a:	e004      	b.n	8000b76 <HAL_GPIO_Init+0x1ee>
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	e002      	b.n	8000b76 <HAL_GPIO_Init+0x1ee>
 8000b70:	2301      	movs	r3, #1
 8000b72:	e000      	b.n	8000b76 <HAL_GPIO_Init+0x1ee>
 8000b74:	2300      	movs	r3, #0
 8000b76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b78:	f002 0203 	and.w	r2, r2, #3
 8000b7c:	0092      	lsls	r2, r2, #2
 8000b7e:	4093      	lsls	r3, r2
 8000b80:	68fa      	ldr	r2, [r7, #12]
 8000b82:	4313      	orrs	r3, r2
 8000b84:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b86:	492f      	ldr	r1, [pc, #188]	; (8000c44 <HAL_GPIO_Init+0x2bc>)
 8000b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b8a:	089b      	lsrs	r3, r3, #2
 8000b8c:	3302      	adds	r3, #2
 8000b8e:	68fa      	ldr	r2, [r7, #12]
 8000b90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d006      	beq.n	8000bae <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ba0:	4b2d      	ldr	r3, [pc, #180]	; (8000c58 <HAL_GPIO_Init+0x2d0>)
 8000ba2:	689a      	ldr	r2, [r3, #8]
 8000ba4:	492c      	ldr	r1, [pc, #176]	; (8000c58 <HAL_GPIO_Init+0x2d0>)
 8000ba6:	69bb      	ldr	r3, [r7, #24]
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	608b      	str	r3, [r1, #8]
 8000bac:	e006      	b.n	8000bbc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000bae:	4b2a      	ldr	r3, [pc, #168]	; (8000c58 <HAL_GPIO_Init+0x2d0>)
 8000bb0:	689a      	ldr	r2, [r3, #8]
 8000bb2:	69bb      	ldr	r3, [r7, #24]
 8000bb4:	43db      	mvns	r3, r3
 8000bb6:	4928      	ldr	r1, [pc, #160]	; (8000c58 <HAL_GPIO_Init+0x2d0>)
 8000bb8:	4013      	ands	r3, r2
 8000bba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d006      	beq.n	8000bd6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000bc8:	4b23      	ldr	r3, [pc, #140]	; (8000c58 <HAL_GPIO_Init+0x2d0>)
 8000bca:	68da      	ldr	r2, [r3, #12]
 8000bcc:	4922      	ldr	r1, [pc, #136]	; (8000c58 <HAL_GPIO_Init+0x2d0>)
 8000bce:	69bb      	ldr	r3, [r7, #24]
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	60cb      	str	r3, [r1, #12]
 8000bd4:	e006      	b.n	8000be4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000bd6:	4b20      	ldr	r3, [pc, #128]	; (8000c58 <HAL_GPIO_Init+0x2d0>)
 8000bd8:	68da      	ldr	r2, [r3, #12]
 8000bda:	69bb      	ldr	r3, [r7, #24]
 8000bdc:	43db      	mvns	r3, r3
 8000bde:	491e      	ldr	r1, [pc, #120]	; (8000c58 <HAL_GPIO_Init+0x2d0>)
 8000be0:	4013      	ands	r3, r2
 8000be2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d006      	beq.n	8000bfe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000bf0:	4b19      	ldr	r3, [pc, #100]	; (8000c58 <HAL_GPIO_Init+0x2d0>)
 8000bf2:	685a      	ldr	r2, [r3, #4]
 8000bf4:	4918      	ldr	r1, [pc, #96]	; (8000c58 <HAL_GPIO_Init+0x2d0>)
 8000bf6:	69bb      	ldr	r3, [r7, #24]
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	604b      	str	r3, [r1, #4]
 8000bfc:	e006      	b.n	8000c0c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000bfe:	4b16      	ldr	r3, [pc, #88]	; (8000c58 <HAL_GPIO_Init+0x2d0>)
 8000c00:	685a      	ldr	r2, [r3, #4]
 8000c02:	69bb      	ldr	r3, [r7, #24]
 8000c04:	43db      	mvns	r3, r3
 8000c06:	4914      	ldr	r1, [pc, #80]	; (8000c58 <HAL_GPIO_Init+0x2d0>)
 8000c08:	4013      	ands	r3, r2
 8000c0a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d021      	beq.n	8000c5c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c18:	4b0f      	ldr	r3, [pc, #60]	; (8000c58 <HAL_GPIO_Init+0x2d0>)
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	490e      	ldr	r1, [pc, #56]	; (8000c58 <HAL_GPIO_Init+0x2d0>)
 8000c1e:	69bb      	ldr	r3, [r7, #24]
 8000c20:	4313      	orrs	r3, r2
 8000c22:	600b      	str	r3, [r1, #0]
 8000c24:	e021      	b.n	8000c6a <HAL_GPIO_Init+0x2e2>
 8000c26:	bf00      	nop
 8000c28:	10320000 	.word	0x10320000
 8000c2c:	10310000 	.word	0x10310000
 8000c30:	10220000 	.word	0x10220000
 8000c34:	10210000 	.word	0x10210000
 8000c38:	10120000 	.word	0x10120000
 8000c3c:	10110000 	.word	0x10110000
 8000c40:	40021000 	.word	0x40021000
 8000c44:	40010000 	.word	0x40010000
 8000c48:	40010800 	.word	0x40010800
 8000c4c:	40010c00 	.word	0x40010c00
 8000c50:	40011000 	.word	0x40011000
 8000c54:	40011400 	.word	0x40011400
 8000c58:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c5c:	4b0b      	ldr	r3, [pc, #44]	; (8000c8c <HAL_GPIO_Init+0x304>)
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	69bb      	ldr	r3, [r7, #24]
 8000c62:	43db      	mvns	r3, r3
 8000c64:	4909      	ldr	r1, [pc, #36]	; (8000c8c <HAL_GPIO_Init+0x304>)
 8000c66:	4013      	ands	r3, r2
 8000c68:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c76:	fa22 f303 	lsr.w	r3, r2, r3
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	f47f ae8e 	bne.w	800099c <HAL_GPIO_Init+0x14>
  }
}
 8000c80:	bf00      	nop
 8000c82:	bf00      	nop
 8000c84:	372c      	adds	r7, #44	; 0x2c
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bc80      	pop	{r7}
 8000c8a:	4770      	bx	lr
 8000c8c:	40010400 	.word	0x40010400

08000c90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
 8000c98:	460b      	mov	r3, r1
 8000c9a:	807b      	strh	r3, [r7, #2]
 8000c9c:	4613      	mov	r3, r2
 8000c9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ca0:	787b      	ldrb	r3, [r7, #1]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d003      	beq.n	8000cae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ca6:	887a      	ldrh	r2, [r7, #2]
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000cac:	e003      	b.n	8000cb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000cae:	887b      	ldrh	r3, [r7, #2]
 8000cb0:	041a      	lsls	r2, r3, #16
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	611a      	str	r2, [r3, #16]
}
 8000cb6:	bf00      	nop
 8000cb8:	370c      	adds	r7, #12
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bc80      	pop	{r7}
 8000cbe:	4770      	bx	lr

08000cc0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000cca:	4b08      	ldr	r3, [pc, #32]	; (8000cec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ccc:	695a      	ldr	r2, [r3, #20]
 8000cce:	88fb      	ldrh	r3, [r7, #6]
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d006      	beq.n	8000ce4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000cd6:	4a05      	ldr	r2, [pc, #20]	; (8000cec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000cd8:	88fb      	ldrh	r3, [r7, #6]
 8000cda:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000cdc:	88fb      	ldrh	r3, [r7, #6]
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f7ff fb7a 	bl	80003d8 <HAL_GPIO_EXTI_Callback>
  }
}
 8000ce4:	bf00      	nop
 8000ce6:	3708      	adds	r7, #8
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	40010400 	.word	0x40010400

08000cf0 <HAL_PWR_PVD_IRQHandler>:
  * @brief  This function handles the PWR PVD interrupt request.
  * @note   This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8000cf4:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <HAL_PWR_PVD_IRQHandler+0x20>)
 8000cf6:	695b      	ldr	r3, [r3, #20]
 8000cf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d005      	beq.n	8000d0c <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8000d00:	f000 f808 	bl	8000d14 <HAL_PWR_PVDCallback>

    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8000d04:	4b02      	ldr	r3, [pc, #8]	; (8000d10 <HAL_PWR_PVD_IRQHandler+0x20>)
 8000d06:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d0a:	615a      	str	r2, [r3, #20]
  }
}
 8000d0c:	bf00      	nop
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	40010400 	.word	0x40010400

08000d14 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bc80      	pop	{r7}
 8000d1e:	4770      	bx	lr

08000d20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b086      	sub	sp, #24
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d101      	bne.n	8000d32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e272      	b.n	8001218 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f003 0301 	and.w	r3, r3, #1
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	f000 8087 	beq.w	8000e4e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d40:	4b92      	ldr	r3, [pc, #584]	; (8000f8c <HAL_RCC_OscConfig+0x26c>)
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	f003 030c 	and.w	r3, r3, #12
 8000d48:	2b04      	cmp	r3, #4
 8000d4a:	d00c      	beq.n	8000d66 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d4c:	4b8f      	ldr	r3, [pc, #572]	; (8000f8c <HAL_RCC_OscConfig+0x26c>)
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	f003 030c 	and.w	r3, r3, #12
 8000d54:	2b08      	cmp	r3, #8
 8000d56:	d112      	bne.n	8000d7e <HAL_RCC_OscConfig+0x5e>
 8000d58:	4b8c      	ldr	r3, [pc, #560]	; (8000f8c <HAL_RCC_OscConfig+0x26c>)
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d64:	d10b      	bne.n	8000d7e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d66:	4b89      	ldr	r3, [pc, #548]	; (8000f8c <HAL_RCC_OscConfig+0x26c>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d06c      	beq.n	8000e4c <HAL_RCC_OscConfig+0x12c>
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d168      	bne.n	8000e4c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	e24c      	b.n	8001218 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d86:	d106      	bne.n	8000d96 <HAL_RCC_OscConfig+0x76>
 8000d88:	4b80      	ldr	r3, [pc, #512]	; (8000f8c <HAL_RCC_OscConfig+0x26c>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a7f      	ldr	r2, [pc, #508]	; (8000f8c <HAL_RCC_OscConfig+0x26c>)
 8000d8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d92:	6013      	str	r3, [r2, #0]
 8000d94:	e02e      	b.n	8000df4 <HAL_RCC_OscConfig+0xd4>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d10c      	bne.n	8000db8 <HAL_RCC_OscConfig+0x98>
 8000d9e:	4b7b      	ldr	r3, [pc, #492]	; (8000f8c <HAL_RCC_OscConfig+0x26c>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4a7a      	ldr	r2, [pc, #488]	; (8000f8c <HAL_RCC_OscConfig+0x26c>)
 8000da4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000da8:	6013      	str	r3, [r2, #0]
 8000daa:	4b78      	ldr	r3, [pc, #480]	; (8000f8c <HAL_RCC_OscConfig+0x26c>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4a77      	ldr	r2, [pc, #476]	; (8000f8c <HAL_RCC_OscConfig+0x26c>)
 8000db0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000db4:	6013      	str	r3, [r2, #0]
 8000db6:	e01d      	b.n	8000df4 <HAL_RCC_OscConfig+0xd4>
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000dc0:	d10c      	bne.n	8000ddc <HAL_RCC_OscConfig+0xbc>
 8000dc2:	4b72      	ldr	r3, [pc, #456]	; (8000f8c <HAL_RCC_OscConfig+0x26c>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4a71      	ldr	r2, [pc, #452]	; (8000f8c <HAL_RCC_OscConfig+0x26c>)
 8000dc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dcc:	6013      	str	r3, [r2, #0]
 8000dce:	4b6f      	ldr	r3, [pc, #444]	; (8000f8c <HAL_RCC_OscConfig+0x26c>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a6e      	ldr	r2, [pc, #440]	; (8000f8c <HAL_RCC_OscConfig+0x26c>)
 8000dd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dd8:	6013      	str	r3, [r2, #0]
 8000dda:	e00b      	b.n	8000df4 <HAL_RCC_OscConfig+0xd4>
 8000ddc:	4b6b      	ldr	r3, [pc, #428]	; (8000f8c <HAL_RCC_OscConfig+0x26c>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a6a      	ldr	r2, [pc, #424]	; (8000f8c <HAL_RCC_OscConfig+0x26c>)
 8000de2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000de6:	6013      	str	r3, [r2, #0]
 8000de8:	4b68      	ldr	r3, [pc, #416]	; (8000f8c <HAL_RCC_OscConfig+0x26c>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a67      	ldr	r2, [pc, #412]	; (8000f8c <HAL_RCC_OscConfig+0x26c>)
 8000dee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000df2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d013      	beq.n	8000e24 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dfc:	f7ff fcda 	bl	80007b4 <HAL_GetTick>
 8000e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e02:	e008      	b.n	8000e16 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e04:	f7ff fcd6 	bl	80007b4 <HAL_GetTick>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	693b      	ldr	r3, [r7, #16]
 8000e0c:	1ad3      	subs	r3, r2, r3
 8000e0e:	2b64      	cmp	r3, #100	; 0x64
 8000e10:	d901      	bls.n	8000e16 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000e12:	2303      	movs	r3, #3
 8000e14:	e200      	b.n	8001218 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e16:	4b5d      	ldr	r3, [pc, #372]	; (8000f8c <HAL_RCC_OscConfig+0x26c>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d0f0      	beq.n	8000e04 <HAL_RCC_OscConfig+0xe4>
 8000e22:	e014      	b.n	8000e4e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e24:	f7ff fcc6 	bl	80007b4 <HAL_GetTick>
 8000e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e2a:	e008      	b.n	8000e3e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e2c:	f7ff fcc2 	bl	80007b4 <HAL_GetTick>
 8000e30:	4602      	mov	r2, r0
 8000e32:	693b      	ldr	r3, [r7, #16]
 8000e34:	1ad3      	subs	r3, r2, r3
 8000e36:	2b64      	cmp	r3, #100	; 0x64
 8000e38:	d901      	bls.n	8000e3e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000e3a:	2303      	movs	r3, #3
 8000e3c:	e1ec      	b.n	8001218 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e3e:	4b53      	ldr	r3, [pc, #332]	; (8000f8c <HAL_RCC_OscConfig+0x26c>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d1f0      	bne.n	8000e2c <HAL_RCC_OscConfig+0x10c>
 8000e4a:	e000      	b.n	8000e4e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f003 0302 	and.w	r3, r3, #2
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d063      	beq.n	8000f22 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e5a:	4b4c      	ldr	r3, [pc, #304]	; (8000f8c <HAL_RCC_OscConfig+0x26c>)
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	f003 030c 	and.w	r3, r3, #12
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d00b      	beq.n	8000e7e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e66:	4b49      	ldr	r3, [pc, #292]	; (8000f8c <HAL_RCC_OscConfig+0x26c>)
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	f003 030c 	and.w	r3, r3, #12
 8000e6e:	2b08      	cmp	r3, #8
 8000e70:	d11c      	bne.n	8000eac <HAL_RCC_OscConfig+0x18c>
 8000e72:	4b46      	ldr	r3, [pc, #280]	; (8000f8c <HAL_RCC_OscConfig+0x26c>)
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d116      	bne.n	8000eac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e7e:	4b43      	ldr	r3, [pc, #268]	; (8000f8c <HAL_RCC_OscConfig+0x26c>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f003 0302 	and.w	r3, r3, #2
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d005      	beq.n	8000e96 <HAL_RCC_OscConfig+0x176>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	691b      	ldr	r3, [r3, #16]
 8000e8e:	2b01      	cmp	r3, #1
 8000e90:	d001      	beq.n	8000e96 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000e92:	2301      	movs	r3, #1
 8000e94:	e1c0      	b.n	8001218 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e96:	4b3d      	ldr	r3, [pc, #244]	; (8000f8c <HAL_RCC_OscConfig+0x26c>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	695b      	ldr	r3, [r3, #20]
 8000ea2:	00db      	lsls	r3, r3, #3
 8000ea4:	4939      	ldr	r1, [pc, #228]	; (8000f8c <HAL_RCC_OscConfig+0x26c>)
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000eaa:	e03a      	b.n	8000f22 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	691b      	ldr	r3, [r3, #16]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d020      	beq.n	8000ef6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000eb4:	4b36      	ldr	r3, [pc, #216]	; (8000f90 <HAL_RCC_OscConfig+0x270>)
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eba:	f7ff fc7b 	bl	80007b4 <HAL_GetTick>
 8000ebe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ec0:	e008      	b.n	8000ed4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ec2:	f7ff fc77 	bl	80007b4 <HAL_GetTick>
 8000ec6:	4602      	mov	r2, r0
 8000ec8:	693b      	ldr	r3, [r7, #16]
 8000eca:	1ad3      	subs	r3, r2, r3
 8000ecc:	2b02      	cmp	r3, #2
 8000ece:	d901      	bls.n	8000ed4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	e1a1      	b.n	8001218 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ed4:	4b2d      	ldr	r3, [pc, #180]	; (8000f8c <HAL_RCC_OscConfig+0x26c>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f003 0302 	and.w	r3, r3, #2
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d0f0      	beq.n	8000ec2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ee0:	4b2a      	ldr	r3, [pc, #168]	; (8000f8c <HAL_RCC_OscConfig+0x26c>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	695b      	ldr	r3, [r3, #20]
 8000eec:	00db      	lsls	r3, r3, #3
 8000eee:	4927      	ldr	r1, [pc, #156]	; (8000f8c <HAL_RCC_OscConfig+0x26c>)
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	600b      	str	r3, [r1, #0]
 8000ef4:	e015      	b.n	8000f22 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ef6:	4b26      	ldr	r3, [pc, #152]	; (8000f90 <HAL_RCC_OscConfig+0x270>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000efc:	f7ff fc5a 	bl	80007b4 <HAL_GetTick>
 8000f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f02:	e008      	b.n	8000f16 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f04:	f7ff fc56 	bl	80007b4 <HAL_GetTick>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	2b02      	cmp	r3, #2
 8000f10:	d901      	bls.n	8000f16 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000f12:	2303      	movs	r3, #3
 8000f14:	e180      	b.n	8001218 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f16:	4b1d      	ldr	r3, [pc, #116]	; (8000f8c <HAL_RCC_OscConfig+0x26c>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f003 0302 	and.w	r3, r3, #2
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d1f0      	bne.n	8000f04 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f003 0308 	and.w	r3, r3, #8
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d03a      	beq.n	8000fa4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	699b      	ldr	r3, [r3, #24]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d019      	beq.n	8000f6a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f36:	4b17      	ldr	r3, [pc, #92]	; (8000f94 <HAL_RCC_OscConfig+0x274>)
 8000f38:	2201      	movs	r2, #1
 8000f3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f3c:	f7ff fc3a 	bl	80007b4 <HAL_GetTick>
 8000f40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f42:	e008      	b.n	8000f56 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f44:	f7ff fc36 	bl	80007b4 <HAL_GetTick>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	1ad3      	subs	r3, r2, r3
 8000f4e:	2b02      	cmp	r3, #2
 8000f50:	d901      	bls.n	8000f56 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000f52:	2303      	movs	r3, #3
 8000f54:	e160      	b.n	8001218 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f56:	4b0d      	ldr	r3, [pc, #52]	; (8000f8c <HAL_RCC_OscConfig+0x26c>)
 8000f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f5a:	f003 0302 	and.w	r3, r3, #2
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d0f0      	beq.n	8000f44 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000f62:	2001      	movs	r0, #1
 8000f64:	f000 fafe 	bl	8001564 <RCC_Delay>
 8000f68:	e01c      	b.n	8000fa4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f6a:	4b0a      	ldr	r3, [pc, #40]	; (8000f94 <HAL_RCC_OscConfig+0x274>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f70:	f7ff fc20 	bl	80007b4 <HAL_GetTick>
 8000f74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f76:	e00f      	b.n	8000f98 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f78:	f7ff fc1c 	bl	80007b4 <HAL_GetTick>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	693b      	ldr	r3, [r7, #16]
 8000f80:	1ad3      	subs	r3, r2, r3
 8000f82:	2b02      	cmp	r3, #2
 8000f84:	d908      	bls.n	8000f98 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000f86:	2303      	movs	r3, #3
 8000f88:	e146      	b.n	8001218 <HAL_RCC_OscConfig+0x4f8>
 8000f8a:	bf00      	nop
 8000f8c:	40021000 	.word	0x40021000
 8000f90:	42420000 	.word	0x42420000
 8000f94:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f98:	4b92      	ldr	r3, [pc, #584]	; (80011e4 <HAL_RCC_OscConfig+0x4c4>)
 8000f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f9c:	f003 0302 	and.w	r3, r3, #2
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d1e9      	bne.n	8000f78 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f003 0304 	and.w	r3, r3, #4
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	f000 80a6 	beq.w	80010fe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fb6:	4b8b      	ldr	r3, [pc, #556]	; (80011e4 <HAL_RCC_OscConfig+0x4c4>)
 8000fb8:	69db      	ldr	r3, [r3, #28]
 8000fba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d10d      	bne.n	8000fde <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fc2:	4b88      	ldr	r3, [pc, #544]	; (80011e4 <HAL_RCC_OscConfig+0x4c4>)
 8000fc4:	69db      	ldr	r3, [r3, #28]
 8000fc6:	4a87      	ldr	r2, [pc, #540]	; (80011e4 <HAL_RCC_OscConfig+0x4c4>)
 8000fc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fcc:	61d3      	str	r3, [r2, #28]
 8000fce:	4b85      	ldr	r3, [pc, #532]	; (80011e4 <HAL_RCC_OscConfig+0x4c4>)
 8000fd0:	69db      	ldr	r3, [r3, #28]
 8000fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fd6:	60bb      	str	r3, [r7, #8]
 8000fd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fde:	4b82      	ldr	r3, [pc, #520]	; (80011e8 <HAL_RCC_OscConfig+0x4c8>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d118      	bne.n	800101c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000fea:	4b7f      	ldr	r3, [pc, #508]	; (80011e8 <HAL_RCC_OscConfig+0x4c8>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a7e      	ldr	r2, [pc, #504]	; (80011e8 <HAL_RCC_OscConfig+0x4c8>)
 8000ff0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ff4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000ff6:	f7ff fbdd 	bl	80007b4 <HAL_GetTick>
 8000ffa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ffc:	e008      	b.n	8001010 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ffe:	f7ff fbd9 	bl	80007b4 <HAL_GetTick>
 8001002:	4602      	mov	r2, r0
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	1ad3      	subs	r3, r2, r3
 8001008:	2b64      	cmp	r3, #100	; 0x64
 800100a:	d901      	bls.n	8001010 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800100c:	2303      	movs	r3, #3
 800100e:	e103      	b.n	8001218 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001010:	4b75      	ldr	r3, [pc, #468]	; (80011e8 <HAL_RCC_OscConfig+0x4c8>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001018:	2b00      	cmp	r3, #0
 800101a:	d0f0      	beq.n	8000ffe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	2b01      	cmp	r3, #1
 8001022:	d106      	bne.n	8001032 <HAL_RCC_OscConfig+0x312>
 8001024:	4b6f      	ldr	r3, [pc, #444]	; (80011e4 <HAL_RCC_OscConfig+0x4c4>)
 8001026:	6a1b      	ldr	r3, [r3, #32]
 8001028:	4a6e      	ldr	r2, [pc, #440]	; (80011e4 <HAL_RCC_OscConfig+0x4c4>)
 800102a:	f043 0301 	orr.w	r3, r3, #1
 800102e:	6213      	str	r3, [r2, #32]
 8001030:	e02d      	b.n	800108e <HAL_RCC_OscConfig+0x36e>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	68db      	ldr	r3, [r3, #12]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d10c      	bne.n	8001054 <HAL_RCC_OscConfig+0x334>
 800103a:	4b6a      	ldr	r3, [pc, #424]	; (80011e4 <HAL_RCC_OscConfig+0x4c4>)
 800103c:	6a1b      	ldr	r3, [r3, #32]
 800103e:	4a69      	ldr	r2, [pc, #420]	; (80011e4 <HAL_RCC_OscConfig+0x4c4>)
 8001040:	f023 0301 	bic.w	r3, r3, #1
 8001044:	6213      	str	r3, [r2, #32]
 8001046:	4b67      	ldr	r3, [pc, #412]	; (80011e4 <HAL_RCC_OscConfig+0x4c4>)
 8001048:	6a1b      	ldr	r3, [r3, #32]
 800104a:	4a66      	ldr	r2, [pc, #408]	; (80011e4 <HAL_RCC_OscConfig+0x4c4>)
 800104c:	f023 0304 	bic.w	r3, r3, #4
 8001050:	6213      	str	r3, [r2, #32]
 8001052:	e01c      	b.n	800108e <HAL_RCC_OscConfig+0x36e>
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	2b05      	cmp	r3, #5
 800105a:	d10c      	bne.n	8001076 <HAL_RCC_OscConfig+0x356>
 800105c:	4b61      	ldr	r3, [pc, #388]	; (80011e4 <HAL_RCC_OscConfig+0x4c4>)
 800105e:	6a1b      	ldr	r3, [r3, #32]
 8001060:	4a60      	ldr	r2, [pc, #384]	; (80011e4 <HAL_RCC_OscConfig+0x4c4>)
 8001062:	f043 0304 	orr.w	r3, r3, #4
 8001066:	6213      	str	r3, [r2, #32]
 8001068:	4b5e      	ldr	r3, [pc, #376]	; (80011e4 <HAL_RCC_OscConfig+0x4c4>)
 800106a:	6a1b      	ldr	r3, [r3, #32]
 800106c:	4a5d      	ldr	r2, [pc, #372]	; (80011e4 <HAL_RCC_OscConfig+0x4c4>)
 800106e:	f043 0301 	orr.w	r3, r3, #1
 8001072:	6213      	str	r3, [r2, #32]
 8001074:	e00b      	b.n	800108e <HAL_RCC_OscConfig+0x36e>
 8001076:	4b5b      	ldr	r3, [pc, #364]	; (80011e4 <HAL_RCC_OscConfig+0x4c4>)
 8001078:	6a1b      	ldr	r3, [r3, #32]
 800107a:	4a5a      	ldr	r2, [pc, #360]	; (80011e4 <HAL_RCC_OscConfig+0x4c4>)
 800107c:	f023 0301 	bic.w	r3, r3, #1
 8001080:	6213      	str	r3, [r2, #32]
 8001082:	4b58      	ldr	r3, [pc, #352]	; (80011e4 <HAL_RCC_OscConfig+0x4c4>)
 8001084:	6a1b      	ldr	r3, [r3, #32]
 8001086:	4a57      	ldr	r2, [pc, #348]	; (80011e4 <HAL_RCC_OscConfig+0x4c4>)
 8001088:	f023 0304 	bic.w	r3, r3, #4
 800108c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	68db      	ldr	r3, [r3, #12]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d015      	beq.n	80010c2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001096:	f7ff fb8d 	bl	80007b4 <HAL_GetTick>
 800109a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800109c:	e00a      	b.n	80010b4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800109e:	f7ff fb89 	bl	80007b4 <HAL_GetTick>
 80010a2:	4602      	mov	r2, r0
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	1ad3      	subs	r3, r2, r3
 80010a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d901      	bls.n	80010b4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80010b0:	2303      	movs	r3, #3
 80010b2:	e0b1      	b.n	8001218 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010b4:	4b4b      	ldr	r3, [pc, #300]	; (80011e4 <HAL_RCC_OscConfig+0x4c4>)
 80010b6:	6a1b      	ldr	r3, [r3, #32]
 80010b8:	f003 0302 	and.w	r3, r3, #2
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d0ee      	beq.n	800109e <HAL_RCC_OscConfig+0x37e>
 80010c0:	e014      	b.n	80010ec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010c2:	f7ff fb77 	bl	80007b4 <HAL_GetTick>
 80010c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010c8:	e00a      	b.n	80010e0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010ca:	f7ff fb73 	bl	80007b4 <HAL_GetTick>
 80010ce:	4602      	mov	r2, r0
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	1ad3      	subs	r3, r2, r3
 80010d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80010d8:	4293      	cmp	r3, r2
 80010da:	d901      	bls.n	80010e0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80010dc:	2303      	movs	r3, #3
 80010de:	e09b      	b.n	8001218 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010e0:	4b40      	ldr	r3, [pc, #256]	; (80011e4 <HAL_RCC_OscConfig+0x4c4>)
 80010e2:	6a1b      	ldr	r3, [r3, #32]
 80010e4:	f003 0302 	and.w	r3, r3, #2
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d1ee      	bne.n	80010ca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80010ec:	7dfb      	ldrb	r3, [r7, #23]
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d105      	bne.n	80010fe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010f2:	4b3c      	ldr	r3, [pc, #240]	; (80011e4 <HAL_RCC_OscConfig+0x4c4>)
 80010f4:	69db      	ldr	r3, [r3, #28]
 80010f6:	4a3b      	ldr	r2, [pc, #236]	; (80011e4 <HAL_RCC_OscConfig+0x4c4>)
 80010f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80010fc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	69db      	ldr	r3, [r3, #28]
 8001102:	2b00      	cmp	r3, #0
 8001104:	f000 8087 	beq.w	8001216 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001108:	4b36      	ldr	r3, [pc, #216]	; (80011e4 <HAL_RCC_OscConfig+0x4c4>)
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f003 030c 	and.w	r3, r3, #12
 8001110:	2b08      	cmp	r3, #8
 8001112:	d061      	beq.n	80011d8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	69db      	ldr	r3, [r3, #28]
 8001118:	2b02      	cmp	r3, #2
 800111a:	d146      	bne.n	80011aa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800111c:	4b33      	ldr	r3, [pc, #204]	; (80011ec <HAL_RCC_OscConfig+0x4cc>)
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001122:	f7ff fb47 	bl	80007b4 <HAL_GetTick>
 8001126:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001128:	e008      	b.n	800113c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800112a:	f7ff fb43 	bl	80007b4 <HAL_GetTick>
 800112e:	4602      	mov	r2, r0
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	1ad3      	subs	r3, r2, r3
 8001134:	2b02      	cmp	r3, #2
 8001136:	d901      	bls.n	800113c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001138:	2303      	movs	r3, #3
 800113a:	e06d      	b.n	8001218 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800113c:	4b29      	ldr	r3, [pc, #164]	; (80011e4 <HAL_RCC_OscConfig+0x4c4>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001144:	2b00      	cmp	r3, #0
 8001146:	d1f0      	bne.n	800112a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6a1b      	ldr	r3, [r3, #32]
 800114c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001150:	d108      	bne.n	8001164 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001152:	4b24      	ldr	r3, [pc, #144]	; (80011e4 <HAL_RCC_OscConfig+0x4c4>)
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	4921      	ldr	r1, [pc, #132]	; (80011e4 <HAL_RCC_OscConfig+0x4c4>)
 8001160:	4313      	orrs	r3, r2
 8001162:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001164:	4b1f      	ldr	r3, [pc, #124]	; (80011e4 <HAL_RCC_OscConfig+0x4c4>)
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6a19      	ldr	r1, [r3, #32]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001174:	430b      	orrs	r3, r1
 8001176:	491b      	ldr	r1, [pc, #108]	; (80011e4 <HAL_RCC_OscConfig+0x4c4>)
 8001178:	4313      	orrs	r3, r2
 800117a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800117c:	4b1b      	ldr	r3, [pc, #108]	; (80011ec <HAL_RCC_OscConfig+0x4cc>)
 800117e:	2201      	movs	r2, #1
 8001180:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001182:	f7ff fb17 	bl	80007b4 <HAL_GetTick>
 8001186:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001188:	e008      	b.n	800119c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800118a:	f7ff fb13 	bl	80007b4 <HAL_GetTick>
 800118e:	4602      	mov	r2, r0
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	1ad3      	subs	r3, r2, r3
 8001194:	2b02      	cmp	r3, #2
 8001196:	d901      	bls.n	800119c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001198:	2303      	movs	r3, #3
 800119a:	e03d      	b.n	8001218 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800119c:	4b11      	ldr	r3, [pc, #68]	; (80011e4 <HAL_RCC_OscConfig+0x4c4>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d0f0      	beq.n	800118a <HAL_RCC_OscConfig+0x46a>
 80011a8:	e035      	b.n	8001216 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011aa:	4b10      	ldr	r3, [pc, #64]	; (80011ec <HAL_RCC_OscConfig+0x4cc>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b0:	f7ff fb00 	bl	80007b4 <HAL_GetTick>
 80011b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011b6:	e008      	b.n	80011ca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011b8:	f7ff fafc 	bl	80007b4 <HAL_GetTick>
 80011bc:	4602      	mov	r2, r0
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	2b02      	cmp	r3, #2
 80011c4:	d901      	bls.n	80011ca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80011c6:	2303      	movs	r3, #3
 80011c8:	e026      	b.n	8001218 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011ca:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <HAL_RCC_OscConfig+0x4c4>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d1f0      	bne.n	80011b8 <HAL_RCC_OscConfig+0x498>
 80011d6:	e01e      	b.n	8001216 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	69db      	ldr	r3, [r3, #28]
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d107      	bne.n	80011f0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80011e0:	2301      	movs	r3, #1
 80011e2:	e019      	b.n	8001218 <HAL_RCC_OscConfig+0x4f8>
 80011e4:	40021000 	.word	0x40021000
 80011e8:	40007000 	.word	0x40007000
 80011ec:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80011f0:	4b0b      	ldr	r3, [pc, #44]	; (8001220 <HAL_RCC_OscConfig+0x500>)
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6a1b      	ldr	r3, [r3, #32]
 8001200:	429a      	cmp	r2, r3
 8001202:	d106      	bne.n	8001212 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800120e:	429a      	cmp	r2, r3
 8001210:	d001      	beq.n	8001216 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e000      	b.n	8001218 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001216:	2300      	movs	r3, #0
}
 8001218:	4618      	mov	r0, r3
 800121a:	3718      	adds	r7, #24
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	40021000 	.word	0x40021000

08001224 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d101      	bne.n	8001238 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001234:	2301      	movs	r3, #1
 8001236:	e0d0      	b.n	80013da <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001238:	4b6a      	ldr	r3, [pc, #424]	; (80013e4 <HAL_RCC_ClockConfig+0x1c0>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f003 0307 	and.w	r3, r3, #7
 8001240:	683a      	ldr	r2, [r7, #0]
 8001242:	429a      	cmp	r2, r3
 8001244:	d910      	bls.n	8001268 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001246:	4b67      	ldr	r3, [pc, #412]	; (80013e4 <HAL_RCC_ClockConfig+0x1c0>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f023 0207 	bic.w	r2, r3, #7
 800124e:	4965      	ldr	r1, [pc, #404]	; (80013e4 <HAL_RCC_ClockConfig+0x1c0>)
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	4313      	orrs	r3, r2
 8001254:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001256:	4b63      	ldr	r3, [pc, #396]	; (80013e4 <HAL_RCC_ClockConfig+0x1c0>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 0307 	and.w	r3, r3, #7
 800125e:	683a      	ldr	r2, [r7, #0]
 8001260:	429a      	cmp	r2, r3
 8001262:	d001      	beq.n	8001268 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001264:	2301      	movs	r3, #1
 8001266:	e0b8      	b.n	80013da <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f003 0302 	and.w	r3, r3, #2
 8001270:	2b00      	cmp	r3, #0
 8001272:	d020      	beq.n	80012b6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f003 0304 	and.w	r3, r3, #4
 800127c:	2b00      	cmp	r3, #0
 800127e:	d005      	beq.n	800128c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001280:	4b59      	ldr	r3, [pc, #356]	; (80013e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	4a58      	ldr	r2, [pc, #352]	; (80013e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001286:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800128a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f003 0308 	and.w	r3, r3, #8
 8001294:	2b00      	cmp	r3, #0
 8001296:	d005      	beq.n	80012a4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001298:	4b53      	ldr	r3, [pc, #332]	; (80013e8 <HAL_RCC_ClockConfig+0x1c4>)
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	4a52      	ldr	r2, [pc, #328]	; (80013e8 <HAL_RCC_ClockConfig+0x1c4>)
 800129e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80012a2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012a4:	4b50      	ldr	r3, [pc, #320]	; (80013e8 <HAL_RCC_ClockConfig+0x1c4>)
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	494d      	ldr	r1, [pc, #308]	; (80013e8 <HAL_RCC_ClockConfig+0x1c4>)
 80012b2:	4313      	orrs	r3, r2
 80012b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 0301 	and.w	r3, r3, #1
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d040      	beq.n	8001344 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d107      	bne.n	80012da <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ca:	4b47      	ldr	r3, [pc, #284]	; (80013e8 <HAL_RCC_ClockConfig+0x1c4>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d115      	bne.n	8001302 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e07f      	b.n	80013da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d107      	bne.n	80012f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012e2:	4b41      	ldr	r3, [pc, #260]	; (80013e8 <HAL_RCC_ClockConfig+0x1c4>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d109      	bne.n	8001302 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e073      	b.n	80013da <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012f2:	4b3d      	ldr	r3, [pc, #244]	; (80013e8 <HAL_RCC_ClockConfig+0x1c4>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f003 0302 	and.w	r3, r3, #2
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d101      	bne.n	8001302 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e06b      	b.n	80013da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001302:	4b39      	ldr	r3, [pc, #228]	; (80013e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f023 0203 	bic.w	r2, r3, #3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	4936      	ldr	r1, [pc, #216]	; (80013e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001310:	4313      	orrs	r3, r2
 8001312:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001314:	f7ff fa4e 	bl	80007b4 <HAL_GetTick>
 8001318:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800131a:	e00a      	b.n	8001332 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800131c:	f7ff fa4a 	bl	80007b4 <HAL_GetTick>
 8001320:	4602      	mov	r2, r0
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	f241 3288 	movw	r2, #5000	; 0x1388
 800132a:	4293      	cmp	r3, r2
 800132c:	d901      	bls.n	8001332 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800132e:	2303      	movs	r3, #3
 8001330:	e053      	b.n	80013da <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001332:	4b2d      	ldr	r3, [pc, #180]	; (80013e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f003 020c 	and.w	r2, r3, #12
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	429a      	cmp	r2, r3
 8001342:	d1eb      	bne.n	800131c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001344:	4b27      	ldr	r3, [pc, #156]	; (80013e4 <HAL_RCC_ClockConfig+0x1c0>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f003 0307 	and.w	r3, r3, #7
 800134c:	683a      	ldr	r2, [r7, #0]
 800134e:	429a      	cmp	r2, r3
 8001350:	d210      	bcs.n	8001374 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001352:	4b24      	ldr	r3, [pc, #144]	; (80013e4 <HAL_RCC_ClockConfig+0x1c0>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f023 0207 	bic.w	r2, r3, #7
 800135a:	4922      	ldr	r1, [pc, #136]	; (80013e4 <HAL_RCC_ClockConfig+0x1c0>)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	4313      	orrs	r3, r2
 8001360:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001362:	4b20      	ldr	r3, [pc, #128]	; (80013e4 <HAL_RCC_ClockConfig+0x1c0>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f003 0307 	and.w	r3, r3, #7
 800136a:	683a      	ldr	r2, [r7, #0]
 800136c:	429a      	cmp	r2, r3
 800136e:	d001      	beq.n	8001374 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	e032      	b.n	80013da <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f003 0304 	and.w	r3, r3, #4
 800137c:	2b00      	cmp	r3, #0
 800137e:	d008      	beq.n	8001392 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001380:	4b19      	ldr	r3, [pc, #100]	; (80013e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	4916      	ldr	r1, [pc, #88]	; (80013e8 <HAL_RCC_ClockConfig+0x1c4>)
 800138e:	4313      	orrs	r3, r2
 8001390:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 0308 	and.w	r3, r3, #8
 800139a:	2b00      	cmp	r3, #0
 800139c:	d009      	beq.n	80013b2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800139e:	4b12      	ldr	r3, [pc, #72]	; (80013e8 <HAL_RCC_ClockConfig+0x1c4>)
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	691b      	ldr	r3, [r3, #16]
 80013aa:	00db      	lsls	r3, r3, #3
 80013ac:	490e      	ldr	r1, [pc, #56]	; (80013e8 <HAL_RCC_ClockConfig+0x1c4>)
 80013ae:	4313      	orrs	r3, r2
 80013b0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80013b2:	f000 f821 	bl	80013f8 <HAL_RCC_GetSysClockFreq>
 80013b6:	4602      	mov	r2, r0
 80013b8:	4b0b      	ldr	r3, [pc, #44]	; (80013e8 <HAL_RCC_ClockConfig+0x1c4>)
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	091b      	lsrs	r3, r3, #4
 80013be:	f003 030f 	and.w	r3, r3, #15
 80013c2:	490a      	ldr	r1, [pc, #40]	; (80013ec <HAL_RCC_ClockConfig+0x1c8>)
 80013c4:	5ccb      	ldrb	r3, [r1, r3]
 80013c6:	fa22 f303 	lsr.w	r3, r2, r3
 80013ca:	4a09      	ldr	r2, [pc, #36]	; (80013f0 <HAL_RCC_ClockConfig+0x1cc>)
 80013cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80013ce:	4b09      	ldr	r3, [pc, #36]	; (80013f4 <HAL_RCC_ClockConfig+0x1d0>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff f8a8 	bl	8000528 <HAL_InitTick>

  return HAL_OK;
 80013d8:	2300      	movs	r3, #0
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3710      	adds	r7, #16
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	40022000 	.word	0x40022000
 80013e8:	40021000 	.word	0x40021000
 80013ec:	080047f0 	.word	0x080047f0
 80013f0:	20000000 	.word	0x20000000
 80013f4:	20000004 	.word	0x20000004

080013f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b087      	sub	sp, #28
 80013fc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80013fe:	2300      	movs	r3, #0
 8001400:	60fb      	str	r3, [r7, #12]
 8001402:	2300      	movs	r3, #0
 8001404:	60bb      	str	r3, [r7, #8]
 8001406:	2300      	movs	r3, #0
 8001408:	617b      	str	r3, [r7, #20]
 800140a:	2300      	movs	r3, #0
 800140c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800140e:	2300      	movs	r3, #0
 8001410:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001412:	4b1e      	ldr	r3, [pc, #120]	; (800148c <HAL_RCC_GetSysClockFreq+0x94>)
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	f003 030c 	and.w	r3, r3, #12
 800141e:	2b04      	cmp	r3, #4
 8001420:	d002      	beq.n	8001428 <HAL_RCC_GetSysClockFreq+0x30>
 8001422:	2b08      	cmp	r3, #8
 8001424:	d003      	beq.n	800142e <HAL_RCC_GetSysClockFreq+0x36>
 8001426:	e027      	b.n	8001478 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001428:	4b19      	ldr	r3, [pc, #100]	; (8001490 <HAL_RCC_GetSysClockFreq+0x98>)
 800142a:	613b      	str	r3, [r7, #16]
      break;
 800142c:	e027      	b.n	800147e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	0c9b      	lsrs	r3, r3, #18
 8001432:	f003 030f 	and.w	r3, r3, #15
 8001436:	4a17      	ldr	r2, [pc, #92]	; (8001494 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001438:	5cd3      	ldrb	r3, [r2, r3]
 800143a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d010      	beq.n	8001468 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001446:	4b11      	ldr	r3, [pc, #68]	; (800148c <HAL_RCC_GetSysClockFreq+0x94>)
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	0c5b      	lsrs	r3, r3, #17
 800144c:	f003 0301 	and.w	r3, r3, #1
 8001450:	4a11      	ldr	r2, [pc, #68]	; (8001498 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001452:	5cd3      	ldrb	r3, [r2, r3]
 8001454:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a0d      	ldr	r2, [pc, #52]	; (8001490 <HAL_RCC_GetSysClockFreq+0x98>)
 800145a:	fb03 f202 	mul.w	r2, r3, r2
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	fbb2 f3f3 	udiv	r3, r2, r3
 8001464:	617b      	str	r3, [r7, #20]
 8001466:	e004      	b.n	8001472 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	4a0c      	ldr	r2, [pc, #48]	; (800149c <HAL_RCC_GetSysClockFreq+0xa4>)
 800146c:	fb02 f303 	mul.w	r3, r2, r3
 8001470:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	613b      	str	r3, [r7, #16]
      break;
 8001476:	e002      	b.n	800147e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001478:	4b05      	ldr	r3, [pc, #20]	; (8001490 <HAL_RCC_GetSysClockFreq+0x98>)
 800147a:	613b      	str	r3, [r7, #16]
      break;
 800147c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800147e:	693b      	ldr	r3, [r7, #16]
}
 8001480:	4618      	mov	r0, r3
 8001482:	371c      	adds	r7, #28
 8001484:	46bd      	mov	sp, r7
 8001486:	bc80      	pop	{r7}
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	40021000 	.word	0x40021000
 8001490:	007a1200 	.word	0x007a1200
 8001494:	08004808 	.word	0x08004808
 8001498:	08004818 	.word	0x08004818
 800149c:	003d0900 	.word	0x003d0900

080014a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80014a4:	4b02      	ldr	r3, [pc, #8]	; (80014b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80014a6:	681b      	ldr	r3, [r3, #0]
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bc80      	pop	{r7}
 80014ae:	4770      	bx	lr
 80014b0:	20000000 	.word	0x20000000

080014b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80014b8:	f7ff fff2 	bl	80014a0 <HAL_RCC_GetHCLKFreq>
 80014bc:	4602      	mov	r2, r0
 80014be:	4b05      	ldr	r3, [pc, #20]	; (80014d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	0a1b      	lsrs	r3, r3, #8
 80014c4:	f003 0307 	and.w	r3, r3, #7
 80014c8:	4903      	ldr	r1, [pc, #12]	; (80014d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80014ca:	5ccb      	ldrb	r3, [r1, r3]
 80014cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	40021000 	.word	0x40021000
 80014d8:	08004800 	.word	0x08004800

080014dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80014e0:	f7ff ffde 	bl	80014a0 <HAL_RCC_GetHCLKFreq>
 80014e4:	4602      	mov	r2, r0
 80014e6:	4b05      	ldr	r3, [pc, #20]	; (80014fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	0adb      	lsrs	r3, r3, #11
 80014ec:	f003 0307 	and.w	r3, r3, #7
 80014f0:	4903      	ldr	r1, [pc, #12]	; (8001500 <HAL_RCC_GetPCLK2Freq+0x24>)
 80014f2:	5ccb      	ldrb	r3, [r1, r3]
 80014f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	40021000 	.word	0x40021000
 8001500:	08004800 	.word	0x08004800

08001504 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	220f      	movs	r2, #15
 8001512:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001514:	4b11      	ldr	r3, [pc, #68]	; (800155c <HAL_RCC_GetClockConfig+0x58>)
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f003 0203 	and.w	r2, r3, #3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001520:	4b0e      	ldr	r3, [pc, #56]	; (800155c <HAL_RCC_GetClockConfig+0x58>)
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800152c:	4b0b      	ldr	r3, [pc, #44]	; (800155c <HAL_RCC_GetClockConfig+0x58>)
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001538:	4b08      	ldr	r3, [pc, #32]	; (800155c <HAL_RCC_GetClockConfig+0x58>)
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	08db      	lsrs	r3, r3, #3
 800153e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001546:	4b06      	ldr	r3, [pc, #24]	; (8001560 <HAL_RCC_GetClockConfig+0x5c>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0207 	and.w	r2, r3, #7
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001552:	bf00      	nop
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	bc80      	pop	{r7}
 800155a:	4770      	bx	lr
 800155c:	40021000 	.word	0x40021000
 8001560:	40022000 	.word	0x40022000

08001564 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001564:	b480      	push	{r7}
 8001566:	b085      	sub	sp, #20
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800156c:	4b0a      	ldr	r3, [pc, #40]	; (8001598 <RCC_Delay+0x34>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a0a      	ldr	r2, [pc, #40]	; (800159c <RCC_Delay+0x38>)
 8001572:	fba2 2303 	umull	r2, r3, r2, r3
 8001576:	0a5b      	lsrs	r3, r3, #9
 8001578:	687a      	ldr	r2, [r7, #4]
 800157a:	fb02 f303 	mul.w	r3, r2, r3
 800157e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001580:	bf00      	nop
  }
  while (Delay --);
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	1e5a      	subs	r2, r3, #1
 8001586:	60fa      	str	r2, [r7, #12]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d1f9      	bne.n	8001580 <RCC_Delay+0x1c>
}
 800158c:	bf00      	nop
 800158e:	bf00      	nop
 8001590:	3714      	adds	r7, #20
 8001592:	46bd      	mov	sp, r7
 8001594:	bc80      	pop	{r7}
 8001596:	4770      	bx	lr
 8001598:	20000000 	.word	0x20000000
 800159c:	10624dd3 	.word	0x10624dd3

080015a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d101      	bne.n	80015b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e041      	b.n	8001636 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d106      	bne.n	80015cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2200      	movs	r2, #0
 80015c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f000 f839 	bl	800163e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2202      	movs	r2, #2
 80015d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	3304      	adds	r3, #4
 80015dc:	4619      	mov	r1, r3
 80015de:	4610      	mov	r0, r2
 80015e0:	f000 f9b4 	bl	800194c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2201      	movs	r2, #1
 80015e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2201      	movs	r2, #1
 80015f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2201      	movs	r2, #1
 80015f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2201      	movs	r2, #1
 8001600:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2201      	movs	r2, #1
 8001608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2201      	movs	r2, #1
 8001610:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2201      	movs	r2, #1
 8001618:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2201      	movs	r2, #1
 8001620:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2201      	movs	r2, #1
 8001628:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2201      	movs	r2, #1
 8001630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001634:	2300      	movs	r3, #0
}
 8001636:	4618      	mov	r0, r3
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800163e:	b480      	push	{r7}
 8001640:	b083      	sub	sp, #12
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001646:	bf00      	nop
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	bc80      	pop	{r7}
 800164e:	4770      	bx	lr

08001650 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001650:	b480      	push	{r7}
 8001652:	b085      	sub	sp, #20
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800165e:	b2db      	uxtb	r3, r3
 8001660:	2b01      	cmp	r3, #1
 8001662:	d001      	beq.n	8001668 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	e03a      	b.n	80016de <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2202      	movs	r2, #2
 800166c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	68da      	ldr	r2, [r3, #12]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f042 0201 	orr.w	r2, r2, #1
 800167e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a18      	ldr	r2, [pc, #96]	; (80016e8 <HAL_TIM_Base_Start_IT+0x98>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d00e      	beq.n	80016a8 <HAL_TIM_Base_Start_IT+0x58>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001692:	d009      	beq.n	80016a8 <HAL_TIM_Base_Start_IT+0x58>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a14      	ldr	r2, [pc, #80]	; (80016ec <HAL_TIM_Base_Start_IT+0x9c>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d004      	beq.n	80016a8 <HAL_TIM_Base_Start_IT+0x58>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a13      	ldr	r2, [pc, #76]	; (80016f0 <HAL_TIM_Base_Start_IT+0xa0>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d111      	bne.n	80016cc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	f003 0307 	and.w	r3, r3, #7
 80016b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	2b06      	cmp	r3, #6
 80016b8:	d010      	beq.n	80016dc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f042 0201 	orr.w	r2, r2, #1
 80016c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80016ca:	e007      	b.n	80016dc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f042 0201 	orr.w	r2, r2, #1
 80016da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80016dc:	2300      	movs	r3, #0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3714      	adds	r7, #20
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bc80      	pop	{r7}
 80016e6:	4770      	bx	lr
 80016e8:	40012c00 	.word	0x40012c00
 80016ec:	40000400 	.word	0x40000400
 80016f0:	40000800 	.word	0x40000800

080016f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	691b      	ldr	r3, [r3, #16]
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	2b02      	cmp	r3, #2
 8001708:	d122      	bne.n	8001750 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	f003 0302 	and.w	r3, r3, #2
 8001714:	2b02      	cmp	r3, #2
 8001716:	d11b      	bne.n	8001750 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f06f 0202 	mvn.w	r2, #2
 8001720:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2201      	movs	r2, #1
 8001726:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	699b      	ldr	r3, [r3, #24]
 800172e:	f003 0303 	and.w	r3, r3, #3
 8001732:	2b00      	cmp	r3, #0
 8001734:	d003      	beq.n	800173e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f000 f8ed 	bl	8001916 <HAL_TIM_IC_CaptureCallback>
 800173c:	e005      	b.n	800174a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f000 f8e0 	bl	8001904 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f000 f8ef 	bl	8001928 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2200      	movs	r2, #0
 800174e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	691b      	ldr	r3, [r3, #16]
 8001756:	f003 0304 	and.w	r3, r3, #4
 800175a:	2b04      	cmp	r3, #4
 800175c:	d122      	bne.n	80017a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	f003 0304 	and.w	r3, r3, #4
 8001768:	2b04      	cmp	r3, #4
 800176a:	d11b      	bne.n	80017a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f06f 0204 	mvn.w	r2, #4
 8001774:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2202      	movs	r2, #2
 800177a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	699b      	ldr	r3, [r3, #24]
 8001782:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001786:	2b00      	cmp	r3, #0
 8001788:	d003      	beq.n	8001792 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f000 f8c3 	bl	8001916 <HAL_TIM_IC_CaptureCallback>
 8001790:	e005      	b.n	800179e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f000 f8b6 	bl	8001904 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f000 f8c5 	bl	8001928 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	691b      	ldr	r3, [r3, #16]
 80017aa:	f003 0308 	and.w	r3, r3, #8
 80017ae:	2b08      	cmp	r3, #8
 80017b0:	d122      	bne.n	80017f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	f003 0308 	and.w	r3, r3, #8
 80017bc:	2b08      	cmp	r3, #8
 80017be:	d11b      	bne.n	80017f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f06f 0208 	mvn.w	r2, #8
 80017c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2204      	movs	r2, #4
 80017ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	69db      	ldr	r3, [r3, #28]
 80017d6:	f003 0303 	and.w	r3, r3, #3
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d003      	beq.n	80017e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f000 f899 	bl	8001916 <HAL_TIM_IC_CaptureCallback>
 80017e4:	e005      	b.n	80017f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f000 f88c 	bl	8001904 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f000 f89b 	bl	8001928 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2200      	movs	r2, #0
 80017f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	691b      	ldr	r3, [r3, #16]
 80017fe:	f003 0310 	and.w	r3, r3, #16
 8001802:	2b10      	cmp	r3, #16
 8001804:	d122      	bne.n	800184c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	f003 0310 	and.w	r3, r3, #16
 8001810:	2b10      	cmp	r3, #16
 8001812:	d11b      	bne.n	800184c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f06f 0210 	mvn.w	r2, #16
 800181c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2208      	movs	r2, #8
 8001822:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	69db      	ldr	r3, [r3, #28]
 800182a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800182e:	2b00      	cmp	r3, #0
 8001830:	d003      	beq.n	800183a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f000 f86f 	bl	8001916 <HAL_TIM_IC_CaptureCallback>
 8001838:	e005      	b.n	8001846 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	f000 f862 	bl	8001904 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f000 f871 	bl	8001928 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2200      	movs	r2, #0
 800184a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	691b      	ldr	r3, [r3, #16]
 8001852:	f003 0301 	and.w	r3, r3, #1
 8001856:	2b01      	cmp	r3, #1
 8001858:	d10e      	bne.n	8001878 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	f003 0301 	and.w	r3, r3, #1
 8001864:	2b01      	cmp	r3, #1
 8001866:	d107      	bne.n	8001878 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f06f 0201 	mvn.w	r2, #1
 8001870:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f7fe fdca 	bl	800040c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	691b      	ldr	r3, [r3, #16]
 800187e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001882:	2b80      	cmp	r3, #128	; 0x80
 8001884:	d10e      	bne.n	80018a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001890:	2b80      	cmp	r3, #128	; 0x80
 8001892:	d107      	bne.n	80018a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800189c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f000 f8bf 	bl	8001a22 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	691b      	ldr	r3, [r3, #16]
 80018aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018ae:	2b40      	cmp	r3, #64	; 0x40
 80018b0:	d10e      	bne.n	80018d0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018bc:	2b40      	cmp	r3, #64	; 0x40
 80018be:	d107      	bne.n	80018d0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80018c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f000 f835 	bl	800193a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	691b      	ldr	r3, [r3, #16]
 80018d6:	f003 0320 	and.w	r3, r3, #32
 80018da:	2b20      	cmp	r3, #32
 80018dc:	d10e      	bne.n	80018fc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	f003 0320 	and.w	r3, r3, #32
 80018e8:	2b20      	cmp	r3, #32
 80018ea:	d107      	bne.n	80018fc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f06f 0220 	mvn.w	r2, #32
 80018f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f000 f88a 	bl	8001a10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80018fc:	bf00      	nop
 80018fe:	3708      	adds	r7, #8
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}

08001904 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800190c:	bf00      	nop
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	bc80      	pop	{r7}
 8001914:	4770      	bx	lr

08001916 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001916:	b480      	push	{r7}
 8001918:	b083      	sub	sp, #12
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800191e:	bf00      	nop
 8001920:	370c      	adds	r7, #12
 8001922:	46bd      	mov	sp, r7
 8001924:	bc80      	pop	{r7}
 8001926:	4770      	bx	lr

08001928 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001930:	bf00      	nop
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	bc80      	pop	{r7}
 8001938:	4770      	bx	lr

0800193a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800193a:	b480      	push	{r7}
 800193c:	b083      	sub	sp, #12
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001942:	bf00      	nop
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	bc80      	pop	{r7}
 800194a:	4770      	bx	lr

0800194c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800194c:	b480      	push	{r7}
 800194e:	b085      	sub	sp, #20
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	4a29      	ldr	r2, [pc, #164]	; (8001a04 <TIM_Base_SetConfig+0xb8>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d00b      	beq.n	800197c <TIM_Base_SetConfig+0x30>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800196a:	d007      	beq.n	800197c <TIM_Base_SetConfig+0x30>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	4a26      	ldr	r2, [pc, #152]	; (8001a08 <TIM_Base_SetConfig+0xbc>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d003      	beq.n	800197c <TIM_Base_SetConfig+0x30>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	4a25      	ldr	r2, [pc, #148]	; (8001a0c <TIM_Base_SetConfig+0xc0>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d108      	bne.n	800198e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001982:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	68fa      	ldr	r2, [r7, #12]
 800198a:	4313      	orrs	r3, r2
 800198c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4a1c      	ldr	r2, [pc, #112]	; (8001a04 <TIM_Base_SetConfig+0xb8>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d00b      	beq.n	80019ae <TIM_Base_SetConfig+0x62>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800199c:	d007      	beq.n	80019ae <TIM_Base_SetConfig+0x62>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a19      	ldr	r2, [pc, #100]	; (8001a08 <TIM_Base_SetConfig+0xbc>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d003      	beq.n	80019ae <TIM_Base_SetConfig+0x62>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a18      	ldr	r2, [pc, #96]	; (8001a0c <TIM_Base_SetConfig+0xc0>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d108      	bne.n	80019c0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	68fa      	ldr	r2, [r7, #12]
 80019bc:	4313      	orrs	r3, r2
 80019be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	695b      	ldr	r3, [r3, #20]
 80019ca:	4313      	orrs	r3, r2
 80019cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	68fa      	ldr	r2, [r7, #12]
 80019d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	689a      	ldr	r2, [r3, #8]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	4a07      	ldr	r2, [pc, #28]	; (8001a04 <TIM_Base_SetConfig+0xb8>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d103      	bne.n	80019f4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	691a      	ldr	r2, [r3, #16]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2201      	movs	r2, #1
 80019f8:	615a      	str	r2, [r3, #20]
}
 80019fa:	bf00      	nop
 80019fc:	3714      	adds	r7, #20
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bc80      	pop	{r7}
 8001a02:	4770      	bx	lr
 8001a04:	40012c00 	.word	0x40012c00
 8001a08:	40000400 	.word	0x40000400
 8001a0c:	40000800 	.word	0x40000800

08001a10 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001a18:	bf00      	nop
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bc80      	pop	{r7}
 8001a20:	4770      	bx	lr

08001a22 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001a22:	b480      	push	{r7}
 8001a24:	b083      	sub	sp, #12
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001a2a:	bf00      	nop
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bc80      	pop	{r7}
 8001a32:	4770      	bx	lr

08001a34 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d101      	bne.n	8001a46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e042      	b.n	8001acc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d106      	bne.n	8001a60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f7fe fd1a 	bl	8000494 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2224      	movs	r2, #36	; 0x24
 8001a64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	68da      	ldr	r2, [r3, #12]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001a76:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f000 f91d 	bl	8001cb8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	691a      	ldr	r2, [r3, #16]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001a8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	695a      	ldr	r2, [r3, #20]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001a9c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	68da      	ldr	r2, [r3, #12]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001aac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2220      	movs	r2, #32
 8001ab8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2220      	movs	r2, #32
 8001ac0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001aca:	2300      	movs	r3, #0
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3708      	adds	r7, #8
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b08a      	sub	sp, #40	; 0x28
 8001ad8:	af02      	add	r7, sp, #8
 8001ada:	60f8      	str	r0, [r7, #12]
 8001adc:	60b9      	str	r1, [r7, #8]
 8001ade:	603b      	str	r3, [r7, #0]
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	2b20      	cmp	r3, #32
 8001af2:	d16d      	bne.n	8001bd0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d002      	beq.n	8001b00 <HAL_UART_Transmit+0x2c>
 8001afa:	88fb      	ldrh	r3, [r7, #6]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d101      	bne.n	8001b04 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e066      	b.n	8001bd2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2200      	movs	r2, #0
 8001b08:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	2221      	movs	r2, #33	; 0x21
 8001b0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001b12:	f7fe fe4f 	bl	80007b4 <HAL_GetTick>
 8001b16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	88fa      	ldrh	r2, [r7, #6]
 8001b1c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	88fa      	ldrh	r2, [r7, #6]
 8001b22:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b2c:	d108      	bne.n	8001b40 <HAL_UART_Transmit+0x6c>
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	691b      	ldr	r3, [r3, #16]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d104      	bne.n	8001b40 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001b36:	2300      	movs	r3, #0
 8001b38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	61bb      	str	r3, [r7, #24]
 8001b3e:	e003      	b.n	8001b48 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001b44:	2300      	movs	r3, #0
 8001b46:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001b48:	e02a      	b.n	8001ba0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	9300      	str	r3, [sp, #0]
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	2200      	movs	r2, #0
 8001b52:	2180      	movs	r1, #128	; 0x80
 8001b54:	68f8      	ldr	r0, [r7, #12]
 8001b56:	f000 f840 	bl	8001bda <UART_WaitOnFlagUntilTimeout>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001b60:	2303      	movs	r3, #3
 8001b62:	e036      	b.n	8001bd2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d10b      	bne.n	8001b82 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001b6a:	69bb      	ldr	r3, [r7, #24]
 8001b6c:	881b      	ldrh	r3, [r3, #0]
 8001b6e:	461a      	mov	r2, r3
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001b78:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	3302      	adds	r3, #2
 8001b7e:	61bb      	str	r3, [r7, #24]
 8001b80:	e007      	b.n	8001b92 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	781a      	ldrb	r2, [r3, #0]
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	3301      	adds	r3, #1
 8001b90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	3b01      	subs	r3, #1
 8001b9a:	b29a      	uxth	r2, r3
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001ba4:	b29b      	uxth	r3, r3
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d1cf      	bne.n	8001b4a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	9300      	str	r3, [sp, #0]
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	2140      	movs	r1, #64	; 0x40
 8001bb4:	68f8      	ldr	r0, [r7, #12]
 8001bb6:	f000 f810 	bl	8001bda <UART_WaitOnFlagUntilTimeout>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e006      	b.n	8001bd2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2220      	movs	r2, #32
 8001bc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	e000      	b.n	8001bd2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001bd0:	2302      	movs	r3, #2
  }
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3720      	adds	r7, #32
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	b090      	sub	sp, #64	; 0x40
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	60f8      	str	r0, [r7, #12]
 8001be2:	60b9      	str	r1, [r7, #8]
 8001be4:	603b      	str	r3, [r7, #0]
 8001be6:	4613      	mov	r3, r2
 8001be8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001bea:	e050      	b.n	8001c8e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bf2:	d04c      	beq.n	8001c8e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001bf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d007      	beq.n	8001c0a <UART_WaitOnFlagUntilTimeout+0x30>
 8001bfa:	f7fe fddb 	bl	80007b4 <HAL_GetTick>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d241      	bcs.n	8001c8e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	330c      	adds	r3, #12
 8001c10:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c14:	e853 3f00 	ldrex	r3, [r3]
 8001c18:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001c20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	330c      	adds	r3, #12
 8001c28:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001c2a:	637a      	str	r2, [r7, #52]	; 0x34
 8001c2c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c2e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001c30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c32:	e841 2300 	strex	r3, r2, [r1]
 8001c36:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d1e5      	bne.n	8001c0a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	3314      	adds	r3, #20
 8001c44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	e853 3f00 	ldrex	r3, [r3]
 8001c4c:	613b      	str	r3, [r7, #16]
   return(result);
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	f023 0301 	bic.w	r3, r3, #1
 8001c54:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	3314      	adds	r3, #20
 8001c5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001c5e:	623a      	str	r2, [r7, #32]
 8001c60:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c62:	69f9      	ldr	r1, [r7, #28]
 8001c64:	6a3a      	ldr	r2, [r7, #32]
 8001c66:	e841 2300 	strex	r3, r2, [r1]
 8001c6a:	61bb      	str	r3, [r7, #24]
   return(result);
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d1e5      	bne.n	8001c3e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2220      	movs	r2, #32
 8001c76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2220      	movs	r2, #32
 8001c7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2200      	movs	r2, #0
 8001c86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e00f      	b.n	8001cae <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	4013      	ands	r3, r2
 8001c98:	68ba      	ldr	r2, [r7, #8]
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	bf0c      	ite	eq
 8001c9e:	2301      	moveq	r3, #1
 8001ca0:	2300      	movne	r3, #0
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	79fb      	ldrb	r3, [r7, #7]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d09f      	beq.n	8001bec <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3740      	adds	r7, #64	; 0x40
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
	...

08001cb8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	691b      	ldr	r3, [r3, #16]
 8001cc6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	68da      	ldr	r2, [r3, #12]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	430a      	orrs	r2, r1
 8001cd4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	689a      	ldr	r2, [r3, #8]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	691b      	ldr	r3, [r3, #16]
 8001cde:	431a      	orrs	r2, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	695b      	ldr	r3, [r3, #20]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	68db      	ldr	r3, [r3, #12]
 8001cee:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001cf2:	f023 030c 	bic.w	r3, r3, #12
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	6812      	ldr	r2, [r2, #0]
 8001cfa:	68b9      	ldr	r1, [r7, #8]
 8001cfc:	430b      	orrs	r3, r1
 8001cfe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	695b      	ldr	r3, [r3, #20]
 8001d06:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	699a      	ldr	r2, [r3, #24]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	430a      	orrs	r2, r1
 8001d14:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a2c      	ldr	r2, [pc, #176]	; (8001dcc <UART_SetConfig+0x114>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d103      	bne.n	8001d28 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001d20:	f7ff fbdc 	bl	80014dc <HAL_RCC_GetPCLK2Freq>
 8001d24:	60f8      	str	r0, [r7, #12]
 8001d26:	e002      	b.n	8001d2e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001d28:	f7ff fbc4 	bl	80014b4 <HAL_RCC_GetPCLK1Freq>
 8001d2c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001d2e:	68fa      	ldr	r2, [r7, #12]
 8001d30:	4613      	mov	r3, r2
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	4413      	add	r3, r2
 8001d36:	009a      	lsls	r2, r3, #2
 8001d38:	441a      	add	r2, r3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d44:	4a22      	ldr	r2, [pc, #136]	; (8001dd0 <UART_SetConfig+0x118>)
 8001d46:	fba2 2303 	umull	r2, r3, r2, r3
 8001d4a:	095b      	lsrs	r3, r3, #5
 8001d4c:	0119      	lsls	r1, r3, #4
 8001d4e:	68fa      	ldr	r2, [r7, #12]
 8001d50:	4613      	mov	r3, r2
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	4413      	add	r3, r2
 8001d56:	009a      	lsls	r2, r3, #2
 8001d58:	441a      	add	r2, r3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d64:	4b1a      	ldr	r3, [pc, #104]	; (8001dd0 <UART_SetConfig+0x118>)
 8001d66:	fba3 0302 	umull	r0, r3, r3, r2
 8001d6a:	095b      	lsrs	r3, r3, #5
 8001d6c:	2064      	movs	r0, #100	; 0x64
 8001d6e:	fb00 f303 	mul.w	r3, r0, r3
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	011b      	lsls	r3, r3, #4
 8001d76:	3332      	adds	r3, #50	; 0x32
 8001d78:	4a15      	ldr	r2, [pc, #84]	; (8001dd0 <UART_SetConfig+0x118>)
 8001d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d7e:	095b      	lsrs	r3, r3, #5
 8001d80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d84:	4419      	add	r1, r3
 8001d86:	68fa      	ldr	r2, [r7, #12]
 8001d88:	4613      	mov	r3, r2
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	4413      	add	r3, r2
 8001d8e:	009a      	lsls	r2, r3, #2
 8001d90:	441a      	add	r2, r3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d9c:	4b0c      	ldr	r3, [pc, #48]	; (8001dd0 <UART_SetConfig+0x118>)
 8001d9e:	fba3 0302 	umull	r0, r3, r3, r2
 8001da2:	095b      	lsrs	r3, r3, #5
 8001da4:	2064      	movs	r0, #100	; 0x64
 8001da6:	fb00 f303 	mul.w	r3, r0, r3
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	011b      	lsls	r3, r3, #4
 8001dae:	3332      	adds	r3, #50	; 0x32
 8001db0:	4a07      	ldr	r2, [pc, #28]	; (8001dd0 <UART_SetConfig+0x118>)
 8001db2:	fba2 2303 	umull	r2, r3, r2, r3
 8001db6:	095b      	lsrs	r3, r3, #5
 8001db8:	f003 020f 	and.w	r2, r3, #15
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	440a      	add	r2, r1
 8001dc2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001dc4:	bf00      	nop
 8001dc6:	3710      	adds	r7, #16
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	40013800 	.word	0x40013800
 8001dd0:	51eb851f 	.word	0x51eb851f

08001dd4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001dd4:	b480      	push	{r7}
 8001dd6:	b085      	sub	sp, #20
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	60b9      	str	r1, [r7, #8]
 8001dde:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	4a06      	ldr	r2, [pc, #24]	; (8001dfc <vApplicationGetIdleTaskMemory+0x28>)
 8001de4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	4a05      	ldr	r2, [pc, #20]	; (8001e00 <vApplicationGetIdleTaskMemory+0x2c>)
 8001dea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2280      	movs	r2, #128	; 0x80
 8001df0:	601a      	str	r2, [r3, #0]
}
 8001df2:	bf00      	nop
 8001df4:	3714      	adds	r7, #20
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bc80      	pop	{r7}
 8001dfa:	4770      	bx	lr
 8001dfc:	20000198 	.word	0x20000198
 8001e00:	20000240 	.word	0x20000240

08001e04 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001e04:	b480      	push	{r7}
 8001e06:	b085      	sub	sp, #20
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	60f8      	str	r0, [r7, #12]
 8001e0c:	60b9      	str	r1, [r7, #8]
 8001e0e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	4a07      	ldr	r2, [pc, #28]	; (8001e30 <vApplicationGetTimerTaskMemory+0x2c>)
 8001e14:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	4a06      	ldr	r2, [pc, #24]	; (8001e34 <vApplicationGetTimerTaskMemory+0x30>)
 8001e1a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e22:	601a      	str	r2, [r3, #0]
}
 8001e24:	bf00      	nop
 8001e26:	3714      	adds	r7, #20
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bc80      	pop	{r7}
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	20000440 	.word	0x20000440
 8001e34:	200004e8 	.word	0x200004e8

08001e38 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f103 0208 	add.w	r2, r3, #8
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e50:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f103 0208 	add.w	r2, r3, #8
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f103 0208 	add.w	r2, r3, #8
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001e6c:	bf00      	nop
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bc80      	pop	{r7}
 8001e74:	4770      	bx	lr

08001e76 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001e76:	b480      	push	{r7}
 8001e78:	b083      	sub	sp, #12
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001e84:	bf00      	nop
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bc80      	pop	{r7}
 8001e8c:	4770      	bx	lr

08001e8e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001e8e:	b480      	push	{r7}
 8001e90:	b085      	sub	sp, #20
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]
 8001e96:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	68fa      	ldr	r2, [r7, #12]
 8001ea2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	689a      	ldr	r2, [r3, #8]
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	683a      	ldr	r2, [r7, #0]
 8001eb2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	683a      	ldr	r2, [r7, #0]
 8001eb8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	1c5a      	adds	r2, r3, #1
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	601a      	str	r2, [r3, #0]
}
 8001eca:	bf00      	nop
 8001ecc:	3714      	adds	r7, #20
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bc80      	pop	{r7}
 8001ed2:	4770      	bx	lr

08001ed4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b085      	sub	sp, #20
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eea:	d103      	bne.n	8001ef4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	691b      	ldr	r3, [r3, #16]
 8001ef0:	60fb      	str	r3, [r7, #12]
 8001ef2:	e00c      	b.n	8001f0e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	3308      	adds	r3, #8
 8001ef8:	60fb      	str	r3, [r7, #12]
 8001efa:	e002      	b.n	8001f02 <vListInsert+0x2e>
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	60fb      	str	r3, [r7, #12]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	68ba      	ldr	r2, [r7, #8]
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d2f6      	bcs.n	8001efc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	685a      	ldr	r2, [r3, #4]
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	683a      	ldr	r2, [r7, #0]
 8001f1c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	68fa      	ldr	r2, [r7, #12]
 8001f22:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	683a      	ldr	r2, [r7, #0]
 8001f28:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	1c5a      	adds	r2, r3, #1
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	601a      	str	r2, [r3, #0]
}
 8001f3a:	bf00      	nop
 8001f3c:	3714      	adds	r7, #20
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bc80      	pop	{r7}
 8001f42:	4770      	bx	lr

08001f44 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001f44:	b480      	push	{r7}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	691b      	ldr	r3, [r3, #16]
 8001f50:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	6892      	ldr	r2, [r2, #8]
 8001f5a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	6852      	ldr	r2, [r2, #4]
 8001f64:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d103      	bne.n	8001f78 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	689a      	ldr	r2, [r3, #8]
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	1e5a      	subs	r2, r3, #1
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3714      	adds	r7, #20
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bc80      	pop	{r7}
 8001f94:	4770      	bx	lr
	...

08001f98 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d10a      	bne.n	8001fc2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fb0:	f383 8811 	msr	BASEPRI, r3
 8001fb4:	f3bf 8f6f 	isb	sy
 8001fb8:	f3bf 8f4f 	dsb	sy
 8001fbc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001fbe:	bf00      	nop
 8001fc0:	e7fe      	b.n	8001fc0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8001fc2:	f002 f833 	bl	800402c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fce:	68f9      	ldr	r1, [r7, #12]
 8001fd0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001fd2:	fb01 f303 	mul.w	r3, r1, r3
 8001fd6:	441a      	add	r2, r3
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ff2:	3b01      	subs	r3, #1
 8001ff4:	68f9      	ldr	r1, [r7, #12]
 8001ff6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001ff8:	fb01 f303 	mul.w	r3, r1, r3
 8001ffc:	441a      	add	r2, r3
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	22ff      	movs	r2, #255	; 0xff
 8002006:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	22ff      	movs	r2, #255	; 0xff
 800200e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d114      	bne.n	8002042 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	691b      	ldr	r3, [r3, #16]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d01a      	beq.n	8002056 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	3310      	adds	r3, #16
 8002024:	4618      	mov	r0, r3
 8002026:	f001 f959 	bl	80032dc <xTaskRemoveFromEventList>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d012      	beq.n	8002056 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002030:	4b0c      	ldr	r3, [pc, #48]	; (8002064 <xQueueGenericReset+0xcc>)
 8002032:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002036:	601a      	str	r2, [r3, #0]
 8002038:	f3bf 8f4f 	dsb	sy
 800203c:	f3bf 8f6f 	isb	sy
 8002040:	e009      	b.n	8002056 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	3310      	adds	r3, #16
 8002046:	4618      	mov	r0, r3
 8002048:	f7ff fef6 	bl	8001e38 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	3324      	adds	r3, #36	; 0x24
 8002050:	4618      	mov	r0, r3
 8002052:	f7ff fef1 	bl	8001e38 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002056:	f002 f819 	bl	800408c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800205a:	2301      	movs	r3, #1
}
 800205c:	4618      	mov	r0, r3
 800205e:	3710      	adds	r7, #16
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	e000ed04 	.word	0xe000ed04

08002068 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002068:	b580      	push	{r7, lr}
 800206a:	b08e      	sub	sp, #56	; 0x38
 800206c:	af02      	add	r7, sp, #8
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	60b9      	str	r1, [r7, #8]
 8002072:	607a      	str	r2, [r7, #4]
 8002074:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d10a      	bne.n	8002092 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800207c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002080:	f383 8811 	msr	BASEPRI, r3
 8002084:	f3bf 8f6f 	isb	sy
 8002088:	f3bf 8f4f 	dsb	sy
 800208c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800208e:	bf00      	nop
 8002090:	e7fe      	b.n	8002090 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d10a      	bne.n	80020ae <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800209c:	f383 8811 	msr	BASEPRI, r3
 80020a0:	f3bf 8f6f 	isb	sy
 80020a4:	f3bf 8f4f 	dsb	sy
 80020a8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80020aa:	bf00      	nop
 80020ac:	e7fe      	b.n	80020ac <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d002      	beq.n	80020ba <xQueueGenericCreateStatic+0x52>
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <xQueueGenericCreateStatic+0x56>
 80020ba:	2301      	movs	r3, #1
 80020bc:	e000      	b.n	80020c0 <xQueueGenericCreateStatic+0x58>
 80020be:	2300      	movs	r3, #0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d10a      	bne.n	80020da <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80020c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020c8:	f383 8811 	msr	BASEPRI, r3
 80020cc:	f3bf 8f6f 	isb	sy
 80020d0:	f3bf 8f4f 	dsb	sy
 80020d4:	623b      	str	r3, [r7, #32]
}
 80020d6:	bf00      	nop
 80020d8:	e7fe      	b.n	80020d8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d102      	bne.n	80020e6 <xQueueGenericCreateStatic+0x7e>
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d101      	bne.n	80020ea <xQueueGenericCreateStatic+0x82>
 80020e6:	2301      	movs	r3, #1
 80020e8:	e000      	b.n	80020ec <xQueueGenericCreateStatic+0x84>
 80020ea:	2300      	movs	r3, #0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d10a      	bne.n	8002106 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80020f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020f4:	f383 8811 	msr	BASEPRI, r3
 80020f8:	f3bf 8f6f 	isb	sy
 80020fc:	f3bf 8f4f 	dsb	sy
 8002100:	61fb      	str	r3, [r7, #28]
}
 8002102:	bf00      	nop
 8002104:	e7fe      	b.n	8002104 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002106:	2350      	movs	r3, #80	; 0x50
 8002108:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	2b50      	cmp	r3, #80	; 0x50
 800210e:	d00a      	beq.n	8002126 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002114:	f383 8811 	msr	BASEPRI, r3
 8002118:	f3bf 8f6f 	isb	sy
 800211c:	f3bf 8f4f 	dsb	sy
 8002120:	61bb      	str	r3, [r7, #24]
}
 8002122:	bf00      	nop
 8002124:	e7fe      	b.n	8002124 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800212a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800212c:	2b00      	cmp	r3, #0
 800212e:	d00d      	beq.n	800214c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002132:	2201      	movs	r2, #1
 8002134:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002138:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800213c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800213e:	9300      	str	r3, [sp, #0]
 8002140:	4613      	mov	r3, r2
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	68b9      	ldr	r1, [r7, #8]
 8002146:	68f8      	ldr	r0, [r7, #12]
 8002148:	f000 f843 	bl	80021d2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800214c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800214e:	4618      	mov	r0, r3
 8002150:	3730      	adds	r7, #48	; 0x30
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002156:	b580      	push	{r7, lr}
 8002158:	b08a      	sub	sp, #40	; 0x28
 800215a:	af02      	add	r7, sp, #8
 800215c:	60f8      	str	r0, [r7, #12]
 800215e:	60b9      	str	r1, [r7, #8]
 8002160:	4613      	mov	r3, r2
 8002162:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d10a      	bne.n	8002180 <xQueueGenericCreate+0x2a>
	__asm volatile
 800216a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800216e:	f383 8811 	msr	BASEPRI, r3
 8002172:	f3bf 8f6f 	isb	sy
 8002176:	f3bf 8f4f 	dsb	sy
 800217a:	613b      	str	r3, [r7, #16]
}
 800217c:	bf00      	nop
 800217e:	e7fe      	b.n	800217e <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d102      	bne.n	800218c <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002186:	2300      	movs	r3, #0
 8002188:	61fb      	str	r3, [r7, #28]
 800218a:	e004      	b.n	8002196 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	68ba      	ldr	r2, [r7, #8]
 8002190:	fb02 f303 	mul.w	r3, r2, r3
 8002194:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	3350      	adds	r3, #80	; 0x50
 800219a:	4618      	mov	r0, r3
 800219c:	f002 f846 	bl	800422c <pvPortMalloc>
 80021a0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d00f      	beq.n	80021c8 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	3350      	adds	r3, #80	; 0x50
 80021ac:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	2200      	movs	r2, #0
 80021b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80021b6:	79fa      	ldrb	r2, [r7, #7]
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	9300      	str	r3, [sp, #0]
 80021bc:	4613      	mov	r3, r2
 80021be:	697a      	ldr	r2, [r7, #20]
 80021c0:	68b9      	ldr	r1, [r7, #8]
 80021c2:	68f8      	ldr	r0, [r7, #12]
 80021c4:	f000 f805 	bl	80021d2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80021c8:	69bb      	ldr	r3, [r7, #24]
	}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3720      	adds	r7, #32
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b084      	sub	sp, #16
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	60f8      	str	r0, [r7, #12]
 80021da:	60b9      	str	r1, [r7, #8]
 80021dc:	607a      	str	r2, [r7, #4]
 80021de:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d103      	bne.n	80021ee <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80021e6:	69bb      	ldr	r3, [r7, #24]
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	601a      	str	r2, [r3, #0]
 80021ec:	e002      	b.n	80021f4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80021f4:	69bb      	ldr	r3, [r7, #24]
 80021f6:	68fa      	ldr	r2, [r7, #12]
 80021f8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	68ba      	ldr	r2, [r7, #8]
 80021fe:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002200:	2101      	movs	r1, #1
 8002202:	69b8      	ldr	r0, [r7, #24]
 8002204:	f7ff fec8 	bl	8001f98 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	78fa      	ldrb	r2, [r7, #3]
 800220c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002210:	bf00      	nop
 8002212:	3710      	adds	r7, #16
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}

08002218 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b08e      	sub	sp, #56	; 0x38
 800221c:	af00      	add	r7, sp, #0
 800221e:	60f8      	str	r0, [r7, #12]
 8002220:	60b9      	str	r1, [r7, #8]
 8002222:	607a      	str	r2, [r7, #4]
 8002224:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002226:	2300      	movs	r3, #0
 8002228:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800222e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002230:	2b00      	cmp	r3, #0
 8002232:	d10a      	bne.n	800224a <xQueueGenericSend+0x32>
	__asm volatile
 8002234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002238:	f383 8811 	msr	BASEPRI, r3
 800223c:	f3bf 8f6f 	isb	sy
 8002240:	f3bf 8f4f 	dsb	sy
 8002244:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002246:	bf00      	nop
 8002248:	e7fe      	b.n	8002248 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d103      	bne.n	8002258 <xQueueGenericSend+0x40>
 8002250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002254:	2b00      	cmp	r3, #0
 8002256:	d101      	bne.n	800225c <xQueueGenericSend+0x44>
 8002258:	2301      	movs	r3, #1
 800225a:	e000      	b.n	800225e <xQueueGenericSend+0x46>
 800225c:	2300      	movs	r3, #0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d10a      	bne.n	8002278 <xQueueGenericSend+0x60>
	__asm volatile
 8002262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002266:	f383 8811 	msr	BASEPRI, r3
 800226a:	f3bf 8f6f 	isb	sy
 800226e:	f3bf 8f4f 	dsb	sy
 8002272:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002274:	bf00      	nop
 8002276:	e7fe      	b.n	8002276 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	2b02      	cmp	r3, #2
 800227c:	d103      	bne.n	8002286 <xQueueGenericSend+0x6e>
 800227e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002282:	2b01      	cmp	r3, #1
 8002284:	d101      	bne.n	800228a <xQueueGenericSend+0x72>
 8002286:	2301      	movs	r3, #1
 8002288:	e000      	b.n	800228c <xQueueGenericSend+0x74>
 800228a:	2300      	movs	r3, #0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d10a      	bne.n	80022a6 <xQueueGenericSend+0x8e>
	__asm volatile
 8002290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002294:	f383 8811 	msr	BASEPRI, r3
 8002298:	f3bf 8f6f 	isb	sy
 800229c:	f3bf 8f4f 	dsb	sy
 80022a0:	623b      	str	r3, [r7, #32]
}
 80022a2:	bf00      	nop
 80022a4:	e7fe      	b.n	80022a4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80022a6:	f001 f9df 	bl	8003668 <xTaskGetSchedulerState>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d102      	bne.n	80022b6 <xQueueGenericSend+0x9e>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d101      	bne.n	80022ba <xQueueGenericSend+0xa2>
 80022b6:	2301      	movs	r3, #1
 80022b8:	e000      	b.n	80022bc <xQueueGenericSend+0xa4>
 80022ba:	2300      	movs	r3, #0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d10a      	bne.n	80022d6 <xQueueGenericSend+0xbe>
	__asm volatile
 80022c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022c4:	f383 8811 	msr	BASEPRI, r3
 80022c8:	f3bf 8f6f 	isb	sy
 80022cc:	f3bf 8f4f 	dsb	sy
 80022d0:	61fb      	str	r3, [r7, #28]
}
 80022d2:	bf00      	nop
 80022d4:	e7fe      	b.n	80022d4 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80022d6:	f001 fea9 	bl	800402c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80022da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d302      	bcc.n	80022ec <xQueueGenericSend+0xd4>
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d129      	bne.n	8002340 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80022ec:	683a      	ldr	r2, [r7, #0]
 80022ee:	68b9      	ldr	r1, [r7, #8]
 80022f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80022f2:	f000 fa07 	bl	8002704 <prvCopyDataToQueue>
 80022f6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80022f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d010      	beq.n	8002322 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002302:	3324      	adds	r3, #36	; 0x24
 8002304:	4618      	mov	r0, r3
 8002306:	f000 ffe9 	bl	80032dc <xTaskRemoveFromEventList>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d013      	beq.n	8002338 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002310:	4b3f      	ldr	r3, [pc, #252]	; (8002410 <xQueueGenericSend+0x1f8>)
 8002312:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002316:	601a      	str	r2, [r3, #0]
 8002318:	f3bf 8f4f 	dsb	sy
 800231c:	f3bf 8f6f 	isb	sy
 8002320:	e00a      	b.n	8002338 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002324:	2b00      	cmp	r3, #0
 8002326:	d007      	beq.n	8002338 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002328:	4b39      	ldr	r3, [pc, #228]	; (8002410 <xQueueGenericSend+0x1f8>)
 800232a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800232e:	601a      	str	r2, [r3, #0]
 8002330:	f3bf 8f4f 	dsb	sy
 8002334:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002338:	f001 fea8 	bl	800408c <vPortExitCritical>
				return pdPASS;
 800233c:	2301      	movs	r3, #1
 800233e:	e063      	b.n	8002408 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d103      	bne.n	800234e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002346:	f001 fea1 	bl	800408c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800234a:	2300      	movs	r3, #0
 800234c:	e05c      	b.n	8002408 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800234e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002350:	2b00      	cmp	r3, #0
 8002352:	d106      	bne.n	8002362 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002354:	f107 0314 	add.w	r3, r7, #20
 8002358:	4618      	mov	r0, r3
 800235a:	f001 f823 	bl	80033a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800235e:	2301      	movs	r3, #1
 8002360:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002362:	f001 fe93 	bl	800408c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002366:	f000 fd8d 	bl	8002e84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800236a:	f001 fe5f 	bl	800402c <vPortEnterCritical>
 800236e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002370:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002374:	b25b      	sxtb	r3, r3
 8002376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800237a:	d103      	bne.n	8002384 <xQueueGenericSend+0x16c>
 800237c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800237e:	2200      	movs	r2, #0
 8002380:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002386:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800238a:	b25b      	sxtb	r3, r3
 800238c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002390:	d103      	bne.n	800239a <xQueueGenericSend+0x182>
 8002392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002394:	2200      	movs	r2, #0
 8002396:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800239a:	f001 fe77 	bl	800408c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800239e:	1d3a      	adds	r2, r7, #4
 80023a0:	f107 0314 	add.w	r3, r7, #20
 80023a4:	4611      	mov	r1, r2
 80023a6:	4618      	mov	r0, r3
 80023a8:	f001 f812 	bl	80033d0 <xTaskCheckForTimeOut>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d124      	bne.n	80023fc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80023b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80023b4:	f000 fa9e 	bl	80028f4 <prvIsQueueFull>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d018      	beq.n	80023f0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80023be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023c0:	3310      	adds	r3, #16
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	4611      	mov	r1, r2
 80023c6:	4618      	mov	r0, r3
 80023c8:	f000 ff38 	bl	800323c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80023cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80023ce:	f000 fa29 	bl	8002824 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80023d2:	f000 fd65 	bl	8002ea0 <xTaskResumeAll>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	f47f af7c 	bne.w	80022d6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80023de:	4b0c      	ldr	r3, [pc, #48]	; (8002410 <xQueueGenericSend+0x1f8>)
 80023e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023e4:	601a      	str	r2, [r3, #0]
 80023e6:	f3bf 8f4f 	dsb	sy
 80023ea:	f3bf 8f6f 	isb	sy
 80023ee:	e772      	b.n	80022d6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80023f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80023f2:	f000 fa17 	bl	8002824 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80023f6:	f000 fd53 	bl	8002ea0 <xTaskResumeAll>
 80023fa:	e76c      	b.n	80022d6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80023fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80023fe:	f000 fa11 	bl	8002824 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002402:	f000 fd4d 	bl	8002ea0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002406:	2300      	movs	r3, #0
		}
	}
}
 8002408:	4618      	mov	r0, r3
 800240a:	3738      	adds	r7, #56	; 0x38
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	e000ed04 	.word	0xe000ed04

08002414 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b08e      	sub	sp, #56	; 0x38
 8002418:	af00      	add	r7, sp, #0
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	60b9      	str	r1, [r7, #8]
 800241e:	607a      	str	r2, [r7, #4]
 8002420:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002428:	2b00      	cmp	r3, #0
 800242a:	d10a      	bne.n	8002442 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800242c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002430:	f383 8811 	msr	BASEPRI, r3
 8002434:	f3bf 8f6f 	isb	sy
 8002438:	f3bf 8f4f 	dsb	sy
 800243c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800243e:	bf00      	nop
 8002440:	e7fe      	b.n	8002440 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d103      	bne.n	8002450 <xQueueGenericSendFromISR+0x3c>
 8002448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800244a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244c:	2b00      	cmp	r3, #0
 800244e:	d101      	bne.n	8002454 <xQueueGenericSendFromISR+0x40>
 8002450:	2301      	movs	r3, #1
 8002452:	e000      	b.n	8002456 <xQueueGenericSendFromISR+0x42>
 8002454:	2300      	movs	r3, #0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d10a      	bne.n	8002470 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800245a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800245e:	f383 8811 	msr	BASEPRI, r3
 8002462:	f3bf 8f6f 	isb	sy
 8002466:	f3bf 8f4f 	dsb	sy
 800246a:	623b      	str	r3, [r7, #32]
}
 800246c:	bf00      	nop
 800246e:	e7fe      	b.n	800246e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	2b02      	cmp	r3, #2
 8002474:	d103      	bne.n	800247e <xQueueGenericSendFromISR+0x6a>
 8002476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800247a:	2b01      	cmp	r3, #1
 800247c:	d101      	bne.n	8002482 <xQueueGenericSendFromISR+0x6e>
 800247e:	2301      	movs	r3, #1
 8002480:	e000      	b.n	8002484 <xQueueGenericSendFromISR+0x70>
 8002482:	2300      	movs	r3, #0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d10a      	bne.n	800249e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800248c:	f383 8811 	msr	BASEPRI, r3
 8002490:	f3bf 8f6f 	isb	sy
 8002494:	f3bf 8f4f 	dsb	sy
 8002498:	61fb      	str	r3, [r7, #28]
}
 800249a:	bf00      	nop
 800249c:	e7fe      	b.n	800249c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800249e:	f001 fe87 	bl	80041b0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80024a2:	f3ef 8211 	mrs	r2, BASEPRI
 80024a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024aa:	f383 8811 	msr	BASEPRI, r3
 80024ae:	f3bf 8f6f 	isb	sy
 80024b2:	f3bf 8f4f 	dsb	sy
 80024b6:	61ba      	str	r2, [r7, #24]
 80024b8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80024ba:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80024bc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80024be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d302      	bcc.n	80024d0 <xQueueGenericSendFromISR+0xbc>
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d12c      	bne.n	800252a <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80024d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80024d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80024da:	683a      	ldr	r2, [r7, #0]
 80024dc:	68b9      	ldr	r1, [r7, #8]
 80024de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80024e0:	f000 f910 	bl	8002704 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80024e4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80024e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024ec:	d112      	bne.n	8002514 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80024ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d016      	beq.n	8002524 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80024f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024f8:	3324      	adds	r3, #36	; 0x24
 80024fa:	4618      	mov	r0, r3
 80024fc:	f000 feee 	bl	80032dc <xTaskRemoveFromEventList>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d00e      	beq.n	8002524 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d00b      	beq.n	8002524 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2201      	movs	r2, #1
 8002510:	601a      	str	r2, [r3, #0]
 8002512:	e007      	b.n	8002524 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002514:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002518:	3301      	adds	r3, #1
 800251a:	b2db      	uxtb	r3, r3
 800251c:	b25a      	sxtb	r2, r3
 800251e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002520:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002524:	2301      	movs	r3, #1
 8002526:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002528:	e001      	b.n	800252e <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800252a:	2300      	movs	r3, #0
 800252c:	637b      	str	r3, [r7, #52]	; 0x34
 800252e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002530:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002538:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800253a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800253c:	4618      	mov	r0, r3
 800253e:	3738      	adds	r7, #56	; 0x38
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b08c      	sub	sp, #48	; 0x30
 8002548:	af00      	add	r7, sp, #0
 800254a:	60f8      	str	r0, [r7, #12]
 800254c:	60b9      	str	r1, [r7, #8]
 800254e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002550:	2300      	movs	r3, #0
 8002552:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800255a:	2b00      	cmp	r3, #0
 800255c:	d10a      	bne.n	8002574 <xQueueReceive+0x30>
	__asm volatile
 800255e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002562:	f383 8811 	msr	BASEPRI, r3
 8002566:	f3bf 8f6f 	isb	sy
 800256a:	f3bf 8f4f 	dsb	sy
 800256e:	623b      	str	r3, [r7, #32]
}
 8002570:	bf00      	nop
 8002572:	e7fe      	b.n	8002572 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d103      	bne.n	8002582 <xQueueReceive+0x3e>
 800257a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800257c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257e:	2b00      	cmp	r3, #0
 8002580:	d101      	bne.n	8002586 <xQueueReceive+0x42>
 8002582:	2301      	movs	r3, #1
 8002584:	e000      	b.n	8002588 <xQueueReceive+0x44>
 8002586:	2300      	movs	r3, #0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d10a      	bne.n	80025a2 <xQueueReceive+0x5e>
	__asm volatile
 800258c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002590:	f383 8811 	msr	BASEPRI, r3
 8002594:	f3bf 8f6f 	isb	sy
 8002598:	f3bf 8f4f 	dsb	sy
 800259c:	61fb      	str	r3, [r7, #28]
}
 800259e:	bf00      	nop
 80025a0:	e7fe      	b.n	80025a0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80025a2:	f001 f861 	bl	8003668 <xTaskGetSchedulerState>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d102      	bne.n	80025b2 <xQueueReceive+0x6e>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d101      	bne.n	80025b6 <xQueueReceive+0x72>
 80025b2:	2301      	movs	r3, #1
 80025b4:	e000      	b.n	80025b8 <xQueueReceive+0x74>
 80025b6:	2300      	movs	r3, #0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d10a      	bne.n	80025d2 <xQueueReceive+0x8e>
	__asm volatile
 80025bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025c0:	f383 8811 	msr	BASEPRI, r3
 80025c4:	f3bf 8f6f 	isb	sy
 80025c8:	f3bf 8f4f 	dsb	sy
 80025cc:	61bb      	str	r3, [r7, #24]
}
 80025ce:	bf00      	nop
 80025d0:	e7fe      	b.n	80025d0 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80025d2:	f001 fd2b 	bl	800402c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80025d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025da:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80025dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d01f      	beq.n	8002622 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80025e2:	68b9      	ldr	r1, [r7, #8]
 80025e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80025e6:	f000 f8f7 	bl	80027d8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80025ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ec:	1e5a      	subs	r2, r3, #1
 80025ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025f0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80025f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025f4:	691b      	ldr	r3, [r3, #16]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d00f      	beq.n	800261a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80025fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025fc:	3310      	adds	r3, #16
 80025fe:	4618      	mov	r0, r3
 8002600:	f000 fe6c 	bl	80032dc <xTaskRemoveFromEventList>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d007      	beq.n	800261a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800260a:	4b3d      	ldr	r3, [pc, #244]	; (8002700 <xQueueReceive+0x1bc>)
 800260c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002610:	601a      	str	r2, [r3, #0]
 8002612:	f3bf 8f4f 	dsb	sy
 8002616:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800261a:	f001 fd37 	bl	800408c <vPortExitCritical>
				return pdPASS;
 800261e:	2301      	movs	r3, #1
 8002620:	e069      	b.n	80026f6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d103      	bne.n	8002630 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002628:	f001 fd30 	bl	800408c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800262c:	2300      	movs	r3, #0
 800262e:	e062      	b.n	80026f6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002632:	2b00      	cmp	r3, #0
 8002634:	d106      	bne.n	8002644 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002636:	f107 0310 	add.w	r3, r7, #16
 800263a:	4618      	mov	r0, r3
 800263c:	f000 feb2 	bl	80033a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002640:	2301      	movs	r3, #1
 8002642:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002644:	f001 fd22 	bl	800408c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002648:	f000 fc1c 	bl	8002e84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800264c:	f001 fcee 	bl	800402c <vPortEnterCritical>
 8002650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002652:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002656:	b25b      	sxtb	r3, r3
 8002658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800265c:	d103      	bne.n	8002666 <xQueueReceive+0x122>
 800265e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002660:	2200      	movs	r2, #0
 8002662:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002668:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800266c:	b25b      	sxtb	r3, r3
 800266e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002672:	d103      	bne.n	800267c <xQueueReceive+0x138>
 8002674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002676:	2200      	movs	r2, #0
 8002678:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800267c:	f001 fd06 	bl	800408c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002680:	1d3a      	adds	r2, r7, #4
 8002682:	f107 0310 	add.w	r3, r7, #16
 8002686:	4611      	mov	r1, r2
 8002688:	4618      	mov	r0, r3
 800268a:	f000 fea1 	bl	80033d0 <xTaskCheckForTimeOut>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d123      	bne.n	80026dc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002694:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002696:	f000 f917 	bl	80028c8 <prvIsQueueEmpty>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d017      	beq.n	80026d0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80026a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026a2:	3324      	adds	r3, #36	; 0x24
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	4611      	mov	r1, r2
 80026a8:	4618      	mov	r0, r3
 80026aa:	f000 fdc7 	bl	800323c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80026ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80026b0:	f000 f8b8 	bl	8002824 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80026b4:	f000 fbf4 	bl	8002ea0 <xTaskResumeAll>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d189      	bne.n	80025d2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80026be:	4b10      	ldr	r3, [pc, #64]	; (8002700 <xQueueReceive+0x1bc>)
 80026c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026c4:	601a      	str	r2, [r3, #0]
 80026c6:	f3bf 8f4f 	dsb	sy
 80026ca:	f3bf 8f6f 	isb	sy
 80026ce:	e780      	b.n	80025d2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80026d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80026d2:	f000 f8a7 	bl	8002824 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80026d6:	f000 fbe3 	bl	8002ea0 <xTaskResumeAll>
 80026da:	e77a      	b.n	80025d2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80026dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80026de:	f000 f8a1 	bl	8002824 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80026e2:	f000 fbdd 	bl	8002ea0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80026e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80026e8:	f000 f8ee 	bl	80028c8 <prvIsQueueEmpty>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	f43f af6f 	beq.w	80025d2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80026f4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3730      	adds	r7, #48	; 0x30
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	e000ed04 	.word	0xe000ed04

08002704 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b086      	sub	sp, #24
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002710:	2300      	movs	r3, #0
 8002712:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002718:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271e:	2b00      	cmp	r3, #0
 8002720:	d10d      	bne.n	800273e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d14d      	bne.n	80027c6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	4618      	mov	r0, r3
 8002730:	f000 ffb8 	bl	80036a4 <xTaskPriorityDisinherit>
 8002734:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2200      	movs	r2, #0
 800273a:	605a      	str	r2, [r3, #4]
 800273c:	e043      	b.n	80027c6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d119      	bne.n	8002778 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6898      	ldr	r0, [r3, #8]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274c:	461a      	mov	r2, r3
 800274e:	68b9      	ldr	r1, [r7, #8]
 8002750:	f001 ffc8 	bl	80046e4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	689a      	ldr	r2, [r3, #8]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275c:	441a      	add	r2, r3
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	689a      	ldr	r2, [r3, #8]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	429a      	cmp	r2, r3
 800276c:	d32b      	bcc.n	80027c6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	609a      	str	r2, [r3, #8]
 8002776:	e026      	b.n	80027c6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	68d8      	ldr	r0, [r3, #12]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002780:	461a      	mov	r2, r3
 8002782:	68b9      	ldr	r1, [r7, #8]
 8002784:	f001 ffae 	bl	80046e4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	68da      	ldr	r2, [r3, #12]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002790:	425b      	negs	r3, r3
 8002792:	441a      	add	r2, r3
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	68da      	ldr	r2, [r3, #12]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d207      	bcs.n	80027b4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	685a      	ldr	r2, [r3, #4]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ac:	425b      	negs	r3, r3
 80027ae:	441a      	add	r2, r3
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d105      	bne.n	80027c6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d002      	beq.n	80027c6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	3b01      	subs	r3, #1
 80027c4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	1c5a      	adds	r2, r3, #1
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80027ce:	697b      	ldr	r3, [r7, #20]
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3718      	adds	r7, #24
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d018      	beq.n	800281c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	68da      	ldr	r2, [r3, #12]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f2:	441a      	add	r2, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	68da      	ldr	r2, [r3, #12]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	429a      	cmp	r2, r3
 8002802:	d303      	bcc.n	800280c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	68d9      	ldr	r1, [r3, #12]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002814:	461a      	mov	r2, r3
 8002816:	6838      	ldr	r0, [r7, #0]
 8002818:	f001 ff64 	bl	80046e4 <memcpy>
	}
}
 800281c:	bf00      	nop
 800281e:	3708      	adds	r7, #8
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}

08002824 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800282c:	f001 fbfe 	bl	800402c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002836:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002838:	e011      	b.n	800285e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283e:	2b00      	cmp	r3, #0
 8002840:	d012      	beq.n	8002868 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	3324      	adds	r3, #36	; 0x24
 8002846:	4618      	mov	r0, r3
 8002848:	f000 fd48 	bl	80032dc <xTaskRemoveFromEventList>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d001      	beq.n	8002856 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002852:	f000 fe1f 	bl	8003494 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002856:	7bfb      	ldrb	r3, [r7, #15]
 8002858:	3b01      	subs	r3, #1
 800285a:	b2db      	uxtb	r3, r3
 800285c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800285e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002862:	2b00      	cmp	r3, #0
 8002864:	dce9      	bgt.n	800283a <prvUnlockQueue+0x16>
 8002866:	e000      	b.n	800286a <prvUnlockQueue+0x46>
					break;
 8002868:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	22ff      	movs	r2, #255	; 0xff
 800286e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002872:	f001 fc0b 	bl	800408c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002876:	f001 fbd9 	bl	800402c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002880:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002882:	e011      	b.n	80028a8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	691b      	ldr	r3, [r3, #16]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d012      	beq.n	80028b2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	3310      	adds	r3, #16
 8002890:	4618      	mov	r0, r3
 8002892:	f000 fd23 	bl	80032dc <xTaskRemoveFromEventList>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d001      	beq.n	80028a0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800289c:	f000 fdfa 	bl	8003494 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80028a0:	7bbb      	ldrb	r3, [r7, #14]
 80028a2:	3b01      	subs	r3, #1
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80028a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	dce9      	bgt.n	8002884 <prvUnlockQueue+0x60>
 80028b0:	e000      	b.n	80028b4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80028b2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	22ff      	movs	r2, #255	; 0xff
 80028b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80028bc:	f001 fbe6 	bl	800408c <vPortExitCritical>
}
 80028c0:	bf00      	nop
 80028c2:	3710      	adds	r7, #16
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80028d0:	f001 fbac 	bl	800402c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d102      	bne.n	80028e2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80028dc:	2301      	movs	r3, #1
 80028de:	60fb      	str	r3, [r7, #12]
 80028e0:	e001      	b.n	80028e6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80028e2:	2300      	movs	r3, #0
 80028e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80028e6:	f001 fbd1 	bl	800408c <vPortExitCritical>

	return xReturn;
 80028ea:	68fb      	ldr	r3, [r7, #12]
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3710      	adds	r7, #16
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80028fc:	f001 fb96 	bl	800402c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002908:	429a      	cmp	r2, r3
 800290a:	d102      	bne.n	8002912 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800290c:	2301      	movs	r3, #1
 800290e:	60fb      	str	r3, [r7, #12]
 8002910:	e001      	b.n	8002916 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002912:	2300      	movs	r3, #0
 8002914:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002916:	f001 fbb9 	bl	800408c <vPortExitCritical>

	return xReturn;
 800291a:	68fb      	ldr	r3, [r7, #12]
}
 800291c:	4618      	mov	r0, r3
 800291e:	3710      	adds	r7, #16
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}

08002924 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002924:	b480      	push	{r7}
 8002926:	b085      	sub	sp, #20
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800292e:	2300      	movs	r3, #0
 8002930:	60fb      	str	r3, [r7, #12]
 8002932:	e014      	b.n	800295e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002934:	4a0e      	ldr	r2, [pc, #56]	; (8002970 <vQueueAddToRegistry+0x4c>)
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d10b      	bne.n	8002958 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002940:	490b      	ldr	r1, [pc, #44]	; (8002970 <vQueueAddToRegistry+0x4c>)
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	683a      	ldr	r2, [r7, #0]
 8002946:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800294a:	4a09      	ldr	r2, [pc, #36]	; (8002970 <vQueueAddToRegistry+0x4c>)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	00db      	lsls	r3, r3, #3
 8002950:	4413      	add	r3, r2
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002956:	e006      	b.n	8002966 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	3301      	adds	r3, #1
 800295c:	60fb      	str	r3, [r7, #12]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2b07      	cmp	r3, #7
 8002962:	d9e7      	bls.n	8002934 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002964:	bf00      	nop
 8002966:	bf00      	nop
 8002968:	3714      	adds	r7, #20
 800296a:	46bd      	mov	sp, r7
 800296c:	bc80      	pop	{r7}
 800296e:	4770      	bx	lr
 8002970:	200008e8 	.word	0x200008e8

08002974 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002974:	b580      	push	{r7, lr}
 8002976:	b086      	sub	sp, #24
 8002978:	af00      	add	r7, sp, #0
 800297a:	60f8      	str	r0, [r7, #12]
 800297c:	60b9      	str	r1, [r7, #8]
 800297e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002984:	f001 fb52 	bl	800402c <vPortEnterCritical>
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800298e:	b25b      	sxtb	r3, r3
 8002990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002994:	d103      	bne.n	800299e <vQueueWaitForMessageRestricted+0x2a>
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	2200      	movs	r2, #0
 800299a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80029a4:	b25b      	sxtb	r3, r3
 80029a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029aa:	d103      	bne.n	80029b4 <vQueueWaitForMessageRestricted+0x40>
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	2200      	movs	r2, #0
 80029b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80029b4:	f001 fb6a 	bl	800408c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d106      	bne.n	80029ce <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	3324      	adds	r3, #36	; 0x24
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	68b9      	ldr	r1, [r7, #8]
 80029c8:	4618      	mov	r0, r3
 80029ca:	f000 fc5b 	bl	8003284 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80029ce:	6978      	ldr	r0, [r7, #20]
 80029d0:	f7ff ff28 	bl	8002824 <prvUnlockQueue>
	}
 80029d4:	bf00      	nop
 80029d6:	3718      	adds	r7, #24
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}

080029dc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b08e      	sub	sp, #56	; 0x38
 80029e0:	af04      	add	r7, sp, #16
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	60b9      	str	r1, [r7, #8]
 80029e6:	607a      	str	r2, [r7, #4]
 80029e8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80029ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d10a      	bne.n	8002a06 <xTaskCreateStatic+0x2a>
	__asm volatile
 80029f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029f4:	f383 8811 	msr	BASEPRI, r3
 80029f8:	f3bf 8f6f 	isb	sy
 80029fc:	f3bf 8f4f 	dsb	sy
 8002a00:	623b      	str	r3, [r7, #32]
}
 8002a02:	bf00      	nop
 8002a04:	e7fe      	b.n	8002a04 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d10a      	bne.n	8002a22 <xTaskCreateStatic+0x46>
	__asm volatile
 8002a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a10:	f383 8811 	msr	BASEPRI, r3
 8002a14:	f3bf 8f6f 	isb	sy
 8002a18:	f3bf 8f4f 	dsb	sy
 8002a1c:	61fb      	str	r3, [r7, #28]
}
 8002a1e:	bf00      	nop
 8002a20:	e7fe      	b.n	8002a20 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002a22:	23a8      	movs	r3, #168	; 0xa8
 8002a24:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	2ba8      	cmp	r3, #168	; 0xa8
 8002a2a:	d00a      	beq.n	8002a42 <xTaskCreateStatic+0x66>
	__asm volatile
 8002a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a30:	f383 8811 	msr	BASEPRI, r3
 8002a34:	f3bf 8f6f 	isb	sy
 8002a38:	f3bf 8f4f 	dsb	sy
 8002a3c:	61bb      	str	r3, [r7, #24]
}
 8002a3e:	bf00      	nop
 8002a40:	e7fe      	b.n	8002a40 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d01e      	beq.n	8002a86 <xTaskCreateStatic+0xaa>
 8002a48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d01b      	beq.n	8002a86 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a50:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a56:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5a:	2202      	movs	r2, #2
 8002a5c:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002a60:	2300      	movs	r3, #0
 8002a62:	9303      	str	r3, [sp, #12]
 8002a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a66:	9302      	str	r3, [sp, #8]
 8002a68:	f107 0314 	add.w	r3, r7, #20
 8002a6c:	9301      	str	r3, [sp, #4]
 8002a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a70:	9300      	str	r3, [sp, #0]
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	68b9      	ldr	r1, [r7, #8]
 8002a78:	68f8      	ldr	r0, [r7, #12]
 8002a7a:	f000 f851 	bl	8002b20 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002a7e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002a80:	f000 f8ec 	bl	8002c5c <prvAddNewTaskToReadyList>
 8002a84:	e001      	b.n	8002a8a <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8002a86:	2300      	movs	r3, #0
 8002a88:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002a8a:	697b      	ldr	r3, [r7, #20]
	}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3728      	adds	r7, #40	; 0x28
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b08c      	sub	sp, #48	; 0x30
 8002a98:	af04      	add	r7, sp, #16
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	60b9      	str	r1, [r7, #8]
 8002a9e:	603b      	str	r3, [r7, #0]
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002aa4:	88fb      	ldrh	r3, [r7, #6]
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f001 fbbf 	bl	800422c <pvPortMalloc>
 8002aae:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d00e      	beq.n	8002ad4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002ab6:	20a8      	movs	r0, #168	; 0xa8
 8002ab8:	f001 fbb8 	bl	800422c <pvPortMalloc>
 8002abc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d003      	beq.n	8002acc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	697a      	ldr	r2, [r7, #20]
 8002ac8:	631a      	str	r2, [r3, #48]	; 0x30
 8002aca:	e005      	b.n	8002ad8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002acc:	6978      	ldr	r0, [r7, #20]
 8002ace:	f001 fc71 	bl	80043b4 <vPortFree>
 8002ad2:	e001      	b.n	8002ad8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d017      	beq.n	8002b0e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002ae6:	88fa      	ldrh	r2, [r7, #6]
 8002ae8:	2300      	movs	r3, #0
 8002aea:	9303      	str	r3, [sp, #12]
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	9302      	str	r3, [sp, #8]
 8002af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002af2:	9301      	str	r3, [sp, #4]
 8002af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002af6:	9300      	str	r3, [sp, #0]
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	68b9      	ldr	r1, [r7, #8]
 8002afc:	68f8      	ldr	r0, [r7, #12]
 8002afe:	f000 f80f 	bl	8002b20 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002b02:	69f8      	ldr	r0, [r7, #28]
 8002b04:	f000 f8aa 	bl	8002c5c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	61bb      	str	r3, [r7, #24]
 8002b0c:	e002      	b.n	8002b14 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b12:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002b14:	69bb      	ldr	r3, [r7, #24]
	}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3720      	adds	r7, #32
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
	...

08002b20 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b088      	sub	sp, #32
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	607a      	str	r2, [r7, #4]
 8002b2c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b30:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	461a      	mov	r2, r3
 8002b38:	21a5      	movs	r1, #165	; 0xa5
 8002b3a:	f001 fd4f 	bl	80045dc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002b48:	3b01      	subs	r3, #1
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	4413      	add	r3, r2
 8002b4e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002b50:	69bb      	ldr	r3, [r7, #24]
 8002b52:	f023 0307 	bic.w	r3, r3, #7
 8002b56:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	f003 0307 	and.w	r3, r3, #7
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d00a      	beq.n	8002b78 <prvInitialiseNewTask+0x58>
	__asm volatile
 8002b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b66:	f383 8811 	msr	BASEPRI, r3
 8002b6a:	f3bf 8f6f 	isb	sy
 8002b6e:	f3bf 8f4f 	dsb	sy
 8002b72:	617b      	str	r3, [r7, #20]
}
 8002b74:	bf00      	nop
 8002b76:	e7fe      	b.n	8002b76 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002b78:	2300      	movs	r3, #0
 8002b7a:	61fb      	str	r3, [r7, #28]
 8002b7c:	e012      	b.n	8002ba4 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002b7e:	68ba      	ldr	r2, [r7, #8]
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	4413      	add	r3, r2
 8002b84:	7819      	ldrb	r1, [r3, #0]
 8002b86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	3334      	adds	r3, #52	; 0x34
 8002b8e:	460a      	mov	r2, r1
 8002b90:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002b92:	68ba      	ldr	r2, [r7, #8]
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	4413      	add	r3, r2
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d006      	beq.n	8002bac <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	61fb      	str	r3, [r7, #28]
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	2b0f      	cmp	r3, #15
 8002ba8:	d9e9      	bls.n	8002b7e <prvInitialiseNewTask+0x5e>
 8002baa:	e000      	b.n	8002bae <prvInitialiseNewTask+0x8e>
		{
			break;
 8002bac:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bb8:	2b37      	cmp	r3, #55	; 0x37
 8002bba:	d901      	bls.n	8002bc0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002bbc:	2337      	movs	r3, #55	; 0x37
 8002bbe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bc4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bca:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bce:	2200      	movs	r2, #0
 8002bd0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bd4:	3304      	adds	r3, #4
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7ff f94d 	bl	8001e76 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bde:	3318      	adds	r3, #24
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7ff f948 	bl	8001e76 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bea:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bf4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bfa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c06:	2200      	movs	r2, #0
 8002c08:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c0e:	3354      	adds	r3, #84	; 0x54
 8002c10:	224c      	movs	r2, #76	; 0x4c
 8002c12:	2100      	movs	r1, #0
 8002c14:	4618      	mov	r0, r3
 8002c16:	f001 fce1 	bl	80045dc <memset>
 8002c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c1c:	4a0c      	ldr	r2, [pc, #48]	; (8002c50 <prvInitialiseNewTask+0x130>)
 8002c1e:	659a      	str	r2, [r3, #88]	; 0x58
 8002c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c22:	4a0c      	ldr	r2, [pc, #48]	; (8002c54 <prvInitialiseNewTask+0x134>)
 8002c24:	65da      	str	r2, [r3, #92]	; 0x5c
 8002c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c28:	4a0b      	ldr	r2, [pc, #44]	; (8002c58 <prvInitialiseNewTask+0x138>)
 8002c2a:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002c2c:	683a      	ldr	r2, [r7, #0]
 8002c2e:	68f9      	ldr	r1, [r7, #12]
 8002c30:	69b8      	ldr	r0, [r7, #24]
 8002c32:	f001 f90b 	bl	8003e4c <pxPortInitialiseStack>
 8002c36:	4602      	mov	r2, r0
 8002c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c3a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d002      	beq.n	8002c48 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c46:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002c48:	bf00      	nop
 8002c4a:	3720      	adds	r7, #32
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	20001b74 	.word	0x20001b74
 8002c54:	20001bdc 	.word	0x20001bdc
 8002c58:	20001c44 	.word	0x20001c44

08002c5c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b082      	sub	sp, #8
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002c64:	f001 f9e2 	bl	800402c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002c68:	4b2d      	ldr	r3, [pc, #180]	; (8002d20 <prvAddNewTaskToReadyList+0xc4>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	4a2c      	ldr	r2, [pc, #176]	; (8002d20 <prvAddNewTaskToReadyList+0xc4>)
 8002c70:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002c72:	4b2c      	ldr	r3, [pc, #176]	; (8002d24 <prvAddNewTaskToReadyList+0xc8>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d109      	bne.n	8002c8e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002c7a:	4a2a      	ldr	r2, [pc, #168]	; (8002d24 <prvAddNewTaskToReadyList+0xc8>)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002c80:	4b27      	ldr	r3, [pc, #156]	; (8002d20 <prvAddNewTaskToReadyList+0xc4>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d110      	bne.n	8002caa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002c88:	f000 fc28 	bl	80034dc <prvInitialiseTaskLists>
 8002c8c:	e00d      	b.n	8002caa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002c8e:	4b26      	ldr	r3, [pc, #152]	; (8002d28 <prvAddNewTaskToReadyList+0xcc>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d109      	bne.n	8002caa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002c96:	4b23      	ldr	r3, [pc, #140]	; (8002d24 <prvAddNewTaskToReadyList+0xc8>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d802      	bhi.n	8002caa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002ca4:	4a1f      	ldr	r2, [pc, #124]	; (8002d24 <prvAddNewTaskToReadyList+0xc8>)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002caa:	4b20      	ldr	r3, [pc, #128]	; (8002d2c <prvAddNewTaskToReadyList+0xd0>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	3301      	adds	r3, #1
 8002cb0:	4a1e      	ldr	r2, [pc, #120]	; (8002d2c <prvAddNewTaskToReadyList+0xd0>)
 8002cb2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002cb4:	4b1d      	ldr	r3, [pc, #116]	; (8002d2c <prvAddNewTaskToReadyList+0xd0>)
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cc0:	4b1b      	ldr	r3, [pc, #108]	; (8002d30 <prvAddNewTaskToReadyList+0xd4>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d903      	bls.n	8002cd0 <prvAddNewTaskToReadyList+0x74>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ccc:	4a18      	ldr	r2, [pc, #96]	; (8002d30 <prvAddNewTaskToReadyList+0xd4>)
 8002cce:	6013      	str	r3, [r2, #0]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	4413      	add	r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	4a15      	ldr	r2, [pc, #84]	; (8002d34 <prvAddNewTaskToReadyList+0xd8>)
 8002cde:	441a      	add	r2, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	3304      	adds	r3, #4
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	4610      	mov	r0, r2
 8002ce8:	f7ff f8d1 	bl	8001e8e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002cec:	f001 f9ce 	bl	800408c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002cf0:	4b0d      	ldr	r3, [pc, #52]	; (8002d28 <prvAddNewTaskToReadyList+0xcc>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d00e      	beq.n	8002d16 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002cf8:	4b0a      	ldr	r3, [pc, #40]	; (8002d24 <prvAddNewTaskToReadyList+0xc8>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d207      	bcs.n	8002d16 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002d06:	4b0c      	ldr	r3, [pc, #48]	; (8002d38 <prvAddNewTaskToReadyList+0xdc>)
 8002d08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d0c:	601a      	str	r2, [r3, #0]
 8002d0e:	f3bf 8f4f 	dsb	sy
 8002d12:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002d16:	bf00      	nop
 8002d18:	3708      	adds	r7, #8
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	20000dfc 	.word	0x20000dfc
 8002d24:	20000928 	.word	0x20000928
 8002d28:	20000e08 	.word	0x20000e08
 8002d2c:	20000e18 	.word	0x20000e18
 8002d30:	20000e04 	.word	0x20000e04
 8002d34:	2000092c 	.word	0x2000092c
 8002d38:	e000ed04 	.word	0xe000ed04

08002d3c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002d44:	2300      	movs	r3, #0
 8002d46:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d017      	beq.n	8002d7e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002d4e:	4b13      	ldr	r3, [pc, #76]	; (8002d9c <vTaskDelay+0x60>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d00a      	beq.n	8002d6c <vTaskDelay+0x30>
	__asm volatile
 8002d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d5a:	f383 8811 	msr	BASEPRI, r3
 8002d5e:	f3bf 8f6f 	isb	sy
 8002d62:	f3bf 8f4f 	dsb	sy
 8002d66:	60bb      	str	r3, [r7, #8]
}
 8002d68:	bf00      	nop
 8002d6a:	e7fe      	b.n	8002d6a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002d6c:	f000 f88a 	bl	8002e84 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002d70:	2100      	movs	r1, #0
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f000 fd04 	bl	8003780 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002d78:	f000 f892 	bl	8002ea0 <xTaskResumeAll>
 8002d7c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d107      	bne.n	8002d94 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002d84:	4b06      	ldr	r3, [pc, #24]	; (8002da0 <vTaskDelay+0x64>)
 8002d86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d8a:	601a      	str	r2, [r3, #0]
 8002d8c:	f3bf 8f4f 	dsb	sy
 8002d90:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002d94:	bf00      	nop
 8002d96:	3710      	adds	r7, #16
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	20000e24 	.word	0x20000e24
 8002da0:	e000ed04 	.word	0xe000ed04

08002da4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b08a      	sub	sp, #40	; 0x28
 8002da8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002daa:	2300      	movs	r3, #0
 8002dac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002dae:	2300      	movs	r3, #0
 8002db0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002db2:	463a      	mov	r2, r7
 8002db4:	1d39      	adds	r1, r7, #4
 8002db6:	f107 0308 	add.w	r3, r7, #8
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7ff f80a 	bl	8001dd4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002dc0:	6839      	ldr	r1, [r7, #0]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	68ba      	ldr	r2, [r7, #8]
 8002dc6:	9202      	str	r2, [sp, #8]
 8002dc8:	9301      	str	r3, [sp, #4]
 8002dca:	2300      	movs	r3, #0
 8002dcc:	9300      	str	r3, [sp, #0]
 8002dce:	2300      	movs	r3, #0
 8002dd0:	460a      	mov	r2, r1
 8002dd2:	4924      	ldr	r1, [pc, #144]	; (8002e64 <vTaskStartScheduler+0xc0>)
 8002dd4:	4824      	ldr	r0, [pc, #144]	; (8002e68 <vTaskStartScheduler+0xc4>)
 8002dd6:	f7ff fe01 	bl	80029dc <xTaskCreateStatic>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	4a23      	ldr	r2, [pc, #140]	; (8002e6c <vTaskStartScheduler+0xc8>)
 8002dde:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002de0:	4b22      	ldr	r3, [pc, #136]	; (8002e6c <vTaskStartScheduler+0xc8>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d002      	beq.n	8002dee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002de8:	2301      	movs	r3, #1
 8002dea:	617b      	str	r3, [r7, #20]
 8002dec:	e001      	b.n	8002df2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002dee:	2300      	movs	r3, #0
 8002df0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d102      	bne.n	8002dfe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002df8:	f000 fd16 	bl	8003828 <xTimerCreateTimerTask>
 8002dfc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d11b      	bne.n	8002e3c <vTaskStartScheduler+0x98>
	__asm volatile
 8002e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e08:	f383 8811 	msr	BASEPRI, r3
 8002e0c:	f3bf 8f6f 	isb	sy
 8002e10:	f3bf 8f4f 	dsb	sy
 8002e14:	613b      	str	r3, [r7, #16]
}
 8002e16:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002e18:	4b15      	ldr	r3, [pc, #84]	; (8002e70 <vTaskStartScheduler+0xcc>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	3354      	adds	r3, #84	; 0x54
 8002e1e:	4a15      	ldr	r2, [pc, #84]	; (8002e74 <vTaskStartScheduler+0xd0>)
 8002e20:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002e22:	4b15      	ldr	r3, [pc, #84]	; (8002e78 <vTaskStartScheduler+0xd4>)
 8002e24:	f04f 32ff 	mov.w	r2, #4294967295
 8002e28:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002e2a:	4b14      	ldr	r3, [pc, #80]	; (8002e7c <vTaskStartScheduler+0xd8>)
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002e30:	4b13      	ldr	r3, [pc, #76]	; (8002e80 <vTaskStartScheduler+0xdc>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002e36:	f001 f887 	bl	8003f48 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002e3a:	e00e      	b.n	8002e5a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e42:	d10a      	bne.n	8002e5a <vTaskStartScheduler+0xb6>
	__asm volatile
 8002e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e48:	f383 8811 	msr	BASEPRI, r3
 8002e4c:	f3bf 8f6f 	isb	sy
 8002e50:	f3bf 8f4f 	dsb	sy
 8002e54:	60fb      	str	r3, [r7, #12]
}
 8002e56:	bf00      	nop
 8002e58:	e7fe      	b.n	8002e58 <vTaskStartScheduler+0xb4>
}
 8002e5a:	bf00      	nop
 8002e5c:	3718      	adds	r7, #24
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	080047d8 	.word	0x080047d8
 8002e68:	080034ad 	.word	0x080034ad
 8002e6c:	20000e20 	.word	0x20000e20
 8002e70:	20000928 	.word	0x20000928
 8002e74:	2000005c 	.word	0x2000005c
 8002e78:	20000e1c 	.word	0x20000e1c
 8002e7c:	20000e08 	.word	0x20000e08
 8002e80:	20000e00 	.word	0x20000e00

08002e84 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002e84:	b480      	push	{r7}
 8002e86:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002e88:	4b04      	ldr	r3, [pc, #16]	; (8002e9c <vTaskSuspendAll+0x18>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	4a03      	ldr	r2, [pc, #12]	; (8002e9c <vTaskSuspendAll+0x18>)
 8002e90:	6013      	str	r3, [r2, #0]
}
 8002e92:	bf00      	nop
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bc80      	pop	{r7}
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop
 8002e9c:	20000e24 	.word	0x20000e24

08002ea0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002eae:	4b42      	ldr	r3, [pc, #264]	; (8002fb8 <xTaskResumeAll+0x118>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d10a      	bne.n	8002ecc <xTaskResumeAll+0x2c>
	__asm volatile
 8002eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eba:	f383 8811 	msr	BASEPRI, r3
 8002ebe:	f3bf 8f6f 	isb	sy
 8002ec2:	f3bf 8f4f 	dsb	sy
 8002ec6:	603b      	str	r3, [r7, #0]
}
 8002ec8:	bf00      	nop
 8002eca:	e7fe      	b.n	8002eca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002ecc:	f001 f8ae 	bl	800402c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002ed0:	4b39      	ldr	r3, [pc, #228]	; (8002fb8 <xTaskResumeAll+0x118>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	3b01      	subs	r3, #1
 8002ed6:	4a38      	ldr	r2, [pc, #224]	; (8002fb8 <xTaskResumeAll+0x118>)
 8002ed8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002eda:	4b37      	ldr	r3, [pc, #220]	; (8002fb8 <xTaskResumeAll+0x118>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d162      	bne.n	8002fa8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002ee2:	4b36      	ldr	r3, [pc, #216]	; (8002fbc <xTaskResumeAll+0x11c>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d05e      	beq.n	8002fa8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002eea:	e02f      	b.n	8002f4c <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002eec:	4b34      	ldr	r3, [pc, #208]	; (8002fc0 <xTaskResumeAll+0x120>)
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	3318      	adds	r3, #24
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f7ff f823 	bl	8001f44 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	3304      	adds	r3, #4
 8002f02:	4618      	mov	r0, r3
 8002f04:	f7ff f81e 	bl	8001f44 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f0c:	4b2d      	ldr	r3, [pc, #180]	; (8002fc4 <xTaskResumeAll+0x124>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d903      	bls.n	8002f1c <xTaskResumeAll+0x7c>
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f18:	4a2a      	ldr	r2, [pc, #168]	; (8002fc4 <xTaskResumeAll+0x124>)
 8002f1a:	6013      	str	r3, [r2, #0]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f20:	4613      	mov	r3, r2
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	4413      	add	r3, r2
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	4a27      	ldr	r2, [pc, #156]	; (8002fc8 <xTaskResumeAll+0x128>)
 8002f2a:	441a      	add	r2, r3
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	3304      	adds	r3, #4
 8002f30:	4619      	mov	r1, r3
 8002f32:	4610      	mov	r0, r2
 8002f34:	f7fe ffab 	bl	8001e8e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f3c:	4b23      	ldr	r3, [pc, #140]	; (8002fcc <xTaskResumeAll+0x12c>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d302      	bcc.n	8002f4c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8002f46:	4b22      	ldr	r3, [pc, #136]	; (8002fd0 <xTaskResumeAll+0x130>)
 8002f48:	2201      	movs	r2, #1
 8002f4a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002f4c:	4b1c      	ldr	r3, [pc, #112]	; (8002fc0 <xTaskResumeAll+0x120>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d1cb      	bne.n	8002eec <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d001      	beq.n	8002f5e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002f5a:	f000 fb61 	bl	8003620 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002f5e:	4b1d      	ldr	r3, [pc, #116]	; (8002fd4 <xTaskResumeAll+0x134>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d010      	beq.n	8002f8c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002f6a:	f000 f845 	bl	8002ff8 <xTaskIncrementTick>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d002      	beq.n	8002f7a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8002f74:	4b16      	ldr	r3, [pc, #88]	; (8002fd0 <xTaskResumeAll+0x130>)
 8002f76:	2201      	movs	r2, #1
 8002f78:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	3b01      	subs	r3, #1
 8002f7e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d1f1      	bne.n	8002f6a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8002f86:	4b13      	ldr	r3, [pc, #76]	; (8002fd4 <xTaskResumeAll+0x134>)
 8002f88:	2200      	movs	r2, #0
 8002f8a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002f8c:	4b10      	ldr	r3, [pc, #64]	; (8002fd0 <xTaskResumeAll+0x130>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d009      	beq.n	8002fa8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002f94:	2301      	movs	r3, #1
 8002f96:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002f98:	4b0f      	ldr	r3, [pc, #60]	; (8002fd8 <xTaskResumeAll+0x138>)
 8002f9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f9e:	601a      	str	r2, [r3, #0]
 8002fa0:	f3bf 8f4f 	dsb	sy
 8002fa4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002fa8:	f001 f870 	bl	800408c <vPortExitCritical>

	return xAlreadyYielded;
 8002fac:	68bb      	ldr	r3, [r7, #8]
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3710      	adds	r7, #16
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	20000e24 	.word	0x20000e24
 8002fbc:	20000dfc 	.word	0x20000dfc
 8002fc0:	20000dbc 	.word	0x20000dbc
 8002fc4:	20000e04 	.word	0x20000e04
 8002fc8:	2000092c 	.word	0x2000092c
 8002fcc:	20000928 	.word	0x20000928
 8002fd0:	20000e10 	.word	0x20000e10
 8002fd4:	20000e0c 	.word	0x20000e0c
 8002fd8:	e000ed04 	.word	0xe000ed04

08002fdc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002fe2:	4b04      	ldr	r3, [pc, #16]	; (8002ff4 <xTaskGetTickCount+0x18>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002fe8:	687b      	ldr	r3, [r7, #4]
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	370c      	adds	r7, #12
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bc80      	pop	{r7}
 8002ff2:	4770      	bx	lr
 8002ff4:	20000e00 	.word	0x20000e00

08002ff8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b086      	sub	sp, #24
 8002ffc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002ffe:	2300      	movs	r3, #0
 8003000:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003002:	4b51      	ldr	r3, [pc, #324]	; (8003148 <xTaskIncrementTick+0x150>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2b00      	cmp	r3, #0
 8003008:	f040 808e 	bne.w	8003128 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800300c:	4b4f      	ldr	r3, [pc, #316]	; (800314c <xTaskIncrementTick+0x154>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	3301      	adds	r3, #1
 8003012:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003014:	4a4d      	ldr	r2, [pc, #308]	; (800314c <xTaskIncrementTick+0x154>)
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d120      	bne.n	8003062 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003020:	4b4b      	ldr	r3, [pc, #300]	; (8003150 <xTaskIncrementTick+0x158>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d00a      	beq.n	8003040 <xTaskIncrementTick+0x48>
	__asm volatile
 800302a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800302e:	f383 8811 	msr	BASEPRI, r3
 8003032:	f3bf 8f6f 	isb	sy
 8003036:	f3bf 8f4f 	dsb	sy
 800303a:	603b      	str	r3, [r7, #0]
}
 800303c:	bf00      	nop
 800303e:	e7fe      	b.n	800303e <xTaskIncrementTick+0x46>
 8003040:	4b43      	ldr	r3, [pc, #268]	; (8003150 <xTaskIncrementTick+0x158>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	60fb      	str	r3, [r7, #12]
 8003046:	4b43      	ldr	r3, [pc, #268]	; (8003154 <xTaskIncrementTick+0x15c>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a41      	ldr	r2, [pc, #260]	; (8003150 <xTaskIncrementTick+0x158>)
 800304c:	6013      	str	r3, [r2, #0]
 800304e:	4a41      	ldr	r2, [pc, #260]	; (8003154 <xTaskIncrementTick+0x15c>)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6013      	str	r3, [r2, #0]
 8003054:	4b40      	ldr	r3, [pc, #256]	; (8003158 <xTaskIncrementTick+0x160>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	3301      	adds	r3, #1
 800305a:	4a3f      	ldr	r2, [pc, #252]	; (8003158 <xTaskIncrementTick+0x160>)
 800305c:	6013      	str	r3, [r2, #0]
 800305e:	f000 fadf 	bl	8003620 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003062:	4b3e      	ldr	r3, [pc, #248]	; (800315c <xTaskIncrementTick+0x164>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	693a      	ldr	r2, [r7, #16]
 8003068:	429a      	cmp	r2, r3
 800306a:	d34e      	bcc.n	800310a <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800306c:	4b38      	ldr	r3, [pc, #224]	; (8003150 <xTaskIncrementTick+0x158>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d101      	bne.n	800307a <xTaskIncrementTick+0x82>
 8003076:	2301      	movs	r3, #1
 8003078:	e000      	b.n	800307c <xTaskIncrementTick+0x84>
 800307a:	2300      	movs	r3, #0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d004      	beq.n	800308a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003080:	4b36      	ldr	r3, [pc, #216]	; (800315c <xTaskIncrementTick+0x164>)
 8003082:	f04f 32ff 	mov.w	r2, #4294967295
 8003086:	601a      	str	r2, [r3, #0]
					break;
 8003088:	e03f      	b.n	800310a <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800308a:	4b31      	ldr	r3, [pc, #196]	; (8003150 <xTaskIncrementTick+0x158>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800309a:	693a      	ldr	r2, [r7, #16]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	429a      	cmp	r2, r3
 80030a0:	d203      	bcs.n	80030aa <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80030a2:	4a2e      	ldr	r2, [pc, #184]	; (800315c <xTaskIncrementTick+0x164>)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6013      	str	r3, [r2, #0]
						break;
 80030a8:	e02f      	b.n	800310a <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	3304      	adds	r3, #4
 80030ae:	4618      	mov	r0, r3
 80030b0:	f7fe ff48 	bl	8001f44 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d004      	beq.n	80030c6 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	3318      	adds	r3, #24
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7fe ff3f 	bl	8001f44 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030ca:	4b25      	ldr	r3, [pc, #148]	; (8003160 <xTaskIncrementTick+0x168>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d903      	bls.n	80030da <xTaskIncrementTick+0xe2>
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d6:	4a22      	ldr	r2, [pc, #136]	; (8003160 <xTaskIncrementTick+0x168>)
 80030d8:	6013      	str	r3, [r2, #0]
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030de:	4613      	mov	r3, r2
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	4413      	add	r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	4a1f      	ldr	r2, [pc, #124]	; (8003164 <xTaskIncrementTick+0x16c>)
 80030e8:	441a      	add	r2, r3
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	3304      	adds	r3, #4
 80030ee:	4619      	mov	r1, r3
 80030f0:	4610      	mov	r0, r2
 80030f2:	f7fe fecc 	bl	8001e8e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030fa:	4b1b      	ldr	r3, [pc, #108]	; (8003168 <xTaskIncrementTick+0x170>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003100:	429a      	cmp	r2, r3
 8003102:	d3b3      	bcc.n	800306c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003104:	2301      	movs	r3, #1
 8003106:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003108:	e7b0      	b.n	800306c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800310a:	4b17      	ldr	r3, [pc, #92]	; (8003168 <xTaskIncrementTick+0x170>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003110:	4914      	ldr	r1, [pc, #80]	; (8003164 <xTaskIncrementTick+0x16c>)
 8003112:	4613      	mov	r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	4413      	add	r3, r2
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	440b      	add	r3, r1
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2b01      	cmp	r3, #1
 8003120:	d907      	bls.n	8003132 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003122:	2301      	movs	r3, #1
 8003124:	617b      	str	r3, [r7, #20]
 8003126:	e004      	b.n	8003132 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003128:	4b10      	ldr	r3, [pc, #64]	; (800316c <xTaskIncrementTick+0x174>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	3301      	adds	r3, #1
 800312e:	4a0f      	ldr	r2, [pc, #60]	; (800316c <xTaskIncrementTick+0x174>)
 8003130:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003132:	4b0f      	ldr	r3, [pc, #60]	; (8003170 <xTaskIncrementTick+0x178>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d001      	beq.n	800313e <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800313a:	2301      	movs	r3, #1
 800313c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800313e:	697b      	ldr	r3, [r7, #20]
}
 8003140:	4618      	mov	r0, r3
 8003142:	3718      	adds	r7, #24
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	20000e24 	.word	0x20000e24
 800314c:	20000e00 	.word	0x20000e00
 8003150:	20000db4 	.word	0x20000db4
 8003154:	20000db8 	.word	0x20000db8
 8003158:	20000e14 	.word	0x20000e14
 800315c:	20000e1c 	.word	0x20000e1c
 8003160:	20000e04 	.word	0x20000e04
 8003164:	2000092c 	.word	0x2000092c
 8003168:	20000928 	.word	0x20000928
 800316c:	20000e0c 	.word	0x20000e0c
 8003170:	20000e10 	.word	0x20000e10

08003174 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003174:	b480      	push	{r7}
 8003176:	b085      	sub	sp, #20
 8003178:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800317a:	4b2a      	ldr	r3, [pc, #168]	; (8003224 <vTaskSwitchContext+0xb0>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d003      	beq.n	800318a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003182:	4b29      	ldr	r3, [pc, #164]	; (8003228 <vTaskSwitchContext+0xb4>)
 8003184:	2201      	movs	r2, #1
 8003186:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003188:	e046      	b.n	8003218 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800318a:	4b27      	ldr	r3, [pc, #156]	; (8003228 <vTaskSwitchContext+0xb4>)
 800318c:	2200      	movs	r2, #0
 800318e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003190:	4b26      	ldr	r3, [pc, #152]	; (800322c <vTaskSwitchContext+0xb8>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	60fb      	str	r3, [r7, #12]
 8003196:	e010      	b.n	80031ba <vTaskSwitchContext+0x46>
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d10a      	bne.n	80031b4 <vTaskSwitchContext+0x40>
	__asm volatile
 800319e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031a2:	f383 8811 	msr	BASEPRI, r3
 80031a6:	f3bf 8f6f 	isb	sy
 80031aa:	f3bf 8f4f 	dsb	sy
 80031ae:	607b      	str	r3, [r7, #4]
}
 80031b0:	bf00      	nop
 80031b2:	e7fe      	b.n	80031b2 <vTaskSwitchContext+0x3e>
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	3b01      	subs	r3, #1
 80031b8:	60fb      	str	r3, [r7, #12]
 80031ba:	491d      	ldr	r1, [pc, #116]	; (8003230 <vTaskSwitchContext+0xbc>)
 80031bc:	68fa      	ldr	r2, [r7, #12]
 80031be:	4613      	mov	r3, r2
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	4413      	add	r3, r2
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	440b      	add	r3, r1
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d0e4      	beq.n	8003198 <vTaskSwitchContext+0x24>
 80031ce:	68fa      	ldr	r2, [r7, #12]
 80031d0:	4613      	mov	r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	4413      	add	r3, r2
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	4a15      	ldr	r2, [pc, #84]	; (8003230 <vTaskSwitchContext+0xbc>)
 80031da:	4413      	add	r3, r2
 80031dc:	60bb      	str	r3, [r7, #8]
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	685a      	ldr	r2, [r3, #4]
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	605a      	str	r2, [r3, #4]
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	685a      	ldr	r2, [r3, #4]
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	3308      	adds	r3, #8
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d104      	bne.n	80031fe <vTaskSwitchContext+0x8a>
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	685a      	ldr	r2, [r3, #4]
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	605a      	str	r2, [r3, #4]
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	4a0b      	ldr	r2, [pc, #44]	; (8003234 <vTaskSwitchContext+0xc0>)
 8003206:	6013      	str	r3, [r2, #0]
 8003208:	4a08      	ldr	r2, [pc, #32]	; (800322c <vTaskSwitchContext+0xb8>)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800320e:	4b09      	ldr	r3, [pc, #36]	; (8003234 <vTaskSwitchContext+0xc0>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	3354      	adds	r3, #84	; 0x54
 8003214:	4a08      	ldr	r2, [pc, #32]	; (8003238 <vTaskSwitchContext+0xc4>)
 8003216:	6013      	str	r3, [r2, #0]
}
 8003218:	bf00      	nop
 800321a:	3714      	adds	r7, #20
 800321c:	46bd      	mov	sp, r7
 800321e:	bc80      	pop	{r7}
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop
 8003224:	20000e24 	.word	0x20000e24
 8003228:	20000e10 	.word	0x20000e10
 800322c:	20000e04 	.word	0x20000e04
 8003230:	2000092c 	.word	0x2000092c
 8003234:	20000928 	.word	0x20000928
 8003238:	2000005c 	.word	0x2000005c

0800323c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d10a      	bne.n	8003262 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800324c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003250:	f383 8811 	msr	BASEPRI, r3
 8003254:	f3bf 8f6f 	isb	sy
 8003258:	f3bf 8f4f 	dsb	sy
 800325c:	60fb      	str	r3, [r7, #12]
}
 800325e:	bf00      	nop
 8003260:	e7fe      	b.n	8003260 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003262:	4b07      	ldr	r3, [pc, #28]	; (8003280 <vTaskPlaceOnEventList+0x44>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	3318      	adds	r3, #24
 8003268:	4619      	mov	r1, r3
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f7fe fe32 	bl	8001ed4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003270:	2101      	movs	r1, #1
 8003272:	6838      	ldr	r0, [r7, #0]
 8003274:	f000 fa84 	bl	8003780 <prvAddCurrentTaskToDelayedList>
}
 8003278:	bf00      	nop
 800327a:	3710      	adds	r7, #16
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}
 8003280:	20000928 	.word	0x20000928

08003284 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003284:	b580      	push	{r7, lr}
 8003286:	b086      	sub	sp, #24
 8003288:	af00      	add	r7, sp, #0
 800328a:	60f8      	str	r0, [r7, #12]
 800328c:	60b9      	str	r1, [r7, #8]
 800328e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d10a      	bne.n	80032ac <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800329a:	f383 8811 	msr	BASEPRI, r3
 800329e:	f3bf 8f6f 	isb	sy
 80032a2:	f3bf 8f4f 	dsb	sy
 80032a6:	617b      	str	r3, [r7, #20]
}
 80032a8:	bf00      	nop
 80032aa:	e7fe      	b.n	80032aa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80032ac:	4b0a      	ldr	r3, [pc, #40]	; (80032d8 <vTaskPlaceOnEventListRestricted+0x54>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	3318      	adds	r3, #24
 80032b2:	4619      	mov	r1, r3
 80032b4:	68f8      	ldr	r0, [r7, #12]
 80032b6:	f7fe fdea 	bl	8001e8e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d002      	beq.n	80032c6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80032c0:	f04f 33ff 	mov.w	r3, #4294967295
 80032c4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80032c6:	6879      	ldr	r1, [r7, #4]
 80032c8:	68b8      	ldr	r0, [r7, #8]
 80032ca:	f000 fa59 	bl	8003780 <prvAddCurrentTaskToDelayedList>
	}
 80032ce:	bf00      	nop
 80032d0:	3718      	adds	r7, #24
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	20000928 	.word	0x20000928

080032dc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b086      	sub	sp, #24
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d10a      	bne.n	8003308 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80032f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032f6:	f383 8811 	msr	BASEPRI, r3
 80032fa:	f3bf 8f6f 	isb	sy
 80032fe:	f3bf 8f4f 	dsb	sy
 8003302:	60fb      	str	r3, [r7, #12]
}
 8003304:	bf00      	nop
 8003306:	e7fe      	b.n	8003306 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	3318      	adds	r3, #24
 800330c:	4618      	mov	r0, r3
 800330e:	f7fe fe19 	bl	8001f44 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003312:	4b1e      	ldr	r3, [pc, #120]	; (800338c <xTaskRemoveFromEventList+0xb0>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d11d      	bne.n	8003356 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	3304      	adds	r3, #4
 800331e:	4618      	mov	r0, r3
 8003320:	f7fe fe10 	bl	8001f44 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003328:	4b19      	ldr	r3, [pc, #100]	; (8003390 <xTaskRemoveFromEventList+0xb4>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	429a      	cmp	r2, r3
 800332e:	d903      	bls.n	8003338 <xTaskRemoveFromEventList+0x5c>
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003334:	4a16      	ldr	r2, [pc, #88]	; (8003390 <xTaskRemoveFromEventList+0xb4>)
 8003336:	6013      	str	r3, [r2, #0]
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800333c:	4613      	mov	r3, r2
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	4413      	add	r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	4a13      	ldr	r2, [pc, #76]	; (8003394 <xTaskRemoveFromEventList+0xb8>)
 8003346:	441a      	add	r2, r3
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	3304      	adds	r3, #4
 800334c:	4619      	mov	r1, r3
 800334e:	4610      	mov	r0, r2
 8003350:	f7fe fd9d 	bl	8001e8e <vListInsertEnd>
 8003354:	e005      	b.n	8003362 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	3318      	adds	r3, #24
 800335a:	4619      	mov	r1, r3
 800335c:	480e      	ldr	r0, [pc, #56]	; (8003398 <xTaskRemoveFromEventList+0xbc>)
 800335e:	f7fe fd96 	bl	8001e8e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003366:	4b0d      	ldr	r3, [pc, #52]	; (800339c <xTaskRemoveFromEventList+0xc0>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800336c:	429a      	cmp	r2, r3
 800336e:	d905      	bls.n	800337c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003370:	2301      	movs	r3, #1
 8003372:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003374:	4b0a      	ldr	r3, [pc, #40]	; (80033a0 <xTaskRemoveFromEventList+0xc4>)
 8003376:	2201      	movs	r2, #1
 8003378:	601a      	str	r2, [r3, #0]
 800337a:	e001      	b.n	8003380 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800337c:	2300      	movs	r3, #0
 800337e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003380:	697b      	ldr	r3, [r7, #20]
}
 8003382:	4618      	mov	r0, r3
 8003384:	3718      	adds	r7, #24
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	20000e24 	.word	0x20000e24
 8003390:	20000e04 	.word	0x20000e04
 8003394:	2000092c 	.word	0x2000092c
 8003398:	20000dbc 	.word	0x20000dbc
 800339c:	20000928 	.word	0x20000928
 80033a0:	20000e10 	.word	0x20000e10

080033a4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80033ac:	4b06      	ldr	r3, [pc, #24]	; (80033c8 <vTaskInternalSetTimeOutState+0x24>)
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80033b4:	4b05      	ldr	r3, [pc, #20]	; (80033cc <vTaskInternalSetTimeOutState+0x28>)
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	605a      	str	r2, [r3, #4]
}
 80033bc:	bf00      	nop
 80033be:	370c      	adds	r7, #12
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bc80      	pop	{r7}
 80033c4:	4770      	bx	lr
 80033c6:	bf00      	nop
 80033c8:	20000e14 	.word	0x20000e14
 80033cc:	20000e00 	.word	0x20000e00

080033d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b088      	sub	sp, #32
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d10a      	bne.n	80033f6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80033e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033e4:	f383 8811 	msr	BASEPRI, r3
 80033e8:	f3bf 8f6f 	isb	sy
 80033ec:	f3bf 8f4f 	dsb	sy
 80033f0:	613b      	str	r3, [r7, #16]
}
 80033f2:	bf00      	nop
 80033f4:	e7fe      	b.n	80033f4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d10a      	bne.n	8003412 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80033fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003400:	f383 8811 	msr	BASEPRI, r3
 8003404:	f3bf 8f6f 	isb	sy
 8003408:	f3bf 8f4f 	dsb	sy
 800340c:	60fb      	str	r3, [r7, #12]
}
 800340e:	bf00      	nop
 8003410:	e7fe      	b.n	8003410 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003412:	f000 fe0b 	bl	800402c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003416:	4b1d      	ldr	r3, [pc, #116]	; (800348c <xTaskCheckForTimeOut+0xbc>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	69ba      	ldr	r2, [r7, #24]
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800342e:	d102      	bne.n	8003436 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003430:	2300      	movs	r3, #0
 8003432:	61fb      	str	r3, [r7, #28]
 8003434:	e023      	b.n	800347e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	4b15      	ldr	r3, [pc, #84]	; (8003490 <xTaskCheckForTimeOut+0xc0>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	429a      	cmp	r2, r3
 8003440:	d007      	beq.n	8003452 <xTaskCheckForTimeOut+0x82>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	69ba      	ldr	r2, [r7, #24]
 8003448:	429a      	cmp	r2, r3
 800344a:	d302      	bcc.n	8003452 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800344c:	2301      	movs	r3, #1
 800344e:	61fb      	str	r3, [r7, #28]
 8003450:	e015      	b.n	800347e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	697a      	ldr	r2, [r7, #20]
 8003458:	429a      	cmp	r2, r3
 800345a:	d20b      	bcs.n	8003474 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	1ad2      	subs	r2, r2, r3
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f7ff ff9b 	bl	80033a4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800346e:	2300      	movs	r3, #0
 8003470:	61fb      	str	r3, [r7, #28]
 8003472:	e004      	b.n	800347e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	2200      	movs	r2, #0
 8003478:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800347a:	2301      	movs	r3, #1
 800347c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800347e:	f000 fe05 	bl	800408c <vPortExitCritical>

	return xReturn;
 8003482:	69fb      	ldr	r3, [r7, #28]
}
 8003484:	4618      	mov	r0, r3
 8003486:	3720      	adds	r7, #32
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}
 800348c:	20000e00 	.word	0x20000e00
 8003490:	20000e14 	.word	0x20000e14

08003494 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003494:	b480      	push	{r7}
 8003496:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003498:	4b03      	ldr	r3, [pc, #12]	; (80034a8 <vTaskMissedYield+0x14>)
 800349a:	2201      	movs	r2, #1
 800349c:	601a      	str	r2, [r3, #0]
}
 800349e:	bf00      	nop
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bc80      	pop	{r7}
 80034a4:	4770      	bx	lr
 80034a6:	bf00      	nop
 80034a8:	20000e10 	.word	0x20000e10

080034ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b082      	sub	sp, #8
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80034b4:	f000 f852 	bl	800355c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80034b8:	4b06      	ldr	r3, [pc, #24]	; (80034d4 <prvIdleTask+0x28>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d9f9      	bls.n	80034b4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80034c0:	4b05      	ldr	r3, [pc, #20]	; (80034d8 <prvIdleTask+0x2c>)
 80034c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034c6:	601a      	str	r2, [r3, #0]
 80034c8:	f3bf 8f4f 	dsb	sy
 80034cc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80034d0:	e7f0      	b.n	80034b4 <prvIdleTask+0x8>
 80034d2:	bf00      	nop
 80034d4:	2000092c 	.word	0x2000092c
 80034d8:	e000ed04 	.word	0xe000ed04

080034dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80034e2:	2300      	movs	r3, #0
 80034e4:	607b      	str	r3, [r7, #4]
 80034e6:	e00c      	b.n	8003502 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	4613      	mov	r3, r2
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	4413      	add	r3, r2
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	4a12      	ldr	r2, [pc, #72]	; (800353c <prvInitialiseTaskLists+0x60>)
 80034f4:	4413      	add	r3, r2
 80034f6:	4618      	mov	r0, r3
 80034f8:	f7fe fc9e 	bl	8001e38 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	3301      	adds	r3, #1
 8003500:	607b      	str	r3, [r7, #4]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2b37      	cmp	r3, #55	; 0x37
 8003506:	d9ef      	bls.n	80034e8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003508:	480d      	ldr	r0, [pc, #52]	; (8003540 <prvInitialiseTaskLists+0x64>)
 800350a:	f7fe fc95 	bl	8001e38 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800350e:	480d      	ldr	r0, [pc, #52]	; (8003544 <prvInitialiseTaskLists+0x68>)
 8003510:	f7fe fc92 	bl	8001e38 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003514:	480c      	ldr	r0, [pc, #48]	; (8003548 <prvInitialiseTaskLists+0x6c>)
 8003516:	f7fe fc8f 	bl	8001e38 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800351a:	480c      	ldr	r0, [pc, #48]	; (800354c <prvInitialiseTaskLists+0x70>)
 800351c:	f7fe fc8c 	bl	8001e38 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003520:	480b      	ldr	r0, [pc, #44]	; (8003550 <prvInitialiseTaskLists+0x74>)
 8003522:	f7fe fc89 	bl	8001e38 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003526:	4b0b      	ldr	r3, [pc, #44]	; (8003554 <prvInitialiseTaskLists+0x78>)
 8003528:	4a05      	ldr	r2, [pc, #20]	; (8003540 <prvInitialiseTaskLists+0x64>)
 800352a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800352c:	4b0a      	ldr	r3, [pc, #40]	; (8003558 <prvInitialiseTaskLists+0x7c>)
 800352e:	4a05      	ldr	r2, [pc, #20]	; (8003544 <prvInitialiseTaskLists+0x68>)
 8003530:	601a      	str	r2, [r3, #0]
}
 8003532:	bf00      	nop
 8003534:	3708      	adds	r7, #8
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	2000092c 	.word	0x2000092c
 8003540:	20000d8c 	.word	0x20000d8c
 8003544:	20000da0 	.word	0x20000da0
 8003548:	20000dbc 	.word	0x20000dbc
 800354c:	20000dd0 	.word	0x20000dd0
 8003550:	20000de8 	.word	0x20000de8
 8003554:	20000db4 	.word	0x20000db4
 8003558:	20000db8 	.word	0x20000db8

0800355c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003562:	e019      	b.n	8003598 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003564:	f000 fd62 	bl	800402c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003568:	4b10      	ldr	r3, [pc, #64]	; (80035ac <prvCheckTasksWaitingTermination+0x50>)
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	3304      	adds	r3, #4
 8003574:	4618      	mov	r0, r3
 8003576:	f7fe fce5 	bl	8001f44 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800357a:	4b0d      	ldr	r3, [pc, #52]	; (80035b0 <prvCheckTasksWaitingTermination+0x54>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	3b01      	subs	r3, #1
 8003580:	4a0b      	ldr	r2, [pc, #44]	; (80035b0 <prvCheckTasksWaitingTermination+0x54>)
 8003582:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003584:	4b0b      	ldr	r3, [pc, #44]	; (80035b4 <prvCheckTasksWaitingTermination+0x58>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	3b01      	subs	r3, #1
 800358a:	4a0a      	ldr	r2, [pc, #40]	; (80035b4 <prvCheckTasksWaitingTermination+0x58>)
 800358c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800358e:	f000 fd7d 	bl	800408c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f000 f810 	bl	80035b8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003598:	4b06      	ldr	r3, [pc, #24]	; (80035b4 <prvCheckTasksWaitingTermination+0x58>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d1e1      	bne.n	8003564 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80035a0:	bf00      	nop
 80035a2:	bf00      	nop
 80035a4:	3708      	adds	r7, #8
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	20000dd0 	.word	0x20000dd0
 80035b0:	20000dfc 	.word	0x20000dfc
 80035b4:	20000de4 	.word	0x20000de4

080035b8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b084      	sub	sp, #16
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	3354      	adds	r3, #84	; 0x54
 80035c4:	4618      	mov	r0, r3
 80035c6:	f001 f811 	bl	80045ec <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d108      	bne.n	80035e6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d8:	4618      	mov	r0, r3
 80035da:	f000 feeb 	bl	80043b4 <vPortFree>
				vPortFree( pxTCB );
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 fee8 	bl	80043b4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80035e4:	e018      	b.n	8003618 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d103      	bne.n	80035f8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f000 fedf 	bl	80043b4 <vPortFree>
	}
 80035f6:	e00f      	b.n	8003618 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d00a      	beq.n	8003618 <prvDeleteTCB+0x60>
	__asm volatile
 8003602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003606:	f383 8811 	msr	BASEPRI, r3
 800360a:	f3bf 8f6f 	isb	sy
 800360e:	f3bf 8f4f 	dsb	sy
 8003612:	60fb      	str	r3, [r7, #12]
}
 8003614:	bf00      	nop
 8003616:	e7fe      	b.n	8003616 <prvDeleteTCB+0x5e>
	}
 8003618:	bf00      	nop
 800361a:	3710      	adds	r7, #16
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}

08003620 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003626:	4b0e      	ldr	r3, [pc, #56]	; (8003660 <prvResetNextTaskUnblockTime+0x40>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d101      	bne.n	8003634 <prvResetNextTaskUnblockTime+0x14>
 8003630:	2301      	movs	r3, #1
 8003632:	e000      	b.n	8003636 <prvResetNextTaskUnblockTime+0x16>
 8003634:	2300      	movs	r3, #0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d004      	beq.n	8003644 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800363a:	4b0a      	ldr	r3, [pc, #40]	; (8003664 <prvResetNextTaskUnblockTime+0x44>)
 800363c:	f04f 32ff 	mov.w	r2, #4294967295
 8003640:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003642:	e008      	b.n	8003656 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003644:	4b06      	ldr	r3, [pc, #24]	; (8003660 <prvResetNextTaskUnblockTime+0x40>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	4a04      	ldr	r2, [pc, #16]	; (8003664 <prvResetNextTaskUnblockTime+0x44>)
 8003654:	6013      	str	r3, [r2, #0]
}
 8003656:	bf00      	nop
 8003658:	370c      	adds	r7, #12
 800365a:	46bd      	mov	sp, r7
 800365c:	bc80      	pop	{r7}
 800365e:	4770      	bx	lr
 8003660:	20000db4 	.word	0x20000db4
 8003664:	20000e1c 	.word	0x20000e1c

08003668 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800366e:	4b0b      	ldr	r3, [pc, #44]	; (800369c <xTaskGetSchedulerState+0x34>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d102      	bne.n	800367c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003676:	2301      	movs	r3, #1
 8003678:	607b      	str	r3, [r7, #4]
 800367a:	e008      	b.n	800368e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800367c:	4b08      	ldr	r3, [pc, #32]	; (80036a0 <xTaskGetSchedulerState+0x38>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d102      	bne.n	800368a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003684:	2302      	movs	r3, #2
 8003686:	607b      	str	r3, [r7, #4]
 8003688:	e001      	b.n	800368e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800368a:	2300      	movs	r3, #0
 800368c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800368e:	687b      	ldr	r3, [r7, #4]
	}
 8003690:	4618      	mov	r0, r3
 8003692:	370c      	adds	r7, #12
 8003694:	46bd      	mov	sp, r7
 8003696:	bc80      	pop	{r7}
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	20000e08 	.word	0x20000e08
 80036a0:	20000e24 	.word	0x20000e24

080036a4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b086      	sub	sp, #24
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80036b0:	2300      	movs	r3, #0
 80036b2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d056      	beq.n	8003768 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80036ba:	4b2e      	ldr	r3, [pc, #184]	; (8003774 <xTaskPriorityDisinherit+0xd0>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	693a      	ldr	r2, [r7, #16]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d00a      	beq.n	80036da <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80036c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036c8:	f383 8811 	msr	BASEPRI, r3
 80036cc:	f3bf 8f6f 	isb	sy
 80036d0:	f3bf 8f4f 	dsb	sy
 80036d4:	60fb      	str	r3, [r7, #12]
}
 80036d6:	bf00      	nop
 80036d8:	e7fe      	b.n	80036d8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d10a      	bne.n	80036f8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80036e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036e6:	f383 8811 	msr	BASEPRI, r3
 80036ea:	f3bf 8f6f 	isb	sy
 80036ee:	f3bf 8f4f 	dsb	sy
 80036f2:	60bb      	str	r3, [r7, #8]
}
 80036f4:	bf00      	nop
 80036f6:	e7fe      	b.n	80036f6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036fc:	1e5a      	subs	r2, r3, #1
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800370a:	429a      	cmp	r2, r3
 800370c:	d02c      	beq.n	8003768 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003712:	2b00      	cmp	r3, #0
 8003714:	d128      	bne.n	8003768 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	3304      	adds	r3, #4
 800371a:	4618      	mov	r0, r3
 800371c:	f7fe fc12 	bl	8001f44 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800372c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003738:	4b0f      	ldr	r3, [pc, #60]	; (8003778 <xTaskPriorityDisinherit+0xd4>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	429a      	cmp	r2, r3
 800373e:	d903      	bls.n	8003748 <xTaskPriorityDisinherit+0xa4>
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003744:	4a0c      	ldr	r2, [pc, #48]	; (8003778 <xTaskPriorityDisinherit+0xd4>)
 8003746:	6013      	str	r3, [r2, #0]
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800374c:	4613      	mov	r3, r2
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	4413      	add	r3, r2
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	4a09      	ldr	r2, [pc, #36]	; (800377c <xTaskPriorityDisinherit+0xd8>)
 8003756:	441a      	add	r2, r3
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	3304      	adds	r3, #4
 800375c:	4619      	mov	r1, r3
 800375e:	4610      	mov	r0, r2
 8003760:	f7fe fb95 	bl	8001e8e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003764:	2301      	movs	r3, #1
 8003766:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003768:	697b      	ldr	r3, [r7, #20]
	}
 800376a:	4618      	mov	r0, r3
 800376c:	3718      	adds	r7, #24
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	20000928 	.word	0x20000928
 8003778:	20000e04 	.word	0x20000e04
 800377c:	2000092c 	.word	0x2000092c

08003780 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800378a:	4b21      	ldr	r3, [pc, #132]	; (8003810 <prvAddCurrentTaskToDelayedList+0x90>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003790:	4b20      	ldr	r3, [pc, #128]	; (8003814 <prvAddCurrentTaskToDelayedList+0x94>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	3304      	adds	r3, #4
 8003796:	4618      	mov	r0, r3
 8003798:	f7fe fbd4 	bl	8001f44 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037a2:	d10a      	bne.n	80037ba <prvAddCurrentTaskToDelayedList+0x3a>
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d007      	beq.n	80037ba <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80037aa:	4b1a      	ldr	r3, [pc, #104]	; (8003814 <prvAddCurrentTaskToDelayedList+0x94>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	3304      	adds	r3, #4
 80037b0:	4619      	mov	r1, r3
 80037b2:	4819      	ldr	r0, [pc, #100]	; (8003818 <prvAddCurrentTaskToDelayedList+0x98>)
 80037b4:	f7fe fb6b 	bl	8001e8e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80037b8:	e026      	b.n	8003808 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80037ba:	68fa      	ldr	r2, [r7, #12]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	4413      	add	r3, r2
 80037c0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80037c2:	4b14      	ldr	r3, [pc, #80]	; (8003814 <prvAddCurrentTaskToDelayedList+0x94>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	68ba      	ldr	r2, [r7, #8]
 80037c8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80037ca:	68ba      	ldr	r2, [r7, #8]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d209      	bcs.n	80037e6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80037d2:	4b12      	ldr	r3, [pc, #72]	; (800381c <prvAddCurrentTaskToDelayedList+0x9c>)
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	4b0f      	ldr	r3, [pc, #60]	; (8003814 <prvAddCurrentTaskToDelayedList+0x94>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	3304      	adds	r3, #4
 80037dc:	4619      	mov	r1, r3
 80037de:	4610      	mov	r0, r2
 80037e0:	f7fe fb78 	bl	8001ed4 <vListInsert>
}
 80037e4:	e010      	b.n	8003808 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80037e6:	4b0e      	ldr	r3, [pc, #56]	; (8003820 <prvAddCurrentTaskToDelayedList+0xa0>)
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	4b0a      	ldr	r3, [pc, #40]	; (8003814 <prvAddCurrentTaskToDelayedList+0x94>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	3304      	adds	r3, #4
 80037f0:	4619      	mov	r1, r3
 80037f2:	4610      	mov	r0, r2
 80037f4:	f7fe fb6e 	bl	8001ed4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80037f8:	4b0a      	ldr	r3, [pc, #40]	; (8003824 <prvAddCurrentTaskToDelayedList+0xa4>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	68ba      	ldr	r2, [r7, #8]
 80037fe:	429a      	cmp	r2, r3
 8003800:	d202      	bcs.n	8003808 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003802:	4a08      	ldr	r2, [pc, #32]	; (8003824 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	6013      	str	r3, [r2, #0]
}
 8003808:	bf00      	nop
 800380a:	3710      	adds	r7, #16
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}
 8003810:	20000e00 	.word	0x20000e00
 8003814:	20000928 	.word	0x20000928
 8003818:	20000de8 	.word	0x20000de8
 800381c:	20000db8 	.word	0x20000db8
 8003820:	20000db4 	.word	0x20000db4
 8003824:	20000e1c 	.word	0x20000e1c

08003828 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b08a      	sub	sp, #40	; 0x28
 800382c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800382e:	2300      	movs	r3, #0
 8003830:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003832:	f000 facb 	bl	8003dcc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003836:	4b1c      	ldr	r3, [pc, #112]	; (80038a8 <xTimerCreateTimerTask+0x80>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d021      	beq.n	8003882 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800383e:	2300      	movs	r3, #0
 8003840:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003842:	2300      	movs	r3, #0
 8003844:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003846:	1d3a      	adds	r2, r7, #4
 8003848:	f107 0108 	add.w	r1, r7, #8
 800384c:	f107 030c 	add.w	r3, r7, #12
 8003850:	4618      	mov	r0, r3
 8003852:	f7fe fad7 	bl	8001e04 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003856:	6879      	ldr	r1, [r7, #4]
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	68fa      	ldr	r2, [r7, #12]
 800385c:	9202      	str	r2, [sp, #8]
 800385e:	9301      	str	r3, [sp, #4]
 8003860:	2302      	movs	r3, #2
 8003862:	9300      	str	r3, [sp, #0]
 8003864:	2300      	movs	r3, #0
 8003866:	460a      	mov	r2, r1
 8003868:	4910      	ldr	r1, [pc, #64]	; (80038ac <xTimerCreateTimerTask+0x84>)
 800386a:	4811      	ldr	r0, [pc, #68]	; (80038b0 <xTimerCreateTimerTask+0x88>)
 800386c:	f7ff f8b6 	bl	80029dc <xTaskCreateStatic>
 8003870:	4603      	mov	r3, r0
 8003872:	4a10      	ldr	r2, [pc, #64]	; (80038b4 <xTimerCreateTimerTask+0x8c>)
 8003874:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003876:	4b0f      	ldr	r3, [pc, #60]	; (80038b4 <xTimerCreateTimerTask+0x8c>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d001      	beq.n	8003882 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800387e:	2301      	movs	r3, #1
 8003880:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d10a      	bne.n	800389e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800388c:	f383 8811 	msr	BASEPRI, r3
 8003890:	f3bf 8f6f 	isb	sy
 8003894:	f3bf 8f4f 	dsb	sy
 8003898:	613b      	str	r3, [r7, #16]
}
 800389a:	bf00      	nop
 800389c:	e7fe      	b.n	800389c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800389e:	697b      	ldr	r3, [r7, #20]
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3718      	adds	r7, #24
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	20000e58 	.word	0x20000e58
 80038ac:	080047e0 	.word	0x080047e0
 80038b0:	080039d5 	.word	0x080039d5
 80038b4:	20000e5c 	.word	0x20000e5c

080038b8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b08a      	sub	sp, #40	; 0x28
 80038bc:	af00      	add	r7, sp, #0
 80038be:	60f8      	str	r0, [r7, #12]
 80038c0:	60b9      	str	r1, [r7, #8]
 80038c2:	607a      	str	r2, [r7, #4]
 80038c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80038c6:	2300      	movs	r3, #0
 80038c8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d10a      	bne.n	80038e6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80038d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038d4:	f383 8811 	msr	BASEPRI, r3
 80038d8:	f3bf 8f6f 	isb	sy
 80038dc:	f3bf 8f4f 	dsb	sy
 80038e0:	623b      	str	r3, [r7, #32]
}
 80038e2:	bf00      	nop
 80038e4:	e7fe      	b.n	80038e4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80038e6:	4b1a      	ldr	r3, [pc, #104]	; (8003950 <xTimerGenericCommand+0x98>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d02a      	beq.n	8003944 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	2b05      	cmp	r3, #5
 80038fe:	dc18      	bgt.n	8003932 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003900:	f7ff feb2 	bl	8003668 <xTaskGetSchedulerState>
 8003904:	4603      	mov	r3, r0
 8003906:	2b02      	cmp	r3, #2
 8003908:	d109      	bne.n	800391e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800390a:	4b11      	ldr	r3, [pc, #68]	; (8003950 <xTimerGenericCommand+0x98>)
 800390c:	6818      	ldr	r0, [r3, #0]
 800390e:	f107 0110 	add.w	r1, r7, #16
 8003912:	2300      	movs	r3, #0
 8003914:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003916:	f7fe fc7f 	bl	8002218 <xQueueGenericSend>
 800391a:	6278      	str	r0, [r7, #36]	; 0x24
 800391c:	e012      	b.n	8003944 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800391e:	4b0c      	ldr	r3, [pc, #48]	; (8003950 <xTimerGenericCommand+0x98>)
 8003920:	6818      	ldr	r0, [r3, #0]
 8003922:	f107 0110 	add.w	r1, r7, #16
 8003926:	2300      	movs	r3, #0
 8003928:	2200      	movs	r2, #0
 800392a:	f7fe fc75 	bl	8002218 <xQueueGenericSend>
 800392e:	6278      	str	r0, [r7, #36]	; 0x24
 8003930:	e008      	b.n	8003944 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003932:	4b07      	ldr	r3, [pc, #28]	; (8003950 <xTimerGenericCommand+0x98>)
 8003934:	6818      	ldr	r0, [r3, #0]
 8003936:	f107 0110 	add.w	r1, r7, #16
 800393a:	2300      	movs	r3, #0
 800393c:	683a      	ldr	r2, [r7, #0]
 800393e:	f7fe fd69 	bl	8002414 <xQueueGenericSendFromISR>
 8003942:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003946:	4618      	mov	r0, r3
 8003948:	3728      	adds	r7, #40	; 0x28
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	20000e58 	.word	0x20000e58

08003954 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b088      	sub	sp, #32
 8003958:	af02      	add	r7, sp, #8
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800395e:	4b1c      	ldr	r3, [pc, #112]	; (80039d0 <prvProcessExpiredTimer+0x7c>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	3304      	adds	r3, #4
 800396c:	4618      	mov	r0, r3
 800396e:	f7fe fae9 	bl	8001f44 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	69db      	ldr	r3, [r3, #28]
 8003976:	2b01      	cmp	r3, #1
 8003978:	d122      	bne.n	80039c0 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	699a      	ldr	r2, [r3, #24]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	18d1      	adds	r1, r2, r3
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	683a      	ldr	r2, [r7, #0]
 8003986:	6978      	ldr	r0, [r7, #20]
 8003988:	f000 f8c8 	bl	8003b1c <prvInsertTimerInActiveList>
 800398c:	4603      	mov	r3, r0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d016      	beq.n	80039c0 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003992:	2300      	movs	r3, #0
 8003994:	9300      	str	r3, [sp, #0]
 8003996:	2300      	movs	r3, #0
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	2100      	movs	r1, #0
 800399c:	6978      	ldr	r0, [r7, #20]
 800399e:	f7ff ff8b 	bl	80038b8 <xTimerGenericCommand>
 80039a2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d10a      	bne.n	80039c0 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 80039aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ae:	f383 8811 	msr	BASEPRI, r3
 80039b2:	f3bf 8f6f 	isb	sy
 80039b6:	f3bf 8f4f 	dsb	sy
 80039ba:	60fb      	str	r3, [r7, #12]
}
 80039bc:	bf00      	nop
 80039be:	e7fe      	b.n	80039be <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c4:	6978      	ldr	r0, [r7, #20]
 80039c6:	4798      	blx	r3
}
 80039c8:	bf00      	nop
 80039ca:	3718      	adds	r7, #24
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	20000e50 	.word	0x20000e50

080039d4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80039dc:	f107 0308 	add.w	r3, r7, #8
 80039e0:	4618      	mov	r0, r3
 80039e2:	f000 f857 	bl	8003a94 <prvGetNextExpireTime>
 80039e6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	4619      	mov	r1, r3
 80039ec:	68f8      	ldr	r0, [r7, #12]
 80039ee:	f000 f803 	bl	80039f8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80039f2:	f000 f8d5 	bl	8003ba0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80039f6:	e7f1      	b.n	80039dc <prvTimerTask+0x8>

080039f8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003a02:	f7ff fa3f 	bl	8002e84 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003a06:	f107 0308 	add.w	r3, r7, #8
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f000 f866 	bl	8003adc <prvSampleTimeNow>
 8003a10:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d130      	bne.n	8003a7a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d10a      	bne.n	8003a34 <prvProcessTimerOrBlockTask+0x3c>
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d806      	bhi.n	8003a34 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003a26:	f7ff fa3b 	bl	8002ea0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003a2a:	68f9      	ldr	r1, [r7, #12]
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f7ff ff91 	bl	8003954 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003a32:	e024      	b.n	8003a7e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d008      	beq.n	8003a4c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003a3a:	4b13      	ldr	r3, [pc, #76]	; (8003a88 <prvProcessTimerOrBlockTask+0x90>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	bf0c      	ite	eq
 8003a44:	2301      	moveq	r3, #1
 8003a46:	2300      	movne	r3, #0
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003a4c:	4b0f      	ldr	r3, [pc, #60]	; (8003a8c <prvProcessTimerOrBlockTask+0x94>)
 8003a4e:	6818      	ldr	r0, [r3, #0]
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	683a      	ldr	r2, [r7, #0]
 8003a58:	4619      	mov	r1, r3
 8003a5a:	f7fe ff8b 	bl	8002974 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003a5e:	f7ff fa1f 	bl	8002ea0 <xTaskResumeAll>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d10a      	bne.n	8003a7e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003a68:	4b09      	ldr	r3, [pc, #36]	; (8003a90 <prvProcessTimerOrBlockTask+0x98>)
 8003a6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a6e:	601a      	str	r2, [r3, #0]
 8003a70:	f3bf 8f4f 	dsb	sy
 8003a74:	f3bf 8f6f 	isb	sy
}
 8003a78:	e001      	b.n	8003a7e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003a7a:	f7ff fa11 	bl	8002ea0 <xTaskResumeAll>
}
 8003a7e:	bf00      	nop
 8003a80:	3710      	adds	r7, #16
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	20000e54 	.word	0x20000e54
 8003a8c:	20000e58 	.word	0x20000e58
 8003a90:	e000ed04 	.word	0xe000ed04

08003a94 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003a94:	b480      	push	{r7}
 8003a96:	b085      	sub	sp, #20
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003a9c:	4b0e      	ldr	r3, [pc, #56]	; (8003ad8 <prvGetNextExpireTime+0x44>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	bf0c      	ite	eq
 8003aa6:	2301      	moveq	r3, #1
 8003aa8:	2300      	movne	r3, #0
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	461a      	mov	r2, r3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d105      	bne.n	8003ac6 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003aba:	4b07      	ldr	r3, [pc, #28]	; (8003ad8 <prvGetNextExpireTime+0x44>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	60fb      	str	r3, [r7, #12]
 8003ac4:	e001      	b.n	8003aca <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003aca:	68fb      	ldr	r3, [r7, #12]
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3714      	adds	r7, #20
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bc80      	pop	{r7}
 8003ad4:	4770      	bx	lr
 8003ad6:	bf00      	nop
 8003ad8:	20000e50 	.word	0x20000e50

08003adc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003ae4:	f7ff fa7a 	bl	8002fdc <xTaskGetTickCount>
 8003ae8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003aea:	4b0b      	ldr	r3, [pc, #44]	; (8003b18 <prvSampleTimeNow+0x3c>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	68fa      	ldr	r2, [r7, #12]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d205      	bcs.n	8003b00 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003af4:	f000 f908 	bl	8003d08 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	601a      	str	r2, [r3, #0]
 8003afe:	e002      	b.n	8003b06 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003b06:	4a04      	ldr	r2, [pc, #16]	; (8003b18 <prvSampleTimeNow+0x3c>)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3710      	adds	r7, #16
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	20000e60 	.word	0x20000e60

08003b1c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b086      	sub	sp, #24
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	60b9      	str	r1, [r7, #8]
 8003b26:	607a      	str	r2, [r7, #4]
 8003b28:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	68ba      	ldr	r2, [r7, #8]
 8003b32:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	68fa      	ldr	r2, [r7, #12]
 8003b38:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003b3a:	68ba      	ldr	r2, [r7, #8]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d812      	bhi.n	8003b68 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	1ad2      	subs	r2, r2, r3
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	699b      	ldr	r3, [r3, #24]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d302      	bcc.n	8003b56 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003b50:	2301      	movs	r3, #1
 8003b52:	617b      	str	r3, [r7, #20]
 8003b54:	e01b      	b.n	8003b8e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003b56:	4b10      	ldr	r3, [pc, #64]	; (8003b98 <prvInsertTimerInActiveList+0x7c>)
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	3304      	adds	r3, #4
 8003b5e:	4619      	mov	r1, r3
 8003b60:	4610      	mov	r0, r2
 8003b62:	f7fe f9b7 	bl	8001ed4 <vListInsert>
 8003b66:	e012      	b.n	8003b8e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d206      	bcs.n	8003b7e <prvInsertTimerInActiveList+0x62>
 8003b70:	68ba      	ldr	r2, [r7, #8]
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d302      	bcc.n	8003b7e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	617b      	str	r3, [r7, #20]
 8003b7c:	e007      	b.n	8003b8e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003b7e:	4b07      	ldr	r3, [pc, #28]	; (8003b9c <prvInsertTimerInActiveList+0x80>)
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	3304      	adds	r3, #4
 8003b86:	4619      	mov	r1, r3
 8003b88:	4610      	mov	r0, r2
 8003b8a:	f7fe f9a3 	bl	8001ed4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003b8e:	697b      	ldr	r3, [r7, #20]
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3718      	adds	r7, #24
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	20000e54 	.word	0x20000e54
 8003b9c:	20000e50 	.word	0x20000e50

08003ba0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b08e      	sub	sp, #56	; 0x38
 8003ba4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003ba6:	e09d      	b.n	8003ce4 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	da18      	bge.n	8003be0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003bae:	1d3b      	adds	r3, r7, #4
 8003bb0:	3304      	adds	r3, #4
 8003bb2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d10a      	bne.n	8003bd0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8003bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bbe:	f383 8811 	msr	BASEPRI, r3
 8003bc2:	f3bf 8f6f 	isb	sy
 8003bc6:	f3bf 8f4f 	dsb	sy
 8003bca:	61fb      	str	r3, [r7, #28]
}
 8003bcc:	bf00      	nop
 8003bce:	e7fe      	b.n	8003bce <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bd6:	6850      	ldr	r0, [r2, #4]
 8003bd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bda:	6892      	ldr	r2, [r2, #8]
 8003bdc:	4611      	mov	r1, r2
 8003bde:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	db7e      	blt.n	8003ce4 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bec:	695b      	ldr	r3, [r3, #20]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d004      	beq.n	8003bfc <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bf4:	3304      	adds	r3, #4
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f7fe f9a4 	bl	8001f44 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003bfc:	463b      	mov	r3, r7
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7ff ff6c 	bl	8003adc <prvSampleTimeNow>
 8003c04:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2b09      	cmp	r3, #9
 8003c0a:	d86a      	bhi.n	8003ce2 <prvProcessReceivedCommands+0x142>
 8003c0c:	a201      	add	r2, pc, #4	; (adr r2, 8003c14 <prvProcessReceivedCommands+0x74>)
 8003c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c12:	bf00      	nop
 8003c14:	08003c3d 	.word	0x08003c3d
 8003c18:	08003c3d 	.word	0x08003c3d
 8003c1c:	08003c3d 	.word	0x08003c3d
 8003c20:	08003ce5 	.word	0x08003ce5
 8003c24:	08003c99 	.word	0x08003c99
 8003c28:	08003cd1 	.word	0x08003cd1
 8003c2c:	08003c3d 	.word	0x08003c3d
 8003c30:	08003c3d 	.word	0x08003c3d
 8003c34:	08003ce5 	.word	0x08003ce5
 8003c38:	08003c99 	.word	0x08003c99
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003c3c:	68ba      	ldr	r2, [r7, #8]
 8003c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c40:	699b      	ldr	r3, [r3, #24]
 8003c42:	18d1      	adds	r1, r2, r3
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c4a:	f7ff ff67 	bl	8003b1c <prvInsertTimerInActiveList>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d047      	beq.n	8003ce4 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c5a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c5e:	69db      	ldr	r3, [r3, #28]
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d13f      	bne.n	8003ce4 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003c64:	68ba      	ldr	r2, [r7, #8]
 8003c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c68:	699b      	ldr	r3, [r3, #24]
 8003c6a:	441a      	add	r2, r3
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	9300      	str	r3, [sp, #0]
 8003c70:	2300      	movs	r3, #0
 8003c72:	2100      	movs	r1, #0
 8003c74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c76:	f7ff fe1f 	bl	80038b8 <xTimerGenericCommand>
 8003c7a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003c7c:	6a3b      	ldr	r3, [r7, #32]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d130      	bne.n	8003ce4 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8003c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c86:	f383 8811 	msr	BASEPRI, r3
 8003c8a:	f3bf 8f6f 	isb	sy
 8003c8e:	f3bf 8f4f 	dsb	sy
 8003c92:	61bb      	str	r3, [r7, #24]
}
 8003c94:	bf00      	nop
 8003c96:	e7fe      	b.n	8003c96 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003c98:	68ba      	ldr	r2, [r7, #8]
 8003c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c9c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ca0:	699b      	ldr	r3, [r3, #24]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d10a      	bne.n	8003cbc <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8003ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003caa:	f383 8811 	msr	BASEPRI, r3
 8003cae:	f3bf 8f6f 	isb	sy
 8003cb2:	f3bf 8f4f 	dsb	sy
 8003cb6:	617b      	str	r3, [r7, #20]
}
 8003cb8:	bf00      	nop
 8003cba:	e7fe      	b.n	8003cba <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cbe:	699a      	ldr	r2, [r3, #24]
 8003cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc2:	18d1      	adds	r1, r2, r3
 8003cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003cca:	f7ff ff27 	bl	8003b1c <prvInsertTimerInActiveList>
					break;
 8003cce:	e009      	b.n	8003ce4 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8003cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d104      	bne.n	8003ce4 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8003cda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003cdc:	f000 fb6a 	bl	80043b4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003ce0:	e000      	b.n	8003ce4 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 8003ce2:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003ce4:	4b07      	ldr	r3, [pc, #28]	; (8003d04 <prvProcessReceivedCommands+0x164>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	1d39      	adds	r1, r7, #4
 8003cea:	2200      	movs	r2, #0
 8003cec:	4618      	mov	r0, r3
 8003cee:	f7fe fc29 	bl	8002544 <xQueueReceive>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	f47f af57 	bne.w	8003ba8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8003cfa:	bf00      	nop
 8003cfc:	bf00      	nop
 8003cfe:	3730      	adds	r7, #48	; 0x30
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	20000e58 	.word	0x20000e58

08003d08 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b088      	sub	sp, #32
 8003d0c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003d0e:	e045      	b.n	8003d9c <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003d10:	4b2c      	ldr	r3, [pc, #176]	; (8003dc4 <prvSwitchTimerLists+0xbc>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003d1a:	4b2a      	ldr	r3, [pc, #168]	; (8003dc4 <prvSwitchTimerLists+0xbc>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	3304      	adds	r3, #4
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f7fe f90b 	bl	8001f44 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d32:	68f8      	ldr	r0, [r7, #12]
 8003d34:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	69db      	ldr	r3, [r3, #28]
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d12e      	bne.n	8003d9c <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	699b      	ldr	r3, [r3, #24]
 8003d42:	693a      	ldr	r2, [r7, #16]
 8003d44:	4413      	add	r3, r2
 8003d46:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003d48:	68ba      	ldr	r2, [r7, #8]
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d90e      	bls.n	8003d6e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	68ba      	ldr	r2, [r7, #8]
 8003d54:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	68fa      	ldr	r2, [r7, #12]
 8003d5a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003d5c:	4b19      	ldr	r3, [pc, #100]	; (8003dc4 <prvSwitchTimerLists+0xbc>)
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	3304      	adds	r3, #4
 8003d64:	4619      	mov	r1, r3
 8003d66:	4610      	mov	r0, r2
 8003d68:	f7fe f8b4 	bl	8001ed4 <vListInsert>
 8003d6c:	e016      	b.n	8003d9c <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003d6e:	2300      	movs	r3, #0
 8003d70:	9300      	str	r3, [sp, #0]
 8003d72:	2300      	movs	r3, #0
 8003d74:	693a      	ldr	r2, [r7, #16]
 8003d76:	2100      	movs	r1, #0
 8003d78:	68f8      	ldr	r0, [r7, #12]
 8003d7a:	f7ff fd9d 	bl	80038b8 <xTimerGenericCommand>
 8003d7e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d10a      	bne.n	8003d9c <prvSwitchTimerLists+0x94>
	__asm volatile
 8003d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d8a:	f383 8811 	msr	BASEPRI, r3
 8003d8e:	f3bf 8f6f 	isb	sy
 8003d92:	f3bf 8f4f 	dsb	sy
 8003d96:	603b      	str	r3, [r7, #0]
}
 8003d98:	bf00      	nop
 8003d9a:	e7fe      	b.n	8003d9a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003d9c:	4b09      	ldr	r3, [pc, #36]	; (8003dc4 <prvSwitchTimerLists+0xbc>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d1b4      	bne.n	8003d10 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003da6:	4b07      	ldr	r3, [pc, #28]	; (8003dc4 <prvSwitchTimerLists+0xbc>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003dac:	4b06      	ldr	r3, [pc, #24]	; (8003dc8 <prvSwitchTimerLists+0xc0>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a04      	ldr	r2, [pc, #16]	; (8003dc4 <prvSwitchTimerLists+0xbc>)
 8003db2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003db4:	4a04      	ldr	r2, [pc, #16]	; (8003dc8 <prvSwitchTimerLists+0xc0>)
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	6013      	str	r3, [r2, #0]
}
 8003dba:	bf00      	nop
 8003dbc:	3718      	adds	r7, #24
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	20000e50 	.word	0x20000e50
 8003dc8:	20000e54 	.word	0x20000e54

08003dcc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b082      	sub	sp, #8
 8003dd0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003dd2:	f000 f92b 	bl	800402c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003dd6:	4b15      	ldr	r3, [pc, #84]	; (8003e2c <prvCheckForValidListAndQueue+0x60>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d120      	bne.n	8003e20 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003dde:	4814      	ldr	r0, [pc, #80]	; (8003e30 <prvCheckForValidListAndQueue+0x64>)
 8003de0:	f7fe f82a 	bl	8001e38 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003de4:	4813      	ldr	r0, [pc, #76]	; (8003e34 <prvCheckForValidListAndQueue+0x68>)
 8003de6:	f7fe f827 	bl	8001e38 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003dea:	4b13      	ldr	r3, [pc, #76]	; (8003e38 <prvCheckForValidListAndQueue+0x6c>)
 8003dec:	4a10      	ldr	r2, [pc, #64]	; (8003e30 <prvCheckForValidListAndQueue+0x64>)
 8003dee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003df0:	4b12      	ldr	r3, [pc, #72]	; (8003e3c <prvCheckForValidListAndQueue+0x70>)
 8003df2:	4a10      	ldr	r2, [pc, #64]	; (8003e34 <prvCheckForValidListAndQueue+0x68>)
 8003df4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003df6:	2300      	movs	r3, #0
 8003df8:	9300      	str	r3, [sp, #0]
 8003dfa:	4b11      	ldr	r3, [pc, #68]	; (8003e40 <prvCheckForValidListAndQueue+0x74>)
 8003dfc:	4a11      	ldr	r2, [pc, #68]	; (8003e44 <prvCheckForValidListAndQueue+0x78>)
 8003dfe:	2110      	movs	r1, #16
 8003e00:	200a      	movs	r0, #10
 8003e02:	f7fe f931 	bl	8002068 <xQueueGenericCreateStatic>
 8003e06:	4603      	mov	r3, r0
 8003e08:	4a08      	ldr	r2, [pc, #32]	; (8003e2c <prvCheckForValidListAndQueue+0x60>)
 8003e0a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003e0c:	4b07      	ldr	r3, [pc, #28]	; (8003e2c <prvCheckForValidListAndQueue+0x60>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d005      	beq.n	8003e20 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003e14:	4b05      	ldr	r3, [pc, #20]	; (8003e2c <prvCheckForValidListAndQueue+0x60>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	490b      	ldr	r1, [pc, #44]	; (8003e48 <prvCheckForValidListAndQueue+0x7c>)
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f7fe fd82 	bl	8002924 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003e20:	f000 f934 	bl	800408c <vPortExitCritical>
}
 8003e24:	bf00      	nop
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	20000e58 	.word	0x20000e58
 8003e30:	20000e28 	.word	0x20000e28
 8003e34:	20000e3c 	.word	0x20000e3c
 8003e38:	20000e50 	.word	0x20000e50
 8003e3c:	20000e54 	.word	0x20000e54
 8003e40:	20000f04 	.word	0x20000f04
 8003e44:	20000e64 	.word	0x20000e64
 8003e48:	080047e8 	.word	0x080047e8

08003e4c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b085      	sub	sp, #20
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	60f8      	str	r0, [r7, #12]
 8003e54:	60b9      	str	r1, [r7, #8]
 8003e56:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	3b04      	subs	r3, #4
 8003e5c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003e64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	3b04      	subs	r3, #4
 8003e6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	f023 0201 	bic.w	r2, r3, #1
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	3b04      	subs	r3, #4
 8003e7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003e7c:	4a08      	ldr	r2, [pc, #32]	; (8003ea0 <pxPortInitialiseStack+0x54>)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	3b14      	subs	r3, #20
 8003e86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	3b20      	subs	r3, #32
 8003e92:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003e94:	68fb      	ldr	r3, [r7, #12]
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3714      	adds	r7, #20
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bc80      	pop	{r7}
 8003e9e:	4770      	bx	lr
 8003ea0:	08003ea5 	.word	0x08003ea5

08003ea4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b085      	sub	sp, #20
 8003ea8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003eae:	4b12      	ldr	r3, [pc, #72]	; (8003ef8 <prvTaskExitError+0x54>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eb6:	d00a      	beq.n	8003ece <prvTaskExitError+0x2a>
	__asm volatile
 8003eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ebc:	f383 8811 	msr	BASEPRI, r3
 8003ec0:	f3bf 8f6f 	isb	sy
 8003ec4:	f3bf 8f4f 	dsb	sy
 8003ec8:	60fb      	str	r3, [r7, #12]
}
 8003eca:	bf00      	nop
 8003ecc:	e7fe      	b.n	8003ecc <prvTaskExitError+0x28>
	__asm volatile
 8003ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ed2:	f383 8811 	msr	BASEPRI, r3
 8003ed6:	f3bf 8f6f 	isb	sy
 8003eda:	f3bf 8f4f 	dsb	sy
 8003ede:	60bb      	str	r3, [r7, #8]
}
 8003ee0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003ee2:	bf00      	nop
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d0fc      	beq.n	8003ee4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003eea:	bf00      	nop
 8003eec:	bf00      	nop
 8003eee:	3714      	adds	r7, #20
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bc80      	pop	{r7}
 8003ef4:	4770      	bx	lr
 8003ef6:	bf00      	nop
 8003ef8:	2000000c 	.word	0x2000000c
 8003efc:	00000000 	.word	0x00000000

08003f00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003f00:	4b07      	ldr	r3, [pc, #28]	; (8003f20 <pxCurrentTCBConst2>)
 8003f02:	6819      	ldr	r1, [r3, #0]
 8003f04:	6808      	ldr	r0, [r1, #0]
 8003f06:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003f0a:	f380 8809 	msr	PSP, r0
 8003f0e:	f3bf 8f6f 	isb	sy
 8003f12:	f04f 0000 	mov.w	r0, #0
 8003f16:	f380 8811 	msr	BASEPRI, r0
 8003f1a:	f04e 0e0d 	orr.w	lr, lr, #13
 8003f1e:	4770      	bx	lr

08003f20 <pxCurrentTCBConst2>:
 8003f20:	20000928 	.word	0x20000928
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003f24:	bf00      	nop
 8003f26:	bf00      	nop

08003f28 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003f28:	4806      	ldr	r0, [pc, #24]	; (8003f44 <prvPortStartFirstTask+0x1c>)
 8003f2a:	6800      	ldr	r0, [r0, #0]
 8003f2c:	6800      	ldr	r0, [r0, #0]
 8003f2e:	f380 8808 	msr	MSP, r0
 8003f32:	b662      	cpsie	i
 8003f34:	b661      	cpsie	f
 8003f36:	f3bf 8f4f 	dsb	sy
 8003f3a:	f3bf 8f6f 	isb	sy
 8003f3e:	df00      	svc	0
 8003f40:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003f42:	bf00      	nop
 8003f44:	e000ed08 	.word	0xe000ed08

08003f48 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b084      	sub	sp, #16
 8003f4c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003f4e:	4b32      	ldr	r3, [pc, #200]	; (8004018 <xPortStartScheduler+0xd0>)
 8003f50:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	22ff      	movs	r2, #255	; 0xff
 8003f5e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003f68:	78fb      	ldrb	r3, [r7, #3]
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003f70:	b2da      	uxtb	r2, r3
 8003f72:	4b2a      	ldr	r3, [pc, #168]	; (800401c <xPortStartScheduler+0xd4>)
 8003f74:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003f76:	4b2a      	ldr	r3, [pc, #168]	; (8004020 <xPortStartScheduler+0xd8>)
 8003f78:	2207      	movs	r2, #7
 8003f7a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003f7c:	e009      	b.n	8003f92 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8003f7e:	4b28      	ldr	r3, [pc, #160]	; (8004020 <xPortStartScheduler+0xd8>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	3b01      	subs	r3, #1
 8003f84:	4a26      	ldr	r2, [pc, #152]	; (8004020 <xPortStartScheduler+0xd8>)
 8003f86:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003f88:	78fb      	ldrb	r3, [r7, #3]
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	005b      	lsls	r3, r3, #1
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003f92:	78fb      	ldrb	r3, [r7, #3]
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f9a:	2b80      	cmp	r3, #128	; 0x80
 8003f9c:	d0ef      	beq.n	8003f7e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003f9e:	4b20      	ldr	r3, [pc, #128]	; (8004020 <xPortStartScheduler+0xd8>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f1c3 0307 	rsb	r3, r3, #7
 8003fa6:	2b04      	cmp	r3, #4
 8003fa8:	d00a      	beq.n	8003fc0 <xPortStartScheduler+0x78>
	__asm volatile
 8003faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fae:	f383 8811 	msr	BASEPRI, r3
 8003fb2:	f3bf 8f6f 	isb	sy
 8003fb6:	f3bf 8f4f 	dsb	sy
 8003fba:	60bb      	str	r3, [r7, #8]
}
 8003fbc:	bf00      	nop
 8003fbe:	e7fe      	b.n	8003fbe <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003fc0:	4b17      	ldr	r3, [pc, #92]	; (8004020 <xPortStartScheduler+0xd8>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	021b      	lsls	r3, r3, #8
 8003fc6:	4a16      	ldr	r2, [pc, #88]	; (8004020 <xPortStartScheduler+0xd8>)
 8003fc8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003fca:	4b15      	ldr	r3, [pc, #84]	; (8004020 <xPortStartScheduler+0xd8>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003fd2:	4a13      	ldr	r2, [pc, #76]	; (8004020 <xPortStartScheduler+0xd8>)
 8003fd4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	b2da      	uxtb	r2, r3
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003fde:	4b11      	ldr	r3, [pc, #68]	; (8004024 <xPortStartScheduler+0xdc>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a10      	ldr	r2, [pc, #64]	; (8004024 <xPortStartScheduler+0xdc>)
 8003fe4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003fe8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003fea:	4b0e      	ldr	r3, [pc, #56]	; (8004024 <xPortStartScheduler+0xdc>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a0d      	ldr	r2, [pc, #52]	; (8004024 <xPortStartScheduler+0xdc>)
 8003ff0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003ff4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003ff6:	f000 f8b9 	bl	800416c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003ffa:	4b0b      	ldr	r3, [pc, #44]	; (8004028 <xPortStartScheduler+0xe0>)
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004000:	f7ff ff92 	bl	8003f28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004004:	f7ff f8b6 	bl	8003174 <vTaskSwitchContext>
	prvTaskExitError();
 8004008:	f7ff ff4c 	bl	8003ea4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800400c:	2300      	movs	r3, #0
}
 800400e:	4618      	mov	r0, r3
 8004010:	3710      	adds	r7, #16
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
 8004016:	bf00      	nop
 8004018:	e000e400 	.word	0xe000e400
 800401c:	20000f54 	.word	0x20000f54
 8004020:	20000f58 	.word	0x20000f58
 8004024:	e000ed20 	.word	0xe000ed20
 8004028:	2000000c 	.word	0x2000000c

0800402c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
	__asm volatile
 8004032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004036:	f383 8811 	msr	BASEPRI, r3
 800403a:	f3bf 8f6f 	isb	sy
 800403e:	f3bf 8f4f 	dsb	sy
 8004042:	607b      	str	r3, [r7, #4]
}
 8004044:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004046:	4b0f      	ldr	r3, [pc, #60]	; (8004084 <vPortEnterCritical+0x58>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	3301      	adds	r3, #1
 800404c:	4a0d      	ldr	r2, [pc, #52]	; (8004084 <vPortEnterCritical+0x58>)
 800404e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004050:	4b0c      	ldr	r3, [pc, #48]	; (8004084 <vPortEnterCritical+0x58>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	2b01      	cmp	r3, #1
 8004056:	d10f      	bne.n	8004078 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004058:	4b0b      	ldr	r3, [pc, #44]	; (8004088 <vPortEnterCritical+0x5c>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	b2db      	uxtb	r3, r3
 800405e:	2b00      	cmp	r3, #0
 8004060:	d00a      	beq.n	8004078 <vPortEnterCritical+0x4c>
	__asm volatile
 8004062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004066:	f383 8811 	msr	BASEPRI, r3
 800406a:	f3bf 8f6f 	isb	sy
 800406e:	f3bf 8f4f 	dsb	sy
 8004072:	603b      	str	r3, [r7, #0]
}
 8004074:	bf00      	nop
 8004076:	e7fe      	b.n	8004076 <vPortEnterCritical+0x4a>
	}
}
 8004078:	bf00      	nop
 800407a:	370c      	adds	r7, #12
 800407c:	46bd      	mov	sp, r7
 800407e:	bc80      	pop	{r7}
 8004080:	4770      	bx	lr
 8004082:	bf00      	nop
 8004084:	2000000c 	.word	0x2000000c
 8004088:	e000ed04 	.word	0xe000ed04

0800408c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800408c:	b480      	push	{r7}
 800408e:	b083      	sub	sp, #12
 8004090:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004092:	4b11      	ldr	r3, [pc, #68]	; (80040d8 <vPortExitCritical+0x4c>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d10a      	bne.n	80040b0 <vPortExitCritical+0x24>
	__asm volatile
 800409a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800409e:	f383 8811 	msr	BASEPRI, r3
 80040a2:	f3bf 8f6f 	isb	sy
 80040a6:	f3bf 8f4f 	dsb	sy
 80040aa:	607b      	str	r3, [r7, #4]
}
 80040ac:	bf00      	nop
 80040ae:	e7fe      	b.n	80040ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80040b0:	4b09      	ldr	r3, [pc, #36]	; (80040d8 <vPortExitCritical+0x4c>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	3b01      	subs	r3, #1
 80040b6:	4a08      	ldr	r2, [pc, #32]	; (80040d8 <vPortExitCritical+0x4c>)
 80040b8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80040ba:	4b07      	ldr	r3, [pc, #28]	; (80040d8 <vPortExitCritical+0x4c>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d105      	bne.n	80040ce <vPortExitCritical+0x42>
 80040c2:	2300      	movs	r3, #0
 80040c4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	f383 8811 	msr	BASEPRI, r3
}
 80040cc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80040ce:	bf00      	nop
 80040d0:	370c      	adds	r7, #12
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bc80      	pop	{r7}
 80040d6:	4770      	bx	lr
 80040d8:	2000000c 	.word	0x2000000c
 80040dc:	00000000 	.word	0x00000000

080040e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80040e0:	f3ef 8009 	mrs	r0, PSP
 80040e4:	f3bf 8f6f 	isb	sy
 80040e8:	4b0d      	ldr	r3, [pc, #52]	; (8004120 <pxCurrentTCBConst>)
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80040f0:	6010      	str	r0, [r2, #0]
 80040f2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80040f6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80040fa:	f380 8811 	msr	BASEPRI, r0
 80040fe:	f7ff f839 	bl	8003174 <vTaskSwitchContext>
 8004102:	f04f 0000 	mov.w	r0, #0
 8004106:	f380 8811 	msr	BASEPRI, r0
 800410a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800410e:	6819      	ldr	r1, [r3, #0]
 8004110:	6808      	ldr	r0, [r1, #0]
 8004112:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004116:	f380 8809 	msr	PSP, r0
 800411a:	f3bf 8f6f 	isb	sy
 800411e:	4770      	bx	lr

08004120 <pxCurrentTCBConst>:
 8004120:	20000928 	.word	0x20000928
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004124:	bf00      	nop
 8004126:	bf00      	nop

08004128 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b082      	sub	sp, #8
 800412c:	af00      	add	r7, sp, #0
	__asm volatile
 800412e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004132:	f383 8811 	msr	BASEPRI, r3
 8004136:	f3bf 8f6f 	isb	sy
 800413a:	f3bf 8f4f 	dsb	sy
 800413e:	607b      	str	r3, [r7, #4]
}
 8004140:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004142:	f7fe ff59 	bl	8002ff8 <xTaskIncrementTick>
 8004146:	4603      	mov	r3, r0
 8004148:	2b00      	cmp	r3, #0
 800414a:	d003      	beq.n	8004154 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800414c:	4b06      	ldr	r3, [pc, #24]	; (8004168 <SysTick_Handler+0x40>)
 800414e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004152:	601a      	str	r2, [r3, #0]
 8004154:	2300      	movs	r3, #0
 8004156:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	f383 8811 	msr	BASEPRI, r3
}
 800415e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004160:	bf00      	nop
 8004162:	3708      	adds	r7, #8
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}
 8004168:	e000ed04 	.word	0xe000ed04

0800416c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800416c:	b480      	push	{r7}
 800416e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004170:	4b0a      	ldr	r3, [pc, #40]	; (800419c <vPortSetupTimerInterrupt+0x30>)
 8004172:	2200      	movs	r2, #0
 8004174:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004176:	4b0a      	ldr	r3, [pc, #40]	; (80041a0 <vPortSetupTimerInterrupt+0x34>)
 8004178:	2200      	movs	r2, #0
 800417a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800417c:	4b09      	ldr	r3, [pc, #36]	; (80041a4 <vPortSetupTimerInterrupt+0x38>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a09      	ldr	r2, [pc, #36]	; (80041a8 <vPortSetupTimerInterrupt+0x3c>)
 8004182:	fba2 2303 	umull	r2, r3, r2, r3
 8004186:	099b      	lsrs	r3, r3, #6
 8004188:	4a08      	ldr	r2, [pc, #32]	; (80041ac <vPortSetupTimerInterrupt+0x40>)
 800418a:	3b01      	subs	r3, #1
 800418c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800418e:	4b03      	ldr	r3, [pc, #12]	; (800419c <vPortSetupTimerInterrupt+0x30>)
 8004190:	2207      	movs	r2, #7
 8004192:	601a      	str	r2, [r3, #0]
}
 8004194:	bf00      	nop
 8004196:	46bd      	mov	sp, r7
 8004198:	bc80      	pop	{r7}
 800419a:	4770      	bx	lr
 800419c:	e000e010 	.word	0xe000e010
 80041a0:	e000e018 	.word	0xe000e018
 80041a4:	20000000 	.word	0x20000000
 80041a8:	10624dd3 	.word	0x10624dd3
 80041ac:	e000e014 	.word	0xe000e014

080041b0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80041b0:	b480      	push	{r7}
 80041b2:	b085      	sub	sp, #20
 80041b4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80041b6:	f3ef 8305 	mrs	r3, IPSR
 80041ba:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2b0f      	cmp	r3, #15
 80041c0:	d914      	bls.n	80041ec <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80041c2:	4a16      	ldr	r2, [pc, #88]	; (800421c <vPortValidateInterruptPriority+0x6c>)
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	4413      	add	r3, r2
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80041cc:	4b14      	ldr	r3, [pc, #80]	; (8004220 <vPortValidateInterruptPriority+0x70>)
 80041ce:	781b      	ldrb	r3, [r3, #0]
 80041d0:	7afa      	ldrb	r2, [r7, #11]
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d20a      	bcs.n	80041ec <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80041d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041da:	f383 8811 	msr	BASEPRI, r3
 80041de:	f3bf 8f6f 	isb	sy
 80041e2:	f3bf 8f4f 	dsb	sy
 80041e6:	607b      	str	r3, [r7, #4]
}
 80041e8:	bf00      	nop
 80041ea:	e7fe      	b.n	80041ea <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80041ec:	4b0d      	ldr	r3, [pc, #52]	; (8004224 <vPortValidateInterruptPriority+0x74>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80041f4:	4b0c      	ldr	r3, [pc, #48]	; (8004228 <vPortValidateInterruptPriority+0x78>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d90a      	bls.n	8004212 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80041fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004200:	f383 8811 	msr	BASEPRI, r3
 8004204:	f3bf 8f6f 	isb	sy
 8004208:	f3bf 8f4f 	dsb	sy
 800420c:	603b      	str	r3, [r7, #0]
}
 800420e:	bf00      	nop
 8004210:	e7fe      	b.n	8004210 <vPortValidateInterruptPriority+0x60>
	}
 8004212:	bf00      	nop
 8004214:	3714      	adds	r7, #20
 8004216:	46bd      	mov	sp, r7
 8004218:	bc80      	pop	{r7}
 800421a:	4770      	bx	lr
 800421c:	e000e3f0 	.word	0xe000e3f0
 8004220:	20000f54 	.word	0x20000f54
 8004224:	e000ed0c 	.word	0xe000ed0c
 8004228:	20000f58 	.word	0x20000f58

0800422c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b08a      	sub	sp, #40	; 0x28
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004234:	2300      	movs	r3, #0
 8004236:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004238:	f7fe fe24 	bl	8002e84 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800423c:	4b58      	ldr	r3, [pc, #352]	; (80043a0 <pvPortMalloc+0x174>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d101      	bne.n	8004248 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004244:	f000 f910 	bl	8004468 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004248:	4b56      	ldr	r3, [pc, #344]	; (80043a4 <pvPortMalloc+0x178>)
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	4013      	ands	r3, r2
 8004250:	2b00      	cmp	r3, #0
 8004252:	f040 808e 	bne.w	8004372 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d01d      	beq.n	8004298 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800425c:	2208      	movs	r2, #8
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4413      	add	r3, r2
 8004262:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f003 0307 	and.w	r3, r3, #7
 800426a:	2b00      	cmp	r3, #0
 800426c:	d014      	beq.n	8004298 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f023 0307 	bic.w	r3, r3, #7
 8004274:	3308      	adds	r3, #8
 8004276:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f003 0307 	and.w	r3, r3, #7
 800427e:	2b00      	cmp	r3, #0
 8004280:	d00a      	beq.n	8004298 <pvPortMalloc+0x6c>
	__asm volatile
 8004282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004286:	f383 8811 	msr	BASEPRI, r3
 800428a:	f3bf 8f6f 	isb	sy
 800428e:	f3bf 8f4f 	dsb	sy
 8004292:	617b      	str	r3, [r7, #20]
}
 8004294:	bf00      	nop
 8004296:	e7fe      	b.n	8004296 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d069      	beq.n	8004372 <pvPortMalloc+0x146>
 800429e:	4b42      	ldr	r3, [pc, #264]	; (80043a8 <pvPortMalloc+0x17c>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d864      	bhi.n	8004372 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80042a8:	4b40      	ldr	r3, [pc, #256]	; (80043ac <pvPortMalloc+0x180>)
 80042aa:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80042ac:	4b3f      	ldr	r3, [pc, #252]	; (80043ac <pvPortMalloc+0x180>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80042b2:	e004      	b.n	80042be <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80042b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80042b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80042be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d903      	bls.n	80042d0 <pvPortMalloc+0xa4>
 80042c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d1f1      	bne.n	80042b4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80042d0:	4b33      	ldr	r3, [pc, #204]	; (80043a0 <pvPortMalloc+0x174>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d04b      	beq.n	8004372 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80042da:	6a3b      	ldr	r3, [r7, #32]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	2208      	movs	r2, #8
 80042e0:	4413      	add	r3, r2
 80042e2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80042e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	6a3b      	ldr	r3, [r7, #32]
 80042ea:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80042ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ee:	685a      	ldr	r2, [r3, #4]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	1ad2      	subs	r2, r2, r3
 80042f4:	2308      	movs	r3, #8
 80042f6:	005b      	lsls	r3, r3, #1
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d91f      	bls.n	800433c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80042fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4413      	add	r3, r2
 8004302:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004304:	69bb      	ldr	r3, [r7, #24]
 8004306:	f003 0307 	and.w	r3, r3, #7
 800430a:	2b00      	cmp	r3, #0
 800430c:	d00a      	beq.n	8004324 <pvPortMalloc+0xf8>
	__asm volatile
 800430e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004312:	f383 8811 	msr	BASEPRI, r3
 8004316:	f3bf 8f6f 	isb	sy
 800431a:	f3bf 8f4f 	dsb	sy
 800431e:	613b      	str	r3, [r7, #16]
}
 8004320:	bf00      	nop
 8004322:	e7fe      	b.n	8004322 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004326:	685a      	ldr	r2, [r3, #4]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	1ad2      	subs	r2, r2, r3
 800432c:	69bb      	ldr	r3, [r7, #24]
 800432e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004336:	69b8      	ldr	r0, [r7, #24]
 8004338:	f000 f8f8 	bl	800452c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800433c:	4b1a      	ldr	r3, [pc, #104]	; (80043a8 <pvPortMalloc+0x17c>)
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	4a18      	ldr	r2, [pc, #96]	; (80043a8 <pvPortMalloc+0x17c>)
 8004348:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800434a:	4b17      	ldr	r3, [pc, #92]	; (80043a8 <pvPortMalloc+0x17c>)
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	4b18      	ldr	r3, [pc, #96]	; (80043b0 <pvPortMalloc+0x184>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	429a      	cmp	r2, r3
 8004354:	d203      	bcs.n	800435e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004356:	4b14      	ldr	r3, [pc, #80]	; (80043a8 <pvPortMalloc+0x17c>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a15      	ldr	r2, [pc, #84]	; (80043b0 <pvPortMalloc+0x184>)
 800435c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800435e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004360:	685a      	ldr	r2, [r3, #4]
 8004362:	4b10      	ldr	r3, [pc, #64]	; (80043a4 <pvPortMalloc+0x178>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	431a      	orrs	r2, r3
 8004368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800436c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436e:	2200      	movs	r2, #0
 8004370:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004372:	f7fe fd95 	bl	8002ea0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	f003 0307 	and.w	r3, r3, #7
 800437c:	2b00      	cmp	r3, #0
 800437e:	d00a      	beq.n	8004396 <pvPortMalloc+0x16a>
	__asm volatile
 8004380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004384:	f383 8811 	msr	BASEPRI, r3
 8004388:	f3bf 8f6f 	isb	sy
 800438c:	f3bf 8f4f 	dsb	sy
 8004390:	60fb      	str	r3, [r7, #12]
}
 8004392:	bf00      	nop
 8004394:	e7fe      	b.n	8004394 <pvPortMalloc+0x168>
	return pvReturn;
 8004396:	69fb      	ldr	r3, [r7, #28]
}
 8004398:	4618      	mov	r0, r3
 800439a:	3728      	adds	r7, #40	; 0x28
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}
 80043a0:	20001b64 	.word	0x20001b64
 80043a4:	20001b70 	.word	0x20001b70
 80043a8:	20001b68 	.word	0x20001b68
 80043ac:	20001b5c 	.word	0x20001b5c
 80043b0:	20001b6c 	.word	0x20001b6c

080043b4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b086      	sub	sp, #24
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d048      	beq.n	8004458 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80043c6:	2308      	movs	r3, #8
 80043c8:	425b      	negs	r3, r3
 80043ca:	697a      	ldr	r2, [r7, #20]
 80043cc:	4413      	add	r3, r2
 80043ce:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	685a      	ldr	r2, [r3, #4]
 80043d8:	4b21      	ldr	r3, [pc, #132]	; (8004460 <vPortFree+0xac>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4013      	ands	r3, r2
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d10a      	bne.n	80043f8 <vPortFree+0x44>
	__asm volatile
 80043e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e6:	f383 8811 	msr	BASEPRI, r3
 80043ea:	f3bf 8f6f 	isb	sy
 80043ee:	f3bf 8f4f 	dsb	sy
 80043f2:	60fb      	str	r3, [r7, #12]
}
 80043f4:	bf00      	nop
 80043f6:	e7fe      	b.n	80043f6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d00a      	beq.n	8004416 <vPortFree+0x62>
	__asm volatile
 8004400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004404:	f383 8811 	msr	BASEPRI, r3
 8004408:	f3bf 8f6f 	isb	sy
 800440c:	f3bf 8f4f 	dsb	sy
 8004410:	60bb      	str	r3, [r7, #8]
}
 8004412:	bf00      	nop
 8004414:	e7fe      	b.n	8004414 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	685a      	ldr	r2, [r3, #4]
 800441a:	4b11      	ldr	r3, [pc, #68]	; (8004460 <vPortFree+0xac>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4013      	ands	r3, r2
 8004420:	2b00      	cmp	r3, #0
 8004422:	d019      	beq.n	8004458 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d115      	bne.n	8004458 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	685a      	ldr	r2, [r3, #4]
 8004430:	4b0b      	ldr	r3, [pc, #44]	; (8004460 <vPortFree+0xac>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	43db      	mvns	r3, r3
 8004436:	401a      	ands	r2, r3
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800443c:	f7fe fd22 	bl	8002e84 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	685a      	ldr	r2, [r3, #4]
 8004444:	4b07      	ldr	r3, [pc, #28]	; (8004464 <vPortFree+0xb0>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4413      	add	r3, r2
 800444a:	4a06      	ldr	r2, [pc, #24]	; (8004464 <vPortFree+0xb0>)
 800444c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800444e:	6938      	ldr	r0, [r7, #16]
 8004450:	f000 f86c 	bl	800452c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004454:	f7fe fd24 	bl	8002ea0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004458:	bf00      	nop
 800445a:	3718      	adds	r7, #24
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}
 8004460:	20001b70 	.word	0x20001b70
 8004464:	20001b68 	.word	0x20001b68

08004468 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004468:	b480      	push	{r7}
 800446a:	b085      	sub	sp, #20
 800446c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800446e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004472:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004474:	4b27      	ldr	r3, [pc, #156]	; (8004514 <prvHeapInit+0xac>)
 8004476:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f003 0307 	and.w	r3, r3, #7
 800447e:	2b00      	cmp	r3, #0
 8004480:	d00c      	beq.n	800449c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	3307      	adds	r3, #7
 8004486:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f023 0307 	bic.w	r3, r3, #7
 800448e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004490:	68ba      	ldr	r2, [r7, #8]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	4a1f      	ldr	r2, [pc, #124]	; (8004514 <prvHeapInit+0xac>)
 8004498:	4413      	add	r3, r2
 800449a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80044a0:	4a1d      	ldr	r2, [pc, #116]	; (8004518 <prvHeapInit+0xb0>)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80044a6:	4b1c      	ldr	r3, [pc, #112]	; (8004518 <prvHeapInit+0xb0>)
 80044a8:	2200      	movs	r2, #0
 80044aa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	68ba      	ldr	r2, [r7, #8]
 80044b0:	4413      	add	r3, r2
 80044b2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80044b4:	2208      	movs	r2, #8
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	1a9b      	subs	r3, r3, r2
 80044ba:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f023 0307 	bic.w	r3, r3, #7
 80044c2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	4a15      	ldr	r2, [pc, #84]	; (800451c <prvHeapInit+0xb4>)
 80044c8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80044ca:	4b14      	ldr	r3, [pc, #80]	; (800451c <prvHeapInit+0xb4>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	2200      	movs	r2, #0
 80044d0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80044d2:	4b12      	ldr	r3, [pc, #72]	; (800451c <prvHeapInit+0xb4>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	2200      	movs	r2, #0
 80044d8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	68fa      	ldr	r2, [r7, #12]
 80044e2:	1ad2      	subs	r2, r2, r3
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80044e8:	4b0c      	ldr	r3, [pc, #48]	; (800451c <prvHeapInit+0xb4>)
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	4a0a      	ldr	r2, [pc, #40]	; (8004520 <prvHeapInit+0xb8>)
 80044f6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	4a09      	ldr	r2, [pc, #36]	; (8004524 <prvHeapInit+0xbc>)
 80044fe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004500:	4b09      	ldr	r3, [pc, #36]	; (8004528 <prvHeapInit+0xc0>)
 8004502:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004506:	601a      	str	r2, [r3, #0]
}
 8004508:	bf00      	nop
 800450a:	3714      	adds	r7, #20
 800450c:	46bd      	mov	sp, r7
 800450e:	bc80      	pop	{r7}
 8004510:	4770      	bx	lr
 8004512:	bf00      	nop
 8004514:	20000f5c 	.word	0x20000f5c
 8004518:	20001b5c 	.word	0x20001b5c
 800451c:	20001b64 	.word	0x20001b64
 8004520:	20001b6c 	.word	0x20001b6c
 8004524:	20001b68 	.word	0x20001b68
 8004528:	20001b70 	.word	0x20001b70

0800452c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800452c:	b480      	push	{r7}
 800452e:	b085      	sub	sp, #20
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004534:	4b27      	ldr	r3, [pc, #156]	; (80045d4 <prvInsertBlockIntoFreeList+0xa8>)
 8004536:	60fb      	str	r3, [r7, #12]
 8004538:	e002      	b.n	8004540 <prvInsertBlockIntoFreeList+0x14>
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	60fb      	str	r3, [r7, #12]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	429a      	cmp	r2, r3
 8004548:	d8f7      	bhi.n	800453a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	68ba      	ldr	r2, [r7, #8]
 8004554:	4413      	add	r3, r2
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	429a      	cmp	r2, r3
 800455a:	d108      	bne.n	800456e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	685a      	ldr	r2, [r3, #4]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	441a      	add	r2, r3
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	68ba      	ldr	r2, [r7, #8]
 8004578:	441a      	add	r2, r3
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	429a      	cmp	r2, r3
 8004580:	d118      	bne.n	80045b4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	4b14      	ldr	r3, [pc, #80]	; (80045d8 <prvInsertBlockIntoFreeList+0xac>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	429a      	cmp	r2, r3
 800458c:	d00d      	beq.n	80045aa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	685a      	ldr	r2, [r3, #4]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	441a      	add	r2, r3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	601a      	str	r2, [r3, #0]
 80045a8:	e008      	b.n	80045bc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80045aa:	4b0b      	ldr	r3, [pc, #44]	; (80045d8 <prvInsertBlockIntoFreeList+0xac>)
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	601a      	str	r2, [r3, #0]
 80045b2:	e003      	b.n	80045bc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80045bc:	68fa      	ldr	r2, [r7, #12]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d002      	beq.n	80045ca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80045ca:	bf00      	nop
 80045cc:	3714      	adds	r7, #20
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bc80      	pop	{r7}
 80045d2:	4770      	bx	lr
 80045d4:	20001b5c 	.word	0x20001b5c
 80045d8:	20001b64 	.word	0x20001b64

080045dc <memset>:
 80045dc:	4603      	mov	r3, r0
 80045de:	4402      	add	r2, r0
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d100      	bne.n	80045e6 <memset+0xa>
 80045e4:	4770      	bx	lr
 80045e6:	f803 1b01 	strb.w	r1, [r3], #1
 80045ea:	e7f9      	b.n	80045e0 <memset+0x4>

080045ec <_reclaim_reent>:
 80045ec:	4b29      	ldr	r3, [pc, #164]	; (8004694 <_reclaim_reent+0xa8>)
 80045ee:	b570      	push	{r4, r5, r6, lr}
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4604      	mov	r4, r0
 80045f4:	4283      	cmp	r3, r0
 80045f6:	d04b      	beq.n	8004690 <_reclaim_reent+0xa4>
 80045f8:	69c3      	ldr	r3, [r0, #28]
 80045fa:	b143      	cbz	r3, 800460e <_reclaim_reent+0x22>
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d144      	bne.n	800468c <_reclaim_reent+0xa0>
 8004602:	69e3      	ldr	r3, [r4, #28]
 8004604:	6819      	ldr	r1, [r3, #0]
 8004606:	b111      	cbz	r1, 800460e <_reclaim_reent+0x22>
 8004608:	4620      	mov	r0, r4
 800460a:	f000 f879 	bl	8004700 <_free_r>
 800460e:	6961      	ldr	r1, [r4, #20]
 8004610:	b111      	cbz	r1, 8004618 <_reclaim_reent+0x2c>
 8004612:	4620      	mov	r0, r4
 8004614:	f000 f874 	bl	8004700 <_free_r>
 8004618:	69e1      	ldr	r1, [r4, #28]
 800461a:	b111      	cbz	r1, 8004622 <_reclaim_reent+0x36>
 800461c:	4620      	mov	r0, r4
 800461e:	f000 f86f 	bl	8004700 <_free_r>
 8004622:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004624:	b111      	cbz	r1, 800462c <_reclaim_reent+0x40>
 8004626:	4620      	mov	r0, r4
 8004628:	f000 f86a 	bl	8004700 <_free_r>
 800462c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800462e:	b111      	cbz	r1, 8004636 <_reclaim_reent+0x4a>
 8004630:	4620      	mov	r0, r4
 8004632:	f000 f865 	bl	8004700 <_free_r>
 8004636:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004638:	b111      	cbz	r1, 8004640 <_reclaim_reent+0x54>
 800463a:	4620      	mov	r0, r4
 800463c:	f000 f860 	bl	8004700 <_free_r>
 8004640:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004642:	b111      	cbz	r1, 800464a <_reclaim_reent+0x5e>
 8004644:	4620      	mov	r0, r4
 8004646:	f000 f85b 	bl	8004700 <_free_r>
 800464a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800464c:	b111      	cbz	r1, 8004654 <_reclaim_reent+0x68>
 800464e:	4620      	mov	r0, r4
 8004650:	f000 f856 	bl	8004700 <_free_r>
 8004654:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004656:	b111      	cbz	r1, 800465e <_reclaim_reent+0x72>
 8004658:	4620      	mov	r0, r4
 800465a:	f000 f851 	bl	8004700 <_free_r>
 800465e:	6a23      	ldr	r3, [r4, #32]
 8004660:	b1b3      	cbz	r3, 8004690 <_reclaim_reent+0xa4>
 8004662:	4620      	mov	r0, r4
 8004664:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004668:	4718      	bx	r3
 800466a:	5949      	ldr	r1, [r1, r5]
 800466c:	b941      	cbnz	r1, 8004680 <_reclaim_reent+0x94>
 800466e:	3504      	adds	r5, #4
 8004670:	69e3      	ldr	r3, [r4, #28]
 8004672:	2d80      	cmp	r5, #128	; 0x80
 8004674:	68d9      	ldr	r1, [r3, #12]
 8004676:	d1f8      	bne.n	800466a <_reclaim_reent+0x7e>
 8004678:	4620      	mov	r0, r4
 800467a:	f000 f841 	bl	8004700 <_free_r>
 800467e:	e7c0      	b.n	8004602 <_reclaim_reent+0x16>
 8004680:	680e      	ldr	r6, [r1, #0]
 8004682:	4620      	mov	r0, r4
 8004684:	f000 f83c 	bl	8004700 <_free_r>
 8004688:	4631      	mov	r1, r6
 800468a:	e7ef      	b.n	800466c <_reclaim_reent+0x80>
 800468c:	2500      	movs	r5, #0
 800468e:	e7ef      	b.n	8004670 <_reclaim_reent+0x84>
 8004690:	bd70      	pop	{r4, r5, r6, pc}
 8004692:	bf00      	nop
 8004694:	2000005c 	.word	0x2000005c

08004698 <__libc_init_array>:
 8004698:	b570      	push	{r4, r5, r6, lr}
 800469a:	2600      	movs	r6, #0
 800469c:	4d0c      	ldr	r5, [pc, #48]	; (80046d0 <__libc_init_array+0x38>)
 800469e:	4c0d      	ldr	r4, [pc, #52]	; (80046d4 <__libc_init_array+0x3c>)
 80046a0:	1b64      	subs	r4, r4, r5
 80046a2:	10a4      	asrs	r4, r4, #2
 80046a4:	42a6      	cmp	r6, r4
 80046a6:	d109      	bne.n	80046bc <__libc_init_array+0x24>
 80046a8:	f000 f87e 	bl	80047a8 <_init>
 80046ac:	2600      	movs	r6, #0
 80046ae:	4d0a      	ldr	r5, [pc, #40]	; (80046d8 <__libc_init_array+0x40>)
 80046b0:	4c0a      	ldr	r4, [pc, #40]	; (80046dc <__libc_init_array+0x44>)
 80046b2:	1b64      	subs	r4, r4, r5
 80046b4:	10a4      	asrs	r4, r4, #2
 80046b6:	42a6      	cmp	r6, r4
 80046b8:	d105      	bne.n	80046c6 <__libc_init_array+0x2e>
 80046ba:	bd70      	pop	{r4, r5, r6, pc}
 80046bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80046c0:	4798      	blx	r3
 80046c2:	3601      	adds	r6, #1
 80046c4:	e7ee      	b.n	80046a4 <__libc_init_array+0xc>
 80046c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80046ca:	4798      	blx	r3
 80046cc:	3601      	adds	r6, #1
 80046ce:	e7f2      	b.n	80046b6 <__libc_init_array+0x1e>
 80046d0:	0800481c 	.word	0x0800481c
 80046d4:	0800481c 	.word	0x0800481c
 80046d8:	0800481c 	.word	0x0800481c
 80046dc:	08004820 	.word	0x08004820

080046e0 <__retarget_lock_acquire_recursive>:
 80046e0:	4770      	bx	lr

080046e2 <__retarget_lock_release_recursive>:
 80046e2:	4770      	bx	lr

080046e4 <memcpy>:
 80046e4:	440a      	add	r2, r1
 80046e6:	4291      	cmp	r1, r2
 80046e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80046ec:	d100      	bne.n	80046f0 <memcpy+0xc>
 80046ee:	4770      	bx	lr
 80046f0:	b510      	push	{r4, lr}
 80046f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80046f6:	4291      	cmp	r1, r2
 80046f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80046fc:	d1f9      	bne.n	80046f2 <memcpy+0xe>
 80046fe:	bd10      	pop	{r4, pc}

08004700 <_free_r>:
 8004700:	b538      	push	{r3, r4, r5, lr}
 8004702:	4605      	mov	r5, r0
 8004704:	2900      	cmp	r1, #0
 8004706:	d040      	beq.n	800478a <_free_r+0x8a>
 8004708:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800470c:	1f0c      	subs	r4, r1, #4
 800470e:	2b00      	cmp	r3, #0
 8004710:	bfb8      	it	lt
 8004712:	18e4      	addlt	r4, r4, r3
 8004714:	f000 f83c 	bl	8004790 <__malloc_lock>
 8004718:	4a1c      	ldr	r2, [pc, #112]	; (800478c <_free_r+0x8c>)
 800471a:	6813      	ldr	r3, [r2, #0]
 800471c:	b933      	cbnz	r3, 800472c <_free_r+0x2c>
 800471e:	6063      	str	r3, [r4, #4]
 8004720:	6014      	str	r4, [r2, #0]
 8004722:	4628      	mov	r0, r5
 8004724:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004728:	f000 b838 	b.w	800479c <__malloc_unlock>
 800472c:	42a3      	cmp	r3, r4
 800472e:	d908      	bls.n	8004742 <_free_r+0x42>
 8004730:	6820      	ldr	r0, [r4, #0]
 8004732:	1821      	adds	r1, r4, r0
 8004734:	428b      	cmp	r3, r1
 8004736:	bf01      	itttt	eq
 8004738:	6819      	ldreq	r1, [r3, #0]
 800473a:	685b      	ldreq	r3, [r3, #4]
 800473c:	1809      	addeq	r1, r1, r0
 800473e:	6021      	streq	r1, [r4, #0]
 8004740:	e7ed      	b.n	800471e <_free_r+0x1e>
 8004742:	461a      	mov	r2, r3
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	b10b      	cbz	r3, 800474c <_free_r+0x4c>
 8004748:	42a3      	cmp	r3, r4
 800474a:	d9fa      	bls.n	8004742 <_free_r+0x42>
 800474c:	6811      	ldr	r1, [r2, #0]
 800474e:	1850      	adds	r0, r2, r1
 8004750:	42a0      	cmp	r0, r4
 8004752:	d10b      	bne.n	800476c <_free_r+0x6c>
 8004754:	6820      	ldr	r0, [r4, #0]
 8004756:	4401      	add	r1, r0
 8004758:	1850      	adds	r0, r2, r1
 800475a:	4283      	cmp	r3, r0
 800475c:	6011      	str	r1, [r2, #0]
 800475e:	d1e0      	bne.n	8004722 <_free_r+0x22>
 8004760:	6818      	ldr	r0, [r3, #0]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	4408      	add	r0, r1
 8004766:	6010      	str	r0, [r2, #0]
 8004768:	6053      	str	r3, [r2, #4]
 800476a:	e7da      	b.n	8004722 <_free_r+0x22>
 800476c:	d902      	bls.n	8004774 <_free_r+0x74>
 800476e:	230c      	movs	r3, #12
 8004770:	602b      	str	r3, [r5, #0]
 8004772:	e7d6      	b.n	8004722 <_free_r+0x22>
 8004774:	6820      	ldr	r0, [r4, #0]
 8004776:	1821      	adds	r1, r4, r0
 8004778:	428b      	cmp	r3, r1
 800477a:	bf01      	itttt	eq
 800477c:	6819      	ldreq	r1, [r3, #0]
 800477e:	685b      	ldreq	r3, [r3, #4]
 8004780:	1809      	addeq	r1, r1, r0
 8004782:	6021      	streq	r1, [r4, #0]
 8004784:	6063      	str	r3, [r4, #4]
 8004786:	6054      	str	r4, [r2, #4]
 8004788:	e7cb      	b.n	8004722 <_free_r+0x22>
 800478a:	bd38      	pop	{r3, r4, r5, pc}
 800478c:	20001cb0 	.word	0x20001cb0

08004790 <__malloc_lock>:
 8004790:	4801      	ldr	r0, [pc, #4]	; (8004798 <__malloc_lock+0x8>)
 8004792:	f7ff bfa5 	b.w	80046e0 <__retarget_lock_acquire_recursive>
 8004796:	bf00      	nop
 8004798:	20001cac 	.word	0x20001cac

0800479c <__malloc_unlock>:
 800479c:	4801      	ldr	r0, [pc, #4]	; (80047a4 <__malloc_unlock+0x8>)
 800479e:	f7ff bfa0 	b.w	80046e2 <__retarget_lock_release_recursive>
 80047a2:	bf00      	nop
 80047a4:	20001cac 	.word	0x20001cac

080047a8 <_init>:
 80047a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047aa:	bf00      	nop
 80047ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047ae:	bc08      	pop	{r3}
 80047b0:	469e      	mov	lr, r3
 80047b2:	4770      	bx	lr

080047b4 <_fini>:
 80047b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047b6:	bf00      	nop
 80047b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047ba:	bc08      	pop	{r3}
 80047bc:	469e      	mov	lr, r3
 80047be:	4770      	bx	lr
